
IMU_Visualization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080160f0  080160f0  000260f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016770  08016770  0003137c  2**0
                  CONTENTS
  4 .ARM          00000008  08016770  08016770  00026770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016778  08016778  0003137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016778  08016778  00026778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801677c  0801677c  0002677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000137c  20000000  08016780  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001950  2000137c  08017afc  0003137c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ccc  08017afc  00032ccc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003137c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050d5c  00000000  00000000  000313aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005dfb  00000000  00000000  00082106  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002dd8  00000000  00000000  00087f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002c48  00000000  00000000  0008ace0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002735b  00000000  00000000  0008d928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f769  00000000  00000000  000b4c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7c4e  00000000  00000000  000d43ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bc03a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f4c  00000000  00000000  001bc0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000206b8  00000000  00000000  001c6004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000137c 	.word	0x2000137c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080160d4 	.word	0x080160d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001380 	.word	0x20001380
 800020c:	080160d4 	.word	0x080160d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b500      	push	{lr}
 8000f7a:	b085      	sub	sp, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	9100      	str	r1, [sp, #0]
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_GPIO_Init+0x6c>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	f042 0204 	orr.w	r2, r2, #4
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f8c:	f002 0204 	and.w	r2, r2, #4
 8000f90:	9200      	str	r2, [sp, #0]
 8000f92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f94:	9101      	str	r1, [sp, #4]
 8000f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fa4:	9201      	str	r2, [sp, #4]
 8000fa6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	9102      	str	r1, [sp, #8]
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9202      	str	r2, [sp, #8]
 8000fba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	9103      	str	r1, [sp, #12]
 8000fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc0:	f042 0202 	orr.w	r2, r2, #2
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	9303      	str	r3, [sp, #12]
 8000fce:	9b03      	ldr	r3, [sp, #12]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f003 fdf8 	bl	8004bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd8:	2028      	movs	r0, #40	; 0x28
 8000fda:	f003 fe29 	bl	8004c30 <HAL_NVIC_EnableIRQ>

}
 8000fde:	b005      	add	sp, #20
 8000fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_DMA_Init>:
{
 8000fe8:	b500      	push	{lr}
 8000fea:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fec:	2100      	movs	r1, #0
 8000fee:	9101      	str	r1, [sp, #4]
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_DMA_Init+0x30>)
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001004:	460a      	mov	r2, r1
 8001006:	2010      	movs	r0, #16
 8001008:	f003 fdde 	bl	8004bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800100c:	2010      	movs	r0, #16
 800100e:	f003 fe0f 	bl	8004c30 <HAL_NVIC_EnableIRQ>
}
 8001012:	b003      	add	sp, #12
 8001014:	f85d fb04 	ldr.w	pc, [sp], #4
 8001018:	40023800 	.word	0x40023800

0800101c <MX_CRC_Init>:
{
 800101c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <MX_CRC_Init+0x10>)
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <MX_CRC_Init+0x14>)
 8001022:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001024:	f003 fe28 	bl	8004c78 <HAL_CRC_Init>
}
 8001028:	bd08      	pop	{r3, pc}
 800102a:	bf00      	nop
 800102c:	20002784 	.word	0x20002784
 8001030:	40023000 	.word	0x40023000

08001034 <MX_RTC_Init>:
{
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8001038:	2400      	movs	r4, #0
 800103a:	9401      	str	r4, [sp, #4]
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	9403      	str	r4, [sp, #12]
 8001040:	9404      	str	r4, [sp, #16]
 8001042:	9405      	str	r4, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8001044:	9400      	str	r4, [sp, #0]
  hrtc.Instance = RTC;
 8001046:	4d15      	ldr	r5, [pc, #84]	; (800109c <MX_RTC_Init+0x68>)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_RTC_Init+0x6c>)
 800104a:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800104c:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 800104e:	237f      	movs	r3, #127	; 0x7f
 8001050:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8001052:	23ff      	movs	r3, #255	; 0xff
 8001054:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001056:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001058:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105a:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105c:	4628      	mov	r0, r5
 800105e:	f005 fcc6 	bl	80069ee <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8001062:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8001066:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 800106a:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800106e:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001070:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001072:	2201      	movs	r2, #1
 8001074:	a901      	add	r1, sp, #4
 8001076:	4628      	mov	r0, r5
 8001078:	f005 fd26 	bl	8006ac8 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800107c:	2201      	movs	r2, #1
 800107e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8001082:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8001086:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800108a:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800108e:	4669      	mov	r1, sp
 8001090:	4628      	mov	r0, r5
 8001092:	f005 fd98 	bl	8006bc6 <HAL_RTC_SetDate>
}
 8001096:	b007      	add	sp, #28
 8001098:	bd30      	pop	{r4, r5, pc}
 800109a:	bf00      	nop
 800109c:	200027cc 	.word	0x200027cc
 80010a0:	40002800 	.word	0x40002800

080010a4 <SystemClock_Config>:
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	b0ac      	sub	sp, #176	; 0xb0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a8:	2234      	movs	r2, #52	; 0x34
 80010aa:	2100      	movs	r1, #0
 80010ac:	a81f      	add	r0, sp, #124	; 0x7c
 80010ae:	f012 fd96 	bl	8013bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b2:	2400      	movs	r4, #0
 80010b4:	941a      	str	r4, [sp, #104]	; 0x68
 80010b6:	941b      	str	r4, [sp, #108]	; 0x6c
 80010b8:	941c      	str	r4, [sp, #112]	; 0x70
 80010ba:	941d      	str	r4, [sp, #116]	; 0x74
 80010bc:	941e      	str	r4, [sp, #120]	; 0x78
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010be:	225c      	movs	r2, #92	; 0x5c
 80010c0:	4621      	mov	r1, r4
 80010c2:	a803      	add	r0, sp, #12
 80010c4:	f012 fd8b 	bl	8013bde <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	9401      	str	r4, [sp, #4]
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <SystemClock_Config+0x94>)
 80010cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010de:	9402      	str	r4, [sp, #8]
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <SystemClock_Config+0x98>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010f8:	230a      	movs	r3, #10
 80010fa:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2210      	movs	r2, #16
 8001104:	9223      	str	r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001106:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001108:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	a81f      	add	r0, sp, #124	; 0x7c
 800110c:	f005 fa56 	bl	80065bc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001114:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	941d      	str	r4, [sp, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111c:	4621      	mov	r1, r4
 800111e:	a81a      	add	r0, sp, #104	; 0x68
 8001120:	f004 fea6 	bl	8005e70 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001124:	2320      	movs	r3, #32
 8001126:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	a803      	add	r0, sp, #12
 8001130:	f004 ff74 	bl	800601c <HAL_RCCEx_PeriphCLKConfig>
}
 8001134:	b02c      	add	sp, #176	; 0xb0
 8001136:	bd10      	pop	{r4, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <main>:
{
 8001140:	b508      	push	{r3, lr}
  HAL_Init();
 8001142:	f003 fcef 	bl	8004b24 <HAL_Init>
  SystemClock_Config();
 8001146:	f7ff ffad 	bl	80010a4 <SystemClock_Config>
  MX_GPIO_Init();
 800114a:	f7ff ff15 	bl	8000f78 <MX_GPIO_Init>
  MX_DMA_Init();
 800114e:	f7ff ff4b 	bl	8000fe8 <MX_DMA_Init>
  MX_CRC_Init();
 8001152:	f7ff ff63 	bl	800101c <MX_CRC_Init>
  MX_RTC_Init();
 8001156:	f7ff ff6d 	bl	8001034 <MX_RTC_Init>
  MX_MEMS_Init();
 800115a:	f006 febf 	bl	8007edc <MX_MEMS_Init>
  MX_MEMS_Process();
 800115e:	f006 fec1 	bl	8007ee4 <MX_MEMS_Process>
 8001162:	e7fc      	b.n	800115e <main+0x1e>

08001164 <MX_TIM3_Init>:
{
 8001164:	b530      	push	{r4, r5, lr}
 8001166:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001168:	2400      	movs	r4, #0
 800116a:	9402      	str	r4, [sp, #8]
 800116c:	9403      	str	r4, [sp, #12]
 800116e:	9404      	str	r4, [sp, #16]
 8001170:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	9400      	str	r4, [sp, #0]
 8001174:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 8001176:	4d0e      	ldr	r5, [pc, #56]	; (80011b0 <MX_TIM3_Init+0x4c>)
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_TIM3_Init+0x50>)
 800117a:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 800117c:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8001180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001184:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800118a:	4628      	mov	r0, r5
 800118c:	f005 ff58 	bl	8007040 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001196:	a902      	add	r1, sp, #8
 8001198:	4628      	mov	r0, r5
 800119a:	f005 ff76 	bl	800708a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a2:	4669      	mov	r1, sp
 80011a4:	4628      	mov	r0, r5
 80011a6:	f005 ffdd 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
}
 80011aa:	b007      	add	sp, #28
 80011ac:	bd30      	pop	{r4, r5, pc}
 80011ae:	bf00      	nop
 80011b0:	2000278c 	.word	0x2000278c
 80011b4:	40000400 	.word	0x40000400

080011b8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2100      	movs	r1, #0
 80011c0:	9100      	str	r1, [sp, #0]
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_MspInit+0x34>)
 80011c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
 80011cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011d2:	9200      	str	r2, [sp, #0]
 80011d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	9101      	str	r1, [sp, #4]
 80011d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	b002      	add	sp, #8
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_CRC_MspInit+0x28>)
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d000      	beq.n	80011fe <HAL_CRC_MspInit+0xa>
 80011fc:	4770      	bx	lr
{
 80011fe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_CRC_MspInit+0x2c>)
 8001206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001218:	b002      	add	sp, #8
 800121a:	4770      	bx	lr
 800121c:	40023000 	.word	0x40023000
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001224:	6802      	ldr	r2, [r0, #0]
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_RTC_MspInit+0x14>)
 8001228:	429a      	cmp	r2, r3
 800122a:	d000      	beq.n	800122e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800122c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_RTC_MspInit+0x18>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	e7fa      	b.n	800122c <HAL_RTC_MspInit+0x8>
 8001236:	bf00      	nop
 8001238:	40002800 	.word	0x40002800
 800123c:	42470e3c 	.word	0x42470e3c

08001240 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001240:	6802      	ldr	r2, [r0, #0]
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_Base_MspInit+0x3c>)
 8001244:	429a      	cmp	r2, r3
 8001246:	d000      	beq.n	800124a <HAL_TIM_Base_MspInit+0xa>
 8001248:	4770      	bx	lr
{
 800124a:	b500      	push	{lr}
 800124c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800124e:	2100      	movs	r1, #0
 8001250:	9101      	str	r1, [sp, #4]
 8001252:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001258:	f042 0202 	orr.w	r2, r2, #2
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001268:	460a      	mov	r2, r1
 800126a:	201d      	movs	r0, #29
 800126c:	f003 fcac 	bl	8004bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001270:	201d      	movs	r0, #29
 8001272:	f003 fcdd 	bl	8004c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001276:	b003      	add	sp, #12
 8001278:	f85d fb04 	ldr.w	pc, [sp], #4
 800127c:	40000400 	.word	0x40000400

08001280 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001280:	4770      	bx	lr

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler>

0800128a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f003 fc61 	bl	8004b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bd08      	pop	{r3, pc}

08001298 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001298:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800129a:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA1_Stream5_IRQHandler+0xc>)
 800129c:	f003 fe14 	bl	8004ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012a0:	bd08      	pop	{r3, pc}
 80012a2:	bf00      	nop
 80012a4:	20002854 	.word	0x20002854

080012a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <TIM3_IRQHandler+0xc>)
 80012ac:	f005 fda7 	bl	8006dfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012b0:	bd08      	pop	{r3, pc}
 80012b2:	bf00      	nop
 80012b4:	2000278c 	.word	0x2000278c

080012b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80012ba:	4802      	ldr	r0, [pc, #8]	; (80012c4 <EXTI15_10_IRQHandler+0xc>)
 80012bc:	f003 fef2 	bl	80050a4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c0:	bd08      	pop	{r3, pc}
 80012c2:	bf00      	nop
 80012c4:	200012f8 	.word	0x200012f8

080012c8 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2500      	movs	r5, #0
 80012d0:	9501      	str	r5, [sp, #4]
 80012d2:	4c1d      	ldr	r4, [pc, #116]	; (8001348 <I2C1_MspInit+0x80>)
 80012d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	6323      	str	r3, [r4, #48]	; 0x30
 80012dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80012e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	f04f 0a12 	mov.w	sl, #18
 80012f0:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	f04f 0901 	mov.w	r9, #1
 80012f8:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	f04f 0803 	mov.w	r8, #3
 8001300:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001304:	2704      	movs	r7, #4
 8001306:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001308:	4e10      	ldr	r6, [pc, #64]	; (800134c <I2C1_MspInit+0x84>)
 800130a:	a903      	add	r1, sp, #12
 800130c:	4630      	mov	r0, r6
 800130e:	f003 fedb 	bl	80050c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001316:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131c:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001324:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001326:	a903      	add	r1, sp, #12
 8001328:	4630      	mov	r0, r6
 800132a:	f003 fecd 	bl	80050c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	9502      	str	r5, [sp, #8]
 8001330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001336:	6423      	str	r3, [r4, #64]	; 0x40
 8001338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001342:	b008      	add	sp, #32
 8001344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001350:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <I2C1_MspDeInit+0x24>)
 8001354:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800135c:	4c06      	ldr	r4, [pc, #24]	; (8001378 <I2C1_MspDeInit+0x28>)
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4620      	mov	r0, r4
 8001364:	f003 ff8e 	bl	8005284 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	4620      	mov	r0, r4
 800136e:	f003 ff89 	bl	8005284 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001372:	bd10      	pop	{r4, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <BSP_I2C1_DeInit+0x30>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b17b      	cbz	r3, 80013a2 <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 8001382:	3b01      	subs	r3, #1
 8001384:	4a09      	ldr	r2, [pc, #36]	; (80013ac <BSP_I2C1_DeInit+0x30>)
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	b10b      	cbz	r3, 800138e <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 800138a:	2000      	movs	r0, #0
}
 800138c:	4770      	bx	lr
{
 800138e:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 8001390:	4c07      	ldr	r4, [pc, #28]	; (80013b0 <BSP_I2C1_DeInit+0x34>)
 8001392:	4620      	mov	r0, r4
 8001394:	f7ff ffdc 	bl	8001350 <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001398:	4620      	mov	r0, r4
 800139a:	f004 fb2e 	bl	80059fa <HAL_I2C_DeInit>
 800139e:	b910      	cbnz	r0, 80013a6 <BSP_I2C1_DeInit+0x2a>
}
 80013a0:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 80013a2:	2000      	movs	r0, #0
 80013a4:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 80013a6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80013aa:	e7f9      	b.n	80013a0 <BSP_I2C1_DeInit+0x24>
 80013ac:	20002184 	.word	0x20002184
 80013b0:	200027ec 	.word	0x200027ec

080013b4 <BSP_I2C1_WriteReg>:
{
 80013b4:	b510      	push	{r4, lr}
 80013b6:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013b8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80013bc:	9402      	str	r4, [sp, #8]
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	9200      	str	r2, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	460a      	mov	r2, r1
 80013c6:	4601      	mov	r1, r0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <BSP_I2C1_WriteReg+0x38>)
 80013ca:	f004 fb2f 	bl	8005a2c <HAL_I2C_Mem_Write>
 80013ce:	b910      	cbnz	r0, 80013d6 <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80013d0:	2000      	movs	r0, #0
}
 80013d2:	b004      	add	sp, #16
 80013d4:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <BSP_I2C1_WriteReg+0x38>)
 80013d8:	f004 fd47 	bl	8005e6a <HAL_I2C_GetError>
 80013dc:	2804      	cmp	r0, #4
 80013de:	d002      	beq.n	80013e6 <BSP_I2C1_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013e0:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80013e4:	e7f5      	b.n	80013d2 <BSP_I2C1_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013e6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80013ea:	e7f2      	b.n	80013d2 <BSP_I2C1_WriteReg+0x1e>
 80013ec:	200027ec 	.word	0x200027ec

080013f0 <BSP_I2C1_ReadReg>:
{
 80013f0:	b510      	push	{r4, lr}
 80013f2:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013f4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80013f8:	9402      	str	r4, [sp, #8]
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	460a      	mov	r2, r1
 8001402:	4601      	mov	r1, r0
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <BSP_I2C1_ReadReg+0x38>)
 8001406:	f004 fbc5 	bl	8005b94 <HAL_I2C_Mem_Read>
 800140a:	b910      	cbnz	r0, 8001412 <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 800140c:	2000      	movs	r0, #0
}
 800140e:	b004      	add	sp, #16
 8001410:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <BSP_I2C1_ReadReg+0x38>)
 8001414:	f004 fd29 	bl	8005e6a <HAL_I2C_GetError>
 8001418:	2804      	cmp	r0, #4
 800141a:	d002      	beq.n	8001422 <BSP_I2C1_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800141c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001420:	e7f5      	b.n	800140e <BSP_I2C1_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001422:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8001426:	e7f2      	b.n	800140e <BSP_I2C1_ReadReg+0x1e>
 8001428:	200027ec 	.word	0x200027ec

0800142c <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 800142c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800142e:	f003 fb9f 	bl	8004b70 <HAL_GetTick>
}
 8001432:	bd08      	pop	{r3, pc}

08001434 <MX_I2C1_Init>:
{
 8001434:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <MX_I2C1_Init+0x2c>)
 8001438:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <MX_I2C1_Init+0x30>)
 800143c:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800143e:	2200      	movs	r2, #0
 8001440:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001442:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001448:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144a:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 800144c:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001450:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001452:	f004 f9f7 	bl	8005844 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	b100      	cbz	r0, 800145c <MX_I2C1_Init+0x28>
    ret = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd08      	pop	{r3, pc}
 8001460:	40005400 	.word	0x40005400
 8001464:	00061a80 	.word	0x00061a80

08001468 <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <BSP_I2C1_Init+0x3c>)
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <BSP_I2C1_Init+0x40>)
 800146c:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <BSP_I2C1_Init+0x44>)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	1c59      	adds	r1, r3, #1
 8001474:	6011      	str	r1, [r2, #0]
 8001476:	b10b      	cbz	r3, 800147c <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8001478:	2000      	movs	r0, #0
}
 800147a:	4770      	bx	lr
{
 800147c:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <BSP_I2C1_Init+0x3c>)
 8001480:	f004 fcf0 	bl	8005e64 <HAL_I2C_GetState>
 8001484:	b108      	cbz	r0, 800148a <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001486:	2000      	movs	r0, #0
}
 8001488:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 800148a:	4c06      	ldr	r4, [pc, #24]	; (80014a4 <BSP_I2C1_Init+0x3c>)
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff ff1b 	bl	80012c8 <I2C1_MspInit>
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff ffce 	bl	8001434 <MX_I2C1_Init>
 8001498:	b908      	cbnz	r0, 800149e <BSP_I2C1_Init+0x36>
      	  ret = BSP_ERROR_NONE;
 800149a:	2000      	movs	r0, #0
  return ret;
 800149c:	e7f4      	b.n	8001488 <BSP_I2C1_Init+0x20>
      	  ret = BSP_ERROR_BUS_FAILURE;
 800149e:	f06f 0007 	mvn.w	r0, #7
 80014a2:	e7f1      	b.n	8001488 <BSP_I2C1_Init+0x20>
 80014a4:	200027ec 	.word	0x200027ec
 80014a8:	40005400 	.word	0x40005400
 80014ac:	20002184 	.word	0x20002184

080014b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014b0:	b508      	push	{r3, lr}
 80014b2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <_sbrk+0x34>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	b142      	cbz	r2, 80014cc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <_sbrk+0x34>)
 80014bc:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80014be:	4403      	add	r3, r0
 80014c0:	466a      	mov	r2, sp
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d806      	bhi.n	80014d4 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <_sbrk+0x34>)
 80014c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80014ca:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x34>)
 80014ce:	4906      	ldr	r1, [pc, #24]	; (80014e8 <_sbrk+0x38>)
 80014d0:	6011      	str	r1, [r2, #0]
 80014d2:	e7f2      	b.n	80014ba <_sbrk+0xa>
		errno = ENOMEM;
 80014d4:	f012 fb4e 	bl	8013b74 <__errno>
 80014d8:	230c      	movs	r3, #12
 80014da:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	e7f3      	b.n	80014ca <_sbrk+0x1a>
 80014e2:	bf00      	nop
 80014e4:	20002188 	.word	0x20002188
 80014e8:	20002cd0 	.word	0x20002cd0

080014ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SystemInit+0x18>)
 80014ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80014f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800150c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr  r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffdb 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f012 fb23 	bl	8013b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fe01 	bl	8001140 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001544:	08016780 	.word	0x08016780
  ldr  r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800154c:	2000137c 	.word	0x2000137c
  ldr  r2, =_sbss
 8001550:	2000137c 	.word	0x2000137c
  ldr  r3, = _ebss
 8001554:	20002ccc 	.word	0x20002ccc

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
 8001560:	2000      	movs	r0, #0
 8001562:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8001564:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8001566:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HTS221_GetCapabilities+0x18>)
 800156a:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 800156c:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800156e:	2300      	movs	r3, #0
 8001570:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 8001572:	4770      	bx	lr
 8001574:	41480000 	.word	0x41480000

08001578 <Linear_Interpolation>:
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001578:	edd0 6a03 	vldr	s13, [r0, #12]
 800157c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001580:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8001584:	ee27 0a00 	vmul.f32	s0, s14, s0
 8001588:	ed90 7a02 	vldr	s14, [r0, #8]
 800158c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001590:	ed90 6a00 	vldr	s12, [r0]
 8001594:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001598:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800159c:	ee70 7a27 	vadd.f32	s15, s0, s15
 80015a0:	ee37 0a46 	vsub.f32	s0, s14, s12
}
 80015a4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80015a8:	4770      	bx	lr

080015aa <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80015aa:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80015ac:	6884      	ldr	r4, [r0, #8]
 80015ae:	b12c      	cbz	r4, 80015bc <ReadRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80015b0:	6944      	ldr	r4, [r0, #20]
 80015b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80015b6:	7b00      	ldrb	r0, [r0, #12]
 80015b8:	47a0      	blx	r4
  }
}
 80015ba:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80015bc:	6944      	ldr	r4, [r0, #20]
 80015be:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80015c2:	7b00      	ldrb	r0, [r0, #12]
 80015c4:	47a0      	blx	r4
 80015c6:	e7f8      	b.n	80015ba <ReadRegWrap+0x10>

080015c8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80015c8:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80015ca:	6884      	ldr	r4, [r0, #8]
 80015cc:	b12c      	cbz	r4, 80015da <WriteRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80015ce:	6904      	ldr	r4, [r0, #16]
 80015d0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80015d4:	7b00      	ldrb	r0, [r0, #12]
 80015d6:	47a0      	blx	r4
  }
}
 80015d8:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80015da:	6904      	ldr	r4, [r0, #16]
 80015dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80015e0:	7b00      	ldrb	r0, [r0, #12]
 80015e2:	47a0      	blx	r4
 80015e4:	e7f8      	b.n	80015d8 <WriteRegWrap+0x10>

080015e6 <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 80015e6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d012      	beq.n	8001614 <HTS221_HUM_Enable+0x2e>
{
 80015ee:	b510      	push	{r4, lr}
 80015f0:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 80015f2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80015f6:	b123      	cbz	r3, 8001602 <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 80015fe:	2000      	movs	r0, #0
}
 8001600:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001602:	2101      	movs	r1, #1
 8001604:	301c      	adds	r0, #28
 8001606:	f000 fa76 	bl	8001af6 <hts221_power_on_set>
 800160a:	2800      	cmp	r0, #0
 800160c:	d0f4      	beq.n	80015f8 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
 8001612:	e7f5      	b.n	8001600 <HTS221_HUM_Enable+0x1a>
    return HTS221_OK;
 8001614:	2000      	movs	r0, #0
}
 8001616:	4770      	bx	lr

08001618 <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 8001618:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800161c:	b18b      	cbz	r3, 8001642 <HTS221_HUM_Disable+0x2a>
{
 800161e:	b510      	push	{r4, lr}
 8001620:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001622:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001626:	b11b      	cbz	r3, 8001630 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 8001628:	2000      	movs	r0, #0
 800162a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 800162e:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	301c      	adds	r0, #28
 8001634:	f000 fa5f 	bl	8001af6 <hts221_power_on_set>
 8001638:	2800      	cmp	r0, #0
 800163a:	d0f5      	beq.n	8001628 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	e7f5      	b.n	800162e <HTS221_HUM_Disable+0x16>
    return HTS221_OK;
 8001642:	2000      	movs	r0, #0
}
 8001644:	4770      	bx	lr

08001646 <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8001646:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800164a:	2b01      	cmp	r3, #1
 800164c:	d012      	beq.n	8001674 <HTS221_TEMP_Enable+0x2e>
{
 800164e:	b510      	push	{r4, lr}
 8001650:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8001652:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001656:	b123      	cbz	r3, 8001662 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 800165e:	2000      	movs	r0, #0
}
 8001660:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001662:	2101      	movs	r1, #1
 8001664:	301c      	adds	r0, #28
 8001666:	f000 fa46 	bl	8001af6 <hts221_power_on_set>
 800166a:	2800      	cmp	r0, #0
 800166c:	d0f4      	beq.n	8001658 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 800166e:	f04f 30ff 	mov.w	r0, #4294967295
 8001672:	e7f5      	b.n	8001660 <HTS221_TEMP_Enable+0x1a>
    return HTS221_OK;
 8001674:	2000      	movs	r0, #0
}
 8001676:	4770      	bx	lr

08001678 <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8001678:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800167c:	b18b      	cbz	r3, 80016a2 <HTS221_TEMP_Disable+0x2a>
{
 800167e:	b510      	push	{r4, lr}
 8001680:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8001682:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001686:	b11b      	cbz	r3, 8001690 <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8001688:	2000      	movs	r0, #0
 800168a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 800168e:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	301c      	adds	r0, #28
 8001694:	f000 fa2f 	bl	8001af6 <hts221_power_on_set>
 8001698:	2800      	cmp	r0, #0
 800169a:	d0f5      	beq.n	8001688 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	e7f5      	b.n	800168e <HTS221_TEMP_Disable+0x16>
    return HTS221_OK;
 80016a2:	2000      	movs	r0, #0
}
 80016a4:	4770      	bx	lr

080016a6 <HTS221_DeInit>:
{
 80016a6:	b510      	push	{r4, lr}
 80016a8:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80016aa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d003      	beq.n	80016ba <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 80016b2:	2000      	movs	r0, #0
 80016b4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80016b8:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80016ba:	f7ff ffad 	bl	8001618 <HTS221_HUM_Disable>
 80016be:	b938      	cbnz	r0, 80016d0 <HTS221_DeInit+0x2a>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff ffd9 	bl	8001678 <HTS221_TEMP_Disable>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d0f3      	beq.n	80016b2 <HTS221_DeInit+0xc>
      return HTS221_ERROR;
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
 80016ce:	e7f3      	b.n	80016b8 <HTS221_DeInit+0x12>
      return HTS221_ERROR;
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	e7f0      	b.n	80016b8 <HTS221_DeInit+0x12>

080016d6 <HTS221_SetOutputDataRate>:
{
 80016d6:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80016d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d908      	bls.n	80016f8 <HTS221_SetOutputDataRate+0x22>
 80016e6:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80016ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d809      	bhi.n	8001708 <HTS221_SetOutputDataRate+0x32>
 80016f4:	2102      	movs	r1, #2
 80016f6:	e000      	b.n	80016fa <HTS221_SetOutputDataRate+0x24>
 80016f8:	2101      	movs	r1, #1
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80016fa:	301c      	adds	r0, #28
 80016fc:	f000 f98c 	bl	8001a18 <hts221_data_rate_set>
 8001700:	4603      	mov	r3, r0
 8001702:	b918      	cbnz	r0, 800170c <HTS221_SetOutputDataRate+0x36>
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001708:	2103      	movs	r1, #3
 800170a:	e7f6      	b.n	80016fa <HTS221_SetOutputDataRate+0x24>
    return HTS221_ERROR;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	e7f8      	b.n	8001704 <HTS221_SetOutputDataRate+0x2e>

08001712 <HTS221_Initialize>:
{
 8001712:	b538      	push	{r3, r4, r5, lr}
 8001714:	4605      	mov	r5, r0
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001716:	f100 041c 	add.w	r4, r0, #28
 800171a:	2100      	movs	r1, #0
 800171c:	4620      	mov	r0, r4
 800171e:	f000 f9ea 	bl	8001af6 <hts221_power_on_set>
 8001722:	b980      	cbnz	r0, 8001746 <HTS221_Initialize+0x34>
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001724:	2101      	movs	r1, #1
 8001726:	4620      	mov	r0, r4
 8001728:	f000 f9b4 	bl	8001a94 <hts221_block_data_update_set>
 800172c:	b970      	cbnz	r0, 800174c <HTS221_Initialize+0x3a>
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800172e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001732:	4628      	mov	r0, r5
 8001734:	f7ff ffcf 	bl	80016d6 <HTS221_SetOutputDataRate>
 8001738:	4603      	mov	r3, r0
 800173a:	b908      	cbnz	r0, 8001740 <HTS221_Initialize+0x2e>
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd38      	pop	{r3, r4, r5, pc}
    return HTS221_ERROR;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	e7fa      	b.n	800173c <HTS221_Initialize+0x2a>
    return HTS221_ERROR;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e7f7      	b.n	800173c <HTS221_Initialize+0x2a>
    return HTS221_ERROR;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	e7f4      	b.n	800173c <HTS221_Initialize+0x2a>

08001752 <HTS221_Init>:
{
 8001752:	b510      	push	{r4, lr}
 8001754:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001756:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800175a:	b123      	cbz	r3, 8001766 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 8001762:	2000      	movs	r0, #0
}
 8001764:	bd10      	pop	{r4, pc}
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001766:	f7ff ffd4 	bl	8001712 <HTS221_Initialize>
 800176a:	2800      	cmp	r0, #0
 800176c:	d0f6      	beq.n	800175c <HTS221_Init+0xa>
      return HTS221_ERROR;
 800176e:	f04f 30ff 	mov.w	r0, #4294967295
 8001772:	e7f7      	b.n	8001764 <HTS221_Init+0x12>

08001774 <HTS221_HUM_SetOutputDataRate>:
{
 8001774:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001776:	ee00 1a10 	vmov	s0, r1
 800177a:	f7ff ffac 	bl	80016d6 <HTS221_SetOutputDataRate>
}
 800177e:	bd08      	pop	{r3, pc}

08001780 <HTS221_TEMP_SetOutputDataRate>:
{
 8001780:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001782:	ee00 1a10 	vmov	s0, r1
 8001786:	f7ff ffa6 	bl	80016d6 <HTS221_SetOutputDataRate>
}
 800178a:	bd08      	pop	{r3, pc}

0800178c <HTS221_ReadID>:
{
 800178c:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800178e:	301c      	adds	r0, #28
 8001790:	f000 f9aa 	bl	8001ae8 <hts221_device_id_get>
 8001794:	4603      	mov	r3, r0
 8001796:	b908      	cbnz	r0, 800179c <HTS221_ReadID+0x10>
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd08      	pop	{r3, pc}
    return HTS221_ERROR;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	e7fa      	b.n	8001798 <HTS221_ReadID+0xc>
	...

080017a4 <HTS221_GetOutputDataRate>:
{
 80017a4:	b510      	push	{r4, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80017aa:	f10d 0107 	add.w	r1, sp, #7
 80017ae:	301c      	adds	r0, #28
 80017b0:	f000 f94e 	bl	8001a50 <hts221_data_rate_get>
 80017b4:	b9b8      	cbnz	r0, 80017e6 <HTS221_GetOutputDataRate+0x42>
 80017b6:	4602      	mov	r2, r0
  switch (odr_low_level)
 80017b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d815      	bhi.n	80017ec <HTS221_GetOutputDataRate+0x48>
 80017c0:	e8df f003 	tbb	[pc, r3]
 80017c4:	0e0b0702 	.word	0x0e0b0702
      *Odr = 0.0f;
 80017c8:	2300      	movs	r3, #0
 80017ca:	6023      	str	r3, [r4, #0]
}
 80017cc:	4610      	mov	r0, r2
 80017ce:	b002      	add	sp, #8
 80017d0:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 80017d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017d6:	6023      	str	r3, [r4, #0]
      break;
 80017d8:	e7f8      	b.n	80017cc <HTS221_GetOutputDataRate+0x28>
      *Odr = 7.0f;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HTS221_GetOutputDataRate+0x50>)
 80017dc:	6023      	str	r3, [r4, #0]
      break;
 80017de:	e7f5      	b.n	80017cc <HTS221_GetOutputDataRate+0x28>
      *Odr = 12.5f;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HTS221_GetOutputDataRate+0x54>)
 80017e2:	6023      	str	r3, [r4, #0]
      break;
 80017e4:	e7f2      	b.n	80017cc <HTS221_GetOutputDataRate+0x28>
    return HTS221_ERROR;
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	e7ef      	b.n	80017cc <HTS221_GetOutputDataRate+0x28>
      ret = HTS221_ERROR;
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	e7ec      	b.n	80017cc <HTS221_GetOutputDataRate+0x28>
 80017f2:	bf00      	nop
 80017f4:	40e00000 	.word	0x40e00000
 80017f8:	41480000 	.word	0x41480000

080017fc <HTS221_HUM_GetOutputDataRate>:
{
 80017fc:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80017fe:	f7ff ffd1 	bl	80017a4 <HTS221_GetOutputDataRate>
}
 8001802:	bd08      	pop	{r3, pc}

08001804 <HTS221_TEMP_GetOutputDataRate>:
{
 8001804:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001806:	f7ff ffcd 	bl	80017a4 <HTS221_GetOutputDataRate>
}
 800180a:	bd08      	pop	{r3, pc}

0800180c <HTS221_HUM_GetHumidity>:
{
 800180c:	b530      	push	{r4, r5, lr}
 800180e:	b087      	sub	sp, #28
 8001810:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001812:	f100 041c 	add.w	r4, r0, #28
 8001816:	a904      	add	r1, sp, #16
 8001818:	4620      	mov	r0, r4
 800181a:	f000 f9e0 	bl	8001bde <hts221_hum_adc_point_0_get>
 800181e:	2800      	cmp	r0, #0
 8001820:	d15a      	bne.n	80018d8 <HTS221_HUM_GetHumidity+0xcc>
  lin_hum.x0 = (float)coeff.i16bit;
 8001822:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001832:	a904      	add	r1, sp, #16
 8001834:	4620      	mov	r0, r4
 8001836:	f000 f97a 	bl	8001b2e <hts221_hum_rh_point_0_get>
 800183a:	2800      	cmp	r0, #0
 800183c:	d14f      	bne.n	80018de <HTS221_HUM_GetHumidity+0xd2>
  lin_hum.y0 = (float)coeff.u8bit[0];
 800183e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184a:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800184e:	a904      	add	r1, sp, #16
 8001850:	4620      	mov	r0, r4
 8001852:	f000 f9cb 	bl	8001bec <hts221_hum_adc_point_1_get>
 8001856:	2800      	cmp	r0, #0
 8001858:	d144      	bne.n	80018e4 <HTS221_HUM_GetHumidity+0xd8>
  lin_hum.x1 = (float)coeff.i16bit;
 800185a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001866:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800186a:	a904      	add	r1, sp, #16
 800186c:	4620      	mov	r0, r4
 800186e:	f000 f969 	bl	8001b44 <hts221_hum_rh_point_1_get>
 8001872:	bbd0      	cbnz	r0, 80018ea <HTS221_HUM_GetHumidity+0xde>
  lin_hum.y1 = (float)coeff.u8bit[0];
 8001874:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001880:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8001884:	2300      	movs	r3, #0
 8001886:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 800188a:	a905      	add	r1, sp, #20
 800188c:	4620      	mov	r0, r4
 800188e:	f000 f91d 	bl	8001acc <hts221_humidity_raw_get>
 8001892:	4604      	mov	r4, r0
 8001894:	bb60      	cbnz	r0, 80018f0 <HTS221_HUM_GetHumidity+0xe4>
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001896:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800189a:	ee00 3a10 	vmov	s0, r3
 800189e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80018a2:	4668      	mov	r0, sp
 80018a4:	f7ff fe68 	bl	8001578 <Linear_Interpolation>
 80018a8:	ed85 0a00 	vstr	s0, [r5]
  if (*Value < 0.0f)
 80018ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d40d      	bmi.n	80018d2 <HTS221_HUM_GetHumidity+0xc6>
  if (*Value > 100.0f)
 80018b6:	ed95 7a00 	vldr	s14, [r5]
 80018ba:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80018f8 <HTS221_HUM_GetHumidity+0xec>
 80018be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	dd01      	ble.n	80018cc <HTS221_HUM_GetHumidity+0xc0>
    *Value = 100.0f;
 80018c8:	edc5 7a00 	vstr	s15, [r5]
}
 80018cc:	4620      	mov	r0, r4
 80018ce:	b007      	add	sp, #28
 80018d0:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 80018d2:	2300      	movs	r3, #0
 80018d4:	602b      	str	r3, [r5, #0]
 80018d6:	e7ee      	b.n	80018b6 <HTS221_HUM_GetHumidity+0xaa>
    return HTS221_ERROR;
 80018d8:	f04f 34ff 	mov.w	r4, #4294967295
 80018dc:	e7f6      	b.n	80018cc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80018de:	f04f 34ff 	mov.w	r4, #4294967295
 80018e2:	e7f3      	b.n	80018cc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80018e4:	f04f 34ff 	mov.w	r4, #4294967295
 80018e8:	e7f0      	b.n	80018cc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80018ea:	f04f 34ff 	mov.w	r4, #4294967295
 80018ee:	e7ed      	b.n	80018cc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80018f0:	f04f 34ff 	mov.w	r4, #4294967295
 80018f4:	e7ea      	b.n	80018cc <HTS221_HUM_GetHumidity+0xc0>
 80018f6:	bf00      	nop
 80018f8:	42c80000 	.word	0x42c80000

080018fc <HTS221_TEMP_GetTemperature>:
{
 80018fc:	b530      	push	{r4, r5, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001902:	f100 041c 	add.w	r4, r0, #28
 8001906:	a904      	add	r1, sp, #16
 8001908:	4620      	mov	r0, r4
 800190a:	f000 f976 	bl	8001bfa <hts221_temp_adc_point_0_get>
 800190e:	2800      	cmp	r0, #0
 8001910:	d145      	bne.n	800199e <HTS221_TEMP_GetTemperature+0xa2>
  lin_temp.x0 = (float)coeff.i16bit;
 8001912:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001922:	a904      	add	r1, sp, #16
 8001924:	4620      	mov	r0, r4
 8001926:	f000 f918 	bl	8001b5a <hts221_temp_deg_point_0_get>
 800192a:	bbd8      	cbnz	r0, 80019a4 <HTS221_TEMP_GetTemperature+0xa8>
  lin_temp.y0 = (float)coeff.u8bit[0];
 800192c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001938:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800193c:	a904      	add	r1, sp, #16
 800193e:	4620      	mov	r0, r4
 8001940:	f000 f962 	bl	8001c08 <hts221_temp_adc_point_1_get>
 8001944:	bb88      	cbnz	r0, 80019aa <HTS221_TEMP_GetTemperature+0xae>
  lin_temp.x1 = (float)coeff.i16bit;
 8001946:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001952:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001956:	a904      	add	r1, sp, #16
 8001958:	4620      	mov	r0, r4
 800195a:	f000 f91f 	bl	8001b9c <hts221_temp_deg_point_1_get>
 800195e:	bb38      	cbnz	r0, 80019b0 <HTS221_TEMP_GetTemperature+0xb4>
  lin_temp.y1 = (float)coeff.u8bit[0];
 8001960:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001970:	2300      	movs	r3, #0
 8001972:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8001976:	a905      	add	r1, sp, #20
 8001978:	4620      	mov	r0, r4
 800197a:	f000 f8ae 	bl	8001ada <hts221_temperature_raw_get>
 800197e:	4604      	mov	r4, r0
 8001980:	b9c8      	cbnz	r0, 80019b6 <HTS221_TEMP_GetTemperature+0xba>
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001982:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8001986:	ee00 3a10 	vmov	s0, r3
 800198a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800198e:	4668      	mov	r0, sp
 8001990:	f7ff fdf2 	bl	8001578 <Linear_Interpolation>
 8001994:	ed85 0a00 	vstr	s0, [r5]
}
 8001998:	4620      	mov	r0, r4
 800199a:	b007      	add	sp, #28
 800199c:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 800199e:	f04f 34ff 	mov.w	r4, #4294967295
 80019a2:	e7f9      	b.n	8001998 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80019a4:	f04f 34ff 	mov.w	r4, #4294967295
 80019a8:	e7f6      	b.n	8001998 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80019aa:	f04f 34ff 	mov.w	r4, #4294967295
 80019ae:	e7f3      	b.n	8001998 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80019b0:	f04f 34ff 	mov.w	r4, #4294967295
 80019b4:	e7f0      	b.n	8001998 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80019b6:	f04f 34ff 	mov.w	r4, #4294967295
 80019ba:	e7ed      	b.n	8001998 <HTS221_TEMP_GetTemperature+0x9c>

080019bc <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 80019bc:	b1b8      	cbz	r0, 80019ee <HTS221_RegisterBusIO+0x32>
{
 80019be:	b508      	push	{r3, lr}
 80019c0:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80019c2:	680a      	ldr	r2, [r1, #0]
 80019c4:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80019c6:	6848      	ldr	r0, [r1, #4]
 80019c8:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80019ca:	6888      	ldr	r0, [r1, #8]
 80019cc:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80019ce:	7b08      	ldrb	r0, [r1, #12]
 80019d0:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80019d2:	6908      	ldr	r0, [r1, #16]
 80019d4:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80019d6:	6948      	ldr	r0, [r1, #20]
 80019d8:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80019da:	6989      	ldr	r1, [r1, #24]
 80019dc:	6199      	str	r1, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80019de:	4907      	ldr	r1, [pc, #28]	; (80019fc <HTS221_RegisterBusIO+0x40>)
 80019e0:	6219      	str	r1, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80019e2:	4907      	ldr	r1, [pc, #28]	; (8001a00 <HTS221_RegisterBusIO+0x44>)
 80019e4:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80019e6:	625b      	str	r3, [r3, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 80019e8:	b122      	cbz	r2, 80019f4 <HTS221_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 80019ea:	4790      	blx	r2
}
 80019ec:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019f2:	4770      	bx	lr
      ret = HTS221_ERROR;
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80019f8:	e7f8      	b.n	80019ec <HTS221_RegisterBusIO+0x30>
 80019fa:	bf00      	nop
 80019fc:	080015ab 	.word	0x080015ab
 8001a00:	080015c9 	.word	0x080015c9

08001a04 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8001a04:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001a06:	6844      	ldr	r4, [r0, #4]
 8001a08:	6880      	ldr	r0, [r0, #8]
 8001a0a:	47a0      	blx	r4
  return ret;
}
 8001a0c:	bd10      	pop	{r4, pc}

08001a0e <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001a0e:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a10:	6804      	ldr	r4, [r0, #0]
 8001a12:	6880      	ldr	r0, [r0, #8]
 8001a14:	47a0      	blx	r4
  return ret;
}
 8001a16:	bd10      	pop	{r4, pc}

08001a18 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001a18:	b530      	push	{r4, r5, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001a20:	2301      	movs	r3, #1
 8001a22:	aa01      	add	r2, sp, #4
 8001a24:	2120      	movs	r1, #32
 8001a26:	f7ff ffed 	bl	8001a04 <hts221_read_reg>

  if(ret == 0){
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b110      	cbz	r0, 8001a34 <hts221_data_rate_set+0x1c>
    reg.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	b003      	add	sp, #12
 8001a32:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 8001a34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a38:	f365 0301 	bfi	r3, r5, #0, #2
 8001a3c:	aa02      	add	r2, sp, #8
 8001a3e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001a42:	2301      	movs	r3, #1
 8001a44:	2120      	movs	r1, #32
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff ffe1 	bl	8001a0e <hts221_write_reg>
 8001a4c:	4603      	mov	r3, r0
  return ret;
 8001a4e:	e7ee      	b.n	8001a2e <hts221_data_rate_set+0x16>

08001a50 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	460c      	mov	r4, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001a56:	2301      	movs	r3, #1
 8001a58:	aa01      	add	r2, sp, #4
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	f7ff ffd2 	bl	8001a04 <hts221_read_reg>

  switch (reg.odr) {
 8001a60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d810      	bhi.n	8001a8e <hts221_data_rate_get+0x3e>
 8001a6c:	e8df f003 	tbb	[pc, r3]
 8001a70:	0c090602 	.word	0x0c090602
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	7023      	strb	r3, [r4, #0]
      break;
 8001a80:	e7fa      	b.n	8001a78 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_7Hz;
 8001a82:	2302      	movs	r3, #2
 8001a84:	7023      	strb	r3, [r4, #0]
      break;
 8001a86:	e7f7      	b.n	8001a78 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_12Hz5;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	7023      	strb	r3, [r4, #0]
      break;
 8001a8c:	e7f4      	b.n	8001a78 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_ND;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	7023      	strb	r3, [r4, #0]
  return ret;
 8001a92:	e7f1      	b.n	8001a78 <hts221_data_rate_get+0x28>

08001a94 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a94:	b530      	push	{r4, r5, lr}
 8001a96:	b083      	sub	sp, #12
 8001a98:	4604      	mov	r4, r0
 8001a9a:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	aa01      	add	r2, sp, #4
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	f7ff ffaf 	bl	8001a04 <hts221_read_reg>

  if(ret == 0){
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b110      	cbz	r0, 8001ab0 <hts221_block_data_update_set+0x1c>
    reg.bdu = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	b003      	add	sp, #12
 8001aae:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8001ab0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ab4:	f365 0382 	bfi	r3, r5, #2, #1
 8001ab8:	aa02      	add	r2, sp, #8
 8001aba:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001abe:	2301      	movs	r3, #1
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff ffa3 	bl	8001a0e <hts221_write_reg>
 8001ac8:	4603      	mov	r3, r0
  return ret;
 8001aca:	e7ee      	b.n	8001aaa <hts221_block_data_update_set+0x16>

08001acc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001acc:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001ace:	2302      	movs	r3, #2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	2128      	movs	r1, #40	; 0x28
 8001ad4:	f7ff ff96 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001ad8:	bd08      	pop	{r3, pc}

08001ada <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001ada:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001adc:	2302      	movs	r3, #2
 8001ade:	460a      	mov	r2, r1
 8001ae0:	212a      	movs	r1, #42	; 0x2a
 8001ae2:	f7ff ff8f 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001ae6:	bd08      	pop	{r3, pc}

08001ae8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001ae8:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001aea:	2301      	movs	r3, #1
 8001aec:	460a      	mov	r2, r1
 8001aee:	210f      	movs	r1, #15
 8001af0:	f7ff ff88 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001af4:	bd08      	pop	{r3, pc}

08001af6 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001af6:	b530      	push	{r4, r5, lr}
 8001af8:	b083      	sub	sp, #12
 8001afa:	4604      	mov	r4, r0
 8001afc:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001afe:	2301      	movs	r3, #1
 8001b00:	aa01      	add	r2, sp, #4
 8001b02:	2120      	movs	r1, #32
 8001b04:	f7ff ff7e 	bl	8001a04 <hts221_read_reg>

  if(ret == 0){
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b110      	cbz	r0, 8001b12 <hts221_power_on_set+0x1c>
    reg.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }
  return ret;
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	b003      	add	sp, #12
 8001b10:	bd30      	pop	{r4, r5, pc}
    reg.pd = val;
 8001b12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b16:	f365 13c7 	bfi	r3, r5, #7, #1
 8001b1a:	aa02      	add	r2, sp, #8
 8001b1c:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001b20:	2301      	movs	r3, #1
 8001b22:	2120      	movs	r1, #32
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff ff72 	bl	8001a0e <hts221_write_reg>
 8001b2a:	4603      	mov	r3, r0
  return ret;
 8001b2c:	e7ee      	b.n	8001b0c <hts221_power_on_set+0x16>

08001b2e <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b2e:	b510      	push	{r4, lr}
 8001b30:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8001b32:	2301      	movs	r3, #1
 8001b34:	460a      	mov	r2, r1
 8001b36:	2130      	movs	r1, #48	; 0x30
 8001b38:	f7ff ff64 	bl	8001a04 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001b3c:	7823      	ldrb	r3, [r4, #0]
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001b42:	bd10      	pop	{r4, pc}

08001b44 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b44:	b510      	push	{r4, lr}
 8001b46:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001b48:	2301      	movs	r3, #1
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	2131      	movs	r1, #49	; 0x31
 8001b4e:	f7ff ff59 	bl	8001a04 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001b52:	7823      	ldrb	r3, [r4, #0]
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001b58:	bd10      	pop	{r4, pc}

08001b5a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b5a:	b530      	push	{r4, r5, lr}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	4605      	mov	r5, r0
 8001b60:	460c      	mov	r4, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001b62:	2301      	movs	r3, #1
 8001b64:	f10d 0203 	add.w	r2, sp, #3
 8001b68:	2132      	movs	r1, #50	; 0x32
 8001b6a:	f7ff ff4b 	bl	8001a04 <hts221_read_reg>

  if(ret == 0){
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b110      	cbz	r0, 8001b78 <hts221_temp_deg_point_0_get+0x1e>
    coeff_h = reg.t0_msb;
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
  }

  return ret;
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	b003      	add	sp, #12
 8001b76:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8001b78:	2301      	movs	r3, #1
 8001b7a:	aa01      	add	r2, sp, #4
 8001b7c:	2135      	movs	r1, #53	; 0x35
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f7ff ff40 	bl	8001a04 <hts221_read_reg>
 8001b84:	4603      	mov	r3, r0
    coeff_h = reg.t0_msb;
 8001b86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001b8a:	f002 0103 	and.w	r1, r2, #3
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8001b8e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b92:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8001b96:	08d2      	lsrs	r2, r2, #3
 8001b98:	7022      	strb	r2, [r4, #0]
  return ret;
 8001b9a:	e7ea      	b.n	8001b72 <hts221_temp_deg_point_0_get+0x18>

08001b9c <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b9c:	b530      	push	{r4, r5, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	460c      	mov	r4, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f10d 0203 	add.w	r2, sp, #3
 8001baa:	2133      	movs	r1, #51	; 0x33
 8001bac:	f7ff ff2a 	bl	8001a04 <hts221_read_reg>

  if(ret == 0){
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b110      	cbz	r0, 8001bba <hts221_temp_deg_point_1_get+0x1e>
    coeff_h = reg.t1_msb;
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
  }

  return ret;
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	b003      	add	sp, #12
 8001bb8:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8001bba:	2301      	movs	r3, #1
 8001bbc:	aa01      	add	r2, sp, #4
 8001bbe:	2135      	movs	r1, #53	; 0x35
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	f7ff ff1f 	bl	8001a04 <hts221_read_reg>
 8001bc6:	4603      	mov	r3, r0
    coeff_h = reg.t1_msb;
 8001bc8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001bcc:	f3c2 0181 	ubfx	r1, r2, #2, #2
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8001bd0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001bd4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8001bd8:	08d2      	lsrs	r2, r2, #3
 8001bda:	7022      	strb	r2, [r4, #0]
  return ret;
 8001bdc:	e7ea      	b.n	8001bb4 <hts221_temp_deg_point_1_get+0x18>

08001bde <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bde:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8001be0:	2302      	movs	r3, #2
 8001be2:	460a      	mov	r2, r1
 8001be4:	2136      	movs	r1, #54	; 0x36
 8001be6:	f7ff ff0d 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001bea:	bd08      	pop	{r3, pc}

08001bec <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bec:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8001bee:	2302      	movs	r3, #2
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	213a      	movs	r1, #58	; 0x3a
 8001bf4:	f7ff ff06 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001bf8:	bd08      	pop	{r3, pc}

08001bfa <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bfa:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	460a      	mov	r2, r1
 8001c00:	213c      	movs	r1, #60	; 0x3c
 8001c02:	f7ff feff 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001c06:	bd08      	pop	{r3, pc}

08001c08 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c08:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	213e      	movs	r1, #62	; 0x3e
 8001c10:	f7ff fef8 	bl	8001a04 <hts221_read_reg>
  return ret;
}
 8001c14:	bd08      	pop	{r3, pc}
	...

08001c18 <LPS22HB_GetCapabilities>:
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001c18:	2000      	movs	r0, #0
 8001c1a:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 8001c20:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8001c22:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001c24:	2300      	movs	r3, #0
 8001c26:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001c28:	4b01      	ldr	r3, [pc, #4]	; (8001c30 <LPS22HB_GetCapabilities+0x18>)
 8001c2a:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001c2c:	60cb      	str	r3, [r1, #12]
  return LPS22HB_OK;
}
 8001c2e:	4770      	bx	lr
 8001c30:	42960000 	.word	0x42960000

08001c34 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001c34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	d918      	bls.n	8001c74 <LPS22HB_SetOutputDataRate_When_Disabled+0x40>
 8001c42:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001c46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d916      	bls.n	8001c7e <LPS22HB_SetOutputDataRate_When_Disabled+0x4a>
 8001c50:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001c54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	d911      	bls.n	8001c82 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8001c5e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001c88 <LPS22HB_SetOutputDataRate_When_Disabled+0x54>
 8001c62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d901      	bls.n	8001c70 <LPS22HB_SetOutputDataRate_When_Disabled+0x3c>
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	e002      	b.n	8001c76 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e000      	b.n	8001c76 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8001c74:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001c76:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e7f9      	b.n	8001c76 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e7f7      	b.n	8001c76 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8001c86:	bf00      	nop
 8001c88:	42480000 	.word	0x42480000

08001c8c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c90:	4605      	mov	r5, r0
 8001c92:	4688      	mov	r8, r1
 8001c94:	4691      	mov	r9, r2
 8001c96:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001c98:	6883      	ldr	r3, [r0, #8]
 8001c9a:	b13b      	cbz	r3, 8001cac <ReadRegWrap+0x20>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c9c:	6944      	ldr	r4, [r0, #20]
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	7b00      	ldrb	r0, [r0, #12]
 8001ca2:	47a0      	blx	r4
 8001ca4:	4603      	mov	r3, r0
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = LPS22HB_OK;
 8001cac:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 8001cae:	461c      	mov	r4, r3
 8001cb0:	42bc      	cmp	r4, r7
 8001cb2:	d2f8      	bcs.n	8001ca6 <ReadRegWrap+0x1a>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8001cb4:	696e      	ldr	r6, [r5, #20]
 8001cb6:	eb04 0108 	add.w	r1, r4, r8
 8001cba:	2301      	movs	r3, #1
 8001cbc:	eb09 0204 	add.w	r2, r9, r4
 8001cc0:	b289      	uxth	r1, r1
 8001cc2:	7b28      	ldrb	r0, [r5, #12]
 8001cc4:	47b0      	blx	r6
      if (ret != LPS22HB_OK)
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b910      	cbnz	r0, 8001cd0 <ReadRegWrap+0x44>
    for (i = 0; i < Length; i++)
 8001cca:	3401      	adds	r4, #1
 8001ccc:	b2a4      	uxth	r4, r4
 8001cce:	e7ef      	b.n	8001cb0 <ReadRegWrap+0x24>
        return LPS22HB_ERROR;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	e7e7      	b.n	8001ca6 <ReadRegWrap+0x1a>

08001cd6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cda:	4605      	mov	r5, r0
 8001cdc:	4688      	mov	r8, r1
 8001cde:	4691      	mov	r9, r2
 8001ce0:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001ce2:	6883      	ldr	r3, [r0, #8]
 8001ce4:	b13b      	cbz	r3, 8001cf6 <WriteRegWrap+0x20>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001ce6:	6904      	ldr	r4, [r0, #16]
 8001ce8:	463b      	mov	r3, r7
 8001cea:	7b00      	ldrb	r0, [r0, #12]
 8001cec:	47a0      	blx	r4
 8001cee:	4603      	mov	r3, r0
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = LPS22HB_OK;
 8001cf6:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 8001cf8:	461c      	mov	r4, r3
 8001cfa:	42bc      	cmp	r4, r7
 8001cfc:	d2f8      	bcs.n	8001cf0 <WriteRegWrap+0x1a>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8001cfe:	692e      	ldr	r6, [r5, #16]
 8001d00:	eb04 0108 	add.w	r1, r4, r8
 8001d04:	2301      	movs	r3, #1
 8001d06:	eb09 0204 	add.w	r2, r9, r4
 8001d0a:	b289      	uxth	r1, r1
 8001d0c:	7b28      	ldrb	r0, [r5, #12]
 8001d0e:	47b0      	blx	r6
      if (ret != LPS22HB_OK)
 8001d10:	4603      	mov	r3, r0
 8001d12:	b910      	cbnz	r0, 8001d1a <WriteRegWrap+0x44>
    for (i = 0; i < Length; i++)
 8001d14:	3401      	adds	r4, #1
 8001d16:	b2a4      	uxth	r4, r4
 8001d18:	e7ef      	b.n	8001cfa <WriteRegWrap+0x24>
        return LPS22HB_ERROR;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e7e7      	b.n	8001cf0 <WriteRegWrap+0x1a>

08001d20 <LPS22HB_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 8001d20:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d00d      	beq.n	8001d44 <LPS22HB_PRESS_Enable+0x24>
{
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001d2c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8001d30:	301c      	adds	r0, #28
 8001d32:	f000 fa4f 	bl	80021d4 <lps22hb_data_rate_set>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b938      	cbnz	r0, 8001d4a <LPS22HB_PRESS_Enable+0x2a>
  pObj->press_is_enabled = 1;
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	4770      	bx	lr
    return LPS22HB_ERROR;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e7f7      	b.n	8001d40 <LPS22HB_PRESS_Enable+0x20>

08001d50 <LPS22HB_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8001d50:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d00d      	beq.n	8001d74 <LPS22HB_TEMP_Enable+0x24>
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001d5c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8001d60:	301c      	adds	r0, #28
 8001d62:	f000 fa37 	bl	80021d4 <lps22hb_data_rate_set>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b938      	cbnz	r0, 8001d7a <LPS22HB_TEMP_Enable+0x2a>
  pObj->temp_is_enabled = 1;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	4770      	bx	lr
    return LPS22HB_ERROR;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e7f7      	b.n	8001d70 <LPS22HB_TEMP_Enable+0x20>

08001d80 <LPS22HB_Initialize>:
{
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	4605      	mov	r5, r0
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001d84:	f100 041c 	add.w	r4, r0, #28
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f000 fa7c 	bl	8002288 <lps22hb_low_power_set>
 8001d90:	bb20      	cbnz	r0, 8001ddc <LPS22HB_Initialize+0x5c>
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 fa1d 	bl	80021d4 <lps22hb_data_rate_set>
 8001d9a:	bb10      	cbnz	r0, 8001de2 <LPS22HB_Initialize+0x62>
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f000 f9fc 	bl	800219c <lps22hb_low_pass_filter_mode_set>
 8001da4:	bb00      	cbnz	r0, 8001de8 <LPS22HB_Initialize+0x68>
  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001da6:	2101      	movs	r1, #1
 8001da8:	4620      	mov	r0, r4
 8001daa:	f000 f9db 	bl	8002164 <lps22hb_block_data_update_set>
 8001dae:	4606      	mov	r6, r0
 8001db0:	b9e8      	cbnz	r0, 8001dee <LPS22HB_Initialize+0x6e>
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001db2:	68ab      	ldr	r3, [r5, #8]
 8001db4:	b94b      	cbnz	r3, 8001dca <LPS22HB_Initialize+0x4a>
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8001db6:	2100      	movs	r1, #0
 8001db8:	4620      	mov	r0, r4
 8001dba:	f000 fa81 	bl	80022c0 <lps22hb_auto_add_inc_set>
 8001dbe:	b9c8      	cbnz	r0, 8001df4 <LPS22HB_Initialize+0x74>
  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 8001dc6:	4630      	mov	r0, r6
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f000 fa77 	bl	80022c0 <lps22hb_auto_add_inc_set>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d0f4      	beq.n	8001dc0 <LPS22HB_Initialize+0x40>
      return LPS22HB_ERROR;
 8001dd6:	f04f 36ff 	mov.w	r6, #4294967295
 8001dda:	e7f4      	b.n	8001dc6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 8001ddc:	f04f 36ff 	mov.w	r6, #4294967295
 8001de0:	e7f1      	b.n	8001dc6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 8001de2:	f04f 36ff 	mov.w	r6, #4294967295
 8001de6:	e7ee      	b.n	8001dc6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 8001de8:	f04f 36ff 	mov.w	r6, #4294967295
 8001dec:	e7eb      	b.n	8001dc6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 8001dee:	f04f 36ff 	mov.w	r6, #4294967295
 8001df2:	e7e8      	b.n	8001dc6 <LPS22HB_Initialize+0x46>
      return LPS22HB_ERROR;
 8001df4:	f04f 36ff 	mov.w	r6, #4294967295
 8001df8:	e7e5      	b.n	8001dc6 <LPS22HB_Initialize+0x46>

08001dfa <LPS22HB_Init>:
{
 8001dfa:	b510      	push	{r4, lr}
 8001dfc:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001dfe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001e02:	b123      	cbz	r3, 8001e0e <LPS22HB_Init+0x14>
  pObj->is_initialized = 1U;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HB_OK;
 8001e0a:	2000      	movs	r0, #0
}
 8001e0c:	bd10      	pop	{r4, pc}
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001e0e:	f7ff ffb7 	bl	8001d80 <LPS22HB_Initialize>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d0f6      	beq.n	8001e04 <LPS22HB_Init+0xa>
      return LPS22HB_ERROR;
 8001e16:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1a:	e7f7      	b.n	8001e0c <LPS22HB_Init+0x12>

08001e1c <LPS22HB_ReadID>:
{
 8001e1c:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001e1e:	301c      	adds	r0, #28
 8001e20:	f000 fa2b 	bl	800227a <lps22hb_device_id_get>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b908      	cbnz	r0, 8001e2c <LPS22HB_ReadID+0x10>
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd08      	pop	{r3, pc}
    return LPS22HB_ERROR;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	e7fa      	b.n	8001e28 <LPS22HB_ReadID+0xc>

08001e32 <LPS22HB_PRESS_Disable>:
{
 8001e32:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8001e34:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001e38:	b1c3      	cbz	r3, 8001e6c <LPS22HB_PRESS_Disable+0x3a>
 8001e3a:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001e3c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001e40:	b11b      	cbz	r3, 8001e4a <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 8001e42:	2000      	movs	r0, #0
 8001e44:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8001e48:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001e4a:	f100 051c 	add.w	r5, r0, #28
 8001e4e:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8001e52:	4628      	mov	r0, r5
 8001e54:	f000 f9da 	bl	800220c <lps22hb_data_rate_get>
 8001e58:	b950      	cbnz	r0, 8001e70 <LPS22HB_PRESS_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f000 f9b9 	bl	80021d4 <lps22hb_data_rate_set>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d0ed      	beq.n	8001e42 <LPS22HB_PRESS_Disable+0x10>
      return LPS22HB_ERROR;
 8001e66:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6a:	e7ed      	b.n	8001e48 <LPS22HB_PRESS_Disable+0x16>
    return LPS22HB_OK;
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e7eb      	b.n	8001e48 <LPS22HB_PRESS_Disable+0x16>
      return LPS22HB_ERROR;
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	e7e8      	b.n	8001e48 <LPS22HB_PRESS_Disable+0x16>
	...

08001e78 <LPS22HB_GetOutputDataRate>:
{
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001e7e:	f10d 0107 	add.w	r1, sp, #7
 8001e82:	301c      	adds	r0, #28
 8001e84:	f000 f9c2 	bl	800220c <lps22hb_data_rate_get>
 8001e88:	b9f0      	cbnz	r0, 8001ec8 <LPS22HB_GetOutputDataRate+0x50>
 8001e8a:	4602      	mov	r2, r0
  switch (odr_low_level)
 8001e8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d81c      	bhi.n	8001ece <LPS22HB_GetOutputDataRate+0x56>
 8001e94:	e8df f003 	tbb	[pc, r3]
 8001e98:	0f0c0803 	.word	0x0f0c0803
 8001e9c:	1512      	.short	0x1512
      *Odr = 0.0f;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	6023      	str	r3, [r4, #0]
}
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8001ea8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001eac:	6023      	str	r3, [r4, #0]
      break;
 8001eae:	e7f8      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 10.0f;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <LPS22HB_GetOutputDataRate+0x5c>)
 8001eb2:	6023      	str	r3, [r4, #0]
      break;
 8001eb4:	e7f5      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 25.0f;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <LPS22HB_GetOutputDataRate+0x60>)
 8001eb8:	6023      	str	r3, [r4, #0]
      break;
 8001eba:	e7f2      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 50.0f;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <LPS22HB_GetOutputDataRate+0x64>)
 8001ebe:	6023      	str	r3, [r4, #0]
      break;
 8001ec0:	e7ef      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 75.0f;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <LPS22HB_GetOutputDataRate+0x68>)
 8001ec4:	6023      	str	r3, [r4, #0]
      break;
 8001ec6:	e7ec      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
    return LPS22HB_ERROR;
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	e7e9      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
      ret = LPS22HB_ERROR;
 8001ece:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed2:	e7e6      	b.n	8001ea2 <LPS22HB_GetOutputDataRate+0x2a>
 8001ed4:	41200000 	.word	0x41200000
 8001ed8:	41c80000 	.word	0x41c80000
 8001edc:	42480000 	.word	0x42480000
 8001ee0:	42960000 	.word	0x42960000

08001ee4 <LPS22HB_PRESS_GetOutputDataRate>:
{
 8001ee4:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001ee6:	f7ff ffc7 	bl	8001e78 <LPS22HB_GetOutputDataRate>
}
 8001eea:	bd08      	pop	{r3, pc}

08001eec <LPS22HB_TEMP_GetOutputDataRate>:
{
 8001eec:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001eee:	f7ff ffc3 	bl	8001e78 <LPS22HB_GetOutputDataRate>
}
 8001ef2:	bd08      	pop	{r3, pc}

08001ef4 <LPS22HB_SetOutputDataRate_When_Enabled>:
{
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	4605      	mov	r5, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001ef8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001efc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d916      	bls.n	8001f34 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8001f06:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001f0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	d91f      	bls.n	8001f54 <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8001f14:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001f18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d91a      	bls.n	8001f58 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8001f22:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001f6c <LPS22HB_SetOutputDataRate_When_Enabled+0x78>
 8001f26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	d815      	bhi.n	8001f5c <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 8001f30:	2104      	movs	r1, #4
 8001f32:	e000      	b.n	8001f36 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8001f34:	2101      	movs	r1, #1
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001f36:	f105 041c 	add.w	r4, r5, #28
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f000 f94a 	bl	80021d4 <lps22hb_data_rate_set>
 8001f40:	b988      	cbnz	r0, 8001f66 <LPS22HB_SetOutputDataRate_When_Enabled+0x72>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001f42:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8001f46:	4620      	mov	r0, r4
 8001f48:	f000 f960 	bl	800220c <lps22hb_data_rate_get>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b938      	cbnz	r0, 8001f60 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001f54:	2102      	movs	r1, #2
 8001f56:	e7ee      	b.n	8001f36 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8001f58:	2103      	movs	r1, #3
 8001f5a:	e7ec      	b.n	8001f36 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	e7ea      	b.n	8001f36 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
    return LPS22HB_ERROR;
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	e7f4      	b.n	8001f50 <LPS22HB_SetOutputDataRate_When_Enabled+0x5c>
    return LPS22HB_ERROR;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e7f1      	b.n	8001f50 <LPS22HB_SetOutputDataRate_When_Enabled+0x5c>
 8001f6c:	42480000 	.word	0x42480000

08001f70 <LPS22HB_PRESS_SetOutputDataRate>:
{
 8001f70:	b508      	push	{r3, lr}
  if (pObj->press_is_enabled == 1U)
 8001f72:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d004      	beq.n	8001f84 <LPS22HB_PRESS_SetOutputDataRate+0x14>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001f7a:	ee00 1a10 	vmov	s0, r1
 8001f7e:	f7ff fe59 	bl	8001c34 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8001f82:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001f84:	ee00 1a10 	vmov	s0, r1
 8001f88:	f7ff ffb4 	bl	8001ef4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001f8c:	e7f9      	b.n	8001f82 <LPS22HB_PRESS_SetOutputDataRate+0x12>

08001f8e <LPS22HB_TEMP_SetOutputDataRate>:
{
 8001f8e:	b508      	push	{r3, lr}
  if (pObj->temp_is_enabled == 1U)
 8001f90:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d004      	beq.n	8001fa2 <LPS22HB_TEMP_SetOutputDataRate+0x14>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001f98:	ee00 1a10 	vmov	s0, r1
 8001f9c:	f7ff fe4a 	bl	8001c34 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8001fa0:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001fa2:	ee00 1a10 	vmov	s0, r1
 8001fa6:	f7ff ffa5 	bl	8001ef4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001faa:	e7f9      	b.n	8001fa0 <LPS22HB_TEMP_SetOutputDataRate+0x12>

08001fac <LPS22HB_TEMP_Disable>:
{
 8001fac:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8001fae:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001fb2:	b1c3      	cbz	r3, 8001fe6 <LPS22HB_TEMP_Disable+0x3a>
 8001fb4:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8001fb6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001fba:	b11b      	cbz	r3, 8001fc4 <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001fc4:	f100 051c 	add.w	r5, r0, #28
 8001fc8:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f000 f91d 	bl	800220c <lps22hb_data_rate_get>
 8001fd2:	b950      	cbnz	r0, 8001fea <LPS22HB_TEMP_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 f8fc 	bl	80021d4 <lps22hb_data_rate_set>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d0ed      	beq.n	8001fbc <LPS22HB_TEMP_Disable+0x10>
      return LPS22HB_ERROR;
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	e7ed      	b.n	8001fc2 <LPS22HB_TEMP_Disable+0x16>
    return LPS22HB_OK;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7eb      	b.n	8001fc2 <LPS22HB_TEMP_Disable+0x16>
      return LPS22HB_ERROR;
 8001fea:	f04f 30ff 	mov.w	r0, #4294967295
 8001fee:	e7e8      	b.n	8001fc2 <LPS22HB_TEMP_Disable+0x16>

08001ff0 <LPS22HB_DeInit>:
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8001ff4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d003      	beq.n	8002004 <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8002002:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8002004:	f7ff ff15 	bl	8001e32 <LPS22HB_PRESS_Disable>
 8002008:	b938      	cbnz	r0, 800201a <LPS22HB_DeInit+0x2a>
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff ffce 	bl	8001fac <LPS22HB_TEMP_Disable>
 8002010:	2800      	cmp	r0, #0
 8002012:	d0f3      	beq.n	8001ffc <LPS22HB_DeInit+0xc>
      return LPS22HB_ERROR;
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	e7f3      	b.n	8002002 <LPS22HB_DeInit+0x12>
      return LPS22HB_ERROR;
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
 800201e:	e7f0      	b.n	8002002 <LPS22HB_DeInit+0x12>

08002020 <LPS22HB_PRESS_GetPressure>:
{
 8002020:	b530      	push	{r4, r5, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	460d      	mov	r5, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8002026:	2300      	movs	r3, #0
 8002028:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 800202a:	a901      	add	r1, sp, #4
 800202c:	301c      	adds	r0, #28
 800202e:	f000 f916 	bl	800225e <lps22hb_pressure_raw_get>
 8002032:	b938      	cbnz	r0, 8002044 <LPS22HB_PRESS_GetPressure+0x24>
 8002034:	4604      	mov	r4, r0
  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8002036:	9801      	ldr	r0, [sp, #4]
 8002038:	f000 f878 	bl	800212c <lps22hb_from_lsb_to_hpa>
 800203c:	6028      	str	r0, [r5, #0]
}
 800203e:	4620      	mov	r0, r4
 8002040:	b003      	add	sp, #12
 8002042:	bd30      	pop	{r4, r5, pc}
    return LPS22HB_ERROR;
 8002044:	f04f 34ff 	mov.w	r4, #4294967295
 8002048:	e7f9      	b.n	800203e <LPS22HB_PRESS_GetPressure+0x1e>

0800204a <LPS22HB_TEMP_GetTemperature>:
{
 800204a:	b530      	push	{r4, r5, lr}
 800204c:	b083      	sub	sp, #12
 800204e:	460d      	mov	r5, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002050:	2300      	movs	r3, #0
 8002052:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8002056:	a901      	add	r1, sp, #4
 8002058:	301c      	adds	r0, #28
 800205a:	f000 f907 	bl	800226c <lps22hb_temperature_raw_get>
 800205e:	b940      	cbnz	r0, 8002072 <LPS22HB_TEMP_GetTemperature+0x28>
 8002060:	4604      	mov	r4, r0
  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8002062:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8002066:	f000 f86f 	bl	8002148 <lps22hb_from_lsb_to_degc>
 800206a:	6028      	str	r0, [r5, #0]
}
 800206c:	4620      	mov	r0, r4
 800206e:	b003      	add	sp, #12
 8002070:	bd30      	pop	{r4, r5, pc}
    return LPS22HB_ERROR;
 8002072:	f04f 34ff 	mov.w	r4, #4294967295
 8002076:	e7f9      	b.n	800206c <LPS22HB_TEMP_GetTemperature+0x22>

08002078 <LPS22HB_Write_Reg>:
{
 8002078:	b510      	push	{r4, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	ac02      	add	r4, sp, #8
 800207e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002082:	2301      	movs	r3, #1
 8002084:	4622      	mov	r2, r4
 8002086:	301c      	adds	r0, #28
 8002088:	f000 f84b 	bl	8002122 <lps22hb_write_reg>
 800208c:	4603      	mov	r3, r0
 800208e:	b910      	cbnz	r0, 8002096 <LPS22HB_Write_Reg+0x1e>
}
 8002090:	4618      	mov	r0, r3
 8002092:	b002      	add	sp, #8
 8002094:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e7f9      	b.n	8002090 <LPS22HB_Write_Reg+0x18>

0800209c <LPS22HB_RegisterBusIO>:
  if (pObj == NULL)
 800209c:	2800      	cmp	r0, #0
 800209e:	d02c      	beq.n	80020fa <LPS22HB_RegisterBusIO+0x5e>
{
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80020a4:	680a      	ldr	r2, [r1, #0]
 80020a6:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020a8:	6848      	ldr	r0, [r1, #4]
 80020aa:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020ac:	6888      	ldr	r0, [r1, #8]
 80020ae:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 80020b0:	7b08      	ldrb	r0, [r1, #12]
 80020b2:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020b4:	6908      	ldr	r0, [r1, #16]
 80020b6:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020b8:	6948      	ldr	r0, [r1, #20]
 80020ba:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80020bc:	6989      	ldr	r1, [r1, #24]
 80020be:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80020c0:	4913      	ldr	r1, [pc, #76]	; (8002110 <LPS22HB_RegisterBusIO+0x74>)
 80020c2:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80020c4:	4913      	ldr	r1, [pc, #76]	; (8002114 <LPS22HB_RegisterBusIO+0x78>)
 80020c6:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 80020c8:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80020ca:	b1d2      	cbz	r2, 8002102 <LPS22HB_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LPS22HB_OK)
 80020cc:	4790      	blx	r2
 80020ce:	4603      	mov	r3, r0
 80020d0:	b9d0      	cbnz	r0, 8002108 <LPS22HB_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80020d2:	68a2      	ldr	r2, [r4, #8]
 80020d4:	2a02      	cmp	r2, #2
 80020d6:	d001      	beq.n	80020dc <LPS22HB_RegisterBusIO+0x40>
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80020dc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d1f9      	bne.n	80020d8 <LPS22HB_RegisterBusIO+0x3c>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80020e4:	2201      	movs	r2, #1
 80020e6:	2110      	movs	r1, #16
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff ffc5 	bl	8002078 <LPS22HB_Write_Reg>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d0f1      	beq.n	80020d8 <LPS22HB_RegisterBusIO+0x3c>
            ret = LPS22HB_ERROR;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
  return ret;
 80020f8:	e7ee      	b.n	80020d8 <LPS22HB_RegisterBusIO+0x3c>
    ret = LPS22HB_ERROR;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fe:	4618      	mov	r0, r3
 8002100:	4770      	bx	lr
      ret = LPS22HB_ERROR;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e7e7      	b.n	80020d8 <LPS22HB_RegisterBusIO+0x3c>
      ret = LPS22HB_ERROR;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	e7e4      	b.n	80020d8 <LPS22HB_RegisterBusIO+0x3c>
 800210e:	bf00      	nop
 8002110:	08001c8d 	.word	0x08001c8d
 8002114:	08001cd7 	.word	0x08001cd7

08002118 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002118:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800211a:	6844      	ldr	r4, [r0, #4]
 800211c:	6880      	ldr	r0, [r0, #8]
 800211e:	47a0      	blx	r4
  return ret;
}
 8002120:	bd10      	pop	{r4, pc}

08002122 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002122:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002124:	6804      	ldr	r4, [r0, #0]
 8002126:	6880      	ldr	r0, [r0, #8]
 8002128:	47a0      	blx	r4
  return ret;
}
 800212a:	bd10      	pop	{r4, pc}

0800212c <lps22hb_from_lsb_to_hpa>:
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
  return ( (float_t)lsb / 4096.0f );
 800212c:	ee07 0a90 	vmov	s15, r0
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
}
 8002134:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002144 <lps22hb_from_lsb_to_hpa+0x18>
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	ee17 0a90 	vmov	r0, s15
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	39800000 	.word	0x39800000

08002148 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
  return ( (float_t)lsb / 100.0f );
 8002148:	ee07 0a90 	vmov	s15, r0
 800214c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
}
 8002150:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002160 <lps22hb_from_lsb_to_degc+0x18>
 8002154:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002158:	ee17 0a90 	vmov	r0, s15
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	42c80000 	.word	0x42c80000

08002164 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002164:	b530      	push	{r4, r5, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	4604      	mov	r4, r0
 800216a:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800216c:	2301      	movs	r3, #1
 800216e:	aa01      	add	r2, sp, #4
 8002170:	2110      	movs	r1, #16
 8002172:	f7ff ffd1 	bl	8002118 <lps22hb_read_reg>
  if(ret == 0){
 8002176:	4603      	mov	r3, r0
 8002178:	b110      	cbz	r0, 8002180 <lps22hb_block_data_update_set+0x1c>
    ctrl_reg1.bdu = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 800217a:	4618      	mov	r0, r3
 800217c:	b003      	add	sp, #12
 800217e:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.bdu = val;
 8002180:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002184:	f365 0341 	bfi	r3, r5, #1, #1
 8002188:	aa02      	add	r2, sp, #8
 800218a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800218e:	2301      	movs	r3, #1
 8002190:	2110      	movs	r1, #16
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff ffc5 	bl	8002122 <lps22hb_write_reg>
 8002198:	4603      	mov	r3, r0
  return ret;
 800219a:	e7ee      	b.n	800217a <lps22hb_block_data_update_set+0x16>

0800219c <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 800219c:	b530      	push	{r4, r5, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	4604      	mov	r4, r0
 80021a2:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80021a4:	2301      	movs	r3, #1
 80021a6:	aa01      	add	r2, sp, #4
 80021a8:	2110      	movs	r1, #16
 80021aa:	f7ff ffb5 	bl	8002118 <lps22hb_read_reg>
  if(ret == 0){
 80021ae:	4603      	mov	r3, r0
 80021b0:	b110      	cbz	r0, 80021b8 <lps22hb_low_pass_filter_mode_set+0x1c>
    ctrl_reg1.lpfp = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	b003      	add	sp, #12
 80021b6:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.lpfp = (uint8_t)val;
 80021b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021bc:	f365 0383 	bfi	r3, r5, #2, #2
 80021c0:	aa02      	add	r2, sp, #8
 80021c2:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80021c6:	2301      	movs	r3, #1
 80021c8:	2110      	movs	r1, #16
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ffa9 	bl	8002122 <lps22hb_write_reg>
 80021d0:	4603      	mov	r3, r0
  return ret;
 80021d2:	e7ee      	b.n	80021b2 <lps22hb_low_pass_filter_mode_set+0x16>

080021d4 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80021d4:	b530      	push	{r4, r5, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80021dc:	2301      	movs	r3, #1
 80021de:	aa01      	add	r2, sp, #4
 80021e0:	2110      	movs	r1, #16
 80021e2:	f7ff ff99 	bl	8002118 <lps22hb_read_reg>
  if(ret == 0){
 80021e6:	4603      	mov	r3, r0
 80021e8:	b110      	cbz	r0, 80021f0 <lps22hb_data_rate_set+0x1c>
    ctrl_reg1.odr = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	b003      	add	sp, #12
 80021ee:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.odr = (uint8_t)val;
 80021f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021f4:	f365 1306 	bfi	r3, r5, #4, #3
 80021f8:	aa02      	add	r2, sp, #8
 80021fa:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80021fe:	2301      	movs	r3, #1
 8002200:	2110      	movs	r1, #16
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff ff8d 	bl	8002122 <lps22hb_write_reg>
 8002208:	4603      	mov	r3, r0
  return ret;
 800220a:	e7ee      	b.n	80021ea <lps22hb_data_rate_set+0x16>

0800220c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 800220c:	b510      	push	{r4, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	460c      	mov	r4, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002212:	2301      	movs	r3, #1
 8002214:	aa01      	add	r2, sp, #4
 8002216:	2110      	movs	r1, #16
 8002218:	f7ff ff7e 	bl	8002118 <lps22hb_read_reg>
  switch (ctrl_reg1.odr){
 800221c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002220:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002224:	2b05      	cmp	r3, #5
 8002226:	d817      	bhi.n	8002258 <lps22hb_data_rate_get+0x4c>
 8002228:	e8df f003 	tbb	[pc, r3]
 800222c:	0d0a0703 	.word	0x0d0a0703
 8002230:	1310      	.short	0x1310
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8002232:	2300      	movs	r3, #0
 8002234:	7023      	strb	r3, [r4, #0]
      *val = LPS22HB_ODR_1_Hz;
      break;
  }

  return ret;
}
 8002236:	b002      	add	sp, #8
 8002238:	bd10      	pop	{r4, pc}
      *val = LPS22HB_ODR_1_Hz;
 800223a:	2301      	movs	r3, #1
 800223c:	7023      	strb	r3, [r4, #0]
      break;
 800223e:	e7fa      	b.n	8002236 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_10_Hz;
 8002240:	2302      	movs	r3, #2
 8002242:	7023      	strb	r3, [r4, #0]
      break;
 8002244:	e7f7      	b.n	8002236 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_25_Hz;
 8002246:	2303      	movs	r3, #3
 8002248:	7023      	strb	r3, [r4, #0]
      break;
 800224a:	e7f4      	b.n	8002236 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_50_Hz;
 800224c:	2304      	movs	r3, #4
 800224e:	7023      	strb	r3, [r4, #0]
      break;
 8002250:	e7f1      	b.n	8002236 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_75_Hz;
 8002252:	2305      	movs	r3, #5
 8002254:	7023      	strb	r3, [r4, #0]
      break;
 8002256:	e7ee      	b.n	8002236 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_1_Hz;
 8002258:	2301      	movs	r3, #1
 800225a:	7023      	strb	r3, [r4, #0]
  return ret;
 800225c:	e7eb      	b.n	8002236 <lps22hb_data_rate_get+0x2a>

0800225e <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800225e:	b508      	push	{r3, lr}
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8002260:	2303      	movs	r3, #3
 8002262:	460a      	mov	r2, r1
 8002264:	2128      	movs	r1, #40	; 0x28
 8002266:	f7ff ff57 	bl	8002118 <lps22hb_read_reg>
  return ret;
}
 800226a:	bd08      	pop	{r3, pc}

0800226c <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800226c:	b508      	push	{r3, lr}
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 800226e:	2302      	movs	r3, #2
 8002270:	460a      	mov	r2, r1
 8002272:	212b      	movs	r1, #43	; 0x2b
 8002274:	f7ff ff50 	bl	8002118 <lps22hb_read_reg>
  return ret;
}
 8002278:	bd08      	pop	{r3, pc}

0800227a <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800227a:	b508      	push	{r3, lr}
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 800227c:	2301      	movs	r3, #1
 800227e:	460a      	mov	r2, r1
 8002280:	210f      	movs	r1, #15
 8002282:	f7ff ff49 	bl	8002118 <lps22hb_read_reg>
  return ret;
}
 8002286:	bd08      	pop	{r3, pc}

08002288 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002288:	b530      	push	{r4, r5, lr}
 800228a:	b083      	sub	sp, #12
 800228c:	4604      	mov	r4, r0
 800228e:	460d      	mov	r5, r1
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8002290:	2301      	movs	r3, #1
 8002292:	aa01      	add	r2, sp, #4
 8002294:	211a      	movs	r1, #26
 8002296:	f7ff ff3f 	bl	8002118 <lps22hb_read_reg>
  if(ret == 0){
 800229a:	4603      	mov	r3, r0
 800229c:	b110      	cbz	r0, 80022a4 <lps22hb_low_power_set+0x1c>
    res_conf.lc_en = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
  }
  return ret;
}
 800229e:	4618      	mov	r0, r3
 80022a0:	b003      	add	sp, #12
 80022a2:	bd30      	pop	{r4, r5, pc}
    res_conf.lc_en = val;
 80022a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022a8:	f365 0300 	bfi	r3, r5, #0, #1
 80022ac:	aa02      	add	r2, sp, #8
 80022ae:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 80022b2:	2301      	movs	r3, #1
 80022b4:	211a      	movs	r1, #26
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff ff33 	bl	8002122 <lps22hb_write_reg>
 80022bc:	4603      	mov	r3, r0
  return ret;
 80022be:	e7ee      	b.n	800229e <lps22hb_low_power_set+0x16>

080022c0 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022c0:	b530      	push	{r4, r5, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80022c8:	2301      	movs	r3, #1
 80022ca:	aa01      	add	r2, sp, #4
 80022cc:	2111      	movs	r1, #17
 80022ce:	f7ff ff23 	bl	8002118 <lps22hb_read_reg>
  if(ret == 0){
 80022d2:	4603      	mov	r3, r0
 80022d4:	b110      	cbz	r0, 80022dc <lps22hb_auto_add_inc_set+0x1c>
    ctrl_reg2.if_add_inc = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	b003      	add	sp, #12
 80022da:	bd30      	pop	{r4, r5, pc}
    ctrl_reg2.if_add_inc = val;
 80022dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022e0:	f365 1304 	bfi	r3, r5, #4, #1
 80022e4:	aa02      	add	r2, sp, #8
 80022e6:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80022ea:	2301      	movs	r3, #1
 80022ec:	2111      	movs	r1, #17
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff ff17 	bl	8002122 <lps22hb_write_reg>
 80022f4:	4603      	mov	r3, r0
  return ret;
 80022f6:	e7ee      	b.n	80022d6 <lps22hb_auto_add_inc_set+0x16>

080022f8 <LSM303AGR_ACC_GetCapabilities>:
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 80022fc:	2000      	movs	r0, #0
 80022fe:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8002300:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002302:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002304:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8002306:	2310      	movs	r3, #16
 8002308:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800230a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800230c:	2300      	movs	r3, #0
 800230e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002310:	4a01      	ldr	r2, [pc, #4]	; (8002318 <LSM303AGR_ACC_GetCapabilities+0x20>)
 8002312:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002314:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 8002316:	4770      	bx	lr
 8002318:	43c80000 	.word	0x43c80000

0800231c <LSM303AGR_MAG_GetCapabilities>:
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800231c:	2000      	movs	r0, #0
 800231e:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 8002320:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 8002326:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002328:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 800232a:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 800232c:	2332      	movs	r3, #50	; 0x32
 800232e:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002330:	2300      	movs	r3, #0
 8002332:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002334:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002336:	4b01      	ldr	r3, [pc, #4]	; (800233c <LSM303AGR_MAG_GetCapabilities+0x20>)
 8002338:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 800233a:	4770      	bx	lr
 800233c:	42c80000 	.word	0x42c80000

08002340 <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002340:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002344:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8002346:	2000      	movs	r0, #0
 8002348:	4770      	bx	lr

0800234a <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 800234a:	2332      	movs	r3, #50	; 0x32
 800234c:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 800234e:	2000      	movs	r0, #0
 8002350:	4770      	bx	lr

08002352 <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
  return LSM303AGR_OK;
}
 8002352:	2000      	movs	r0, #0
 8002354:	4770      	bx	lr
	...

08002358 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800235c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	d926      	bls.n	80023b4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5c>
 8002366:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800236a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	d924      	bls.n	80023be <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002374:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002378:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d91f      	bls.n	80023c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8002382:	eddf 7a13 	vldr	s15, [pc, #76]	; 80023d0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 8002386:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	d91a      	bls.n	80023c6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8002390:	eddf 7a10 	vldr	s15, [pc, #64]	; 80023d4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002394:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	d915      	bls.n	80023ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x72>
 800239e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80023d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x80>
 80023a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d901      	bls.n	80023b0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x58>
 80023ac:	2307      	movs	r3, #7
 80023ae:	e002      	b.n	80023b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5e>
 80023b0:	2306      	movs	r3, #6
 80023b2:	e000      	b.n	80023b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5e>
 80023b4:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80023b6:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
}
 80023ba:	2000      	movs	r0, #0
 80023bc:	4770      	bx	lr
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80023be:	2302      	movs	r3, #2
 80023c0:	e7f9      	b.n	80023b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5e>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e7f7      	b.n	80023b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5e>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e7f5      	b.n	80023b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5e>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e7f3      	b.n	80023b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5e>
 80023ce:	bf00      	nop
 80023d0:	42480000 	.word	0x42480000
 80023d4:	42c80000 	.word	0x42c80000
 80023d8:	43480000 	.word	0x43480000

080023dc <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023dc:	b510      	push	{r4, lr}
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80023de:	6884      	ldr	r4, [r0, #8]
 80023e0:	b12c      	cbz	r4, 80023ee <ReadAccRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80023e2:	6944      	ldr	r4, [r0, #20]
 80023e4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80023e8:	7b00      	ldrb	r0, [r0, #12]
 80023ea:	47a0      	blx	r4
  }
}
 80023ec:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80023ee:	6944      	ldr	r4, [r0, #20]
 80023f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80023f4:	7b00      	ldrb	r0, [r0, #12]
 80023f6:	47a0      	blx	r4
 80023f8:	e7f8      	b.n	80023ec <ReadAccRegWrap+0x10>

080023fa <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023fa:	b510      	push	{r4, lr}
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80023fc:	6884      	ldr	r4, [r0, #8]
 80023fe:	b12c      	cbz	r4, 800240c <WriteAccRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002400:	6904      	ldr	r4, [r0, #16]
 8002402:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002406:	7b00      	ldrb	r0, [r0, #12]
 8002408:	47a0      	blx	r4
  }
}
 800240a:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800240c:	6904      	ldr	r4, [r0, #16]
 800240e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002412:	7b00      	ldrb	r0, [r0, #12]
 8002414:	47a0      	blx	r4
 8002416:	e7f8      	b.n	800240a <WriteAccRegWrap+0x10>

08002418 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002418:	b510      	push	{r4, lr}
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800241a:	6884      	ldr	r4, [r0, #8]
 800241c:	b12c      	cbz	r4, 800242a <ReadMagRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800241e:	6944      	ldr	r4, [r0, #20]
 8002420:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002424:	7b00      	ldrb	r0, [r0, #12]
 8002426:	47a0      	blx	r4
  }
}
 8002428:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800242a:	6944      	ldr	r4, [r0, #20]
 800242c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002430:	7b00      	ldrb	r0, [r0, #12]
 8002432:	47a0      	blx	r4
 8002434:	e7f8      	b.n	8002428 <ReadMagRegWrap+0x10>

08002436 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002436:	b510      	push	{r4, lr}
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002438:	6884      	ldr	r4, [r0, #8]
 800243a:	b12c      	cbz	r4, 8002448 <WriteMagRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800243c:	6904      	ldr	r4, [r0, #16]
 800243e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002442:	7b00      	ldrb	r0, [r0, #12]
 8002444:	47a0      	blx	r4
  }
}
 8002446:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002448:	6904      	ldr	r4, [r0, #16]
 800244a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800244e:	7b00      	ldrb	r0, [r0, #12]
 8002450:	47a0      	blx	r4
 8002452:	e7f8      	b.n	8002446 <WriteMagRegWrap+0x10>

08002454 <LSM303AGR_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002454:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002458:	2b01      	cmp	r3, #1
 800245a:	d00d      	beq.n	8002478 <LSM303AGR_ACC_Enable+0x24>
{
 800245c:	b510      	push	{r4, lr}
 800245e:	4604      	mov	r4, r0
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002460:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8002464:	301c      	adds	r0, #28
 8002466:	f000 fca9 	bl	8002dbc <lsm303agr_xl_data_rate_set>
 800246a:	4603      	mov	r3, r0
 800246c:	b938      	cbnz	r0, 800247e <LSM303AGR_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 800246e:	2201      	movs	r2, #1
 8002470:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	4770      	bx	lr
    return LSM303AGR_ERROR;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	e7f7      	b.n	8002474 <LSM303AGR_ACC_Enable+0x20>

08002484 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
{
 8002484:	b508      	push	{r3, lr}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002486:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800248a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	d924      	bls.n	80024de <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8002494:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002498:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	d925      	bls.n	80024ee <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6a>
 80024a2:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80024a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	d920      	bls.n	80024f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6e>
 80024b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002508 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x84>
 80024b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d91b      	bls.n	80024f6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x72>
 80024be:	eddf 7a13 	vldr	s15, [pc, #76]	; 800250c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x88>
 80024c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	d916      	bls.n	80024fa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x76>
 80024cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002510 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x8c>
 80024d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	d811      	bhi.n	80024fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80024da:	2106      	movs	r1, #6
 80024dc:	e000      	b.n	80024e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 80024de:	2101      	movs	r1, #1
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80024e0:	301c      	adds	r0, #28
 80024e2:	f000 fc6b 	bl	8002dbc <lsm303agr_xl_data_rate_set>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b958      	cbnz	r0, 8002502 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7e>
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd08      	pop	{r3, pc}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80024ee:	2102      	movs	r1, #2
 80024f0:	e7f6      	b.n	80024e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 80024f2:	2103      	movs	r1, #3
 80024f4:	e7f4      	b.n	80024e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 80024f6:	2104      	movs	r1, #4
 80024f8:	e7f2      	b.n	80024e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 80024fa:	2105      	movs	r1, #5
 80024fc:	e7f0      	b.n	80024e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 80024fe:	2107      	movs	r1, #7
 8002500:	e7ee      	b.n	80024e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
    return LSM303AGR_ERROR;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e7f0      	b.n	80024ea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x66>
 8002508:	42480000 	.word	0x42480000
 800250c:	42c80000 	.word	0x42c80000
 8002510:	43480000 	.word	0x43480000

08002514 <LSM303AGR_ACC_SetOutputDataRate>:
{
 8002514:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8002516:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800251a:	2b01      	cmp	r3, #1
 800251c:	d004      	beq.n	8002528 <LSM303AGR_ACC_SetOutputDataRate+0x14>
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800251e:	ee00 1a10 	vmov	s0, r1
 8002522:	f7ff ff19 	bl	8002358 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
}
 8002526:	bd08      	pop	{r3, pc}
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002528:	ee00 1a10 	vmov	s0, r1
 800252c:	f7ff ffaa 	bl	8002484 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002530:	e7f9      	b.n	8002526 <LSM303AGR_ACC_SetOutputDataRate+0x12>

08002532 <LSM303AGR_ACC_Init>:
{
 8002532:	b538      	push	{r3, r4, r5, lr}
 8002534:	4605      	mov	r5, r0
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002536:	f100 041c 	add.w	r4, r0, #28
 800253a:	2101      	movs	r1, #1
 800253c:	4620      	mov	r0, r4
 800253e:	f000 fccd 	bl	8002edc <lsm303agr_xl_block_data_update_set>
 8002542:	b9b8      	cbnz	r0, 8002574 <LSM303AGR_ACC_Init+0x42>
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002544:	2100      	movs	r1, #0
 8002546:	4620      	mov	r0, r4
 8002548:	f000 fd92 	bl	8003070 <lsm303agr_xl_fifo_mode_set>
 800254c:	b9a8      	cbnz	r0, 800257a <LSM303AGR_ACC_Init+0x48>
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 800254e:	2305      	movs	r3, #5
 8002550:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002554:	2100      	movs	r1, #0
 8002556:	4620      	mov	r0, r4
 8002558:	f000 fc30 	bl	8002dbc <lsm303agr_xl_data_rate_set>
 800255c:	b980      	cbnz	r0, 8002580 <LSM303AGR_ACC_Init+0x4e>
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	4620      	mov	r0, r4
 8002562:	f000 fc7d 	bl	8002e60 <lsm303agr_xl_full_scale_set>
 8002566:	4603      	mov	r3, r0
 8002568:	b968      	cbnz	r0, 8002586 <LSM303AGR_ACC_Init+0x54>
  pObj->is_initialized = 1;
 800256a:	2201      	movs	r2, #1
 800256c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd38      	pop	{r3, r4, r5, pc}
    return LSM303AGR_ERROR;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	e7fa      	b.n	8002570 <LSM303AGR_ACC_Init+0x3e>
    return LSM303AGR_ERROR;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e7f7      	b.n	8002570 <LSM303AGR_ACC_Init+0x3e>
    return LSM303AGR_ERROR;
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	e7f4      	b.n	8002570 <LSM303AGR_ACC_Init+0x3e>
    return LSM303AGR_ERROR;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e7f1      	b.n	8002570 <LSM303AGR_ACC_Init+0x3e>

0800258c <LSM303AGR_ACC_SetFullScale>:
{
 800258c:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM303AGR_4g
 800258e:	2902      	cmp	r1, #2
 8002590:	dd05      	ble.n	800259e <LSM303AGR_ACC_SetFullScale+0x12>
 8002592:	2904      	cmp	r1, #4
 8002594:	dd0b      	ble.n	80025ae <LSM303AGR_ACC_SetFullScale+0x22>
 8002596:	2908      	cmp	r1, #8
 8002598:	dc0b      	bgt.n	80025b2 <LSM303AGR_ACC_SetFullScale+0x26>
 800259a:	2102      	movs	r1, #2
 800259c:	e000      	b.n	80025a0 <LSM303AGR_ACC_SetFullScale+0x14>
 800259e:	2100      	movs	r1, #0
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 80025a0:	301c      	adds	r0, #28
 80025a2:	f000 fc5d 	bl	8002e60 <lsm303agr_xl_full_scale_set>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b928      	cbnz	r0, 80025b6 <LSM303AGR_ACC_SetFullScale+0x2a>
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM303AGR_4g
 80025ae:	2101      	movs	r1, #1
 80025b0:	e7f6      	b.n	80025a0 <LSM303AGR_ACC_SetFullScale+0x14>
 80025b2:	2103      	movs	r1, #3
 80025b4:	e7f4      	b.n	80025a0 <LSM303AGR_ACC_SetFullScale+0x14>
    return LSM303AGR_ERROR;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e7f6      	b.n	80025aa <LSM303AGR_ACC_SetFullScale+0x1e>

080025bc <LSM303AGR_ACC_ReadID>:
{
 80025bc:	b508      	push	{r3, lr}
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80025be:	301c      	adds	r0, #28
 80025c0:	f000 fd2c 	bl	800301c <lsm303agr_xl_device_id_get>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b908      	cbnz	r0, 80025cc <LSM303AGR_ACC_ReadID+0x10>
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd08      	pop	{r3, pc}
    return LSM303AGR_ERROR;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	e7fa      	b.n	80025c8 <LSM303AGR_ACC_ReadID+0xc>

080025d2 <LSM303AGR_ACC_Disable>:
{
 80025d2:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 80025d4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80025d8:	b913      	cbnz	r3, 80025e0 <LSM303AGR_ACC_Disable+0xe>
    return LSM303AGR_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	4604      	mov	r4, r0
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80025e2:	f100 051c 	add.w	r5, r0, #28
 80025e6:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 80025ea:	4628      	mov	r0, r5
 80025ec:	f000 fc02 	bl	8002df4 <lsm303agr_xl_data_rate_get>
 80025f0:	b948      	cbnz	r0, 8002606 <LSM303AGR_ACC_Disable+0x34>
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80025f2:	2100      	movs	r1, #0
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 fbe1 	bl	8002dbc <lsm303agr_xl_data_rate_set>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b930      	cbnz	r0, 800260c <LSM303AGR_ACC_Disable+0x3a>
  pObj->acc_is_enabled = 0;
 80025fe:	2200      	movs	r2, #0
 8002600:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  return LSM303AGR_OK;
 8002604:	e7ea      	b.n	80025dc <LSM303AGR_ACC_Disable+0xa>
    return LSM303AGR_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e7e7      	b.n	80025dc <LSM303AGR_ACC_Disable+0xa>
    return LSM303AGR_ERROR;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	e7e4      	b.n	80025dc <LSM303AGR_ACC_Disable+0xa>

08002612 <LSM303AGR_ACC_DeInit>:
{
 8002612:	b510      	push	{r4, lr}
 8002614:	4604      	mov	r4, r0
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002616:	f7ff ffdc 	bl	80025d2 <LSM303AGR_ACC_Disable>
 800261a:	b938      	cbnz	r0, 800262c <LSM303AGR_ACC_DeInit+0x1a>
 800261c:	4602      	mov	r2, r0
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800261e:	2300      	movs	r3, #0
 8002620:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002624:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8002628:	4610      	mov	r0, r2
 800262a:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	e7fa      	b.n	8002628 <LSM303AGR_ACC_DeInit+0x16>
	...

08002634 <LSM303AGR_ACC_GetOutputDataRate>:
{
 8002634:	b530      	push	{r4, r5, lr}
 8002636:	b083      	sub	sp, #12
 8002638:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800263a:	f100 041c 	add.w	r4, r0, #28
 800263e:	f10d 0107 	add.w	r1, sp, #7
 8002642:	4620      	mov	r0, r4
 8002644:	f000 fb92 	bl	8002d6c <lsm303agr_xl_operating_mode_get>
 8002648:	2800      	cmp	r0, #0
 800264a:	d15e      	bne.n	800270a <LSM303AGR_ACC_GetOutputDataRate+0xd6>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800264c:	f10d 0106 	add.w	r1, sp, #6
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fbcf 	bl	8002df4 <lsm303agr_xl_data_rate_get>
 8002656:	4603      	mov	r3, r0
 8002658:	2800      	cmp	r0, #0
 800265a:	d159      	bne.n	8002710 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800265c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002660:	2a02      	cmp	r2, #2
 8002662:	d00a      	beq.n	800267a <LSM303AGR_ACC_GetOutputDataRate+0x46>
    switch (odr_low_level)
 8002664:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002668:	2a09      	cmp	r2, #9
 800266a:	d857      	bhi.n	800271c <LSM303AGR_ACC_GetOutputDataRate+0xe8>
 800266c:	e8df f002 	tbb	[pc, r2]
 8002670:	3b38342f 	.word	0x3b38342f
 8002674:	4744413e 	.word	0x4744413e
 8002678:	4a56      	.short	0x4a56
    switch (odr_low_level)
 800267a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800267e:	2a09      	cmp	r2, #9
 8002680:	d849      	bhi.n	8002716 <LSM303AGR_ACC_GetOutputDataRate+0xe2>
 8002682:	e8df f002 	tbb	[pc, r2]
 8002686:	0805      	.short	0x0805
 8002688:	15120f0c 	.word	0x15120f0c
 800268c:	211e1b18 	.word	0x211e1b18
        *Odr = 0.0f;
 8002690:	2200      	movs	r2, #0
 8002692:	602a      	str	r2, [r5, #0]
        break;
 8002694:	e01d      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 1.0f;
 8002696:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800269a:	602a      	str	r2, [r5, #0]
        break;
 800269c:	e019      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 10.0f;
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 80026a0:	602a      	str	r2, [r5, #0]
        break;
 80026a2:	e016      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 25.0f;
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 80026a6:	602a      	str	r2, [r5, #0]
        break;
 80026a8:	e013      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 50.0f;
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 80026ac:	602a      	str	r2, [r5, #0]
        break;
 80026ae:	e010      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 100.0f;
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 80026b2:	602a      	str	r2, [r5, #0]
        break;
 80026b4:	e00d      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 200.0f;
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 80026b8:	602a      	str	r2, [r5, #0]
        break;
 80026ba:	e00a      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 400.0f;
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 80026be:	602a      	str	r2, [r5, #0]
        break;
 80026c0:	e007      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 1620.0f;
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <LSM303AGR_ACC_GetOutputDataRate+0x108>)
 80026c4:	602a      	str	r2, [r5, #0]
        break;
 80026c6:	e004      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 5376.0f;
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <LSM303AGR_ACC_GetOutputDataRate+0x10c>)
 80026ca:	602a      	str	r2, [r5, #0]
        break;
 80026cc:	e001      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 0.0f;
 80026ce:	2200      	movs	r2, #0
 80026d0:	602a      	str	r2, [r5, #0]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	b003      	add	sp, #12
 80026d6:	bd30      	pop	{r4, r5, pc}
        *Odr = 1.0f;
 80026d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026dc:	602a      	str	r2, [r5, #0]
        break;
 80026de:	e7f8      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 10.0f;
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 80026e2:	602a      	str	r2, [r5, #0]
        break;
 80026e4:	e7f5      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 25.0f;
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 80026e8:	602a      	str	r2, [r5, #0]
        break;
 80026ea:	e7f2      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 50.0f;
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 80026ee:	602a      	str	r2, [r5, #0]
        break;
 80026f0:	e7ef      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 100.0f;
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 80026f4:	602a      	str	r2, [r5, #0]
        break;
 80026f6:	e7ec      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 200.0f;
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 80026fa:	602a      	str	r2, [r5, #0]
        break;
 80026fc:	e7e9      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 400.0f;
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 8002700:	602a      	str	r2, [r5, #0]
        break;
 8002702:	e7e6      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        *Odr = 1344.0f;
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <LSM303AGR_ACC_GetOutputDataRate+0x110>)
 8002706:	602a      	str	r2, [r5, #0]
        break;
 8002708:	e7e3      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
    return LSM303AGR_ERROR;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e7e0      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
    return LSM303AGR_ERROR;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e7dd      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        ret = LSM303AGR_ERROR;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	e7da      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
        ret = LSM303AGR_ERROR;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	e7d7      	b.n	80026d2 <LSM303AGR_ACC_GetOutputDataRate+0x9e>
 8002722:	bf00      	nop
 8002724:	41200000 	.word	0x41200000
 8002728:	41c80000 	.word	0x41c80000
 800272c:	42480000 	.word	0x42480000
 8002730:	42c80000 	.word	0x42c80000
 8002734:	43480000 	.word	0x43480000
 8002738:	43c80000 	.word	0x43c80000
 800273c:	44ca8000 	.word	0x44ca8000
 8002740:	45a80000 	.word	0x45a80000
 8002744:	44a80000 	.word	0x44a80000

08002748 <LSM303AGR_ACC_GetSensitivityHR>:
{
 8002748:	b510      	push	{r4, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800274e:	f10d 0107 	add.w	r1, sp, #7
 8002752:	301c      	adds	r0, #28
 8002754:	f000 fba0 	bl	8002e98 <lsm303agr_xl_full_scale_get>
 8002758:	b9b0      	cbnz	r0, 8002788 <LSM303AGR_ACC_GetSensitivityHR+0x40>
 800275a:	4602      	mov	r2, r0
  switch (fullscale)
 800275c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d814      	bhi.n	800278e <LSM303AGR_ACC_GetSensitivityHR+0x46>
 8002764:	e8df f003 	tbb	[pc, r3]
 8002768:	0d0a0702 	.word	0x0d0a0702
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <LSM303AGR_ACC_GetSensitivityHR+0x4c>)
 800276e:	6023      	str	r3, [r4, #0]
}
 8002770:	4610      	mov	r0, r2
 8002772:	b002      	add	sp, #8
 8002774:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <LSM303AGR_ACC_GetSensitivityHR+0x50>)
 8002778:	6023      	str	r3, [r4, #0]
      break;
 800277a:	e7f9      	b.n	8002770 <LSM303AGR_ACC_GetSensitivityHR+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <LSM303AGR_ACC_GetSensitivityHR+0x54>)
 800277e:	6023      	str	r3, [r4, #0]
      break;
 8002780:	e7f6      	b.n	8002770 <LSM303AGR_ACC_GetSensitivityHR+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <LSM303AGR_ACC_GetSensitivityHR+0x58>)
 8002784:	6023      	str	r3, [r4, #0]
      break;
 8002786:	e7f3      	b.n	8002770 <LSM303AGR_ACC_GetSensitivityHR+0x28>
    return LSM303AGR_ERROR;
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	e7f0      	b.n	8002770 <LSM303AGR_ACC_GetSensitivityHR+0x28>
      ret = LSM303AGR_ERROR;
 800278e:	f04f 32ff 	mov.w	r2, #4294967295
 8002792:	e7ed      	b.n	8002770 <LSM303AGR_ACC_GetSensitivityHR+0x28>
 8002794:	3f7ae148 	.word	0x3f7ae148
 8002798:	3ff9999a 	.word	0x3ff9999a
 800279c:	4079999a 	.word	0x4079999a
 80027a0:	413b851f 	.word	0x413b851f

080027a4 <LSM303AGR_ACC_GetSensitivityNM>:
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80027aa:	f10d 0107 	add.w	r1, sp, #7
 80027ae:	301c      	adds	r0, #28
 80027b0:	f000 fb72 	bl	8002e98 <lsm303agr_xl_full_scale_get>
 80027b4:	b9b0      	cbnz	r0, 80027e4 <LSM303AGR_ACC_GetSensitivityNM+0x40>
 80027b6:	4602      	mov	r2, r0
  switch (fullscale)
 80027b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d814      	bhi.n	80027ea <LSM303AGR_ACC_GetSensitivityNM+0x46>
 80027c0:	e8df f003 	tbb	[pc, r3]
 80027c4:	0d0a0702 	.word	0x0d0a0702
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <LSM303AGR_ACC_GetSensitivityNM+0x4c>)
 80027ca:	6023      	str	r3, [r4, #0]
}
 80027cc:	4610      	mov	r0, r2
 80027ce:	b002      	add	sp, #8
 80027d0:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <LSM303AGR_ACC_GetSensitivityNM+0x50>)
 80027d4:	6023      	str	r3, [r4, #0]
      break;
 80027d6:	e7f9      	b.n	80027cc <LSM303AGR_ACC_GetSensitivityNM+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <LSM303AGR_ACC_GetSensitivityNM+0x54>)
 80027da:	6023      	str	r3, [r4, #0]
      break;
 80027dc:	e7f6      	b.n	80027cc <LSM303AGR_ACC_GetSensitivityNM+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <LSM303AGR_ACC_GetSensitivityNM+0x58>)
 80027e0:	6023      	str	r3, [r4, #0]
      break;
 80027e2:	e7f3      	b.n	80027cc <LSM303AGR_ACC_GetSensitivityNM+0x28>
    return LSM303AGR_ERROR;
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	e7f0      	b.n	80027cc <LSM303AGR_ACC_GetSensitivityNM+0x28>
      ret = LSM303AGR_ERROR;
 80027ea:	f04f 32ff 	mov.w	r2, #4294967295
 80027ee:	e7ed      	b.n	80027cc <LSM303AGR_ACC_GetSensitivityNM+0x28>
 80027f0:	4079999a 	.word	0x4079999a
 80027f4:	40fa3d71 	.word	0x40fa3d71
 80027f8:	417a147b 	.word	0x417a147b
 80027fc:	423b999a 	.word	0x423b999a

08002800 <LSM303AGR_ACC_GetSensitivityLP>:
{
 8002800:	b510      	push	{r4, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002806:	f10d 0107 	add.w	r1, sp, #7
 800280a:	301c      	adds	r0, #28
 800280c:	f000 fb44 	bl	8002e98 <lsm303agr_xl_full_scale_get>
 8002810:	b9b0      	cbnz	r0, 8002840 <LSM303AGR_ACC_GetSensitivityLP+0x40>
 8002812:	4602      	mov	r2, r0
  switch (fullscale)
 8002814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d814      	bhi.n	8002846 <LSM303AGR_ACC_GetSensitivityLP+0x46>
 800281c:	e8df f003 	tbb	[pc, r3]
 8002820:	0d0a0702 	.word	0x0d0a0702
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <LSM303AGR_ACC_GetSensitivityLP+0x4c>)
 8002826:	6023      	str	r3, [r4, #0]
}
 8002828:	4610      	mov	r0, r2
 800282a:	b002      	add	sp, #8
 800282c:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <LSM303AGR_ACC_GetSensitivityLP+0x50>)
 8002830:	6023      	str	r3, [r4, #0]
      break;
 8002832:	e7f9      	b.n	8002828 <LSM303AGR_ACC_GetSensitivityLP+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <LSM303AGR_ACC_GetSensitivityLP+0x54>)
 8002836:	6023      	str	r3, [r4, #0]
      break;
 8002838:	e7f6      	b.n	8002828 <LSM303AGR_ACC_GetSensitivityLP+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <LSM303AGR_ACC_GetSensitivityLP+0x58>)
 800283c:	6023      	str	r3, [r4, #0]
      break;
 800283e:	e7f3      	b.n	8002828 <LSM303AGR_ACC_GetSensitivityLP+0x28>
    return LSM303AGR_ERROR;
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	e7f0      	b.n	8002828 <LSM303AGR_ACC_GetSensitivityLP+0x28>
      ret = LSM303AGR_ERROR;
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	e7ed      	b.n	8002828 <LSM303AGR_ACC_GetSensitivityLP+0x28>
 800284c:	417a147b 	.word	0x417a147b
 8002850:	41fa147b 	.word	0x41fa147b
 8002854:	427a147b 	.word	0x427a147b
 8002858:	433b947b 	.word	0x433b947b

0800285c <LSM303AGR_ACC_GetSensitivity>:
{
 800285c:	b530      	push	{r4, r5, lr}
 800285e:	b083      	sub	sp, #12
 8002860:	4604      	mov	r4, r0
 8002862:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002864:	f10d 0107 	add.w	r1, sp, #7
 8002868:	301c      	adds	r0, #28
 800286a:	f000 fa7f 	bl	8002d6c <lsm303agr_xl_operating_mode_get>
 800286e:	bb48      	cbnz	r0, 80028c4 <LSM303AGR_ACC_GetSensitivity+0x68>
  switch (op_mode)
 8002870:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d011      	beq.n	800289c <LSM303AGR_ACC_GetSensitivity+0x40>
 8002878:	b133      	cbz	r3, 8002888 <LSM303AGR_ACC_GetSensitivity+0x2c>
 800287a:	2b02      	cmp	r3, #2
 800287c:	d018      	beq.n	80028b0 <LSM303AGR_ACC_GetSensitivity+0x54>
      ret = LSM303AGR_ERROR;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002882:	4618      	mov	r0, r3
 8002884:	b003      	add	sp, #12
 8002886:	bd30      	pop	{r4, r5, pc}
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002888:	4629      	mov	r1, r5
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ff5c 	bl	8002748 <LSM303AGR_ACC_GetSensitivityHR>
 8002890:	4603      	mov	r3, r0
 8002892:	2800      	cmp	r0, #0
 8002894:	d0f5      	beq.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e7f2      	b.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800289c:	4629      	mov	r1, r5
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ff80 	bl	80027a4 <LSM303AGR_ACC_GetSensitivityNM>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d0eb      	beq.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	e7e8      	b.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80028b0:	4629      	mov	r1, r5
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff ffa4 	bl	8002800 <LSM303AGR_ACC_GetSensitivityLP>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d0e1      	beq.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	e7de      	b.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>
    return LSM303AGR_ERROR;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	e7db      	b.n	8002882 <LSM303AGR_ACC_GetSensitivity+0x26>

080028ca <LSM303AGR_ACC_GetFullScale>:
{
 80028ca:	b510      	push	{r4, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80028d0:	f10d 0107 	add.w	r1, sp, #7
 80028d4:	301c      	adds	r0, #28
 80028d6:	f000 fadf 	bl	8002e98 <lsm303agr_xl_full_scale_get>
 80028da:	b9b0      	cbnz	r0, 800290a <LSM303AGR_ACC_GetFullScale+0x40>
 80028dc:	4602      	mov	r2, r0
  switch (fs_low_level)
 80028de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d814      	bhi.n	8002910 <LSM303AGR_ACC_GetFullScale+0x46>
 80028e6:	e8df f003 	tbb	[pc, r3]
 80028ea:	0702      	.short	0x0702
 80028ec:	0d0a      	.short	0x0d0a
      *FullScale =  2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	6023      	str	r3, [r4, #0]
}
 80028f2:	4610      	mov	r0, r2
 80028f4:	b002      	add	sp, #8
 80028f6:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 80028f8:	2304      	movs	r3, #4
 80028fa:	6023      	str	r3, [r4, #0]
      break;
 80028fc:	e7f9      	b.n	80028f2 <LSM303AGR_ACC_GetFullScale+0x28>
      *FullScale =  8;
 80028fe:	2308      	movs	r3, #8
 8002900:	6023      	str	r3, [r4, #0]
      break;
 8002902:	e7f6      	b.n	80028f2 <LSM303AGR_ACC_GetFullScale+0x28>
      *FullScale = 16;
 8002904:	2310      	movs	r3, #16
 8002906:	6023      	str	r3, [r4, #0]
      break;
 8002908:	e7f3      	b.n	80028f2 <LSM303AGR_ACC_GetFullScale+0x28>
    return LSM303AGR_ERROR;
 800290a:	f04f 32ff 	mov.w	r2, #4294967295
 800290e:	e7f0      	b.n	80028f2 <LSM303AGR_ACC_GetFullScale+0x28>
      ret = LSM303AGR_ERROR;
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	e7ed      	b.n	80028f2 <LSM303AGR_ACC_GetFullScale+0x28>

08002916 <LSM303AGR_ACC_GetAxesRaw>:
{
 8002916:	b570      	push	{r4, r5, r6, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800291c:	f100 061c 	add.w	r6, r0, #28
 8002920:	f10d 0107 	add.w	r1, sp, #7
 8002924:	4630      	mov	r0, r6
 8002926:	f000 fa21 	bl	8002d6c <lsm303agr_xl_operating_mode_get>
 800292a:	bb38      	cbnz	r0, 800297c <LSM303AGR_ACC_GetAxesRaw+0x66>
  switch (op_mode)
 800292c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d01e      	beq.n	8002972 <LSM303AGR_ACC_GetAxesRaw+0x5c>
 8002934:	b123      	cbz	r3, 8002940 <LSM303AGR_ACC_GetAxesRaw+0x2a>
 8002936:	2b02      	cmp	r3, #2
 8002938:	d01d      	beq.n	8002976 <LSM303AGR_ACC_GetAxesRaw+0x60>
      ret = LSM303AGR_ERROR;
 800293a:	f04f 32ff 	mov.w	r2, #4294967295
 800293e:	e015      	b.n	800296c <LSM303AGR_ACC_GetAxesRaw+0x56>
      divisor = 16;
 8002940:	2510      	movs	r5, #16
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002942:	a902      	add	r1, sp, #8
 8002944:	4630      	mov	r0, r6
 8002946:	f000 fae5 	bl	8002f14 <lsm303agr_acceleration_raw_get>
 800294a:	4602      	mov	r2, r0
 800294c:	b9c8      	cbnz	r0, 8002982 <LSM303AGR_ACC_GetAxesRaw+0x6c>
  Value->x = (data_raw.i16bit[0] / divisor);
 800294e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002952:	fb93 f3f5 	sdiv	r3, r3, r5
 8002956:	8023      	strh	r3, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002958:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800295c:	fb93 f3f5 	sdiv	r3, r3, r5
 8002960:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002962:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002966:	fb93 f5f5 	sdiv	r5, r3, r5
 800296a:	80a5      	strh	r5, [r4, #4]
}
 800296c:	4610      	mov	r0, r2
 800296e:	b004      	add	sp, #16
 8002970:	bd70      	pop	{r4, r5, r6, pc}
      divisor = 64;
 8002972:	2540      	movs	r5, #64	; 0x40
 8002974:	e7e5      	b.n	8002942 <LSM303AGR_ACC_GetAxesRaw+0x2c>
      divisor = 256;
 8002976:	f44f 7580 	mov.w	r5, #256	; 0x100
 800297a:	e7e2      	b.n	8002942 <LSM303AGR_ACC_GetAxesRaw+0x2c>
    return LSM303AGR_ERROR;
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	e7f4      	b.n	800296c <LSM303AGR_ACC_GetAxesRaw+0x56>
    return LSM303AGR_ERROR;
 8002982:	f04f 32ff 	mov.w	r2, #4294967295
 8002986:	e7f1      	b.n	800296c <LSM303AGR_ACC_GetAxesRaw+0x56>

08002988 <LSM303AGR_ACC_GetAxes>:
{
 8002988:	b530      	push	{r4, r5, lr}
 800298a:	b085      	sub	sp, #20
 800298c:	4605      	mov	r5, r0
 800298e:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8002990:	2300      	movs	r3, #0
 8002992:	9301      	str	r3, [sp, #4]
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002994:	a902      	add	r1, sp, #8
 8002996:	f7ff ffbe 	bl	8002916 <LSM303AGR_ACC_GetAxesRaw>
 800299a:	bb70      	cbnz	r0, 80029fa <LSM303AGR_ACC_GetAxes+0x72>
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800299c:	a901      	add	r1, sp, #4
 800299e:	4628      	mov	r0, r5
 80029a0:	f7ff ff5c 	bl	800285c <LSM303AGR_ACC_GetSensitivity>
 80029a4:	4603      	mov	r3, r0
 80029a6:	bb58      	cbnz	r0, 8002a00 <LSM303AGR_ACC_GetAxes+0x78>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80029a8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80029ac:	ee07 2a10 	vmov	s14, r2
 80029b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029b4:	eddd 7a01 	vldr	s15, [sp, #4]
 80029b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80029c0:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80029c4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80029c8:	ee07 2a10 	vmov	s14, r2
 80029cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80029d8:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80029dc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80029e0:	ee07 2a10 	vmov	s14, r2
 80029e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f0:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	b005      	add	sp, #20
 80029f8:	bd30      	pop	{r4, r5, pc}
    return LSM303AGR_ERROR;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	e7f9      	b.n	80029f4 <LSM303AGR_ACC_GetAxes+0x6c>
    return LSM303AGR_ERROR;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	e7f6      	b.n	80029f4 <LSM303AGR_ACC_GetAxes+0x6c>

08002a06 <LSM303AGR_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002a06:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d00c      	beq.n	8002a28 <LSM303AGR_MAG_Enable+0x22>
{
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	4604      	mov	r4, r0
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002a12:	2100      	movs	r1, #0
 8002a14:	301c      	adds	r0, #28
 8002a16:	f000 fa84 	bl	8002f22 <lsm303agr_mag_operating_mode_set>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b938      	cbnz	r0, 8002a2e <LSM303AGR_MAG_Enable+0x28>
  pObj->mag_is_enabled = 1;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4770      	bx	lr
    return LSM303AGR_ERROR;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	e7f7      	b.n	8002a24 <LSM303AGR_MAG_Enable+0x1e>

08002a34 <LSM303AGR_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8002a34:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002a38:	b913      	cbnz	r3, 8002a40 <LSM303AGR_MAG_Disable+0xc>
    return LSM303AGR_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	4770      	bx	lr
{
 8002a40:	b510      	push	{r4, lr}
 8002a42:	4604      	mov	r4, r0
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002a44:	2102      	movs	r1, #2
 8002a46:	301c      	adds	r0, #28
 8002a48:	f000 fa6b 	bl	8002f22 <lsm303agr_mag_operating_mode_set>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b920      	cbnz	r0, 8002a5a <LSM303AGR_MAG_Disable+0x26>
  pObj->mag_is_enabled = 0;
 8002a50:	2200      	movs	r2, #0
 8002a52:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e7fa      	b.n	8002a56 <LSM303AGR_MAG_Disable+0x22>

08002a60 <LSM303AGR_MAG_DeInit>:
{
 8002a60:	b510      	push	{r4, lr}
 8002a62:	4604      	mov	r4, r0
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002a64:	f7ff ffe6 	bl	8002a34 <LSM303AGR_MAG_Disable>
 8002a68:	b928      	cbnz	r0, 8002a76 <LSM303AGR_MAG_DeInit+0x16>
 8002a6a:	4603      	mov	r3, r0
  pObj->is_initialized = 0;
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e7fa      	b.n	8002a72 <LSM303AGR_MAG_DeInit+0x12>

08002a7c <LSM303AGR_MAG_SetOutputDataRate>:
{
 8002a7c:	b508      	push	{r3, lr}
 8002a7e:	ee07 1a90 	vmov	s15, r1
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002a82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	d90f      	bls.n	8002ab0 <LSM303AGR_MAG_SetOutputDataRate+0x34>
 8002a90:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	d910      	bls.n	8002ac0 <LSM303AGR_MAG_SetOutputDataRate+0x44>
 8002a9e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002ad0 <LSM303AGR_MAG_SetOutputDataRate+0x54>
 8002aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	d80b      	bhi.n	8002ac4 <LSM303AGR_MAG_SetOutputDataRate+0x48>
 8002aac:	2102      	movs	r1, #2
 8002aae:	e000      	b.n	8002ab2 <LSM303AGR_MAG_SetOutputDataRate+0x36>
 8002ab0:	2100      	movs	r1, #0
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002ab2:	301c      	adds	r0, #28
 8002ab4:	f000 fa51 	bl	8002f5a <lsm303agr_mag_data_rate_set>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b928      	cbnz	r0, 8002ac8 <LSM303AGR_MAG_SetOutputDataRate+0x4c>
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	e7f6      	b.n	8002ab2 <LSM303AGR_MAG_SetOutputDataRate+0x36>
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	e7f4      	b.n	8002ab2 <LSM303AGR_MAG_SetOutputDataRate+0x36>
    return LSM303AGR_ERROR;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	e7f6      	b.n	8002abc <LSM303AGR_MAG_SetOutputDataRate+0x40>
 8002ace:	bf00      	nop
 8002ad0:	42480000 	.word	0x42480000

08002ad4 <LSM303AGR_MAG_Init>:
{
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4605      	mov	r5, r0
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002ad8:	f100 041c 	add.w	r4, r0, #28
 8002adc:	2101      	movs	r1, #1
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f000 fa79 	bl	8002fd6 <lsm303agr_mag_block_data_update_set>
 8002ae4:	b9a0      	cbnz	r0, 8002b10 <LSM303AGR_MAG_Init+0x3c>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f000 fa1a 	bl	8002f22 <lsm303agr_mag_operating_mode_set>
 8002aee:	b990      	cbnz	r0, 8002b16 <LSM303AGR_MAG_Init+0x42>
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002af0:	2103      	movs	r1, #3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f000 fa31 	bl	8002f5a <lsm303agr_mag_data_rate_set>
 8002af8:	b980      	cbnz	r0, 8002b1c <LSM303AGR_MAG_Init+0x48>
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002afa:	2100      	movs	r1, #0
 8002afc:	4620      	mov	r0, r4
 8002afe:	f000 fa9b 	bl	8003038 <lsm303agr_mag_self_test_set>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b968      	cbnz	r0, 8002b22 <LSM303AGR_MAG_Init+0x4e>
  pObj->is_initialized = 1;
 8002b06:	2201      	movs	r2, #1
 8002b08:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
    return LSM303AGR_ERROR;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
 8002b14:	e7fa      	b.n	8002b0c <LSM303AGR_MAG_Init+0x38>
    return LSM303AGR_ERROR;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	e7f7      	b.n	8002b0c <LSM303AGR_MAG_Init+0x38>
    return LSM303AGR_ERROR;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e7f4      	b.n	8002b0c <LSM303AGR_MAG_Init+0x38>
    return LSM303AGR_ERROR;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e7f1      	b.n	8002b0c <LSM303AGR_MAG_Init+0x38>

08002b28 <LSM303AGR_MAG_ReadID>:
{
 8002b28:	b508      	push	{r3, lr}
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002b2a:	301c      	adds	r0, #28
 8002b2c:	f000 fa7d 	bl	800302a <lsm303agr_mag_device_id_get>
 8002b30:	4603      	mov	r3, r0
 8002b32:	b908      	cbnz	r0, 8002b38 <LSM303AGR_MAG_ReadID+0x10>
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd08      	pop	{r3, pc}
    return LSM303AGR_ERROR;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3c:	e7fa      	b.n	8002b34 <LSM303AGR_MAG_ReadID+0xc>
	...

08002b40 <LSM303AGR_MAG_GetOutputDataRate>:
{
 8002b40:	b510      	push	{r4, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	460c      	mov	r4, r1
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002b46:	f10d 0107 	add.w	r1, sp, #7
 8002b4a:	301c      	adds	r0, #28
 8002b4c:	f000 fa21 	bl	8002f92 <lsm303agr_mag_data_rate_get>
 8002b50:	b9b0      	cbnz	r0, 8002b80 <LSM303AGR_MAG_GetOutputDataRate+0x40>
 8002b52:	4602      	mov	r2, r0
  switch (odr_low_level)
 8002b54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d814      	bhi.n	8002b86 <LSM303AGR_MAG_GetOutputDataRate+0x46>
 8002b5c:	e8df f003 	tbb	[pc, r3]
 8002b60:	0d0a0702 	.word	0x0d0a0702
      *Odr = 10.0f;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <LSM303AGR_MAG_GetOutputDataRate+0x4c>)
 8002b66:	6023      	str	r3, [r4, #0]
}
 8002b68:	4610      	mov	r0, r2
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <LSM303AGR_MAG_GetOutputDataRate+0x50>)
 8002b70:	6023      	str	r3, [r4, #0]
      break;
 8002b72:	e7f9      	b.n	8002b68 <LSM303AGR_MAG_GetOutputDataRate+0x28>
      *Odr = 50.0f;
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <LSM303AGR_MAG_GetOutputDataRate+0x54>)
 8002b76:	6023      	str	r3, [r4, #0]
      break;
 8002b78:	e7f6      	b.n	8002b68 <LSM303AGR_MAG_GetOutputDataRate+0x28>
      *Odr = 100.0f;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <LSM303AGR_MAG_GetOutputDataRate+0x58>)
 8002b7c:	6023      	str	r3, [r4, #0]
      break;
 8002b7e:	e7f3      	b.n	8002b68 <LSM303AGR_MAG_GetOutputDataRate+0x28>
    return LSM303AGR_ERROR;
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	e7f0      	b.n	8002b68 <LSM303AGR_MAG_GetOutputDataRate+0x28>
      ret = LSM303AGR_ERROR;
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	e7ed      	b.n	8002b68 <LSM303AGR_MAG_GetOutputDataRate+0x28>
 8002b8c:	41200000 	.word	0x41200000
 8002b90:	41a00000 	.word	0x41a00000
 8002b94:	42480000 	.word	0x42480000
 8002b98:	42c80000 	.word	0x42c80000

08002b9c <LSM303AGR_MAG_GetAxesRaw>:
{
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	460c      	mov	r4, r1
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002ba2:	4669      	mov	r1, sp
 8002ba4:	301c      	adds	r0, #28
 8002ba6:	f000 fa32 	bl	800300e <lsm303agr_magnetic_raw_get>
 8002baa:	b960      	cbnz	r0, 8002bc6 <LSM303AGR_MAG_GetAxesRaw+0x2a>
 8002bac:	4603      	mov	r3, r0
  Value->x = data_raw.i16bit[0];
 8002bae:	f9bd 2000 	ldrsh.w	r2, [sp]
 8002bb2:	8022      	strh	r2, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8002bb4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002bb8:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002bba:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002bbe:	80a2      	strh	r2, [r4, #4]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	e7f9      	b.n	8002bc0 <LSM303AGR_MAG_GetAxesRaw+0x24>

08002bcc <LSM303AGR_MAG_GetAxes>:
{
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	460c      	mov	r4, r1
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002bd4:	a902      	add	r1, sp, #8
 8002bd6:	301c      	adds	r0, #28
 8002bd8:	f000 fa19 	bl	800300e <lsm303agr_magnetic_raw_get>
 8002bdc:	bb68      	cbnz	r0, 8002c3a <LSM303AGR_MAG_GetAxes+0x6e>
 8002bde:	4605      	mov	r5, r0
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002be0:	a901      	add	r1, sp, #4
 8002be2:	4630      	mov	r0, r6
 8002be4:	f7ff fbac 	bl	8002340 <LSM303AGR_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002be8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002bec:	ee07 3a10 	vmov	s14, r3
 8002bf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bf4:	eddd 7a01 	vldr	s15, [sp, #4]
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002c00:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c04:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002c08:	ee07 3a10 	vmov	s14, r3
 8002c0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002c18:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c1c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002c20:	ee07 3a10 	vmov	s14, r3
 8002c24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c30:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002c34:	4628      	mov	r0, r5
 8002c36:	b004      	add	sp, #16
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
    return LSM303AGR_ERROR;
 8002c3a:	f04f 35ff 	mov.w	r5, #4294967295
 8002c3e:	e7f9      	b.n	8002c34 <LSM303AGR_MAG_GetAxes+0x68>

08002c40 <LSM303AGR_ACC_Write_Reg>:
{
 8002c40:	b510      	push	{r4, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	ac02      	add	r4, sp, #8
 8002c46:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	301c      	adds	r0, #28
 8002c50:	f000 f887 	bl	8002d62 <lsm303agr_write_reg>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b910      	cbnz	r0, 8002c5e <LSM303AGR_ACC_Write_Reg+0x1e>
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	e7f9      	b.n	8002c58 <LSM303AGR_ACC_Write_Reg+0x18>

08002c64 <LSM303AGR_ACC_RegisterBusIO>:
  if (pObj == NULL)
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d02c      	beq.n	8002cc2 <LSM303AGR_ACC_RegisterBusIO+0x5e>
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002c6c:	680a      	ldr	r2, [r1, #0]
 8002c6e:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c70:	6848      	ldr	r0, [r1, #4]
 8002c72:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c74:	6888      	ldr	r0, [r1, #8]
 8002c76:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8002c78:	7b08      	ldrb	r0, [r1, #12]
 8002c7a:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c7c:	6908      	ldr	r0, [r1, #16]
 8002c7e:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c80:	6948      	ldr	r0, [r1, #20]
 8002c82:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c84:	6989      	ldr	r1, [r1, #24]
 8002c86:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002c88:	4913      	ldr	r1, [pc, #76]	; (8002cd8 <LSM303AGR_ACC_RegisterBusIO+0x74>)
 8002c8a:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002c8c:	4913      	ldr	r1, [pc, #76]	; (8002cdc <LSM303AGR_ACC_RegisterBusIO+0x78>)
 8002c8e:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 8002c90:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002c92:	b1d2      	cbz	r2, 8002cca <LSM303AGR_ACC_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002c94:	4790      	blx	r2
 8002c96:	4603      	mov	r3, r0
 8002c98:	b9d0      	cbnz	r0, 8002cd0 <LSM303AGR_ACC_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002c9a:	68a2      	ldr	r2, [r4, #8]
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	d001      	beq.n	8002ca4 <LSM303AGR_ACC_RegisterBusIO+0x40>
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8002ca4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	d1f9      	bne.n	8002ca0 <LSM303AGR_ACC_RegisterBusIO+0x3c>
          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002cac:	2201      	movs	r2, #1
 8002cae:	2123      	movs	r1, #35	; 0x23
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7ff ffc5 	bl	8002c40 <LSM303AGR_ACC_Write_Reg>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d0f1      	beq.n	8002ca0 <LSM303AGR_ACC_RegisterBusIO+0x3c>
            return LSM303AGR_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e7ee      	b.n	8002ca0 <LSM303AGR_ACC_RegisterBusIO+0x3c>
    ret = LSM303AGR_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4770      	bx	lr
      ret = LSM303AGR_ERROR;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	e7e7      	b.n	8002ca0 <LSM303AGR_ACC_RegisterBusIO+0x3c>
      ret = LSM303AGR_ERROR;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	e7e4      	b.n	8002ca0 <LSM303AGR_ACC_RegisterBusIO+0x3c>
 8002cd6:	bf00      	nop
 8002cd8:	080023dd 	.word	0x080023dd
 8002cdc:	080023fb 	.word	0x080023fb

08002ce0 <LSM303AGR_MAG_RegisterBusIO>:
  if (pObj == NULL)
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	d02a      	beq.n	8002d3a <LSM303AGR_MAG_RegisterBusIO+0x5a>
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002ce8:	680a      	ldr	r2, [r1, #0]
 8002cea:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002cec:	6848      	ldr	r0, [r1, #4]
 8002cee:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002cf0:	6888      	ldr	r0, [r1, #8]
 8002cf2:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8002cf4:	7b08      	ldrb	r0, [r1, #12]
 8002cf6:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002cf8:	6908      	ldr	r0, [r1, #16]
 8002cfa:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002cfc:	6948      	ldr	r0, [r1, #20]
 8002cfe:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d00:	6989      	ldr	r1, [r1, #24]
 8002d02:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002d04:	4912      	ldr	r1, [pc, #72]	; (8002d50 <LSM303AGR_MAG_RegisterBusIO+0x70>)
 8002d06:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002d08:	4912      	ldr	r1, [pc, #72]	; (8002d54 <LSM303AGR_MAG_RegisterBusIO+0x74>)
 8002d0a:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 8002d0c:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002d0e:	b1c2      	cbz	r2, 8002d42 <LSM303AGR_MAG_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002d10:	4790      	blx	r2
 8002d12:	4603      	mov	r3, r0
 8002d14:	b9c0      	cbnz	r0, 8002d48 <LSM303AGR_MAG_RegisterBusIO+0x68>
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002d16:	68a2      	ldr	r2, [r4, #8]
 8002d18:	b112      	cbz	r2, 8002d20 <LSM303AGR_MAG_RegisterBusIO+0x40>
        if (pObj->is_initialized == 0U)
 8002d1a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002d1e:	b10a      	cbz	r2, 8002d24 <LSM303AGR_MAG_RegisterBusIO+0x44>
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd10      	pop	{r4, pc}
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002d24:	2101      	movs	r1, #1
 8002d26:	f104 001c 	add.w	r0, r4, #28
 8002d2a:	f000 f9bd 	bl	80030a8 <lsm303agr_mag_i2c_interface_set>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d0f5      	beq.n	8002d20 <LSM303AGR_MAG_RegisterBusIO+0x40>
            return LSM303AGR_ERROR;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	e7f2      	b.n	8002d20 <LSM303AGR_MAG_RegisterBusIO+0x40>
    ret = LSM303AGR_ERROR;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	4770      	bx	lr
      ret = LSM303AGR_ERROR;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e7eb      	b.n	8002d20 <LSM303AGR_MAG_RegisterBusIO+0x40>
      ret = LSM303AGR_ERROR;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	e7e8      	b.n	8002d20 <LSM303AGR_MAG_RegisterBusIO+0x40>
 8002d4e:	bf00      	nop
 8002d50:	08002419 	.word	0x08002419
 8002d54:	08002437 	.word	0x08002437

08002d58 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002d58:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d5a:	6844      	ldr	r4, [r0, #4]
 8002d5c:	6880      	ldr	r0, [r0, #8]
 8002d5e:	47a0      	blx	r4
  return ret;
}
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002d62:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d64:	6804      	ldr	r4, [r0, #0]
 8002d66:	6880      	ldr	r0, [r0, #8]
 8002d68:	47a0      	blx	r4
  return ret;
}
 8002d6a:	bd10      	pop	{r4, pc}

08002d6c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8002d6c:	b530      	push	{r4, r5, lr}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	4605      	mov	r5, r0
 8002d72:	460c      	mov	r4, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002d74:	2301      	movs	r3, #1
 8002d76:	466a      	mov	r2, sp
 8002d78:	2120      	movs	r1, #32
 8002d7a:	f7ff ffed 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8002d7e:	4603      	mov	r3, r0
 8002d80:	b160      	cbz	r0, 8002d9c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 8002d82:	f89d 2000 	ldrb.w	r2, [sp]
 8002d86:	f012 0f08 	tst.w	r2, #8
 8002d8a:	d10f      	bne.n	8002dac <lsm303agr_xl_operating_mode_get+0x40>
    *val = LSM303AGR_LP_8bit;
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8002d8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002d90:	f012 0f08 	tst.w	r2, #8
 8002d94:	d10f      	bne.n	8002db6 <lsm303agr_xl_operating_mode_get+0x4a>
    *val = LSM303AGR_HR_12bit;
  } else{
    *val = LSM303AGR_NM_10bit;
 8002d96:	2201      	movs	r2, #1
 8002d98:	7022      	strb	r2, [r4, #0]
  }

  return ret;
 8002d9a:	e009      	b.n	8002db0 <lsm303agr_xl_operating_mode_get+0x44>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	aa01      	add	r2, sp, #4
 8002da0:	2123      	movs	r1, #35	; 0x23
 8002da2:	4628      	mov	r0, r5
 8002da4:	f7ff ffd8 	bl	8002d58 <lsm303agr_read_reg>
 8002da8:	4603      	mov	r3, r0
 8002daa:	e7ea      	b.n	8002d82 <lsm303agr_xl_operating_mode_get+0x16>
    *val = LSM303AGR_LP_8bit;
 8002dac:	2202      	movs	r2, #2
 8002dae:	7022      	strb	r2, [r4, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	b003      	add	sp, #12
 8002db4:	bd30      	pop	{r4, r5, pc}
    *val = LSM303AGR_HR_12bit;
 8002db6:	2200      	movs	r2, #0
 8002db8:	7022      	strb	r2, [r4, #0]
 8002dba:	e7f9      	b.n	8002db0 <lsm303agr_xl_operating_mode_get+0x44>

08002dbc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8002dbc:	b530      	push	{r4, r5, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460d      	mov	r5, r1
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	aa01      	add	r2, sp, #4
 8002dc8:	2120      	movs	r1, #32
 8002dca:	f7ff ffc5 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8002dce:	4603      	mov	r3, r0
 8002dd0:	b110      	cbz	r0, 8002dd8 <lsm303agr_xl_data_rate_set+0x1c>
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1_a.odr = (uint8_t)val;
 8002dd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ddc:	f365 1307 	bfi	r3, r5, #4, #4
 8002de0:	aa02      	add	r2, sp, #8
 8002de2:	f802 3d04 	strb.w	r3, [r2, #-4]!
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002de6:	2301      	movs	r3, #1
 8002de8:	2120      	movs	r1, #32
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff ffb9 	bl	8002d62 <lsm303agr_write_reg>
 8002df0:	4603      	mov	r3, r0
  return ret;
 8002df2:	e7ee      	b.n	8002dd2 <lsm303agr_xl_data_rate_set+0x16>

08002df4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	460c      	mov	r4, r1
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	aa01      	add	r2, sp, #4
 8002dfe:	2120      	movs	r1, #32
 8002e00:	f7ff ffaa 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 8002e04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	d825      	bhi.n	8002e5a <lsm303agr_xl_data_rate_get+0x66>
 8002e0e:	e8df f003 	tbb	[pc, r3]
 8002e12:	0905      	.short	0x0905
 8002e14:	15120f0c 	.word	0x15120f0c
 8002e18:	211e1b18 	.word	0x211e1b18
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	7023      	strb	r3, [r4, #0]
      *val = LSM303AGR_XL_POWER_DOWN;
      break;
  }

  return ret;
}
 8002e20:	b002      	add	sp, #8
 8002e22:	bd10      	pop	{r4, pc}
      *val = LSM303AGR_XL_ODR_1Hz;
 8002e24:	2301      	movs	r3, #1
 8002e26:	7023      	strb	r3, [r4, #0]
      break;
 8002e28:	e7fa      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_10Hz;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	7023      	strb	r3, [r4, #0]
      break;
 8002e2e:	e7f7      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_25Hz;
 8002e30:	2303      	movs	r3, #3
 8002e32:	7023      	strb	r3, [r4, #0]
      break;
 8002e34:	e7f4      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_50Hz;
 8002e36:	2304      	movs	r3, #4
 8002e38:	7023      	strb	r3, [r4, #0]
      break;
 8002e3a:	e7f1      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_100Hz;
 8002e3c:	2305      	movs	r3, #5
 8002e3e:	7023      	strb	r3, [r4, #0]
      break;
 8002e40:	e7ee      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_200Hz;
 8002e42:	2306      	movs	r3, #6
 8002e44:	7023      	strb	r3, [r4, #0]
      break;
 8002e46:	e7eb      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_400Hz;
 8002e48:	2307      	movs	r3, #7
 8002e4a:	7023      	strb	r3, [r4, #0]
      break;
 8002e4c:	e7e8      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8002e4e:	2308      	movs	r3, #8
 8002e50:	7023      	strb	r3, [r4, #0]
      break;
 8002e52:	e7e5      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8002e54:	2309      	movs	r3, #9
 8002e56:	7023      	strb	r3, [r4, #0]
      break;
 8002e58:	e7e2      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_POWER_DOWN;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	7023      	strb	r3, [r4, #0]
  return ret;
 8002e5e:	e7df      	b.n	8002e20 <lsm303agr_xl_data_rate_get+0x2c>

08002e60 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8002e60:	b530      	push	{r4, r5, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	4604      	mov	r4, r0
 8002e66:	460d      	mov	r5, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002e68:	2301      	movs	r3, #1
 8002e6a:	aa01      	add	r2, sp, #4
 8002e6c:	2123      	movs	r1, #35	; 0x23
 8002e6e:	f7ff ff73 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8002e72:	4603      	mov	r3, r0
 8002e74:	b110      	cbz	r0, 8002e7c <lsm303agr_xl_full_scale_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	b003      	add	sp, #12
 8002e7a:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4_a.fs = (uint8_t)val;
 8002e7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e80:	f365 1305 	bfi	r3, r5, #4, #2
 8002e84:	aa02      	add	r2, sp, #8
 8002e86:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2123      	movs	r1, #35	; 0x23
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff ff67 	bl	8002d62 <lsm303agr_write_reg>
 8002e94:	4603      	mov	r3, r0
  return ret;
 8002e96:	e7ee      	b.n	8002e76 <lsm303agr_xl_full_scale_set+0x16>

08002e98 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	460c      	mov	r4, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	aa01      	add	r2, sp, #4
 8002ea2:	2123      	movs	r1, #35	; 0x23
 8002ea4:	f7ff ff58 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 8002ea8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002eac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d810      	bhi.n	8002ed6 <lsm303agr_xl_full_scale_get+0x3e>
 8002eb4:	e8df f003 	tbb	[pc, r3]
 8002eb8:	0c090602 	.word	0x0c090602
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	7023      	strb	r3, [r4, #0]
    default:
      *val = LSM303AGR_2g;
      break;
  }
  return ret;
}
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd10      	pop	{r4, pc}
      *val = LSM303AGR_4g;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	7023      	strb	r3, [r4, #0]
      break;
 8002ec8:	e7fa      	b.n	8002ec0 <lsm303agr_xl_full_scale_get+0x28>
      *val = LSM303AGR_8g;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	7023      	strb	r3, [r4, #0]
      break;
 8002ece:	e7f7      	b.n	8002ec0 <lsm303agr_xl_full_scale_get+0x28>
      *val = LSM303AGR_16g;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	7023      	strb	r3, [r4, #0]
      break;
 8002ed4:	e7f4      	b.n	8002ec0 <lsm303agr_xl_full_scale_get+0x28>
      *val = LSM303AGR_2g;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	7023      	strb	r3, [r4, #0]
  return ret;
 8002eda:	e7f1      	b.n	8002ec0 <lsm303agr_xl_full_scale_get+0x28>

08002edc <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8002edc:	b530      	push	{r4, r5, lr}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	aa01      	add	r2, sp, #4
 8002ee8:	2123      	movs	r1, #35	; 0x23
 8002eea:	f7ff ff35 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8002eee:	4603      	mov	r3, r0
 8002ef0:	b110      	cbz	r0, 8002ef8 <lsm303agr_xl_block_data_update_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	b003      	add	sp, #12
 8002ef6:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4_a.bdu = (uint8_t)val;
 8002ef8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002efc:	f365 13c7 	bfi	r3, r5, #7, #1
 8002f00:	aa02      	add	r2, sp, #8
 8002f02:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002f06:	2301      	movs	r3, #1
 8002f08:	2123      	movs	r1, #35	; 0x23
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff ff29 	bl	8002d62 <lsm303agr_write_reg>
 8002f10:	4603      	mov	r3, r0
  return ret;
 8002f12:	e7ee      	b.n	8002ef2 <lsm303agr_xl_block_data_update_set+0x16>

08002f14 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f14:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8002f16:	2306      	movs	r3, #6
 8002f18:	460a      	mov	r2, r1
 8002f1a:	2128      	movs	r1, #40	; 0x28
 8002f1c:	f7ff ff1c 	bl	8002d58 <lsm303agr_read_reg>
  return ret;
}
 8002f20:	bd08      	pop	{r3, pc}

08002f22 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8002f22:	b530      	push	{r4, r5, lr}
 8002f24:	b083      	sub	sp, #12
 8002f26:	4604      	mov	r4, r0
 8002f28:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	aa01      	add	r2, sp, #4
 8002f2e:	2160      	movs	r1, #96	; 0x60
 8002f30:	f7ff ff12 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8002f34:	4603      	mov	r3, r0
 8002f36:	b110      	cbz	r0, 8002f3e <lsm303agr_mag_operating_mode_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	b003      	add	sp, #12
 8002f3c:	bd30      	pop	{r4, r5, pc}
    cfg_reg_a_m.md = (uint8_t)val;
 8002f3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f42:	f365 0301 	bfi	r3, r5, #0, #2
 8002f46:	aa02      	add	r2, sp, #8
 8002f48:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	2160      	movs	r1, #96	; 0x60
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7ff ff06 	bl	8002d62 <lsm303agr_write_reg>
 8002f56:	4603      	mov	r3, r0
  return ret;
 8002f58:	e7ee      	b.n	8002f38 <lsm303agr_mag_operating_mode_set+0x16>

08002f5a <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002f5a:	b530      	push	{r4, r5, lr}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	4604      	mov	r4, r0
 8002f60:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f62:	2301      	movs	r3, #1
 8002f64:	aa01      	add	r2, sp, #4
 8002f66:	2160      	movs	r1, #96	; 0x60
 8002f68:	f7ff fef6 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	b110      	cbz	r0, 8002f76 <lsm303agr_mag_data_rate_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	b003      	add	sp, #12
 8002f74:	bd30      	pop	{r4, r5, pc}
    cfg_reg_a_m.odr = (uint8_t)val;
 8002f76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f7a:	f365 0383 	bfi	r3, r5, #2, #2
 8002f7e:	aa02      	add	r2, sp, #8
 8002f80:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f84:	2301      	movs	r3, #1
 8002f86:	2160      	movs	r1, #96	; 0x60
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff feea 	bl	8002d62 <lsm303agr_write_reg>
 8002f8e:	4603      	mov	r3, r0
  return ret;
 8002f90:	e7ee      	b.n	8002f70 <lsm303agr_mag_data_rate_set+0x16>

08002f92 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8002f92:	b510      	push	{r4, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	460c      	mov	r4, r1
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002f98:	2301      	movs	r3, #1
 8002f9a:	aa01      	add	r2, sp, #4
 8002f9c:	2160      	movs	r1, #96	; 0x60
 8002f9e:	f7ff fedb 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 8002fa2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002fa6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d810      	bhi.n	8002fd0 <lsm303agr_mag_data_rate_get+0x3e>
 8002fae:	e8df f003 	tbb	[pc, r3]
 8002fb2:	0602      	.short	0x0602
 8002fb4:	0c09      	.short	0x0c09
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	7023      	strb	r3, [r4, #0]
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
      break;
  }
  return ret;
}
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd10      	pop	{r4, pc}
      *val = LSM303AGR_MG_ODR_20Hz;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	7023      	strb	r3, [r4, #0]
      break;
 8002fc2:	e7fa      	b.n	8002fba <lsm303agr_mag_data_rate_get+0x28>
      *val = LSM303AGR_MG_ODR_50Hz;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	7023      	strb	r3, [r4, #0]
      break;
 8002fc8:	e7f7      	b.n	8002fba <lsm303agr_mag_data_rate_get+0x28>
      *val = LSM303AGR_MG_ODR_100Hz;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	7023      	strb	r3, [r4, #0]
      break;
 8002fce:	e7f4      	b.n	8002fba <lsm303agr_mag_data_rate_get+0x28>
      *val = LSM303AGR_MG_ODR_10Hz;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	7023      	strb	r3, [r4, #0]
  return ret;
 8002fd4:	e7f1      	b.n	8002fba <lsm303agr_mag_data_rate_get+0x28>

08002fd6 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8002fd6:	b530      	push	{r4, r5, lr}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	4604      	mov	r4, r0
 8002fdc:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002fde:	2301      	movs	r3, #1
 8002fe0:	aa01      	add	r2, sp, #4
 8002fe2:	2162      	movs	r1, #98	; 0x62
 8002fe4:	f7ff feb8 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8002fe8:	4603      	mov	r3, r0
 8002fea:	b110      	cbz	r0, 8002ff2 <lsm303agr_mag_block_data_update_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	b003      	add	sp, #12
 8002ff0:	bd30      	pop	{r4, r5, pc}
    cfg_reg_c_m.bdu = (uint8_t)val;
 8002ff2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ff6:	f365 1304 	bfi	r3, r5, #4, #1
 8002ffa:	aa02      	add	r2, sp, #8
 8002ffc:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003000:	2301      	movs	r3, #1
 8003002:	2162      	movs	r1, #98	; 0x62
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff feac 	bl	8002d62 <lsm303agr_write_reg>
 800300a:	4603      	mov	r3, r0
  return ret;
 800300c:	e7ee      	b.n	8002fec <lsm303agr_mag_block_data_update_set+0x16>

0800300e <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800300e:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003010:	2306      	movs	r3, #6
 8003012:	460a      	mov	r2, r1
 8003014:	2168      	movs	r1, #104	; 0x68
 8003016:	f7ff fe9f 	bl	8002d58 <lsm303agr_read_reg>
  return ret;
}
 800301a:	bd08      	pop	{r3, pc}

0800301c <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800301c:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800301e:	2301      	movs	r3, #1
 8003020:	460a      	mov	r2, r1
 8003022:	210f      	movs	r1, #15
 8003024:	f7ff fe98 	bl	8002d58 <lsm303agr_read_reg>
  return ret;
}
 8003028:	bd08      	pop	{r3, pc}

0800302a <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800302a:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800302c:	2301      	movs	r3, #1
 800302e:	460a      	mov	r2, r1
 8003030:	214f      	movs	r1, #79	; 0x4f
 8003032:	f7ff fe91 	bl	8002d58 <lsm303agr_read_reg>
  return ret;
}
 8003036:	bd08      	pop	{r3, pc}

08003038 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003038:	b530      	push	{r4, r5, lr}
 800303a:	b083      	sub	sp, #12
 800303c:	4604      	mov	r4, r0
 800303e:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003040:	2301      	movs	r3, #1
 8003042:	aa01      	add	r2, sp, #4
 8003044:	2162      	movs	r1, #98	; 0x62
 8003046:	f7ff fe87 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800304a:	4603      	mov	r3, r0
 800304c:	b110      	cbz	r0, 8003054 <lsm303agr_mag_self_test_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
}
 800304e:	4618      	mov	r0, r3
 8003050:	b003      	add	sp, #12
 8003052:	bd30      	pop	{r4, r5, pc}
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003058:	f365 0341 	bfi	r3, r5, #1, #1
 800305c:	aa02      	add	r2, sp, #8
 800305e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003062:	2301      	movs	r3, #1
 8003064:	2162      	movs	r1, #98	; 0x62
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff fe7b 	bl	8002d62 <lsm303agr_write_reg>
 800306c:	4603      	mov	r3, r0
  return ret;
 800306e:	e7ee      	b.n	800304e <lsm303agr_mag_self_test_set+0x16>

08003070 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	4604      	mov	r4, r0
 8003076:	460d      	mov	r5, r1
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003078:	2301      	movs	r3, #1
 800307a:	aa01      	add	r2, sp, #4
 800307c:	212e      	movs	r1, #46	; 0x2e
 800307e:	f7ff fe6b 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 8003082:	4603      	mov	r3, r0
 8003084:	b110      	cbz	r0, 800308c <lsm303agr_xl_fifo_mode_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
}
 8003086:	4618      	mov	r0, r3
 8003088:	b003      	add	sp, #12
 800308a:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800308c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003090:	f365 1387 	bfi	r3, r5, #6, #2
 8003094:	aa02      	add	r2, sp, #8
 8003096:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800309a:	2301      	movs	r3, #1
 800309c:	212e      	movs	r1, #46	; 0x2e
 800309e:	4620      	mov	r0, r4
 80030a0:	f7ff fe5f 	bl	8002d62 <lsm303agr_write_reg>
 80030a4:	4603      	mov	r3, r0
  return ret;
 80030a6:	e7ee      	b.n	8003086 <lsm303agr_xl_fifo_mode_set+0x16>

080030a8 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80030a8:	b530      	push	{r4, r5, lr}
 80030aa:	b083      	sub	sp, #12
 80030ac:	4604      	mov	r4, r0
 80030ae:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80030b0:	2301      	movs	r3, #1
 80030b2:	aa01      	add	r2, sp, #4
 80030b4:	2162      	movs	r1, #98	; 0x62
 80030b6:	f7ff fe4f 	bl	8002d58 <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80030ba:	4603      	mov	r3, r0
 80030bc:	b110      	cbz	r0, 80030c4 <lsm303agr_mag_i2c_interface_set+0x1c>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
}
 80030be:	4618      	mov	r0, r3
 80030c0:	b003      	add	sp, #12
 80030c2:	bd30      	pop	{r4, r5, pc}
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80030c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80030c8:	f365 1345 	bfi	r3, r5, #5, #1
 80030cc:	aa02      	add	r2, sp, #8
 80030ce:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80030d2:	2301      	movs	r3, #1
 80030d4:	2162      	movs	r1, #98	; 0x62
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7ff fe43 	bl	8002d62 <lsm303agr_write_reg>
 80030dc:	4603      	mov	r3, r0
  return ret;
 80030de:	e7ee      	b.n	80030be <lsm303agr_mag_i2c_interface_set+0x16>

080030e0 <LSM6DSL_GetCapabilities>:
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 80030e4:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 80030e6:	2000      	movs	r0, #0
 80030e8:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 80030ea:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 80030ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030f0:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 80030f2:	2310      	movs	r3, #16
 80030f4:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 80030f6:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <LSM6DSL_GetCapabilities+0x24>)
 80030fa:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80030fc:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80030fe:	2300      	movs	r3, #0
 8003100:	618b      	str	r3, [r1, #24]
  return LSM6DSL_OK;
}
 8003102:	4770      	bx	lr
 8003104:	45d02000 	.word	0x45d02000

08003108 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003108:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800310c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003114:	d93b      	bls.n	800318e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x86>
 8003116:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800311a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	d939      	bls.n	8003198 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003124:	eddf 7a23 	vldr	s15, [pc, #140]	; 80031b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003128:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	d934      	bls.n	800319c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x94>
 8003132:	eddf 7a21 	vldr	s15, [pc, #132]	; 80031b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003136:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d92f      	bls.n	80031a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x98>
 8003140:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80031bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb4>
 8003144:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	d92a      	bls.n	80031a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x9c>
 800314e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80031c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8003152:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	d925      	bls.n	80031a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa0>
 800315c:	eddf 7a19 	vldr	s15, [pc, #100]	; 80031c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003160:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	d920      	bls.n	80031ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 800316a:	eddf 7a17 	vldr	s15, [pc, #92]	; 80031c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800316e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	d91b      	bls.n	80031b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003178:	eddf 7a14 	vldr	s15, [pc, #80]	; 80031cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc4>
 800317c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003184:	d901      	bls.n	800318a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x82>
 8003186:	230a      	movs	r3, #10
 8003188:	e002      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800318a:	2309      	movs	r3, #9
 800318c:	e000      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800318e:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003190:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
}
 8003194:	2000      	movs	r0, #0
 8003196:	4770      	bx	lr
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003198:	2302      	movs	r3, #2
 800319a:	e7f9      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800319c:	2303      	movs	r3, #3
 800319e:	e7f7      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e7f5      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 80031a4:	2305      	movs	r3, #5
 80031a6:	e7f3      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 80031a8:	2306      	movs	r3, #6
 80031aa:	e7f1      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 80031ac:	2307      	movs	r3, #7
 80031ae:	e7ef      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 80031b0:	2308      	movs	r3, #8
 80031b2:	e7ed      	b.n	8003190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 80031b4:	42500000 	.word	0x42500000
 80031b8:	42d00000 	.word	0x42d00000
 80031bc:	43500000 	.word	0x43500000
 80031c0:	43d00000 	.word	0x43d00000
 80031c4:	44504000 	.word	0x44504000
 80031c8:	44cf8000 	.word	0x44cf8000
 80031cc:	45502000 	.word	0x45502000

080031d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80031d0:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80031d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d93b      	bls.n	8003256 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x86>
 80031de:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80031e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d939      	bls.n	8003260 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80031ec:	eddf 7a23 	vldr	s15, [pc, #140]	; 800327c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xac>
 80031f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d934      	bls.n	8003264 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x94>
 80031fa:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003280 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 80031fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d92f      	bls.n	8003268 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x98>
 8003208:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003284 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 800320c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	d92a      	bls.n	800326c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8003216:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003288 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 800321a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d925      	bls.n	8003270 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 8003224:	eddf 7a19 	vldr	s15, [pc, #100]	; 800328c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003228:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d920      	bls.n	8003274 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8003232:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003290 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 8003236:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	d91b      	bls.n	8003278 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 8003240:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003294 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 8003244:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	d901      	bls.n	8003252 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x82>
 800324e:	230a      	movs	r3, #10
 8003250:	e002      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003252:	2309      	movs	r3, #9
 8003254:	e000      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003256:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003258:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
}
 800325c:	2000      	movs	r0, #0
 800325e:	4770      	bx	lr
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003260:	2302      	movs	r3, #2
 8003262:	e7f9      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003264:	2303      	movs	r3, #3
 8003266:	e7f7      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003268:	2304      	movs	r3, #4
 800326a:	e7f5      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 800326c:	2305      	movs	r3, #5
 800326e:	e7f3      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003270:	2306      	movs	r3, #6
 8003272:	e7f1      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003274:	2307      	movs	r3, #7
 8003276:	e7ef      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003278:	2308      	movs	r3, #8
 800327a:	e7ed      	b.n	8003258 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 800327c:	42500000 	.word	0x42500000
 8003280:	42d00000 	.word	0x42d00000
 8003284:	43500000 	.word	0x43500000
 8003288:	43d00000 	.word	0x43d00000
 800328c:	44504000 	.word	0x44504000
 8003290:	44cf8000 	.word	0x44cf8000
 8003294:	45502000 	.word	0x45502000

08003298 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003298:	b510      	push	{r4, lr}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800329a:	6944      	ldr	r4, [r0, #20]
 800329c:	7b00      	ldrb	r0, [r0, #12]
 800329e:	47a0      	blx	r4
}
 80032a0:	bd10      	pop	{r4, pc}

080032a2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032a2:	b510      	push	{r4, lr}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80032a4:	6904      	ldr	r4, [r0, #16]
 80032a6:	7b00      	ldrb	r0, [r0, #12]
 80032a8:	47a0      	blx	r4
}
 80032aa:	bd10      	pop	{r4, pc}

080032ac <LSM6DSL_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80032ac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d00d      	beq.n	80032d0 <LSM6DSL_ACC_Enable+0x24>
{
 80032b4:	b510      	push	{r4, lr}
 80032b6:	4604      	mov	r4, r0
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80032b8:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80032bc:	301c      	adds	r0, #28
 80032be:	f000 fcab 	bl	8003c18 <lsm6dsl_xl_data_rate_set>
 80032c2:	4603      	mov	r3, r0
 80032c4:	b938      	cbnz	r0, 80032d6 <LSM6DSL_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 80032c6:	2201      	movs	r2, #1
 80032c8:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	4770      	bx	lr
    return LSM6DSL_ERROR;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	e7f7      	b.n	80032cc <LSM6DSL_ACC_Enable+0x20>

080032dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
{
 80032dc:	b508      	push	{r3, lr}
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80032de:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80032e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d939      	bls.n	8003360 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x84>
 80032ec:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80032f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f8:	d93a      	bls.n	8003370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x94>
 80032fa:	eddf 7a27 	vldr	s15, [pc, #156]	; 8003398 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80032fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003306:	d935      	bls.n	8003374 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x98>
 8003308:	eddf 7a24 	vldr	s15, [pc, #144]	; 800339c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800330c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d930      	bls.n	8003378 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x9c>
 8003316:	eddf 7a22 	vldr	s15, [pc, #136]	; 80033a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc4>
 800331a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	d92b      	bls.n	800337c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa0>
 8003324:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80033a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc8>
 8003328:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d926      	bls.n	8003380 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 8003332:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80033a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xcc>
 8003336:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	d921      	bls.n	8003384 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa8>
 8003340:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80033ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8003344:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	d91c      	bls.n	8003388 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xac>
 800334e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80033b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003352:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	d817      	bhi.n	800338c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb0>
 800335c:	2109      	movs	r1, #9
 800335e:	e000      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003360:	2101      	movs	r1, #1
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003362:	301c      	adds	r0, #28
 8003364:	f000 fc58 	bl	8003c18 <lsm6dsl_xl_data_rate_set>
 8003368:	4603      	mov	r3, r0
 800336a:	b988      	cbnz	r0, 8003390 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb4>
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003370:	2102      	movs	r1, #2
 8003372:	e7f6      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003374:	2103      	movs	r1, #3
 8003376:	e7f4      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003378:	2104      	movs	r1, #4
 800337a:	e7f2      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 800337c:	2105      	movs	r1, #5
 800337e:	e7f0      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003380:	2106      	movs	r1, #6
 8003382:	e7ee      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003384:	2107      	movs	r1, #7
 8003386:	e7ec      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003388:	2108      	movs	r1, #8
 800338a:	e7ea      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 800338c:	210a      	movs	r1, #10
 800338e:	e7e8      	b.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSL_ERROR;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	e7ea      	b.n	800336c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003396:	bf00      	nop
 8003398:	42500000 	.word	0x42500000
 800339c:	42d00000 	.word	0x42d00000
 80033a0:	43500000 	.word	0x43500000
 80033a4:	43d00000 	.word	0x43d00000
 80033a8:	44504000 	.word	0x44504000
 80033ac:	44cf8000 	.word	0x44cf8000
 80033b0:	45502000 	.word	0x45502000

080033b4 <LSM6DSL_ACC_SetOutputDataRate>:
{
 80033b4:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 80033b6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d004      	beq.n	80033c8 <LSM6DSL_ACC_SetOutputDataRate+0x14>
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80033be:	ee00 1a10 	vmov	s0, r1
 80033c2:	f7ff fea1 	bl	8003108 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
}
 80033c6:	bd08      	pop	{r3, pc}
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80033c8:	ee00 1a10 	vmov	s0, r1
 80033cc:	f7ff ff86 	bl	80032dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80033d0:	e7f9      	b.n	80033c6 <LSM6DSL_ACC_SetOutputDataRate+0x12>

080033d2 <LSM6DSL_ACC_SetFullScale>:
{
 80033d2:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSL_4g
 80033d4:	2902      	cmp	r1, #2
 80033d6:	dd05      	ble.n	80033e4 <LSM6DSL_ACC_SetFullScale+0x12>
 80033d8:	2904      	cmp	r1, #4
 80033da:	dd0b      	ble.n	80033f4 <LSM6DSL_ACC_SetFullScale+0x22>
 80033dc:	2908      	cmp	r1, #8
 80033de:	dc0b      	bgt.n	80033f8 <LSM6DSL_ACC_SetFullScale+0x26>
 80033e0:	2103      	movs	r1, #3
 80033e2:	e000      	b.n	80033e6 <LSM6DSL_ACC_SetFullScale+0x14>
 80033e4:	2100      	movs	r1, #0
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80033e6:	301c      	adds	r0, #28
 80033e8:	f000 fbd8 	bl	8003b9c <lsm6dsl_xl_full_scale_set>
 80033ec:	4603      	mov	r3, r0
 80033ee:	b928      	cbnz	r0, 80033fc <LSM6DSL_ACC_SetFullScale+0x2a>
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSL_4g
 80033f4:	2102      	movs	r1, #2
 80033f6:	e7f6      	b.n	80033e6 <LSM6DSL_ACC_SetFullScale+0x14>
 80033f8:	2101      	movs	r1, #1
 80033fa:	e7f4      	b.n	80033e6 <LSM6DSL_ACC_SetFullScale+0x14>
    return LSM6DSL_ERROR;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e7f6      	b.n	80033f0 <LSM6DSL_ACC_SetFullScale+0x1e>

08003402 <LSM6DSL_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8003402:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003406:	2b01      	cmp	r3, #1
 8003408:	d00d      	beq.n	8003426 <LSM6DSL_GYRO_Enable+0x24>
{
 800340a:	b510      	push	{r4, lr}
 800340c:	4604      	mov	r4, r0
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800340e:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8003412:	301c      	adds	r0, #28
 8003414:	f000 fc9c 	bl	8003d50 <lsm6dsl_gy_data_rate_set>
 8003418:	4603      	mov	r3, r0
 800341a:	b938      	cbnz	r0, 800342c <LSM6DSL_GYRO_Enable+0x2a>
  pObj->gyro_is_enabled = 1;
 800341c:	2201      	movs	r2, #1
 800341e:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 8003422:	4618      	mov	r0, r3
 8003424:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	4770      	bx	lr
    return LSM6DSL_ERROR;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	e7f7      	b.n	8003422 <LSM6DSL_GYRO_Enable+0x20>
	...

08003434 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
{
 8003434:	b508      	push	{r3, lr}
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003436:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800343a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	d939      	bls.n	80034b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x84>
 8003444:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003448:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	d93a      	bls.n	80034c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8003452:	eddf 7a27 	vldr	s15, [pc, #156]	; 80034f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003456:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	d935      	bls.n	80034cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x98>
 8003460:	eddf 7a24 	vldr	s15, [pc, #144]	; 80034f4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8003464:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	d930      	bls.n	80034d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 800346e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80034f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 8003472:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d92b      	bls.n	80034d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 800347c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80034fc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 8003480:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003488:	d926      	bls.n	80034d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 800348a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003500 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 800348e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	d921      	bls.n	80034dc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8003498:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003504 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 800349c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	d91c      	bls.n	80034e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xac>
 80034a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003508 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80034aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d817      	bhi.n	80034e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb0>
 80034b4:	2109      	movs	r1, #9
 80034b6:	e000      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034b8:	2101      	movs	r1, #1
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80034ba:	301c      	adds	r0, #28
 80034bc:	f000 fc48 	bl	8003d50 <lsm6dsl_gy_data_rate_set>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b988      	cbnz	r0, 80034e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb4>
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80034c8:	2102      	movs	r1, #2
 80034ca:	e7f6      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034cc:	2103      	movs	r1, #3
 80034ce:	e7f4      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034d0:	2104      	movs	r1, #4
 80034d2:	e7f2      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034d4:	2105      	movs	r1, #5
 80034d6:	e7f0      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034d8:	2106      	movs	r1, #6
 80034da:	e7ee      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034dc:	2107      	movs	r1, #7
 80034de:	e7ec      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034e0:	2108      	movs	r1, #8
 80034e2:	e7ea      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 80034e4:	210a      	movs	r1, #10
 80034e6:	e7e8      	b.n	80034ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSL_ERROR;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e7ea      	b.n	80034c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80034ee:	bf00      	nop
 80034f0:	42500000 	.word	0x42500000
 80034f4:	42d00000 	.word	0x42d00000
 80034f8:	43500000 	.word	0x43500000
 80034fc:	43d00000 	.word	0x43d00000
 8003500:	44504000 	.word	0x44504000
 8003504:	44cf8000 	.word	0x44cf8000
 8003508:	45502000 	.word	0x45502000

0800350c <LSM6DSL_GYRO_SetOutputDataRate>:
{
 800350c:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 800350e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003512:	2b01      	cmp	r3, #1
 8003514:	d004      	beq.n	8003520 <LSM6DSL_GYRO_SetOutputDataRate+0x14>
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003516:	ee00 1a10 	vmov	s0, r1
 800351a:	f7ff fe59 	bl	80031d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
}
 800351e:	bd08      	pop	{r3, pc}
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003520:	ee00 1a10 	vmov	s0, r1
 8003524:	f7ff ff86 	bl	8003434 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8003528:	e7f9      	b.n	800351e <LSM6DSL_GYRO_SetOutputDataRate+0x12>

0800352a <LSM6DSL_Init>:
{
 800352a:	b538      	push	{r3, r4, r5, lr}
 800352c:	4605      	mov	r5, r0
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800352e:	f100 041c 	add.w	r4, r0, #28
 8003532:	2101      	movs	r1, #1
 8003534:	4620      	mov	r0, r4
 8003536:	f000 fc92 	bl	8003e5e <lsm6dsl_auto_increment_set>
 800353a:	bb48      	cbnz	r0, 8003590 <LSM6DSL_Init+0x66>
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800353c:	2101      	movs	r1, #1
 800353e:	4620      	mov	r0, r4
 8003540:	f000 fc5c 	bl	8003dfc <lsm6dsl_block_data_update_set>
 8003544:	bb38      	cbnz	r0, 8003596 <LSM6DSL_Init+0x6c>
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003546:	2100      	movs	r1, #0
 8003548:	4620      	mov	r0, r4
 800354a:	f000 fca4 	bl	8003e96 <lsm6dsl_fifo_mode_set>
 800354e:	bb28      	cbnz	r0, 800359c <LSM6DSL_Init+0x72>
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003550:	2304      	movs	r3, #4
 8003552:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003556:	2100      	movs	r1, #0
 8003558:	4620      	mov	r0, r4
 800355a:	f000 fb5d 	bl	8003c18 <lsm6dsl_xl_data_rate_set>
 800355e:	bb00      	cbnz	r0, 80035a2 <LSM6DSL_Init+0x78>
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003560:	2100      	movs	r1, #0
 8003562:	4620      	mov	r0, r4
 8003564:	f000 fb1a 	bl	8003b9c <lsm6dsl_xl_full_scale_set>
 8003568:	b9f0      	cbnz	r0, 80035a8 <LSM6DSL_Init+0x7e>
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800356a:	2304      	movs	r3, #4
 800356c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003570:	2100      	movs	r1, #0
 8003572:	4620      	mov	r0, r4
 8003574:	f000 fbec 	bl	8003d50 <lsm6dsl_gy_data_rate_set>
 8003578:	b9c8      	cbnz	r0, 80035ae <LSM6DSL_Init+0x84>
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800357a:	2106      	movs	r1, #6
 800357c:	4620      	mov	r0, r4
 800357e:	f000 fba4 	bl	8003cca <lsm6dsl_gy_full_scale_set>
 8003582:	4603      	mov	r3, r0
 8003584:	b9b0      	cbnz	r0, 80035b4 <LSM6DSL_Init+0x8a>
  pObj->is_initialized = 1;
 8003586:	2201      	movs	r2, #1
 8003588:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSL_ERROR;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	e7fa      	b.n	800358c <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	e7f7      	b.n	800358c <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	e7f4      	b.n	800358c <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	e7f1      	b.n	800358c <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	e7ee      	b.n	800358c <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	e7eb      	b.n	800358c <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	e7e8      	b.n	800358c <LSM6DSL_Init+0x62>

080035ba <LSM6DSL_GYRO_SetFullScale>:
{
 80035ba:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80035bc:	297d      	cmp	r1, #125	; 0x7d
 80035be:	dd09      	ble.n	80035d4 <LSM6DSL_GYRO_SetFullScale+0x1a>
 80035c0:	29fa      	cmp	r1, #250	; 0xfa
 80035c2:	dd0f      	ble.n	80035e4 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80035c4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 80035c8:	dd0e      	ble.n	80035e8 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80035ca:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80035ce:	dc0d      	bgt.n	80035ec <LSM6DSL_GYRO_SetFullScale+0x32>
 80035d0:	2104      	movs	r1, #4
 80035d2:	e000      	b.n	80035d6 <LSM6DSL_GYRO_SetFullScale+0x1c>
 80035d4:	2101      	movs	r1, #1
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80035d6:	301c      	adds	r0, #28
 80035d8:	f000 fb77 	bl	8003cca <lsm6dsl_gy_full_scale_set>
 80035dc:	4603      	mov	r3, r0
 80035de:	b938      	cbnz	r0, 80035f0 <LSM6DSL_GYRO_SetFullScale+0x36>
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80035e4:	2100      	movs	r1, #0
 80035e6:	e7f6      	b.n	80035d6 <LSM6DSL_GYRO_SetFullScale+0x1c>
 80035e8:	2102      	movs	r1, #2
 80035ea:	e7f4      	b.n	80035d6 <LSM6DSL_GYRO_SetFullScale+0x1c>
 80035ec:	2106      	movs	r1, #6
 80035ee:	e7f2      	b.n	80035d6 <LSM6DSL_GYRO_SetFullScale+0x1c>
    return LSM6DSL_ERROR;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	e7f4      	b.n	80035e0 <LSM6DSL_GYRO_SetFullScale+0x26>

080035f6 <LSM6DSL_ReadID>:
{
 80035f6:	b508      	push	{r3, lr}
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80035f8:	301c      	adds	r0, #28
 80035fa:	f000 fc29 	bl	8003e50 <lsm6dsl_device_id_get>
 80035fe:	4603      	mov	r3, r0
 8003600:	b908      	cbnz	r0, 8003606 <LSM6DSL_ReadID+0x10>
}
 8003602:	4618      	mov	r0, r3
 8003604:	bd08      	pop	{r3, pc}
    return LSM6DSL_ERROR;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e7fa      	b.n	8003602 <LSM6DSL_ReadID+0xc>

0800360c <LSM6DSL_ACC_Disable>:
{
 800360c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 800360e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003612:	b913      	cbnz	r3, 800361a <LSM6DSL_ACC_Disable+0xe>
    return LSM6DSL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	bd38      	pop	{r3, r4, r5, pc}
 800361a:	4604      	mov	r4, r0
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800361c:	f100 051c 	add.w	r5, r0, #28
 8003620:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8003624:	4628      	mov	r0, r5
 8003626:	f000 fb13 	bl	8003c50 <lsm6dsl_xl_data_rate_get>
 800362a:	b948      	cbnz	r0, 8003640 <LSM6DSL_ACC_Disable+0x34>
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800362c:	2100      	movs	r1, #0
 800362e:	4628      	mov	r0, r5
 8003630:	f000 faf2 	bl	8003c18 <lsm6dsl_xl_data_rate_set>
 8003634:	4603      	mov	r3, r0
 8003636:	b930      	cbnz	r0, 8003646 <LSM6DSL_ACC_Disable+0x3a>
  pObj->acc_is_enabled = 0;
 8003638:	2200      	movs	r2, #0
 800363a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  return LSM6DSL_OK;
 800363e:	e7ea      	b.n	8003616 <LSM6DSL_ACC_Disable+0xa>
    return LSM6DSL_ERROR;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	e7e7      	b.n	8003616 <LSM6DSL_ACC_Disable+0xa>
    return LSM6DSL_ERROR;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
 800364a:	e7e4      	b.n	8003616 <LSM6DSL_ACC_Disable+0xa>

0800364c <LSM6DSL_ACC_GetOutputDataRate>:
{
 800364c:	b510      	push	{r4, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	460c      	mov	r4, r1
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003652:	f10d 0107 	add.w	r1, sp, #7
 8003656:	301c      	adds	r0, #28
 8003658:	f000 fafa 	bl	8003c50 <lsm6dsl_xl_data_rate_get>
 800365c:	2800      	cmp	r0, #0
 800365e:	d132      	bne.n	80036c6 <LSM6DSL_ACC_GetOutputDataRate+0x7a>
 8003660:	4602      	mov	r2, r0
  switch (odr_low_level)
 8003662:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003666:	2b0b      	cmp	r3, #11
 8003668:	d830      	bhi.n	80036cc <LSM6DSL_ACC_GetOutputDataRate+0x80>
 800366a:	e8df f003 	tbb	[pc, r3]
 800366e:	0e06      	.short	0x0e06
 8003670:	1a171411 	.word	0x1a171411
 8003674:	2623201d 	.word	0x2623201d
 8003678:	0b29      	.short	0x0b29
      *Odr = 0.0f;
 800367a:	2300      	movs	r3, #0
 800367c:	6023      	str	r3, [r4, #0]
}
 800367e:	4610      	mov	r0, r2
 8003680:	b002      	add	sp, #8
 8003682:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <LSM6DSL_ACC_GetOutputDataRate+0x88>)
 8003686:	6023      	str	r3, [r4, #0]
      break;
 8003688:	e7f9      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 12.5f;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <LSM6DSL_ACC_GetOutputDataRate+0x8c>)
 800368c:	6023      	str	r3, [r4, #0]
      break;
 800368e:	e7f6      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <LSM6DSL_ACC_GetOutputDataRate+0x90>)
 8003692:	6023      	str	r3, [r4, #0]
      break;
 8003694:	e7f3      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <LSM6DSL_ACC_GetOutputDataRate+0x94>)
 8003698:	6023      	str	r3, [r4, #0]
      break;
 800369a:	e7f0      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <LSM6DSL_ACC_GetOutputDataRate+0x98>)
 800369e:	6023      	str	r3, [r4, #0]
      break;
 80036a0:	e7ed      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <LSM6DSL_ACC_GetOutputDataRate+0x9c>)
 80036a4:	6023      	str	r3, [r4, #0]
      break;
 80036a6:	e7ea      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 80036a8:	4b10      	ldr	r3, [pc, #64]	; (80036ec <LSM6DSL_ACC_GetOutputDataRate+0xa0>)
 80036aa:	6023      	str	r3, [r4, #0]
      break;
 80036ac:	e7e7      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <LSM6DSL_ACC_GetOutputDataRate+0xa4>)
 80036b0:	6023      	str	r3, [r4, #0]
      break;
 80036b2:	e7e4      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 1660.0f;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <LSM6DSL_ACC_GetOutputDataRate+0xa8>)
 80036b6:	6023      	str	r3, [r4, #0]
      break;
 80036b8:	e7e1      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 3330.0f;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <LSM6DSL_ACC_GetOutputDataRate+0xac>)
 80036bc:	6023      	str	r3, [r4, #0]
      break;
 80036be:	e7de      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 6660.0f;
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <LSM6DSL_ACC_GetOutputDataRate+0xb0>)
 80036c2:	6023      	str	r3, [r4, #0]
      break;
 80036c4:	e7db      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
    return LSM6DSL_ERROR;
 80036c6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ca:	e7d8      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      ret = LSM6DSL_ERROR;
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	e7d5      	b.n	800367e <LSM6DSL_ACC_GetOutputDataRate+0x32>
 80036d2:	bf00      	nop
 80036d4:	3fcccccd 	.word	0x3fcccccd
 80036d8:	41480000 	.word	0x41480000
 80036dc:	41d00000 	.word	0x41d00000
 80036e0:	42500000 	.word	0x42500000
 80036e4:	42d00000 	.word	0x42d00000
 80036e8:	43500000 	.word	0x43500000
 80036ec:	43d00000 	.word	0x43d00000
 80036f0:	44504000 	.word	0x44504000
 80036f4:	44cf8000 	.word	0x44cf8000
 80036f8:	45502000 	.word	0x45502000
 80036fc:	45d02000 	.word	0x45d02000

08003700 <LSM6DSL_ACC_GetSensitivity>:
{
 8003700:	b510      	push	{r4, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003706:	f10d 0107 	add.w	r1, sp, #7
 800370a:	301c      	adds	r0, #28
 800370c:	f000 fa62 	bl	8003bd4 <lsm6dsl_xl_full_scale_get>
 8003710:	b9b0      	cbnz	r0, 8003740 <LSM6DSL_ACC_GetSensitivity+0x40>
 8003712:	4602      	mov	r2, r0
  switch (full_scale)
 8003714:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d814      	bhi.n	8003746 <LSM6DSL_ACC_GetSensitivity+0x46>
 800371c:	e8df f003 	tbb	[pc, r3]
 8003720:	0a070d02 	.word	0x0a070d02
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <LSM6DSL_ACC_GetSensitivity+0x4c>)
 8003726:	6023      	str	r3, [r4, #0]
}
 8003728:	4610      	mov	r0, r2
 800372a:	b002      	add	sp, #8
 800372c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <LSM6DSL_ACC_GetSensitivity+0x50>)
 8003730:	6023      	str	r3, [r4, #0]
      break;
 8003732:	e7f9      	b.n	8003728 <LSM6DSL_ACC_GetSensitivity+0x28>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <LSM6DSL_ACC_GetSensitivity+0x54>)
 8003736:	6023      	str	r3, [r4, #0]
      break;
 8003738:	e7f6      	b.n	8003728 <LSM6DSL_ACC_GetSensitivity+0x28>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <LSM6DSL_ACC_GetSensitivity+0x58>)
 800373c:	6023      	str	r3, [r4, #0]
      break;
 800373e:	e7f3      	b.n	8003728 <LSM6DSL_ACC_GetSensitivity+0x28>
    return LSM6DSL_ERROR;
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	e7f0      	b.n	8003728 <LSM6DSL_ACC_GetSensitivity+0x28>
      ret = LSM6DSL_ERROR;
 8003746:	f04f 32ff 	mov.w	r2, #4294967295
 800374a:	e7ed      	b.n	8003728 <LSM6DSL_ACC_GetSensitivity+0x28>
 800374c:	3d79db23 	.word	0x3d79db23
 8003750:	3df9db23 	.word	0x3df9db23
 8003754:	3e79db23 	.word	0x3e79db23
 8003758:	3ef9db23 	.word	0x3ef9db23

0800375c <LSM6DSL_ACC_GetFullScale>:
{
 800375c:	b510      	push	{r4, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003762:	f10d 0107 	add.w	r1, sp, #7
 8003766:	301c      	adds	r0, #28
 8003768:	f000 fa34 	bl	8003bd4 <lsm6dsl_xl_full_scale_get>
 800376c:	b9b0      	cbnz	r0, 800379c <LSM6DSL_ACC_GetFullScale+0x40>
 800376e:	4602      	mov	r2, r0
  switch (fs_low_level)
 8003770:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d814      	bhi.n	80037a2 <LSM6DSL_ACC_GetFullScale+0x46>
 8003778:	e8df f003 	tbb	[pc, r3]
 800377c:	0a070d02 	.word	0x0a070d02
      *FullScale =  2;
 8003780:	2302      	movs	r3, #2
 8003782:	6023      	str	r3, [r4, #0]
}
 8003784:	4610      	mov	r0, r2
 8003786:	b002      	add	sp, #8
 8003788:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 800378a:	2304      	movs	r3, #4
 800378c:	6023      	str	r3, [r4, #0]
      break;
 800378e:	e7f9      	b.n	8003784 <LSM6DSL_ACC_GetFullScale+0x28>
      *FullScale =  8;
 8003790:	2308      	movs	r3, #8
 8003792:	6023      	str	r3, [r4, #0]
      break;
 8003794:	e7f6      	b.n	8003784 <LSM6DSL_ACC_GetFullScale+0x28>
      *FullScale = 16;
 8003796:	2310      	movs	r3, #16
 8003798:	6023      	str	r3, [r4, #0]
      break;
 800379a:	e7f3      	b.n	8003784 <LSM6DSL_ACC_GetFullScale+0x28>
    return LSM6DSL_ERROR;
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	e7f0      	b.n	8003784 <LSM6DSL_ACC_GetFullScale+0x28>
      ret = LSM6DSL_ERROR;
 80037a2:	f04f 32ff 	mov.w	r2, #4294967295
 80037a6:	e7ed      	b.n	8003784 <LSM6DSL_ACC_GetFullScale+0x28>

080037a8 <LSM6DSL_ACC_GetAxesRaw>:
{
 80037a8:	b510      	push	{r4, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	460c      	mov	r4, r1
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80037ae:	4669      	mov	r1, sp
 80037b0:	301c      	adds	r0, #28
 80037b2:	f000 fb46 	bl	8003e42 <lsm6dsl_acceleration_raw_get>
 80037b6:	b960      	cbnz	r0, 80037d2 <LSM6DSL_ACC_GetAxesRaw+0x2a>
 80037b8:	4603      	mov	r3, r0
  Value->x = data_raw.i16bit[0];
 80037ba:	f9bd 2000 	ldrsh.w	r2, [sp]
 80037be:	8022      	strh	r2, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80037c0:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80037c4:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80037c6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80037ca:	80a2      	strh	r2, [r4, #4]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	b002      	add	sp, #8
 80037d0:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	e7f9      	b.n	80037cc <LSM6DSL_ACC_GetAxesRaw+0x24>

080037d8 <LSM6DSL_ACC_GetAxes>:
{
 80037d8:	b530      	push	{r4, r5, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	4605      	mov	r5, r0
 80037de:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80037e0:	2300      	movs	r3, #0
 80037e2:	9301      	str	r3, [sp, #4]
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80037e4:	a902      	add	r1, sp, #8
 80037e6:	301c      	adds	r0, #28
 80037e8:	f000 fb2b 	bl	8003e42 <lsm6dsl_acceleration_raw_get>
 80037ec:	bb70      	cbnz	r0, 800384c <LSM6DSL_ACC_GetAxes+0x74>
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80037ee:	a901      	add	r1, sp, #4
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7ff ff85 	bl	8003700 <LSM6DSL_ACC_GetSensitivity>
 80037f6:	4603      	mov	r3, r0
 80037f8:	bb58      	cbnz	r0, 8003852 <LSM6DSL_ACC_GetAxes+0x7a>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80037fa:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80037fe:	ee07 2a10 	vmov	s14, r2
 8003802:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003806:	eddd 7a01 	vldr	s15, [sp, #4]
 800380a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003812:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003816:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800381a:	ee07 2a10 	vmov	s14, r2
 800381e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003826:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800382a:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800382e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003832:	ee07 2a10 	vmov	s14, r2
 8003836:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800383a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003842:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003846:	4618      	mov	r0, r3
 8003848:	b005      	add	sp, #20
 800384a:	bd30      	pop	{r4, r5, pc}
    return LSM6DSL_ERROR;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
 8003850:	e7f9      	b.n	8003846 <LSM6DSL_ACC_GetAxes+0x6e>
    return LSM6DSL_ERROR;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e7f6      	b.n	8003846 <LSM6DSL_ACC_GetAxes+0x6e>

08003858 <LSM6DSL_GYRO_Disable>:
{
 8003858:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 800385a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800385e:	b913      	cbnz	r3, 8003866 <LSM6DSL_GYRO_Disable+0xe>
    return LSM6DSL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd38      	pop	{r3, r4, r5, pc}
 8003866:	4604      	mov	r4, r0
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003868:	f100 051c 	add.w	r5, r0, #28
 800386c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8003870:	4628      	mov	r0, r5
 8003872:	f000 fa89 	bl	8003d88 <lsm6dsl_gy_data_rate_get>
 8003876:	b948      	cbnz	r0, 800388c <LSM6DSL_GYRO_Disable+0x34>
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003878:	2100      	movs	r1, #0
 800387a:	4628      	mov	r0, r5
 800387c:	f000 fa68 	bl	8003d50 <lsm6dsl_gy_data_rate_set>
 8003880:	4603      	mov	r3, r0
 8003882:	b930      	cbnz	r0, 8003892 <LSM6DSL_GYRO_Disable+0x3a>
  pObj->gyro_is_enabled = 0;
 8003884:	2200      	movs	r2, #0
 8003886:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  return LSM6DSL_OK;
 800388a:	e7ea      	b.n	8003862 <LSM6DSL_GYRO_Disable+0xa>
    return LSM6DSL_ERROR;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295
 8003890:	e7e7      	b.n	8003862 <LSM6DSL_GYRO_Disable+0xa>
    return LSM6DSL_ERROR;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e7e4      	b.n	8003862 <LSM6DSL_GYRO_Disable+0xa>

08003898 <LSM6DSL_DeInit>:
{
 8003898:	b510      	push	{r4, lr}
 800389a:	4604      	mov	r4, r0
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 800389c:	f7ff feb6 	bl	800360c <LSM6DSL_ACC_Disable>
 80038a0:	b968      	cbnz	r0, 80038be <LSM6DSL_DeInit+0x26>
  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ffd8 	bl	8003858 <LSM6DSL_GYRO_Disable>
 80038a8:	4602      	mov	r2, r0
 80038aa:	b958      	cbnz	r0, 80038c4 <LSM6DSL_DeInit+0x2c>
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80038b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  pObj->is_initialized = 0;
 80038b6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 80038ba:	4610      	mov	r0, r2
 80038bc:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 80038be:	f04f 32ff 	mov.w	r2, #4294967295
 80038c2:	e7fa      	b.n	80038ba <LSM6DSL_DeInit+0x22>
    return LSM6DSL_ERROR;
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	e7f7      	b.n	80038ba <LSM6DSL_DeInit+0x22>
	...

080038cc <LSM6DSL_GYRO_GetOutputDataRate>:
{
 80038cc:	b510      	push	{r4, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	460c      	mov	r4, r1
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80038d2:	f10d 0107 	add.w	r1, sp, #7
 80038d6:	301c      	adds	r0, #28
 80038d8:	f000 fa56 	bl	8003d88 <lsm6dsl_gy_data_rate_get>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d12f      	bne.n	8003940 <LSM6DSL_GYRO_GetOutputDataRate+0x74>
 80038e0:	4602      	mov	r2, r0
  switch (odr_low_level)
 80038e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	d82d      	bhi.n	8003946 <LSM6DSL_GYRO_GetOutputDataRate+0x7a>
 80038ea:	e8df f003 	tbb	[pc, r3]
 80038ee:	0b06      	.short	0x0b06
 80038f0:	1714110e 	.word	0x1714110e
 80038f4:	23201d1a 	.word	0x23201d1a
 80038f8:	26          	.byte	0x26
 80038f9:	00          	.byte	0x00
      *Odr = 0.0f;
 80038fa:	2300      	movs	r3, #0
 80038fc:	6023      	str	r3, [r4, #0]
}
 80038fe:	4610      	mov	r0, r2
 8003900:	b002      	add	sp, #8
 8003902:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <LSM6DSL_GYRO_GetOutputDataRate+0x80>)
 8003906:	6023      	str	r3, [r4, #0]
      break;
 8003908:	e7f9      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <LSM6DSL_GYRO_GetOutputDataRate+0x84>)
 800390c:	6023      	str	r3, [r4, #0]
      break;
 800390e:	e7f6      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 8003910:	4b10      	ldr	r3, [pc, #64]	; (8003954 <LSM6DSL_GYRO_GetOutputDataRate+0x88>)
 8003912:	6023      	str	r3, [r4, #0]
      break;
 8003914:	e7f3      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <LSM6DSL_GYRO_GetOutputDataRate+0x8c>)
 8003918:	6023      	str	r3, [r4, #0]
      break;
 800391a:	e7f0      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <LSM6DSL_GYRO_GetOutputDataRate+0x90>)
 800391e:	6023      	str	r3, [r4, #0]
      break;
 8003920:	e7ed      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <LSM6DSL_GYRO_GetOutputDataRate+0x94>)
 8003924:	6023      	str	r3, [r4, #0]
      break;
 8003926:	e7ea      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <LSM6DSL_GYRO_GetOutputDataRate+0x98>)
 800392a:	6023      	str	r3, [r4, #0]
      break;
 800392c:	e7e7      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  1660.0f;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <LSM6DSL_GYRO_GetOutputDataRate+0x9c>)
 8003930:	6023      	str	r3, [r4, #0]
      break;
 8003932:	e7e4      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  3330.0f;
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <LSM6DSL_GYRO_GetOutputDataRate+0xa0>)
 8003936:	6023      	str	r3, [r4, #0]
      break;
 8003938:	e7e1      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  6660.0f;
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <LSM6DSL_GYRO_GetOutputDataRate+0xa4>)
 800393c:	6023      	str	r3, [r4, #0]
      break;
 800393e:	e7de      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
    return LSM6DSL_ERROR;
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	e7db      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      ret = LSM6DSL_ERROR;
 8003946:	f04f 32ff 	mov.w	r2, #4294967295
 800394a:	e7d8      	b.n	80038fe <LSM6DSL_GYRO_GetOutputDataRate+0x32>
 800394c:	41480000 	.word	0x41480000
 8003950:	41d00000 	.word	0x41d00000
 8003954:	42500000 	.word	0x42500000
 8003958:	42d00000 	.word	0x42d00000
 800395c:	43500000 	.word	0x43500000
 8003960:	43d00000 	.word	0x43d00000
 8003964:	44504000 	.word	0x44504000
 8003968:	44cf8000 	.word	0x44cf8000
 800396c:	45502000 	.word	0x45502000
 8003970:	45d02000 	.word	0x45d02000

08003974 <LSM6DSL_GYRO_GetSensitivity>:
{
 8003974:	b510      	push	{r4, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800397a:	f10d 0107 	add.w	r1, sp, #7
 800397e:	301c      	adds	r0, #28
 8003980:	f000 f9bf 	bl	8003d02 <lsm6dsl_gy_full_scale_get>
 8003984:	b9d8      	cbnz	r0, 80039be <LSM6DSL_GYRO_GetSensitivity+0x4a>
 8003986:	4602      	mov	r2, r0
  switch (full_scale)
 8003988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d819      	bhi.n	80039c4 <LSM6DSL_GYRO_GetSensitivity+0x50>
 8003990:	e8df f003 	tbb	[pc, r3]
 8003994:	180c0409 	.word	0x180c0409
 8003998:	180f      	.short	0x180f
 800399a:	12          	.byte	0x12
 800399b:	00          	.byte	0x00
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <LSM6DSL_GYRO_GetSensitivity+0x58>)
 800399e:	6023      	str	r3, [r4, #0]
}
 80039a0:	4610      	mov	r0, r2
 80039a2:	b002      	add	sp, #8
 80039a4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <LSM6DSL_GYRO_GetSensitivity+0x5c>)
 80039a8:	6023      	str	r3, [r4, #0]
      break;
 80039aa:	e7f9      	b.n	80039a0 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <LSM6DSL_GYRO_GetSensitivity+0x60>)
 80039ae:	6023      	str	r3, [r4, #0]
      break;
 80039b0:	e7f6      	b.n	80039a0 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <LSM6DSL_GYRO_GetSensitivity+0x64>)
 80039b4:	6023      	str	r3, [r4, #0]
      break;
 80039b6:	e7f3      	b.n	80039a0 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <LSM6DSL_GYRO_GetSensitivity+0x68>)
 80039ba:	6023      	str	r3, [r4, #0]
      break;
 80039bc:	e7f0      	b.n	80039a0 <LSM6DSL_GYRO_GetSensitivity+0x2c>
    return LSM6DSL_ERROR;
 80039be:	f04f 32ff 	mov.w	r2, #4294967295
 80039c2:	e7ed      	b.n	80039a0 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      ret = LSM6DSL_ERROR;
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	e7ea      	b.n	80039a0 <LSM6DSL_GYRO_GetSensitivity+0x2c>
 80039ca:	bf00      	nop
 80039cc:	408c0000 	.word	0x408c0000
 80039d0:	410c0000 	.word	0x410c0000
 80039d4:	418c0000 	.word	0x418c0000
 80039d8:	420c0000 	.word	0x420c0000
 80039dc:	428c0000 	.word	0x428c0000

080039e0 <LSM6DSL_GYRO_GetFullScale>:
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80039e6:	f10d 0107 	add.w	r1, sp, #7
 80039ea:	301c      	adds	r0, #28
 80039ec:	f000 f989 	bl	8003d02 <lsm6dsl_gy_full_scale_get>
 80039f0:	b9f0      	cbnz	r0, 8003a30 <LSM6DSL_GYRO_GetFullScale+0x50>
 80039f2:	4602      	mov	r2, r0
  switch (fs_low_level)
 80039f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d81c      	bhi.n	8003a36 <LSM6DSL_GYRO_GetFullScale+0x56>
 80039fc:	e8df f003 	tbb	[pc, r3]
 8003a00:	1b0c0409 	.word	0x1b0c0409
 8003a04:	1b10      	.short	0x1b10
 8003a06:	14          	.byte	0x14
 8003a07:	00          	.byte	0x00
      *FullScale =  125;
 8003a08:	237d      	movs	r3, #125	; 0x7d
 8003a0a:	6023      	str	r3, [r4, #0]
}
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	b002      	add	sp, #8
 8003a10:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8003a12:	23fa      	movs	r3, #250	; 0xfa
 8003a14:	6023      	str	r3, [r4, #0]
      break;
 8003a16:	e7f9      	b.n	8003a0c <LSM6DSL_GYRO_GetFullScale+0x2c>
      *FullScale =  500;
 8003a18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a1c:	6023      	str	r3, [r4, #0]
      break;
 8003a1e:	e7f5      	b.n	8003a0c <LSM6DSL_GYRO_GetFullScale+0x2c>
      *FullScale = 1000;
 8003a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a24:	6023      	str	r3, [r4, #0]
      break;
 8003a26:	e7f1      	b.n	8003a0c <LSM6DSL_GYRO_GetFullScale+0x2c>
      *FullScale = 2000;
 8003a28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003a2c:	6023      	str	r3, [r4, #0]
      break;
 8003a2e:	e7ed      	b.n	8003a0c <LSM6DSL_GYRO_GetFullScale+0x2c>
    return LSM6DSL_ERROR;
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	e7ea      	b.n	8003a0c <LSM6DSL_GYRO_GetFullScale+0x2c>
      ret = LSM6DSL_ERROR;
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	e7e7      	b.n	8003a0c <LSM6DSL_GYRO_GetFullScale+0x2c>

08003a3c <LSM6DSL_GYRO_GetAxesRaw>:
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003a42:	4669      	mov	r1, sp
 8003a44:	301c      	adds	r0, #28
 8003a46:	f000 f9f5 	bl	8003e34 <lsm6dsl_angular_rate_raw_get>
 8003a4a:	b960      	cbnz	r0, 8003a66 <LSM6DSL_GYRO_GetAxesRaw+0x2a>
 8003a4c:	4603      	mov	r3, r0
  Value->x = data_raw.i16bit[0];
 8003a4e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003a52:	8022      	strh	r2, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003a54:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8003a58:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003a5a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003a5e:	80a2      	strh	r2, [r4, #4]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	b002      	add	sp, #8
 8003a64:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e7f9      	b.n	8003a60 <LSM6DSL_GYRO_GetAxesRaw+0x24>

08003a6c <LSM6DSL_GYRO_GetAxes>:
{
 8003a6c:	b530      	push	{r4, r5, lr}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	4605      	mov	r5, r0
 8003a72:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003a74:	a902      	add	r1, sp, #8
 8003a76:	301c      	adds	r0, #28
 8003a78:	f000 f9dc 	bl	8003e34 <lsm6dsl_angular_rate_raw_get>
 8003a7c:	bb70      	cbnz	r0, 8003adc <LSM6DSL_GYRO_GetAxes+0x70>
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003a7e:	a901      	add	r1, sp, #4
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7ff ff77 	bl	8003974 <LSM6DSL_GYRO_GetSensitivity>
 8003a86:	4603      	mov	r3, r0
 8003a88:	bb58      	cbnz	r0, 8003ae2 <LSM6DSL_GYRO_GetAxes+0x76>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003a8a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8003a8e:	ee07 2a10 	vmov	s14, r2
 8003a92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a96:	eddd 7a01 	vldr	s15, [sp, #4]
 8003a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a9e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003aa2:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003aa6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8003aaa:	ee07 2a10 	vmov	s14, r2
 8003aae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ab6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003aba:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003abe:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003ac2:	ee07 2a10 	vmov	s14, r2
 8003ac6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad2:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	b005      	add	sp, #20
 8003ada:	bd30      	pop	{r4, r5, pc}
    return LSM6DSL_ERROR;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	e7f9      	b.n	8003ad6 <LSM6DSL_GYRO_GetAxes+0x6a>
    return LSM6DSL_ERROR;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	e7f6      	b.n	8003ad6 <LSM6DSL_GYRO_GetAxes+0x6a>

08003ae8 <LSM6DSL_Write_Reg>:
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	ac02      	add	r4, sp, #8
 8003aee:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003af2:	2301      	movs	r3, #1
 8003af4:	4622      	mov	r2, r4
 8003af6:	301c      	adds	r0, #28
 8003af8:	f000 f84b 	bl	8003b92 <lsm6dsl_write_reg>
 8003afc:	4603      	mov	r3, r0
 8003afe:	b910      	cbnz	r0, 8003b06 <LSM6DSL_Write_Reg+0x1e>
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	b002      	add	sp, #8
 8003b04:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e7f9      	b.n	8003b00 <LSM6DSL_Write_Reg+0x18>

08003b0c <LSM6DSL_RegisterBusIO>:
  if (pObj == NULL)
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d02c      	beq.n	8003b6a <LSM6DSL_RegisterBusIO+0x5e>
{
 8003b10:	b510      	push	{r4, lr}
 8003b12:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8003b14:	680a      	ldr	r2, [r1, #0]
 8003b16:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b18:	6848      	ldr	r0, [r1, #4]
 8003b1a:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003b1c:	6888      	ldr	r0, [r1, #8]
 8003b1e:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8003b20:	7b08      	ldrb	r0, [r1, #12]
 8003b22:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b24:	6908      	ldr	r0, [r1, #16]
 8003b26:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b28:	6948      	ldr	r0, [r1, #20]
 8003b2a:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003b2c:	6989      	ldr	r1, [r1, #24]
 8003b2e:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003b30:	4913      	ldr	r1, [pc, #76]	; (8003b80 <LSM6DSL_RegisterBusIO+0x74>)
 8003b32:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003b34:	4913      	ldr	r1, [pc, #76]	; (8003b84 <LSM6DSL_RegisterBusIO+0x78>)
 8003b36:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8003b38:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8003b3a:	b1d2      	cbz	r2, 8003b72 <LSM6DSL_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003b3c:	4790      	blx	r2
 8003b3e:	4603      	mov	r3, r0
 8003b40:	b9d0      	cbnz	r0, 8003b78 <LSM6DSL_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003b42:	68a2      	ldr	r2, [r4, #8]
 8003b44:	2a02      	cmp	r2, #2
 8003b46:	d001      	beq.n	8003b4c <LSM6DSL_RegisterBusIO+0x40>
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003b4c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	d1f9      	bne.n	8003b48 <LSM6DSL_RegisterBusIO+0x3c>
          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003b54:	220c      	movs	r2, #12
 8003b56:	2112      	movs	r1, #18
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff ffc5 	bl	8003ae8 <LSM6DSL_Write_Reg>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0f1      	beq.n	8003b48 <LSM6DSL_RegisterBusIO+0x3c>
            ret = LSM6DSL_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
  return ret;
 8003b68:	e7ee      	b.n	8003b48 <LSM6DSL_RegisterBusIO+0x3c>
    ret = LSM6DSL_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4770      	bx	lr
      ret = LSM6DSL_ERROR;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	e7e7      	b.n	8003b48 <LSM6DSL_RegisterBusIO+0x3c>
      ret = LSM6DSL_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	e7e4      	b.n	8003b48 <LSM6DSL_RegisterBusIO+0x3c>
 8003b7e:	bf00      	nop
 8003b80:	08003299 	.word	0x08003299
 8003b84:	080032a3 	.word	0x080032a3

08003b88 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003b88:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003b8a:	6844      	ldr	r4, [r0, #4]
 8003b8c:	6880      	ldr	r0, [r0, #8]
 8003b8e:	47a0      	blx	r4
  return ret;
}
 8003b90:	bd10      	pop	{r4, pc}

08003b92 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003b92:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003b94:	6804      	ldr	r4, [r0, #0]
 8003b96:	6880      	ldr	r0, [r0, #8]
 8003b98:	47a0      	blx	r4
  return ret;
}
 8003b9a:	bd10      	pop	{r4, pc}

08003b9c <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8003b9c:	b530      	push	{r4, r5, lr}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	460d      	mov	r5, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	aa01      	add	r2, sp, #4
 8003ba8:	2110      	movs	r1, #16
 8003baa:	f7ff ffed 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b110      	cbz	r0, 8003bb8 <lsm6dsl_xl_full_scale_set+0x1c>
    ctrl1_xl.fs_xl = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	b003      	add	sp, #12
 8003bb6:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003bb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bbc:	f365 0383 	bfi	r3, r5, #2, #2
 8003bc0:	aa02      	add	r2, sp, #8
 8003bc2:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	2110      	movs	r1, #16
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff ffe1 	bl	8003b92 <lsm6dsl_write_reg>
 8003bd0:	4603      	mov	r3, r0
  return ret;
 8003bd2:	e7ee      	b.n	8003bb2 <lsm6dsl_xl_full_scale_set+0x16>

08003bd4 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	460c      	mov	r4, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003bda:	2301      	movs	r3, #1
 8003bdc:	aa01      	add	r2, sp, #4
 8003bde:	2110      	movs	r1, #16
 8003be0:	f7ff ffd2 	bl	8003b88 <lsm6dsl_read_reg>
  switch (ctrl1_xl.fs_xl) {
 8003be4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003be8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d810      	bhi.n	8003c12 <lsm6dsl_xl_full_scale_get+0x3e>
 8003bf0:	e8df f003 	tbb	[pc, r3]
 8003bf4:	0c090602 	.word	0x0c090602
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_XL_FS_ND;
      break;
  }

  return ret;
}
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_16g;
 8003c00:	2301      	movs	r3, #1
 8003c02:	7023      	strb	r3, [r4, #0]
      break;
 8003c04:	e7fa      	b.n	8003bfc <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_4g;
 8003c06:	2302      	movs	r3, #2
 8003c08:	7023      	strb	r3, [r4, #0]
      break;
 8003c0a:	e7f7      	b.n	8003bfc <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_8g;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	7023      	strb	r3, [r4, #0]
      break;
 8003c10:	e7f4      	b.n	8003bfc <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_XL_FS_ND;
 8003c12:	2304      	movs	r3, #4
 8003c14:	7023      	strb	r3, [r4, #0]
  return ret;
 8003c16:	e7f1      	b.n	8003bfc <lsm6dsl_xl_full_scale_get+0x28>

08003c18 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8003c18:	b530      	push	{r4, r5, lr}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	460d      	mov	r5, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003c20:	2301      	movs	r3, #1
 8003c22:	aa01      	add	r2, sp, #4
 8003c24:	2110      	movs	r1, #16
 8003c26:	f7ff ffaf 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	b110      	cbz	r0, 8003c34 <lsm6dsl_xl_data_rate_set+0x1c>
    ctrl1_xl.odr_xl = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	b003      	add	sp, #12
 8003c32:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.odr_xl = (uint8_t) val;
 8003c34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c38:	f365 1307 	bfi	r3, r5, #4, #4
 8003c3c:	aa02      	add	r2, sp, #8
 8003c3e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003c42:	2301      	movs	r3, #1
 8003c44:	2110      	movs	r1, #16
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7ff ffa3 	bl	8003b92 <lsm6dsl_write_reg>
 8003c4c:	4603      	mov	r3, r0
  return ret;
 8003c4e:	e7ee      	b.n	8003c2e <lsm6dsl_xl_data_rate_set+0x16>

08003c50 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	460c      	mov	r4, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003c56:	2301      	movs	r3, #1
 8003c58:	aa01      	add	r2, sp, #4
 8003c5a:	2110      	movs	r1, #16
 8003c5c:	f7ff ff94 	bl	8003b88 <lsm6dsl_read_reg>
  switch (ctrl1_xl.odr_xl) {
 8003c60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	2b0b      	cmp	r3, #11
 8003c68:	d82c      	bhi.n	8003cc4 <lsm6dsl_xl_data_rate_get+0x74>
 8003c6a:	e8df f003 	tbb	[pc, r3]
 8003c6e:	0a06      	.short	0x0a06
 8003c70:	1613100d 	.word	0x1613100d
 8003c74:	221f1c19 	.word	0x221f1c19
 8003c78:	2825      	.short	0x2825
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_XL_ODR_ND;
      break;
  }

  return ret;
}
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_XL_ODR_12Hz5;
 8003c82:	2301      	movs	r3, #1
 8003c84:	7023      	strb	r3, [r4, #0]
      break;
 8003c86:	e7fa      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_26Hz;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	7023      	strb	r3, [r4, #0]
      break;
 8003c8c:	e7f7      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_52Hz;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	7023      	strb	r3, [r4, #0]
      break;
 8003c92:	e7f4      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_104Hz;
 8003c94:	2304      	movs	r3, #4
 8003c96:	7023      	strb	r3, [r4, #0]
      break;
 8003c98:	e7f1      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_208Hz;
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	7023      	strb	r3, [r4, #0]
      break;
 8003c9e:	e7ee      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_416Hz;
 8003ca0:	2306      	movs	r3, #6
 8003ca2:	7023      	strb	r3, [r4, #0]
      break;
 8003ca4:	e7eb      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_833Hz;
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	7023      	strb	r3, [r4, #0]
      break;
 8003caa:	e7e8      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8003cac:	2308      	movs	r3, #8
 8003cae:	7023      	strb	r3, [r4, #0]
      break;
 8003cb0:	e7e5      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8003cb2:	2309      	movs	r3, #9
 8003cb4:	7023      	strb	r3, [r4, #0]
      break;
 8003cb6:	e7e2      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8003cb8:	230a      	movs	r3, #10
 8003cba:	7023      	strb	r3, [r4, #0]
      break;
 8003cbc:	e7df      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_1Hz6;
 8003cbe:	230b      	movs	r3, #11
 8003cc0:	7023      	strb	r3, [r4, #0]
      break;
 8003cc2:	e7dc      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_ND;
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	7023      	strb	r3, [r4, #0]
  return ret;
 8003cc8:	e7d9      	b.n	8003c7e <lsm6dsl_xl_data_rate_get+0x2e>

08003cca <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8003cca:	b530      	push	{r4, r5, lr}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	4604      	mov	r4, r0
 8003cd0:	460d      	mov	r5, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	aa01      	add	r2, sp, #4
 8003cd6:	2111      	movs	r1, #17
 8003cd8:	f7ff ff56 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003cdc:	4603      	mov	r3, r0
 8003cde:	b110      	cbz	r0, 8003ce6 <lsm6dsl_gy_full_scale_set+0x1c>
    ctrl2_g.fs_g = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	b003      	add	sp, #12
 8003ce4:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t) val;
 8003ce6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003cea:	f365 0343 	bfi	r3, r5, #1, #3
 8003cee:	aa02      	add	r2, sp, #8
 8003cf0:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	2111      	movs	r1, #17
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7ff ff4a 	bl	8003b92 <lsm6dsl_write_reg>
 8003cfe:	4603      	mov	r3, r0
  return ret;
 8003d00:	e7ee      	b.n	8003ce0 <lsm6dsl_gy_full_scale_set+0x16>

08003d02 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8003d02:	b510      	push	{r4, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	460c      	mov	r4, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003d08:	2301      	movs	r3, #1
 8003d0a:	aa01      	add	r2, sp, #4
 8003d0c:	2111      	movs	r1, #17
 8003d0e:	f7ff ff3b 	bl	8003b88 <lsm6dsl_read_reg>
  switch (ctrl2_g.fs_g) {
 8003d12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d16:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d815      	bhi.n	8003d4a <lsm6dsl_gy_full_scale_get+0x48>
 8003d1e:	e8df f003 	tbb	[pc, r3]
 8003d22:	0804      	.short	0x0804
 8003d24:	140e140b 	.word	0x140e140b
 8003d28:	11          	.byte	0x11
 8003d29:	00          	.byte	0x00
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_GY_FS_ND;
      break;
  }

  return ret;
}
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_125dps;
 8003d32:	2301      	movs	r3, #1
 8003d34:	7023      	strb	r3, [r4, #0]
      break;
 8003d36:	e7fa      	b.n	8003d2e <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_500dps;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	7023      	strb	r3, [r4, #0]
      break;
 8003d3c:	e7f7      	b.n	8003d2e <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_1000dps;
 8003d3e:	2304      	movs	r3, #4
 8003d40:	7023      	strb	r3, [r4, #0]
      break;
 8003d42:	e7f4      	b.n	8003d2e <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_2000dps;
 8003d44:	2306      	movs	r3, #6
 8003d46:	7023      	strb	r3, [r4, #0]
      break;
 8003d48:	e7f1      	b.n	8003d2e <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_GY_FS_ND;
 8003d4a:	2307      	movs	r3, #7
 8003d4c:	7023      	strb	r3, [r4, #0]
  return ret;
 8003d4e:	e7ee      	b.n	8003d2e <lsm6dsl_gy_full_scale_get+0x2c>

08003d50 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8003d50:	b530      	push	{r4, r5, lr}
 8003d52:	b083      	sub	sp, #12
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003d58:	2301      	movs	r3, #1
 8003d5a:	aa01      	add	r2, sp, #4
 8003d5c:	2111      	movs	r1, #17
 8003d5e:	f7ff ff13 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003d62:	4603      	mov	r3, r0
 8003d64:	b110      	cbz	r0, 8003d6c <lsm6dsl_gy_data_rate_set+0x1c>
    ctrl2_g.odr_g = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	b003      	add	sp, #12
 8003d6a:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.odr_g = (uint8_t) val;
 8003d6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d70:	f365 1307 	bfi	r3, r5, #4, #4
 8003d74:	aa02      	add	r2, sp, #8
 8003d76:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	2111      	movs	r1, #17
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7ff ff07 	bl	8003b92 <lsm6dsl_write_reg>
 8003d84:	4603      	mov	r3, r0
  return ret;
 8003d86:	e7ee      	b.n	8003d66 <lsm6dsl_gy_data_rate_set+0x16>

08003d88 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	460c      	mov	r4, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003d8e:	2301      	movs	r3, #1
 8003d90:	aa01      	add	r2, sp, #4
 8003d92:	2111      	movs	r1, #17
 8003d94:	f7ff fef8 	bl	8003b88 <lsm6dsl_read_reg>
  switch (ctrl2_g.odr_g) {
 8003d98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	2b0a      	cmp	r3, #10
 8003da0:	d829      	bhi.n	8003df6 <lsm6dsl_gy_data_rate_get+0x6e>
 8003da2:	e8df f003 	tbb	[pc, r3]
 8003da6:	0a06      	.short	0x0a06
 8003da8:	1613100d 	.word	0x1613100d
 8003dac:	221f1c19 	.word	0x221f1c19
 8003db0:	25          	.byte	0x25
 8003db1:	00          	.byte	0x00
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8003db2:	2300      	movs	r3, #0
 8003db4:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_GY_ODR_ND;
      break;
  }

  return ret;
}
 8003db6:	b002      	add	sp, #8
 8003db8:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_GY_ODR_12Hz5;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	7023      	strb	r3, [r4, #0]
      break;
 8003dbe:	e7fa      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_26Hz;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	7023      	strb	r3, [r4, #0]
      break;
 8003dc4:	e7f7      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_52Hz;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	7023      	strb	r3, [r4, #0]
      break;
 8003dca:	e7f4      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_104Hz;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	7023      	strb	r3, [r4, #0]
      break;
 8003dd0:	e7f1      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_208Hz;
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	7023      	strb	r3, [r4, #0]
      break;
 8003dd6:	e7ee      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_416Hz;
 8003dd8:	2306      	movs	r3, #6
 8003dda:	7023      	strb	r3, [r4, #0]
      break;
 8003ddc:	e7eb      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_833Hz;
 8003dde:	2307      	movs	r3, #7
 8003de0:	7023      	strb	r3, [r4, #0]
      break;
 8003de2:	e7e8      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8003de4:	2308      	movs	r3, #8
 8003de6:	7023      	strb	r3, [r4, #0]
      break;
 8003de8:	e7e5      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8003dea:	2309      	movs	r3, #9
 8003dec:	7023      	strb	r3, [r4, #0]
      break;
 8003dee:	e7e2      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8003df0:	230a      	movs	r3, #10
 8003df2:	7023      	strb	r3, [r4, #0]
      break;
 8003df4:	e7df      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_ND;
 8003df6:	230b      	movs	r3, #11
 8003df8:	7023      	strb	r3, [r4, #0]
  return ret;
 8003dfa:	e7dc      	b.n	8003db6 <lsm6dsl_gy_data_rate_get+0x2e>

08003dfc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dfc:	b530      	push	{r4, r5, lr}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	4604      	mov	r4, r0
 8003e02:	460d      	mov	r5, r1
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003e04:	2301      	movs	r3, #1
 8003e06:	aa01      	add	r2, sp, #4
 8003e08:	2112      	movs	r1, #18
 8003e0a:	f7ff febd 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003e0e:	4603      	mov	r3, r0
 8003e10:	b110      	cbz	r0, 8003e18 <lsm6dsl_block_data_update_set+0x1c>
    ctrl3_c.bdu = val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	b003      	add	sp, #12
 8003e16:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = val;
 8003e18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e1c:	f365 1386 	bfi	r3, r5, #6, #1
 8003e20:	aa02      	add	r2, sp, #8
 8003e22:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003e26:	2301      	movs	r3, #1
 8003e28:	2112      	movs	r1, #18
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff feb1 	bl	8003b92 <lsm6dsl_write_reg>
 8003e30:	4603      	mov	r3, r0
  return ret;
 8003e32:	e7ee      	b.n	8003e12 <lsm6dsl_block_data_update_set+0x16>

08003e34 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e34:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8003e36:	2306      	movs	r3, #6
 8003e38:	460a      	mov	r2, r1
 8003e3a:	2122      	movs	r1, #34	; 0x22
 8003e3c:	f7ff fea4 	bl	8003b88 <lsm6dsl_read_reg>
  return ret;
}
 8003e40:	bd08      	pop	{r3, pc}

08003e42 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e42:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8003e44:	2306      	movs	r3, #6
 8003e46:	460a      	mov	r2, r1
 8003e48:	2128      	movs	r1, #40	; 0x28
 8003e4a:	f7ff fe9d 	bl	8003b88 <lsm6dsl_read_reg>
  return ret;
}
 8003e4e:	bd08      	pop	{r3, pc}

08003e50 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e50:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8003e52:	2301      	movs	r3, #1
 8003e54:	460a      	mov	r2, r1
 8003e56:	210f      	movs	r1, #15
 8003e58:	f7ff fe96 	bl	8003b88 <lsm6dsl_read_reg>
  return ret;
}
 8003e5c:	bd08      	pop	{r3, pc}

08003e5e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e5e:	b530      	push	{r4, r5, lr}
 8003e60:	b083      	sub	sp, #12
 8003e62:	4604      	mov	r4, r0
 8003e64:	460d      	mov	r5, r1
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003e66:	2301      	movs	r3, #1
 8003e68:	aa01      	add	r2, sp, #4
 8003e6a:	2112      	movs	r1, #18
 8003e6c:	f7ff fe8c 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003e70:	4603      	mov	r3, r0
 8003e72:	b110      	cbz	r0, 8003e7a <lsm6dsl_auto_increment_set+0x1c>
    ctrl3_c.if_inc = val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	b003      	add	sp, #12
 8003e78:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = val;
 8003e7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e7e:	f365 0382 	bfi	r3, r5, #2, #1
 8003e82:	aa02      	add	r2, sp, #8
 8003e84:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003e88:	2301      	movs	r3, #1
 8003e8a:	2112      	movs	r1, #18
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fe80 	bl	8003b92 <lsm6dsl_write_reg>
 8003e92:	4603      	mov	r3, r0
  return ret;
 8003e94:	e7ee      	b.n	8003e74 <lsm6dsl_auto_increment_set+0x16>

08003e96 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8003e96:	b530      	push	{r4, r5, lr}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	460d      	mov	r5, r1
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	aa01      	add	r2, sp, #4
 8003ea2:	210a      	movs	r1, #10
 8003ea4:	f7ff fe70 	bl	8003b88 <lsm6dsl_read_reg>
  if(ret == 0){
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	b110      	cbz	r0, 8003eb2 <lsm6dsl_fifo_mode_set+0x1c>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
  }
  return ret;
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	b003      	add	sp, #12
 8003eb0:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8003eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003eb6:	f365 0302 	bfi	r3, r5, #0, #3
 8003eba:	aa02      	add	r2, sp, #8
 8003ebc:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	210a      	movs	r1, #10
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff fe64 	bl	8003b92 <lsm6dsl_write_reg>
 8003eca:	4603      	mov	r3, r0
  return ret;
 8003ecc:	e7ee      	b.n	8003eac <lsm6dsl_fifo_mode_set+0x16>
	...

08003ed0 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	b08c      	sub	sp, #48	; 0x30
 8003ed4:	4604      	mov	r4, r0
  int32_t                ret = BSP_ERROR_NONE;
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8003eda:	23bf      	movs	r3, #191	; 0xbf
 8003edc:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HTS221_0_Probe+0xe0>)
 8003ee2:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8003ee4:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HTS221_0_Probe+0xe4>)
 8003ee6:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003ee8:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <HTS221_0_Probe+0xe8>)
 8003eea:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8003eec:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <HTS221_0_Probe+0xec>)
 8003eee:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = IKS01A2_GetTick;
 8003ef0:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <HTS221_0_Probe+0xf0>)
 8003ef2:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8003ef4:	a905      	add	r1, sp, #20
 8003ef6:	4833      	ldr	r0, [pc, #204]	; (8003fc4 <HTS221_0_Probe+0xf4>)
 8003ef8:	f7fd fd60 	bl	80019bc <HTS221_RegisterBusIO>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d14b      	bne.n	8003f98 <HTS221_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8003f00:	f10d 0113 	add.w	r1, sp, #19
 8003f04:	482f      	ldr	r0, [pc, #188]	; (8003fc4 <HTS221_0_Probe+0xf4>)
 8003f06:	f7fd fc41 	bl	800178c <HTS221_ReadID>
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d146      	bne.n	8003f9e <HTS221_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8003f10:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003f14:	2bbc      	cmp	r3, #188	; 0xbc
 8003f16:	d145      	bne.n	8003fa4 <HTS221_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8003f18:	4e2a      	ldr	r6, [pc, #168]	; (8003fc4 <HTS221_0_Probe+0xf4>)
 8003f1a:	4669      	mov	r1, sp
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f7fd fb1d 	bl	800155c <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8003f22:	f89d 2000 	ldrb.w	r2, [sp]
 8003f26:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003f2a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                           uint32_t)cap.Humidity << 2);
 8003f2e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8003f32:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8003f36:	4924      	ldr	r1, [pc, #144]	; (8003fc8 <HTS221_0_Probe+0xf8>)
 8003f38:	600b      	str	r3, [r1, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HTS221_0_Probe+0xfc>)
 8003f3c:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HTS221_0_Probe+0x100>)
 8003f40:	4924      	ldr	r1, [pc, #144]	; (8003fd4 <HTS221_0_Probe+0x104>)
 8003f42:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003f44:	f014 0f01 	tst.w	r4, #1
 8003f48:	d008      	beq.n	8003f5c <HTS221_0_Probe+0x8c>
 8003f4a:	2a01      	cmp	r2, #1
 8003f4c:	d106      	bne.n	8003f5c <HTS221_0_Probe+0x8c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8003f4e:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HTS221_0_Probe+0x108>)
 8003f50:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <HTS221_0_Probe+0x10c>)
 8003f52:	601a      	str	r2, [r3, #0]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8003f54:	680b      	ldr	r3, [r1, #0]
 8003f56:	4630      	mov	r0, r6
 8003f58:	4798      	blx	r3
 8003f5a:	b9a0      	cbnz	r0, 8003f86 <HTS221_0_Probe+0xb6>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8003f5c:	f014 0f04 	tst.w	r4, #4
 8003f60:	d013      	beq.n	8003f8a <HTS221_0_Probe+0xba>
 8003f62:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10f      	bne.n	8003f8a <HTS221_0_Probe+0xba>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HTS221_0_Probe+0x108>)
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HTS221_0_Probe+0x110>)
 8003f6e:	609a      	str	r2, [r3, #8]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HTS221_0_Probe+0x100>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <HTS221_0_Probe+0xfc>)
 8003f78:	6810      	ldr	r0, [r2, #0]
 8003f7a:	4798      	blx	r3
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	b128      	cbz	r0, 8003f8c <HTS221_0_Probe+0xbc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f80:	f06f 0504 	mvn.w	r5, #4
 8003f84:	e005      	b.n	8003f92 <HTS221_0_Probe+0xc2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f86:	f06f 0504 	mvn.w	r5, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8003f8a:	b915      	cbnz	r5, 8003f92 <HTS221_0_Probe+0xc2>
 8003f8c:	f014 0f02 	tst.w	r4, #2
 8003f90:	d10b      	bne.n	8003faa <HTS221_0_Probe+0xda>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8003f92:	4628      	mov	r0, r5
 8003f94:	b00c      	add	sp, #48	; 0x30
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f98:	f06f 0506 	mvn.w	r5, #6
 8003f9c:	e7f9      	b.n	8003f92 <HTS221_0_Probe+0xc2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f9e:	f06f 0506 	mvn.w	r5, #6
 8003fa2:	e7f6      	b.n	8003f92 <HTS221_0_Probe+0xc2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003fa4:	f06f 0506 	mvn.w	r5, #6
 8003fa8:	e7f3      	b.n	8003f92 <HTS221_0_Probe+0xc2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003faa:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8003fae:	e7f0      	b.n	8003f92 <HTS221_0_Probe+0xc2>
 8003fb0:	08001469 	.word	0x08001469
 8003fb4:	0800137d 	.word	0x0800137d
 8003fb8:	080013f1 	.word	0x080013f1
 8003fbc:	080013b5 	.word	0x080013b5
 8003fc0:	0800142d 	.word	0x0800142d
 8003fc4:	200021b4 	.word	0x200021b4
 8003fc8:	2000218c 	.word	0x2000218c
 8003fcc:	20002840 	.word	0x20002840
 8003fd0:	20002194 	.word	0x20002194
 8003fd4:	200011c4 	.word	0x200011c4
 8003fd8:	2000219c 	.word	0x2000219c
 8003fdc:	200011e8 	.word	0x200011e8
 8003fe0:	200011d4 	.word	0x200011d4

08003fe4 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	4604      	mov	r4, r0
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8003fea:	2300      	movs	r3, #0
 8003fec:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8003fee:	23bb      	movs	r3, #187	; 0xbb
 8003ff0:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <LPS22HB_0_Probe+0xe0>)
 8003ff6:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <LPS22HB_0_Probe+0xe4>)
 8003ffa:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003ffc:	4b33      	ldr	r3, [pc, #204]	; (80040cc <LPS22HB_0_Probe+0xe8>)
 8003ffe:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004000:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <LPS22HB_0_Probe+0xec>)
 8004002:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004004:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <LPS22HB_0_Probe+0xf0>)
 8004006:	930b      	str	r3, [sp, #44]	; 0x2c

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8004008:	a905      	add	r1, sp, #20
 800400a:	4833      	ldr	r0, [pc, #204]	; (80040d8 <LPS22HB_0_Probe+0xf4>)
 800400c:	f7fe f846 	bl	800209c <LPS22HB_RegisterBusIO>
 8004010:	2800      	cmp	r0, #0
 8004012:	d14b      	bne.n	80040ac <LPS22HB_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8004014:	f10d 0113 	add.w	r1, sp, #19
 8004018:	482f      	ldr	r0, [pc, #188]	; (80040d8 <LPS22HB_0_Probe+0xf4>)
 800401a:	f7fd feff 	bl	8001e1c <LPS22HB_ReadID>
 800401e:	4605      	mov	r5, r0
 8004020:	2800      	cmp	r0, #0
 8004022:	d146      	bne.n	80040b2 <LPS22HB_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HB_ID)
 8004024:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004028:	2bb1      	cmp	r3, #177	; 0xb1
 800402a:	d145      	bne.n	80040b8 <LPS22HB_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800402c:	4e2a      	ldr	r6, [pc, #168]	; (80040d8 <LPS22HB_0_Probe+0xf4>)
 800402e:	4669      	mov	r1, sp
 8004030:	4630      	mov	r0, r6
 8004032:	f7fd fdf1 	bl	8001c18 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8004036:	f89d 2000 	ldrb.w	r2, [sp]
 800403a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800403e:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                            uint32_t)cap.Humidity << 2);
 8004042:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8004046:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800404a:	4924      	ldr	r1, [pc, #144]	; (80040dc <LPS22HB_0_Probe+0xf8>)
 800404c:	604b      	str	r3, [r1, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <LPS22HB_0_Probe+0xfc>)
 8004050:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <LPS22HB_0_Probe+0x100>)
 8004054:	4924      	ldr	r1, [pc, #144]	; (80040e8 <LPS22HB_0_Probe+0x104>)
 8004056:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004058:	f014 0f01 	tst.w	r4, #1
 800405c:	d008      	beq.n	8004070 <LPS22HB_0_Probe+0x8c>
 800405e:	2a01      	cmp	r2, #1
 8004060:	d106      	bne.n	8004070 <LPS22HB_0_Probe+0x8c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <LPS22HB_0_Probe+0x108>)
 8004064:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <LPS22HB_0_Probe+0x10c>)
 8004066:	60da      	str	r2, [r3, #12]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8004068:	680b      	ldr	r3, [r1, #0]
 800406a:	4630      	mov	r0, r6
 800406c:	4798      	blx	r3
 800406e:	b9a0      	cbnz	r0, 800409a <LPS22HB_0_Probe+0xb6>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8004070:	f014 0f02 	tst.w	r4, #2
 8004074:	d013      	beq.n	800409e <LPS22HB_0_Probe+0xba>
 8004076:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10f      	bne.n	800409e <LPS22HB_0_Probe+0xba>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <LPS22HB_0_Probe+0x108>)
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <LPS22HB_0_Probe+0x110>)
 8004082:	611a      	str	r2, [r3, #16]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <LPS22HB_0_Probe+0x100>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <LPS22HB_0_Probe+0xfc>)
 800408c:	6850      	ldr	r0, [r2, #4]
 800408e:	4798      	blx	r3
 8004090:	4605      	mov	r5, r0
 8004092:	b128      	cbz	r0, 80040a0 <LPS22HB_0_Probe+0xbc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004094:	f06f 0504 	mvn.w	r5, #4
 8004098:	e005      	b.n	80040a6 <LPS22HB_0_Probe+0xc2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800409a:	f06f 0504 	mvn.w	r5, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800409e:	b915      	cbnz	r5, 80040a6 <LPS22HB_0_Probe+0xc2>
 80040a0:	f014 0f04 	tst.w	r4, #4
 80040a4:	d10b      	bne.n	80040be <LPS22HB_0_Probe+0xda>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80040a6:	4628      	mov	r0, r5
 80040a8:	b00c      	add	sp, #48	; 0x30
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040ac:	f06f 0506 	mvn.w	r5, #6
 80040b0:	e7f9      	b.n	80040a6 <LPS22HB_0_Probe+0xc2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040b2:	f06f 0506 	mvn.w	r5, #6
 80040b6:	e7f6      	b.n	80040a6 <LPS22HB_0_Probe+0xc2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040b8:	f06f 0506 	mvn.w	r5, #6
 80040bc:	e7f3      	b.n	80040a6 <LPS22HB_0_Probe+0xc2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80040be:	f06f 0504 	mvn.w	r5, #4
  return ret;
 80040c2:	e7f0      	b.n	80040a6 <LPS22HB_0_Probe+0xc2>
 80040c4:	08001469 	.word	0x08001469
 80040c8:	0800137d 	.word	0x0800137d
 80040cc:	080013f1 	.word	0x080013f1
 80040d0:	080013b5 	.word	0x080013b5
 80040d4:	0800142d 	.word	0x0800142d
 80040d8:	200021e0 	.word	0x200021e0
 80040dc:	2000218c 	.word	0x2000218c
 80040e0:	20002840 	.word	0x20002840
 80040e4:	20002194 	.word	0x20002194
 80040e8:	200011fc 	.word	0x200011fc
 80040ec:	2000219c 	.word	0x2000219c
 80040f0:	20001220 	.word	0x20001220
 80040f4:	2000120c 	.word	0x2000120c

080040f8 <IKS01A2_ENV_SENSOR_Init>:
{
 80040f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	460f      	mov	r7, r1
  switch (Instance)
 8004100:	4606      	mov	r6, r0
 8004102:	b120      	cbz	r0, 800410e <IKS01A2_ENV_SENSOR_Init+0x16>
 8004104:	2801      	cmp	r0, #1
 8004106:	d02b      	beq.n	8004160 <IKS01A2_ENV_SENSOR_Init+0x68>
      ret = BSP_ERROR_WRONG_PARAM;
 8004108:	f06f 0001 	mvn.w	r0, #1
 800410c:	e06c      	b.n	80041e8 <IKS01A2_ENV_SENSOR_Init+0xf0>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800410e:	4608      	mov	r0, r1
 8004110:	f7ff fede 	bl	8003ed0 <HTS221_0_Probe>
 8004114:	2800      	cmp	r0, #0
 8004116:	d16a      	bne.n	80041ee <IKS01A2_ENV_SENSOR_Init+0xf6>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004118:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <IKS01A2_ENV_SENSOR_Init+0x110>)
 800411a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4669      	mov	r1, sp
 8004122:	4a3a      	ldr	r2, [pc, #232]	; (800420c <IKS01A2_ENV_SENSOR_Init+0x114>)
 8004124:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004128:	4798      	blx	r3
 800412a:	2800      	cmp	r0, #0
 800412c:	d162      	bne.n	80041f4 <IKS01A2_ENV_SENSOR_Init+0xfc>
      if (cap.Temperature == 1U)
 800412e:	f89d 3000 	ldrb.w	r3, [sp]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d00b      	beq.n	800414e <IKS01A2_ENV_SENSOR_Init+0x56>
  uint32_t component_functions = 0;
 8004136:	46b0      	mov	r8, r6
      if (cap.Humidity == 1U)
 8004138:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d009      	beq.n	8004154 <IKS01A2_ENV_SENSOR_Init+0x5c>
      if (cap.Pressure == 1U)
 8004140:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d008      	beq.n	800415a <IKS01A2_ENV_SENSOR_Init+0x62>
        component_functions |= ENV_TEMPERATURE;
 8004148:	2500      	movs	r5, #0
 800414a:	2401      	movs	r4, #1
 800414c:	e030      	b.n	80041b0 <IKS01A2_ENV_SENSOR_Init+0xb8>
        component_functions |= ENV_TEMPERATURE;
 800414e:	f04f 0801 	mov.w	r8, #1
 8004152:	e7f1      	b.n	8004138 <IKS01A2_ENV_SENSOR_Init+0x40>
        component_functions |= ENV_HUMIDITY;
 8004154:	f048 0804 	orr.w	r8, r8, #4
 8004158:	e7f2      	b.n	8004140 <IKS01A2_ENV_SENSOR_Init+0x48>
        component_functions |= ENV_PRESSURE;
 800415a:	f048 0802 	orr.w	r8, r8, #2
 800415e:	e7f3      	b.n	8004148 <IKS01A2_ENV_SENSOR_Init+0x50>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8004160:	4608      	mov	r0, r1
 8004162:	f7ff ff3f 	bl	8003fe4 <LPS22HB_0_Probe>
 8004166:	2800      	cmp	r0, #0
 8004168:	d147      	bne.n	80041fa <IKS01A2_ENV_SENSOR_Init+0x102>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800416a:	4b27      	ldr	r3, [pc, #156]	; (8004208 <IKS01A2_ENV_SENSOR_Init+0x110>)
 800416c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4669      	mov	r1, sp
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <IKS01A2_ENV_SENSOR_Init+0x114>)
 8004176:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800417a:	4798      	blx	r3
 800417c:	2800      	cmp	r0, #0
 800417e:	d13f      	bne.n	8004200 <IKS01A2_ENV_SENSOR_Init+0x108>
      if (cap.Temperature == 1U)
 8004180:	f89d 3000 	ldrb.w	r3, [sp]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d00c      	beq.n	80041a2 <IKS01A2_ENV_SENSOR_Init+0xaa>
  uint32_t component_functions = 0;
 8004188:	f04f 0800 	mov.w	r8, #0
      if (cap.Humidity == 1U)
 800418c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d008      	beq.n	80041a6 <IKS01A2_ENV_SENSOR_Init+0xae>
      if (cap.Pressure == 1U)
 8004194:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d1d5      	bne.n	8004148 <IKS01A2_ENV_SENSOR_Init+0x50>
        component_functions |= ENV_PRESSURE;
 800419c:	f048 0802 	orr.w	r8, r8, #2
 80041a0:	e7d2      	b.n	8004148 <IKS01A2_ENV_SENSOR_Init+0x50>
        component_functions |= ENV_TEMPERATURE;
 80041a2:	46b0      	mov	r8, r6
 80041a4:	e7f2      	b.n	800418c <IKS01A2_ENV_SENSOR_Init+0x94>
        component_functions |= ENV_HUMIDITY;
 80041a6:	f048 0804 	orr.w	r8, r8, #4
 80041aa:	e7f3      	b.n	8004194 <IKS01A2_ENV_SENSOR_Init+0x9c>
    function = function << 1;
 80041ac:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80041ae:	3501      	adds	r5, #1
 80041b0:	2d02      	cmp	r5, #2
 80041b2:	d818      	bhi.n	80041e6 <IKS01A2_ENV_SENSOR_Init+0xee>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80041b4:	ea34 0307 	bics.w	r3, r4, r7
 80041b8:	d1f8      	bne.n	80041ac <IKS01A2_ENV_SENSOR_Init+0xb4>
 80041ba:	ea34 0308 	bics.w	r3, r4, r8
 80041be:	d1f5      	bne.n	80041ac <IKS01A2_ENV_SENSOR_Init+0xb4>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <IKS01A2_ENV_SENSOR_Init+0x118>)
 80041c2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80041c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80041ca:	4413      	add	r3, r2
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <IKS01A2_ENV_SENSOR_Init+0x11c>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <IKS01A2_ENV_SENSOR_Init+0x114>)
 80041d6:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80041da:	4798      	blx	r3
 80041dc:	2800      	cmp	r0, #0
 80041de:	d0e5      	beq.n	80041ac <IKS01A2_ENV_SENSOR_Init+0xb4>
        return BSP_ERROR_COMPONENT_FAILURE;
 80041e0:	f06f 0004 	mvn.w	r0, #4
 80041e4:	e000      	b.n	80041e8 <IKS01A2_ENV_SENSOR_Init+0xf0>
 80041e6:	2000      	movs	r0, #0
}
 80041e8:	b004      	add	sp, #16
 80041ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295
 80041f2:	e7f9      	b.n	80041e8 <IKS01A2_ENV_SENSOR_Init+0xf0>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80041f4:	f06f 0006 	mvn.w	r0, #6
 80041f8:	e7f6      	b.n	80041e8 <IKS01A2_ENV_SENSOR_Init+0xf0>
        return BSP_ERROR_NO_INIT;
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	e7f3      	b.n	80041e8 <IKS01A2_ENV_SENSOR_Init+0xf0>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004200:	f06f 0006 	mvn.w	r0, #6
 8004204:	e7f0      	b.n	80041e8 <IKS01A2_ENV_SENSOR_Init+0xf0>
 8004206:	bf00      	nop
 8004208:	20002194 	.word	0x20002194
 800420c:	20002840 	.word	0x20002840
 8004210:	080162c4 	.word	0x080162c4
 8004214:	2000219c 	.word	0x2000219c

08004218 <IKS01A2_ENV_SENSOR_Enable>:
{
 8004218:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800421a:	2801      	cmp	r0, #1
 800421c:	d81a      	bhi.n	8004254 <IKS01A2_ENV_SENSOR_Enable+0x3c>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <IKS01A2_ENV_SENSOR_Enable+0x48>)
 8004220:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004224:	ea31 0303 	bics.w	r3, r1, r3
 8004228:	d117      	bne.n	800425a <IKS01A2_ENV_SENSOR_Enable+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <IKS01A2_ENV_SENSOR_Enable+0x4c>)
 800422c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004230:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004234:	4413      	add	r3, r2
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <IKS01A2_ENV_SENSOR_Enable+0x50>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a0b      	ldr	r2, [pc, #44]	; (800426c <IKS01A2_ENV_SENSOR_Enable+0x54>)
 8004240:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004244:	4798      	blx	r3
 8004246:	4603      	mov	r3, r0
 8004248:	b908      	cbnz	r0, 800424e <IKS01A2_ENV_SENSOR_Enable+0x36>
}
 800424a:	4618      	mov	r0, r3
 800424c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800424e:	f06f 0304 	mvn.w	r3, #4
 8004252:	e7fa      	b.n	800424a <IKS01A2_ENV_SENSOR_Enable+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 8004254:	f06f 0301 	mvn.w	r3, #1
 8004258:	e7f7      	b.n	800424a <IKS01A2_ENV_SENSOR_Enable+0x32>
      ret = BSP_ERROR_WRONG_PARAM;
 800425a:	f06f 0301 	mvn.w	r3, #1
  return ret;
 800425e:	e7f4      	b.n	800424a <IKS01A2_ENV_SENSOR_Enable+0x32>
 8004260:	2000218c 	.word	0x2000218c
 8004264:	080162c4 	.word	0x080162c4
 8004268:	2000219c 	.word	0x2000219c
 800426c:	20002840 	.word	0x20002840

08004270 <IKS01A2_ENV_SENSOR_Disable>:
{
 8004270:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8004272:	2801      	cmp	r0, #1
 8004274:	d81a      	bhi.n	80042ac <IKS01A2_ENV_SENSOR_Disable+0x3c>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <IKS01A2_ENV_SENSOR_Disable+0x48>)
 8004278:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800427c:	ea31 0303 	bics.w	r3, r1, r3
 8004280:	d117      	bne.n	80042b2 <IKS01A2_ENV_SENSOR_Disable+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <IKS01A2_ENV_SENSOR_Disable+0x4c>)
 8004284:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004288:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800428c:	4413      	add	r3, r2
 800428e:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <IKS01A2_ENV_SENSOR_Disable+0x50>)
 8004290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <IKS01A2_ENV_SENSOR_Disable+0x54>)
 8004298:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800429c:	4798      	blx	r3
 800429e:	4603      	mov	r3, r0
 80042a0:	b908      	cbnz	r0, 80042a6 <IKS01A2_ENV_SENSOR_Disable+0x36>
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80042a6:	f06f 0304 	mvn.w	r3, #4
 80042aa:	e7fa      	b.n	80042a2 <IKS01A2_ENV_SENSOR_Disable+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 80042ac:	f06f 0301 	mvn.w	r3, #1
 80042b0:	e7f7      	b.n	80042a2 <IKS01A2_ENV_SENSOR_Disable+0x32>
      ret = BSP_ERROR_WRONG_PARAM;
 80042b2:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80042b6:	e7f4      	b.n	80042a2 <IKS01A2_ENV_SENSOR_Disable+0x32>
 80042b8:	2000218c 	.word	0x2000218c
 80042bc:	080162c4 	.word	0x080162c4
 80042c0:	2000219c 	.word	0x2000219c
 80042c4:	20002840 	.word	0x20002840

080042c8 <IKS01A2_ENV_SENSOR_GetValue>:
{
 80042c8:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80042ca:	2801      	cmp	r0, #1
 80042cc:	d81c      	bhi.n	8004308 <IKS01A2_ENV_SENSOR_GetValue+0x40>
 80042ce:	460b      	mov	r3, r1
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80042d0:	4910      	ldr	r1, [pc, #64]	; (8004314 <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 80042d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80042d6:	ea33 0101 	bics.w	r1, r3, r1
 80042da:	d118      	bne.n	800430e <IKS01A2_ENV_SENSOR_GetValue+0x46>
 80042dc:	4611      	mov	r1, r2
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80042de:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <IKS01A2_ENV_SENSOR_GetValue+0x50>)
 80042e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042e4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80042e8:	4413      	add	r3, r2
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <IKS01A2_ENV_SENSOR_GetValue+0x54>)
 80042ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <IKS01A2_ENV_SENSOR_GetValue+0x58>)
 80042f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80042f8:	4798      	blx	r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	b908      	cbnz	r0, 8004302 <IKS01A2_ENV_SENSOR_GetValue+0x3a>
}
 80042fe:	4618      	mov	r0, r3
 8004300:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004302:	f06f 0304 	mvn.w	r3, #4
 8004306:	e7fa      	b.n	80042fe <IKS01A2_ENV_SENSOR_GetValue+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004308:	f06f 0301 	mvn.w	r3, #1
 800430c:	e7f7      	b.n	80042fe <IKS01A2_ENV_SENSOR_GetValue+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 800430e:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004312:	e7f4      	b.n	80042fe <IKS01A2_ENV_SENSOR_GetValue+0x36>
 8004314:	2000218c 	.word	0x2000218c
 8004318:	080162c4 	.word	0x080162c4
 800431c:	2000219c 	.word	0x2000219c
 8004320:	20002840 	.word	0x20002840

08004324 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	b090      	sub	sp, #64	; 0x40
 8004328:	4604      	mov	r4, r0
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800432a:	2300      	movs	r3, #0
 800432c:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800432e:	23d7      	movs	r3, #215	; 0xd7
 8004330:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004334:	4b33      	ldr	r3, [pc, #204]	; (8004404 <LSM6DSL_0_Probe+0xe0>)
 8004336:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <LSM6DSL_0_Probe+0xe4>)
 800433a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <LSM6DSL_0_Probe+0xe8>)
 800433e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004340:	4b33      	ldr	r3, [pc, #204]	; (8004410 <LSM6DSL_0_Probe+0xec>)
 8004342:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <LSM6DSL_0_Probe+0xf0>)
 8004346:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8004348:	a909      	add	r1, sp, #36	; 0x24
 800434a:	4833      	ldr	r0, [pc, #204]	; (8004418 <LSM6DSL_0_Probe+0xf4>)
 800434c:	f7ff fbde 	bl	8003b0c <LSM6DSL_RegisterBusIO>
 8004350:	2800      	cmp	r0, #0
 8004352:	d14b      	bne.n	80043ec <LSM6DSL_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8004354:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8004358:	482f      	ldr	r0, [pc, #188]	; (8004418 <LSM6DSL_0_Probe+0xf4>)
 800435a:	f7ff f94c 	bl	80035f6 <LSM6DSL_ReadID>
 800435e:	4605      	mov	r5, r0
 8004360:	2800      	cmp	r0, #0
 8004362:	d146      	bne.n	80043f2 <LSM6DSL_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSL_ID)
 8004364:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004368:	2b6a      	cmp	r3, #106	; 0x6a
 800436a:	d145      	bne.n	80043f8 <LSM6DSL_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800436c:	4e2a      	ldr	r6, [pc, #168]	; (8004418 <LSM6DSL_0_Probe+0xf4>)
 800436e:	a901      	add	r1, sp, #4
 8004370:	4630      	mov	r0, r6
 8004372:	f7fe feb5 	bl	80030e0 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004376:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800437a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800437e:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8004382:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004386:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800438a:	4924      	ldr	r1, [pc, #144]	; (800441c <LSM6DSL_0_Probe+0xf8>)
 800438c:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <LSM6DSL_0_Probe+0xfc>)
 8004390:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <LSM6DSL_0_Probe+0x100>)
 8004394:	4924      	ldr	r1, [pc, #144]	; (8004428 <LSM6DSL_0_Probe+0x104>)
 8004396:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004398:	f014 0f01 	tst.w	r4, #1
 800439c:	d008      	beq.n	80043b0 <LSM6DSL_0_Probe+0x8c>
 800439e:	2a01      	cmp	r2, #1
 80043a0:	d106      	bne.n	80043b0 <LSM6DSL_0_Probe+0x8c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80043a2:	4b22      	ldr	r3, [pc, #136]	; (800442c <LSM6DSL_0_Probe+0x108>)
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <LSM6DSL_0_Probe+0x10c>)
 80043a6:	601a      	str	r2, [r3, #0]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80043a8:	680b      	ldr	r3, [r1, #0]
 80043aa:	4630      	mov	r0, r6
 80043ac:	4798      	blx	r3
 80043ae:	b9a0      	cbnz	r0, 80043da <LSM6DSL_0_Probe+0xb6>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80043b0:	f014 0f02 	tst.w	r4, #2
 80043b4:	d013      	beq.n	80043de <LSM6DSL_0_Probe+0xba>
 80043b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10f      	bne.n	80043de <LSM6DSL_0_Probe+0xba>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <LSM6DSL_0_Probe+0x108>)
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <LSM6DSL_0_Probe+0x110>)
 80043c2:	605a      	str	r2, [r3, #4]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <LSM6DSL_0_Probe+0x100>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a15      	ldr	r2, [pc, #84]	; (8004420 <LSM6DSL_0_Probe+0xfc>)
 80043cc:	6810      	ldr	r0, [r2, #0]
 80043ce:	4798      	blx	r3
 80043d0:	4605      	mov	r5, r0
 80043d2:	b128      	cbz	r0, 80043e0 <LSM6DSL_0_Probe+0xbc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80043d4:	f06f 0504 	mvn.w	r5, #4
 80043d8:	e005      	b.n	80043e6 <LSM6DSL_0_Probe+0xc2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80043da:	f06f 0504 	mvn.w	r5, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80043de:	b915      	cbnz	r5, 80043e6 <LSM6DSL_0_Probe+0xc2>
 80043e0:	f014 0f04 	tst.w	r4, #4
 80043e4:	d10b      	bne.n	80043fe <LSM6DSL_0_Probe+0xda>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80043e6:	4628      	mov	r0, r5
 80043e8:	b010      	add	sp, #64	; 0x40
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80043ec:	f06f 0506 	mvn.w	r5, #6
 80043f0:	e7f9      	b.n	80043e6 <LSM6DSL_0_Probe+0xc2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80043f2:	f06f 0506 	mvn.w	r5, #6
 80043f6:	e7f6      	b.n	80043e6 <LSM6DSL_0_Probe+0xc2>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80043f8:	f06f 0506 	mvn.w	r5, #6
 80043fc:	e7f3      	b.n	80043e6 <LSM6DSL_0_Probe+0xc2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80043fe:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8004402:	e7f0      	b.n	80043e6 <LSM6DSL_0_Probe+0xc2>
 8004404:	08001469 	.word	0x08001469
 8004408:	0800137d 	.word	0x0800137d
 800440c:	080013f1 	.word	0x080013f1
 8004410:	080013b5 	.word	0x080013b5
 8004414:	0800142d 	.word	0x0800142d
 8004418:	200022a0 	.word	0x200022a0
 800441c:	2000220c 	.word	0x2000220c
 8004420:	20002848 	.word	0x20002848
 8004424:	20002218 	.word	0x20002218
 8004428:	200012c0 	.word	0x200012c0
 800442c:	20002224 	.word	0x20002224
 8004430:	200012d0 	.word	0x200012d0
 8004434:	2000129c 	.word	0x2000129c

08004438 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	b090      	sub	sp, #64	; 0x40
 800443c:	4605      	mov	r5, r0
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800443e:	2300      	movs	r3, #0
 8004440:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8004442:	2333      	movs	r3, #51	; 0x33
 8004444:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004448:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <LSM303AGR_ACC_0_Probe+0xc4>)
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800444c:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <LSM303AGR_ACC_0_Probe+0xc8>)
 800444e:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004450:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <LSM303AGR_ACC_0_Probe+0xcc>)
 8004452:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <LSM303AGR_ACC_0_Probe+0xd0>)
 8004456:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <LSM303AGR_ACC_0_Probe+0xd4>)
 800445a:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800445c:	a909      	add	r1, sp, #36	; 0x24
 800445e:	482c      	ldr	r0, [pc, #176]	; (8004510 <LSM303AGR_ACC_0_Probe+0xd8>)
 8004460:	f7fe fc00 	bl	8002c64 <LSM303AGR_ACC_RegisterBusIO>
 8004464:	2800      	cmp	r0, #0
 8004466:	d13a      	bne.n	80044de <LSM303AGR_ACC_0_Probe+0xa6>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8004468:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800446c:	4828      	ldr	r0, [pc, #160]	; (8004510 <LSM303AGR_ACC_0_Probe+0xd8>)
 800446e:	f7fe f8a5 	bl	80025bc <LSM303AGR_ACC_ReadID>
 8004472:	4604      	mov	r4, r0
 8004474:	2800      	cmp	r0, #0
 8004476:	d135      	bne.n	80044e4 <LSM303AGR_ACC_0_Probe+0xac>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8004478:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800447c:	2b33      	cmp	r3, #51	; 0x33
 800447e:	d134      	bne.n	80044ea <LSM303AGR_ACC_0_Probe+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8004480:	4e23      	ldr	r6, [pc, #140]	; (8004510 <LSM303AGR_ACC_0_Probe+0xd8>)
 8004482:	a901      	add	r1, sp, #4
 8004484:	4630      	mov	r0, r6
 8004486:	f7fd ff37 	bl	80022f8 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800448a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800448e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004492:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                                     uint32_t)cap.Magneto << 2);
 8004496:	f89d 1006 	ldrb.w	r1, [sp, #6]
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800449a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800449e:	491d      	ldr	r1, [pc, #116]	; (8004514 <LSM303AGR_ACC_0_Probe+0xdc>)
 80044a0:	604b      	str	r3, [r1, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <LSM303AGR_ACC_0_Probe+0xe0>)
 80044a4:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <LSM303AGR_ACC_0_Probe+0xe4>)
 80044a8:	491d      	ldr	r1, [pc, #116]	; (8004520 <LSM303AGR_ACC_0_Probe+0xe8>)
 80044aa:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80044ac:	f015 0f02 	tst.w	r5, #2
 80044b0:	d008      	beq.n	80044c4 <LSM303AGR_ACC_0_Probe+0x8c>
 80044b2:	2a01      	cmp	r2, #1
 80044b4:	d106      	bne.n	80044c4 <LSM303AGR_ACC_0_Probe+0x8c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <LSM303AGR_ACC_0_Probe+0xec>)
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <LSM303AGR_ACC_0_Probe+0xf0>)
 80044ba:	611a      	str	r2, [r3, #16]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80044bc:	680b      	ldr	r3, [r1, #0]
 80044be:	4630      	mov	r0, r6
 80044c0:	4798      	blx	r3
 80044c2:	b948      	cbnz	r0, 80044d8 <LSM303AGR_ACC_0_Probe+0xa0>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80044c4:	f015 0f01 	tst.w	r5, #1
 80044c8:	d112      	bne.n	80044f0 <LSM303AGR_ACC_0_Probe+0xb8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80044ca:	b914      	cbnz	r4, 80044d2 <LSM303AGR_ACC_0_Probe+0x9a>
 80044cc:	f015 0f04 	tst.w	r5, #4
 80044d0:	d111      	bne.n	80044f6 <LSM303AGR_ACC_0_Probe+0xbe>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 80044d2:	4620      	mov	r0, r4
 80044d4:	b010      	add	sp, #64	; 0x40
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80044d8:	f06f 0404 	mvn.w	r4, #4
 80044dc:	e7f5      	b.n	80044ca <LSM303AGR_ACC_0_Probe+0x92>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80044de:	f06f 0406 	mvn.w	r4, #6
 80044e2:	e7f6      	b.n	80044d2 <LSM303AGR_ACC_0_Probe+0x9a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80044e4:	f06f 0406 	mvn.w	r4, #6
 80044e8:	e7f3      	b.n	80044d2 <LSM303AGR_ACC_0_Probe+0x9a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80044ea:	f06f 0406 	mvn.w	r4, #6
 80044ee:	e7f0      	b.n	80044d2 <LSM303AGR_ACC_0_Probe+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80044f0:	f06f 0404 	mvn.w	r4, #4
 80044f4:	e7ed      	b.n	80044d2 <LSM303AGR_ACC_0_Probe+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80044f6:	f06f 0404 	mvn.w	r4, #4
  return ret;
 80044fa:	e7ea      	b.n	80044d2 <LSM303AGR_ACC_0_Probe+0x9a>
 80044fc:	08001469 	.word	0x08001469
 8004500:	0800137d 	.word	0x0800137d
 8004504:	080013f1 	.word	0x080013f1
 8004508:	080013b5 	.word	0x080013b5
 800450c:	0800142d 	.word	0x0800142d
 8004510:	20002248 	.word	0x20002248
 8004514:	2000220c 	.word	0x2000220c
 8004518:	20002848 	.word	0x20002848
 800451c:	20002218 	.word	0x20002218
 8004520:	20001234 	.word	0x20001234
 8004524:	20002224 	.word	0x20002224
 8004528:	20001244 	.word	0x20001244

0800452c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	b090      	sub	sp, #64	; 0x40
 8004530:	4605      	mov	r5, r0
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8004532:	2300      	movs	r3, #0
 8004534:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8004536:	233d      	movs	r3, #61	; 0x3d
 8004538:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 800453c:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <LSM303AGR_MAG_0_Probe+0xc4>)
 800453e:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <LSM303AGR_MAG_0_Probe+0xc8>)
 8004542:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004544:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <LSM303AGR_MAG_0_Probe+0xcc>)
 8004546:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <LSM303AGR_MAG_0_Probe+0xd0>)
 800454a:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <LSM303AGR_MAG_0_Probe+0xd4>)
 800454e:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8004550:	a909      	add	r1, sp, #36	; 0x24
 8004552:	482c      	ldr	r0, [pc, #176]	; (8004604 <LSM303AGR_MAG_0_Probe+0xd8>)
 8004554:	f7fe fbc4 	bl	8002ce0 <LSM303AGR_MAG_RegisterBusIO>
 8004558:	2800      	cmp	r0, #0
 800455a:	d13a      	bne.n	80045d2 <LSM303AGR_MAG_0_Probe+0xa6>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800455c:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8004560:	4828      	ldr	r0, [pc, #160]	; (8004604 <LSM303AGR_MAG_0_Probe+0xd8>)
 8004562:	f7fe fae1 	bl	8002b28 <LSM303AGR_MAG_ReadID>
 8004566:	4604      	mov	r4, r0
 8004568:	2800      	cmp	r0, #0
 800456a:	d135      	bne.n	80045d8 <LSM303AGR_MAG_0_Probe+0xac>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800456c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d134      	bne.n	80045de <LSM303AGR_MAG_0_Probe+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8004574:	4e23      	ldr	r6, [pc, #140]	; (8004604 <LSM303AGR_MAG_0_Probe+0xd8>)
 8004576:	a901      	add	r1, sp, #4
 8004578:	4630      	mov	r0, r6
 800457a:	f7fd fecf 	bl	800231c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800457e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004582:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004586:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                                     uint32_t)cap.Magneto << 2);
 800458a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800458e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8004592:	491d      	ldr	r1, [pc, #116]	; (8004608 <LSM303AGR_MAG_0_Probe+0xdc>)
 8004594:	608b      	str	r3, [r1, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <LSM303AGR_MAG_0_Probe+0xe0>)
 8004598:	609e      	str	r6, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <LSM303AGR_MAG_0_Probe+0xe4>)
 800459c:	491d      	ldr	r1, [pc, #116]	; (8004614 <LSM303AGR_MAG_0_Probe+0xe8>)
 800459e:	6099      	str	r1, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80045a0:	f015 0f04 	tst.w	r5, #4
 80045a4:	d008      	beq.n	80045b8 <LSM303AGR_MAG_0_Probe+0x8c>
 80045a6:	2a01      	cmp	r2, #1
 80045a8:	d106      	bne.n	80045b8 <LSM303AGR_MAG_0_Probe+0x8c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80045aa:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <LSM303AGR_MAG_0_Probe+0xec>)
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <LSM303AGR_MAG_0_Probe+0xf0>)
 80045ae:	621a      	str	r2, [r3, #32]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80045b0:	680b      	ldr	r3, [r1, #0]
 80045b2:	4630      	mov	r0, r6
 80045b4:	4798      	blx	r3
 80045b6:	b948      	cbnz	r0, 80045cc <LSM303AGR_MAG_0_Probe+0xa0>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80045b8:	f015 0f02 	tst.w	r5, #2
 80045bc:	d112      	bne.n	80045e4 <LSM303AGR_MAG_0_Probe+0xb8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80045be:	b914      	cbnz	r4, 80045c6 <LSM303AGR_MAG_0_Probe+0x9a>
 80045c0:	f015 0f01 	tst.w	r5, #1
 80045c4:	d111      	bne.n	80045ea <LSM303AGR_MAG_0_Probe+0xbe>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 80045c6:	4620      	mov	r0, r4
 80045c8:	b010      	add	sp, #64	; 0x40
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80045cc:	f06f 0404 	mvn.w	r4, #4
 80045d0:	e7f5      	b.n	80045be <LSM303AGR_MAG_0_Probe+0x92>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80045d2:	f06f 0406 	mvn.w	r4, #6
 80045d6:	e7f6      	b.n	80045c6 <LSM303AGR_MAG_0_Probe+0x9a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80045d8:	f06f 0406 	mvn.w	r4, #6
 80045dc:	e7f3      	b.n	80045c6 <LSM303AGR_MAG_0_Probe+0x9a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80045de:	f06f 0406 	mvn.w	r4, #6
 80045e2:	e7f0      	b.n	80045c6 <LSM303AGR_MAG_0_Probe+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80045e4:	f06f 0404 	mvn.w	r4, #4
 80045e8:	e7ed      	b.n	80045c6 <LSM303AGR_MAG_0_Probe+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80045ea:	f06f 0404 	mvn.w	r4, #4
  return ret;
 80045ee:	e7ea      	b.n	80045c6 <LSM303AGR_MAG_0_Probe+0x9a>
 80045f0:	08001469 	.word	0x08001469
 80045f4:	0800137d 	.word	0x0800137d
 80045f8:	080013f1 	.word	0x080013f1
 80045fc:	080013b5 	.word	0x080013b5
 8004600:	0800142d 	.word	0x0800142d
 8004604:	20002274 	.word	0x20002274
 8004608:	2000220c 	.word	0x2000220c
 800460c:	20002848 	.word	0x20002848
 8004610:	20002218 	.word	0x20002218
 8004614:	20001268 	.word	0x20001268
 8004618:	20002224 	.word	0x20002224
 800461c:	20001278 	.word	0x20001278

08004620 <IKS01A2_MOTION_SENSOR_Init>:
{
 8004620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004624:	b088      	sub	sp, #32
 8004626:	4606      	mov	r6, r0
 8004628:	460f      	mov	r7, r1
  switch (Instance)
 800462a:	2801      	cmp	r0, #1
 800462c:	d030      	beq.n	8004690 <IKS01A2_MOTION_SENSOR_Init+0x70>
 800462e:	b120      	cbz	r0, 800463a <IKS01A2_MOTION_SENSOR_Init+0x1a>
 8004630:	2802      	cmp	r0, #2
 8004632:	d054      	beq.n	80046de <IKS01A2_MOTION_SENSOR_Init+0xbe>
      ret = BSP_ERROR_WRONG_PARAM;
 8004634:	f06f 0001 	mvn.w	r0, #1
 8004638:	e095      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800463a:	4608      	mov	r0, r1
 800463c:	f7ff fe72 	bl	8004324 <LSM6DSL_0_Probe>
 8004640:	2800      	cmp	r0, #0
 8004642:	f040 8093 	bne.w	800476c <IKS01A2_MOTION_SENSOR_Init+0x14c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004646:	4b52      	ldr	r3, [pc, #328]	; (8004790 <IKS01A2_MOTION_SENSOR_Init+0x170>)
 8004648:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	a901      	add	r1, sp, #4
 8004650:	4a50      	ldr	r2, [pc, #320]	; (8004794 <IKS01A2_MOTION_SENSOR_Init+0x174>)
 8004652:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004656:	4798      	blx	r3
 8004658:	2800      	cmp	r0, #0
 800465a:	f040 808a 	bne.w	8004772 <IKS01A2_MOTION_SENSOR_Init+0x152>
      if (cap.Acc == 1U)
 800465e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d00b      	beq.n	800467e <IKS01A2_MOTION_SENSOR_Init+0x5e>
  uint32_t component_functions = 0;
 8004666:	46b0      	mov	r8, r6
      if (cap.Gyro == 1U)
 8004668:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d009      	beq.n	8004684 <IKS01A2_MOTION_SENSOR_Init+0x64>
      if (cap.Magneto == 1U)
 8004670:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d008      	beq.n	800468a <IKS01A2_MOTION_SENSOR_Init+0x6a>
        component_functions |= MOTION_ACCELERO;
 8004678:	2500      	movs	r5, #0
 800467a:	2401      	movs	r4, #1
 800467c:	e057      	b.n	800472e <IKS01A2_MOTION_SENSOR_Init+0x10e>
        component_functions |= MOTION_ACCELERO;
 800467e:	f04f 0802 	mov.w	r8, #2
 8004682:	e7f1      	b.n	8004668 <IKS01A2_MOTION_SENSOR_Init+0x48>
        component_functions |= MOTION_GYRO;
 8004684:	f048 0801 	orr.w	r8, r8, #1
 8004688:	e7f2      	b.n	8004670 <IKS01A2_MOTION_SENSOR_Init+0x50>
        component_functions |= MOTION_MAGNETO;
 800468a:	f048 0804 	orr.w	r8, r8, #4
 800468e:	e7f3      	b.n	8004678 <IKS01A2_MOTION_SENSOR_Init+0x58>
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004690:	4608      	mov	r0, r1
 8004692:	f7ff fed1 	bl	8004438 <LSM303AGR_ACC_0_Probe>
 8004696:	2800      	cmp	r0, #0
 8004698:	d16e      	bne.n	8004778 <IKS01A2_MOTION_SENSOR_Init+0x158>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800469a:	4b3d      	ldr	r3, [pc, #244]	; (8004790 <IKS01A2_MOTION_SENSOR_Init+0x170>)
 800469c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	a901      	add	r1, sp, #4
 80046a4:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <IKS01A2_MOTION_SENSOR_Init+0x174>)
 80046a6:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80046aa:	4798      	blx	r3
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d166      	bne.n	800477e <IKS01A2_MOTION_SENSOR_Init+0x15e>
      if (cap.Acc == 1U)
 80046b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d00c      	beq.n	80046d2 <IKS01A2_MOTION_SENSOR_Init+0xb2>
  uint32_t component_functions = 0;
 80046b8:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 80046bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d009      	beq.n	80046d8 <IKS01A2_MOTION_SENSOR_Init+0xb8>
      if (cap.Magneto == 1U)
 80046c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d1d5      	bne.n	8004678 <IKS01A2_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 80046cc:	f048 0804 	orr.w	r8, r8, #4
 80046d0:	e7d2      	b.n	8004678 <IKS01A2_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 80046d2:	f04f 0802 	mov.w	r8, #2
 80046d6:	e7f1      	b.n	80046bc <IKS01A2_MOTION_SENSOR_Init+0x9c>
        component_functions |= MOTION_GYRO;
 80046d8:	f048 0801 	orr.w	r8, r8, #1
 80046dc:	e7f2      	b.n	80046c4 <IKS01A2_MOTION_SENSOR_Init+0xa4>
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80046de:	4608      	mov	r0, r1
 80046e0:	f7ff ff24 	bl	800452c <LSM303AGR_MAG_0_Probe>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d14d      	bne.n	8004784 <IKS01A2_MOTION_SENSOR_Init+0x164>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80046e8:	4b29      	ldr	r3, [pc, #164]	; (8004790 <IKS01A2_MOTION_SENSOR_Init+0x170>)
 80046ea:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	a901      	add	r1, sp, #4
 80046f2:	4a28      	ldr	r2, [pc, #160]	; (8004794 <IKS01A2_MOTION_SENSOR_Init+0x174>)
 80046f4:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80046f8:	4798      	blx	r3
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d145      	bne.n	800478a <IKS01A2_MOTION_SENSOR_Init+0x16a>
      if (cap.Acc == 1U)
 80046fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d00c      	beq.n	8004720 <IKS01A2_MOTION_SENSOR_Init+0x100>
  uint32_t component_functions = 0;
 8004706:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 800470a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d008      	beq.n	8004724 <IKS01A2_MOTION_SENSOR_Init+0x104>
      if (cap.Magneto == 1U)
 8004712:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d1ae      	bne.n	8004678 <IKS01A2_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 800471a:	f048 0804 	orr.w	r8, r8, #4
 800471e:	e7ab      	b.n	8004678 <IKS01A2_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 8004720:	46b0      	mov	r8, r6
 8004722:	e7f2      	b.n	800470a <IKS01A2_MOTION_SENSOR_Init+0xea>
        component_functions |= MOTION_GYRO;
 8004724:	f048 0801 	orr.w	r8, r8, #1
 8004728:	e7f3      	b.n	8004712 <IKS01A2_MOTION_SENSOR_Init+0xf2>
    function = function << 1;
 800472a:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800472c:	3501      	adds	r5, #1
 800472e:	2d02      	cmp	r5, #2
 8004730:	d818      	bhi.n	8004764 <IKS01A2_MOTION_SENSOR_Init+0x144>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004732:	ea34 0307 	bics.w	r3, r4, r7
 8004736:	d1f8      	bne.n	800472a <IKS01A2_MOTION_SENSOR_Init+0x10a>
 8004738:	ea34 0308 	bics.w	r3, r4, r8
 800473c:	d1f5      	bne.n	800472a <IKS01A2_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <IKS01A2_MOTION_SENSOR_Init+0x178>)
 8004740:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8004744:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004748:	4413      	add	r3, r2
 800474a:	4a14      	ldr	r2, [pc, #80]	; (800479c <IKS01A2_MOTION_SENSOR_Init+0x17c>)
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <IKS01A2_MOTION_SENSOR_Init+0x174>)
 8004754:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004758:	4798      	blx	r3
 800475a:	2800      	cmp	r0, #0
 800475c:	d0e5      	beq.n	800472a <IKS01A2_MOTION_SENSOR_Init+0x10a>
        return BSP_ERROR_COMPONENT_FAILURE;
 800475e:	f06f 0004 	mvn.w	r0, #4
 8004762:	e000      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
 8004764:	2000      	movs	r0, #0
}
 8004766:	b008      	add	sp, #32
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e7f9      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004772:	f06f 0006 	mvn.w	r0, #6
 8004776:	e7f6      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	e7f3      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800477e:	f06f 0006 	mvn.w	r0, #6
 8004782:	e7f0      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e7ed      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800478a:	f06f 0006 	mvn.w	r0, #6
 800478e:	e7ea      	b.n	8004766 <IKS01A2_MOTION_SENSOR_Init+0x146>
 8004790:	20002218 	.word	0x20002218
 8004794:	20002848 	.word	0x20002848
 8004798:	080162d8 	.word	0x080162d8
 800479c:	20002224 	.word	0x20002224

080047a0 <IKS01A2_MOTION_SENSOR_Enable>:
{
 80047a0:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80047a2:	2802      	cmp	r0, #2
 80047a4:	d81a      	bhi.n	80047dc <IKS01A2_MOTION_SENSOR_Enable+0x3c>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 80047a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80047ac:	ea31 0303 	bics.w	r3, r1, r3
 80047b0:	d117      	bne.n	80047e2 <IKS01A2_MOTION_SENSOR_Enable+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <IKS01A2_MOTION_SENSOR_Enable+0x4c>)
 80047b4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80047b8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80047bc:	4413      	add	r3, r2
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <IKS01A2_MOTION_SENSOR_Enable+0x50>)
 80047c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <IKS01A2_MOTION_SENSOR_Enable+0x54>)
 80047c8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80047cc:	4798      	blx	r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	b908      	cbnz	r0, 80047d6 <IKS01A2_MOTION_SENSOR_Enable+0x36>
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80047d6:	f06f 0304 	mvn.w	r3, #4
 80047da:	e7fa      	b.n	80047d2 <IKS01A2_MOTION_SENSOR_Enable+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 80047dc:	f06f 0301 	mvn.w	r3, #1
 80047e0:	e7f7      	b.n	80047d2 <IKS01A2_MOTION_SENSOR_Enable+0x32>
      ret = BSP_ERROR_WRONG_PARAM;
 80047e2:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80047e6:	e7f4      	b.n	80047d2 <IKS01A2_MOTION_SENSOR_Enable+0x32>
 80047e8:	2000220c 	.word	0x2000220c
 80047ec:	080162d8 	.word	0x080162d8
 80047f0:	20002224 	.word	0x20002224
 80047f4:	20002848 	.word	0x20002848

080047f8 <IKS01A2_MOTION_SENSOR_Disable>:
{
 80047f8:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80047fa:	2802      	cmp	r0, #2
 80047fc:	d81a      	bhi.n	8004834 <IKS01A2_MOTION_SENSOR_Disable+0x3c>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <IKS01A2_MOTION_SENSOR_Disable+0x48>)
 8004800:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004804:	ea31 0303 	bics.w	r3, r1, r3
 8004808:	d117      	bne.n	800483a <IKS01A2_MOTION_SENSOR_Disable+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <IKS01A2_MOTION_SENSOR_Disable+0x4c>)
 800480c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004810:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004814:	4413      	add	r3, r2
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <IKS01A2_MOTION_SENSOR_Disable+0x50>)
 8004818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4a0b      	ldr	r2, [pc, #44]	; (800484c <IKS01A2_MOTION_SENSOR_Disable+0x54>)
 8004820:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004824:	4798      	blx	r3
 8004826:	4603      	mov	r3, r0
 8004828:	b908      	cbnz	r0, 800482e <IKS01A2_MOTION_SENSOR_Disable+0x36>
}
 800482a:	4618      	mov	r0, r3
 800482c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800482e:	f06f 0304 	mvn.w	r3, #4
 8004832:	e7fa      	b.n	800482a <IKS01A2_MOTION_SENSOR_Disable+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 8004834:	f06f 0301 	mvn.w	r3, #1
 8004838:	e7f7      	b.n	800482a <IKS01A2_MOTION_SENSOR_Disable+0x32>
      ret = BSP_ERROR_WRONG_PARAM;
 800483a:	f06f 0301 	mvn.w	r3, #1
  return ret;
 800483e:	e7f4      	b.n	800482a <IKS01A2_MOTION_SENSOR_Disable+0x32>
 8004840:	2000220c 	.word	0x2000220c
 8004844:	080162d8 	.word	0x080162d8
 8004848:	20002224 	.word	0x20002224
 800484c:	20002848 	.word	0x20002848

08004850 <IKS01A2_MOTION_SENSOR_GetAxes>:
{
 8004850:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004852:	2802      	cmp	r0, #2
 8004854:	d81c      	bhi.n	8004890 <IKS01A2_MOTION_SENSOR_GetAxes+0x40>
 8004856:	460b      	mov	r3, r1
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004858:	4910      	ldr	r1, [pc, #64]	; (800489c <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 800485a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800485e:	ea33 0101 	bics.w	r1, r3, r1
 8004862:	d118      	bne.n	8004896 <IKS01A2_MOTION_SENSOR_GetAxes+0x46>
 8004864:	4611      	mov	r1, r2
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <IKS01A2_MOTION_SENSOR_GetAxes+0x50>)
 8004868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800486c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004870:	4413      	add	r3, r2
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <IKS01A2_MOTION_SENSOR_GetAxes+0x54>)
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <IKS01A2_MOTION_SENSOR_GetAxes+0x58>)
 800487c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004880:	4798      	blx	r3
 8004882:	4603      	mov	r3, r0
 8004884:	b908      	cbnz	r0, 800488a <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
}
 8004886:	4618      	mov	r0, r3
 8004888:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800488a:	f06f 0304 	mvn.w	r3, #4
 800488e:	e7fa      	b.n	8004886 <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004890:	f06f 0301 	mvn.w	r3, #1
 8004894:	e7f7      	b.n	8004886 <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 8004896:	f06f 0301 	mvn.w	r3, #1
  return ret;
 800489a:	e7f4      	b.n	8004886 <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
 800489c:	2000220c 	.word	0x2000220c
 80048a0:	080162d8 	.word	0x080162d8
 80048a4:	20002224 	.word	0x20002224
 80048a8:	20002848 	.word	0x20002848

080048ac <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
{
 80048ac:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80048ae:	2802      	cmp	r0, #2
 80048b0:	d81c      	bhi.n	80048ec <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x40>
 80048b2:	460b      	mov	r3, r1
 80048b4:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 80048b8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80048bc:	ea33 0202 	bics.w	r2, r3, r2
 80048c0:	d117      	bne.n	80048f2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x46>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x50>)
 80048c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80048cc:	4413      	add	r3, r2
 80048ce:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x54>)
 80048d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x58>)
 80048d8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80048dc:	4798      	blx	r3
 80048de:	4603      	mov	r3, r0
 80048e0:	b908      	cbnz	r0, 80048e6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x3a>
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80048e6:	f06f 0304 	mvn.w	r3, #4
 80048ea:	e7fa      	b.n	80048e2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 80048ec:	f06f 0301 	mvn.w	r3, #1
 80048f0:	e7f7      	b.n	80048e2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 80048f2:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80048f6:	e7f4      	b.n	80048e2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x36>
 80048f8:	2000220c 	.word	0x2000220c
 80048fc:	080162d8 	.word	0x080162d8
 8004900:	20002224 	.word	0x20002224
 8004904:	20002848 	.word	0x20002848

08004908 <IKS01A2_MOTION_SENSOR_SetFullScale>:
{
 8004908:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800490a:	2802      	cmp	r0, #2
 800490c:	d81c      	bhi.n	8004948 <IKS01A2_MOTION_SENSOR_SetFullScale+0x40>
 800490e:	460b      	mov	r3, r1
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004910:	4910      	ldr	r1, [pc, #64]	; (8004954 <IKS01A2_MOTION_SENSOR_SetFullScale+0x4c>)
 8004912:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004916:	ea33 0101 	bics.w	r1, r3, r1
 800491a:	d118      	bne.n	800494e <IKS01A2_MOTION_SENSOR_SetFullScale+0x46>
 800491c:	4611      	mov	r1, r2
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <IKS01A2_MOTION_SENSOR_SetFullScale+0x50>)
 8004920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004924:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004928:	4413      	add	r3, r2
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <IKS01A2_MOTION_SENSOR_SetFullScale+0x54>)
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <IKS01A2_MOTION_SENSOR_SetFullScale+0x58>)
 8004934:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004938:	4798      	blx	r3
 800493a:	4603      	mov	r3, r0
 800493c:	b908      	cbnz	r0, 8004942 <IKS01A2_MOTION_SENSOR_SetFullScale+0x3a>
}
 800493e:	4618      	mov	r0, r3
 8004940:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004942:	f06f 0304 	mvn.w	r3, #4
 8004946:	e7fa      	b.n	800493e <IKS01A2_MOTION_SENSOR_SetFullScale+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004948:	f06f 0301 	mvn.w	r3, #1
 800494c:	e7f7      	b.n	800493e <IKS01A2_MOTION_SENSOR_SetFullScale+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 800494e:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004952:	e7f4      	b.n	800493e <IKS01A2_MOTION_SENSOR_SetFullScale+0x36>
 8004954:	2000220c 	.word	0x2000220c
 8004958:	080162d8 	.word	0x080162d8
 800495c:	20002224 	.word	0x20002224
 8004960:	20002848 	.word	0x20002848

08004964 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004964:	b530      	push	{r4, r5, lr}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800496a:	2400      	movs	r4, #0
 800496c:	9401      	str	r4, [sp, #4]
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <USART2_MspInit+0x88>)
 8004970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004972:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
 8004978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800497e:	9201      	str	r2, [sp, #4]
 8004980:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	9402      	str	r4, [sp, #8]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	9302      	str	r3, [sp, #8]
 8004994:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004996:	230c      	movs	r3, #12
 8004998:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499a:	2302      	movs	r3, #2
 800499c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a0:	2303      	movs	r3, #3
 80049a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049a4:	2307      	movs	r3, #7
 80049a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a8:	a903      	add	r1, sp, #12
 80049aa:	4811      	ldr	r0, [pc, #68]	; (80049f0 <USART2_MspInit+0x8c>)
 80049ac:	f000 fb8c 	bl	80050c8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80049b0:	4810      	ldr	r0, [pc, #64]	; (80049f4 <USART2_MspInit+0x90>)
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <USART2_MspInit+0x94>)
 80049b4:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80049b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049ba:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049bc:	6084      	str	r4, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049be:	60c4      	str	r4, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c4:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049c6:	6144      	str	r4, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049c8:	6184      	str	r4, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80049ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ce:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049d0:	6204      	str	r4, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049d2:	6244      	str	r4, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049d4:	f000 f9dc 	bl	8004d90 <HAL_DMA_Init>
 80049d8:	b920      	cbnz	r0, 80049e4 <USART2_MspInit+0x80>
    {
      Error_Handler( );
    }

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <USART2_MspInit+0x90>)
 80049dc:	636b      	str	r3, [r5, #52]	; 0x34
 80049de:	639d      	str	r5, [r3, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80049e0:	b009      	add	sp, #36	; 0x24
 80049e2:	bd30      	pop	{r4, r5, pc}
      Error_Handler( );
 80049e4:	f7fc fbe8 	bl	80011b8 <Error_Handler>
 80049e8:	e7f7      	b.n	80049da <USART2_MspInit+0x76>
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020000 	.word	0x40020000
 80049f4:	20002854 	.word	0x20002854
 80049f8:	40026088 	.word	0x40026088

080049fc <BSP_LED_Init>:
{
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	b086      	sub	sp, #24
  LED2_GPIO_CLK_ENABLE();    
 8004a00:	2400      	movs	r4, #0
 8004a02:	9400      	str	r4, [sp, #0]
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <BSP_LED_Init+0x44>)
 8004a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8004a18:	2620      	movs	r6, #32
 8004a1a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8004a20:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8004a22:	2302      	movs	r3, #2
 8004a24:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8004a26:	4d07      	ldr	r5, [pc, #28]	; (8004a44 <BSP_LED_Init+0x48>)
 8004a28:	a901      	add	r1, sp, #4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 fb4c 	bl	80050c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004a30:	4622      	mov	r2, r4
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 fcb3 	bl	80053a0 <HAL_GPIO_WritePin>
}
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	b006      	add	sp, #24
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40020000 	.word	0x40020000

08004a48 <BSP_LED_On>:
{
 8004a48:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	2120      	movs	r1, #32
 8004a4e:	4802      	ldr	r0, [pc, #8]	; (8004a58 <BSP_LED_On+0x10>)
 8004a50:	f000 fca6 	bl	80053a0 <HAL_GPIO_WritePin>
}
 8004a54:	2000      	movs	r0, #0
 8004a56:	bd08      	pop	{r3, pc}
 8004a58:	40020000 	.word	0x40020000

08004a5c <BSP_LED_Off>:
{
 8004a5c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2120      	movs	r1, #32
 8004a62:	4802      	ldr	r0, [pc, #8]	; (8004a6c <BSP_LED_Off+0x10>)
 8004a64:	f000 fc9c 	bl	80053a0 <HAL_GPIO_WritePin>
}
 8004a68:	2000      	movs	r0, #0
 8004a6a:	bd08      	pop	{r3, pc}
 8004a6c:	40020000 	.word	0x40020000

08004a70 <MX_USART2_UART_Init>:
{
 8004a70:	b508      	push	{r3, lr}
  huart->Instance = USART2;
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <MX_USART2_UART_Init+0x2c>)
 8004a74:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate = 921600;
 8004a76:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004a7a:	6042      	str	r2, [r0, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004a80:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004a82:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004a84:	210c      	movs	r1, #12
 8004a86:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a88:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004a8a:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8004a8c:	f002 fd06 	bl	800749c <HAL_UART_Init>
 8004a90:	4603      	mov	r3, r0
 8004a92:	b100      	cbz	r0, 8004a96 <MX_USART2_UART_Init+0x26>
    ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	bd08      	pop	{r3, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40004400 	.word	0x40004400

08004aa0 <BSP_COM_Init>:
  if(COM > COMn)
 8004aa0:	2801      	cmp	r0, #1
 8004aa2:	d80f      	bhi.n	8004ac4 <BSP_COM_Init+0x24>
{
 8004aa4:	b510      	push	{r4, lr}
     hcom_uart[COM].Instance = COM_USART[COM];
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <BSP_COM_Init+0x30>)
 8004aa8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <BSP_COM_Init+0x34>)
 8004aae:	0180      	lsls	r0, r0, #6
 8004ab0:	181c      	adds	r4, r3, r0
 8004ab2:	501a      	str	r2, [r3, r0]
    USART2_MspInit(&hcom_uart[COM]);
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7ff ff55 	bl	8004964 <USART2_MspInit>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff ffd8 	bl	8004a70 <MX_USART2_UART_Init>
 8004ac0:	b918      	cbnz	r0, 8004aca <BSP_COM_Init+0x2a>
}
 8004ac2:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004ac4:	f06f 0001 	mvn.w	r0, #1
}
 8004ac8:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004aca:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004ace:	e7f8      	b.n	8004ac2 <BSP_COM_Init+0x22>
 8004ad0:	200012f4 	.word	0x200012f4
 8004ad4:	200028b4 	.word	0x200028b4

08004ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <HAL_InitTick+0x40>)
 8004ade:	7818      	ldrb	r0, [r3, #0]
 8004ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae4:	fbb3 f3f0 	udiv	r3, r3, r0
 8004ae8:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <HAL_InitTick+0x44>)
 8004aea:	6810      	ldr	r0, [r2, #0]
 8004aec:	fbb0 f0f3 	udiv	r0, r0, r3
 8004af0:	f000 f8ac 	bl	8004c4c <HAL_SYSTICK_Config>
 8004af4:	b968      	cbnz	r0, 8004b12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af6:	2c0f      	cmp	r4, #15
 8004af8:	d901      	bls.n	8004afe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004afa:	2001      	movs	r0, #1
 8004afc:	e00a      	b.n	8004b14 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004afe:	2200      	movs	r2, #0
 8004b00:	4621      	mov	r1, r4
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	f000 f85f 	bl	8004bc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_InitTick+0x48>)
 8004b0c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e000      	b.n	8004b14 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
}
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	bf00      	nop
 8004b18:	20001300 	.word	0x20001300
 8004b1c:	200011c0 	.word	0x200011c0
 8004b20:	20001304 	.word	0x20001304

08004b24 <HAL_Init>:
{
 8004b24:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_Init+0x30>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b40:	2003      	movs	r0, #3
 8004b42:	f000 f82f 	bl	8004ba4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f7ff ffc6 	bl	8004ad8 <HAL_InitTick>
  HAL_MspInit();
 8004b4c:	f7fc fb36 	bl	80011bc <HAL_MspInit>
}
 8004b50:	2000      	movs	r0, #0
 8004b52:	bd08      	pop	{r3, pc}
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b58:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <HAL_IncTick+0x10>)
 8004b5a:	6811      	ldr	r1, [r2, #0]
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_IncTick+0x14>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	440b      	add	r3, r1
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	200028f4 	.word	0x200028f4
 8004b6c:	20001300 	.word	0x20001300

08004b70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <HAL_GetTick+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	200028f4 	.word	0x200028f4

08004b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b80:	f7ff fff6 	bl	8004b70 <HAL_GetTick>
 8004b84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b86:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b8a:	d002      	beq.n	8004b92 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <HAL_Delay+0x24>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b92:	f7ff ffed 	bl	8004b70 <HAL_GetTick>
 8004b96:	1b40      	subs	r0, r0, r5
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d3fa      	bcc.n	8004b92 <HAL_Delay+0x16>
  {
  }
}
 8004b9c:	bd38      	pop	{r3, r4, r5, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20001300 	.word	0x20001300

08004ba4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba4:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004ba6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb0:	0200      	lsls	r0, r0, #8
 8004bb2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8004bb8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004bbc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004bc0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004bc2:	4770      	bx	lr
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bc8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <HAL_NVIC_SetPriority+0x60>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd2:	f1c3 0407 	rsb	r4, r3, #7
 8004bd6:	2c04      	cmp	r4, #4
 8004bd8:	bf28      	it	cs
 8004bda:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bdc:	1d1d      	adds	r5, r3, #4
 8004bde:	2d06      	cmp	r5, #6
 8004be0:	d918      	bls.n	8004c14 <HAL_NVIC_SetPriority+0x4c>
 8004be2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 35ff 	mov.w	r5, #4294967295
 8004be8:	fa05 f404 	lsl.w	r4, r5, r4
 8004bec:	ea21 0104 	bic.w	r1, r1, r4
 8004bf0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf2:	fa05 f303 	lsl.w	r3, r5, r3
 8004bf6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bfa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	db0b      	blt.n	8004c18 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c00:	0109      	lsls	r1, r1, #4
 8004c02:	b2c9      	uxtb	r1, r1
 8004c04:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c08:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c0c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c10:	bc30      	pop	{r4, r5}
 8004c12:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c14:	2300      	movs	r3, #0
 8004c16:	e7e5      	b.n	8004be4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c18:	f000 000f 	and.w	r0, r0, #15
 8004c1c:	0109      	lsls	r1, r1, #4
 8004c1e:	b2c9      	uxtb	r1, r1
 8004c20:	4b02      	ldr	r3, [pc, #8]	; (8004c2c <HAL_NVIC_SetPriority+0x64>)
 8004c22:	5419      	strb	r1, [r3, r0]
 8004c24:	e7f4      	b.n	8004c10 <HAL_NVIC_SetPriority+0x48>
 8004c26:	bf00      	nop
 8004c28:	e000ed00 	.word	0xe000ed00
 8004c2c:	e000ed14 	.word	0xe000ed14

08004c30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	db07      	blt.n	8004c44 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c34:	f000 021f 	and.w	r2, r0, #31
 8004c38:	0940      	lsrs	r0, r0, #5
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4093      	lsls	r3, r2
 8004c3e:	4a02      	ldr	r2, [pc, #8]	; (8004c48 <HAL_NVIC_EnableIRQ+0x18>)
 8004c40:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000e100 	.word	0xe000e100

08004c4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c4c:	3801      	subs	r0, #1
 8004c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c52:	d20a      	bcs.n	8004c6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_SYSTICK_Config+0x24>)
 8004c56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <HAL_SYSTICK_Config+0x28>)
 8004c5a:	21f0      	movs	r1, #240	; 0xf0
 8004c5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c60:	2000      	movs	r0, #0
 8004c62:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c78:	b158      	cbz	r0, 8004c92 <HAL_CRC_Init+0x1a>
{
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c7e:	7943      	ldrb	r3, [r0, #5]
 8004c80:	b11b      	cbz	r3, 8004c8a <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c82:	2301      	movs	r3, #1
 8004c84:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004c86:	2000      	movs	r0, #0
}
 8004c88:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004c8a:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8004c8c:	f7fc fab2 	bl	80011f4 <HAL_CRC_MspInit>
 8004c90:	e7f7      	b.n	8004c82 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8004c92:	2001      	movs	r0, #1
}
 8004c94:	4770      	bx	lr

08004c96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c96:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c98:	6805      	ldr	r5, [r0, #0]
 8004c9a:	682c      	ldr	r4, [r5, #0]
 8004c9c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004ca0:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ca2:	6804      	ldr	r4, [r0, #0]
 8004ca4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca6:	6883      	ldr	r3, [r0, #8]
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d005      	beq.n	8004cb8 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004cb0:	6803      	ldr	r3, [r0, #0]
 8004cb2:	60da      	str	r2, [r3, #12]
  }
}
 8004cb4:	bc30      	pop	{r4, r5}
 8004cb6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004cb8:	6803      	ldr	r3, [r0, #0]
 8004cba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004cbc:	6803      	ldr	r3, [r0, #0]
 8004cbe:	60d9      	str	r1, [r3, #12]
 8004cc0:	e7f8      	b.n	8004cb4 <DMA_SetConfig+0x1e>
	...

08004cc4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cc4:	6802      	ldr	r2, [r0, #0]
 8004cc6:	b2d3      	uxtb	r3, r2
 8004cc8:	3b10      	subs	r3, #16
 8004cca:	490b      	ldr	r1, [pc, #44]	; (8004cf8 <DMA_CalcBaseAndBitshift+0x34>)
 8004ccc:	fba1 1303 	umull	r1, r3, r1, r3
 8004cd0:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <DMA_CalcBaseAndBitshift+0x38>)
 8004cd4:	5cc9      	ldrb	r1, [r1, r3]
 8004cd6:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d806      	bhi.n	8004cea <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cdc:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004ce0:	f022 0203 	bic.w	r2, r2, #3
 8004ce4:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004ce6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004ce8:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cea:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004cee:	f022 0203 	bic.w	r2, r2, #3
 8004cf2:	3204      	adds	r2, #4
 8004cf4:	6582      	str	r2, [r0, #88]	; 0x58
 8004cf6:	e7f6      	b.n	8004ce6 <DMA_CalcBaseAndBitshift+0x22>
 8004cf8:	aaaaaaab 	.word	0xaaaaaaab
 8004cfc:	080162ec 	.word	0x080162ec

08004d00 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d02:	6982      	ldr	r2, [r0, #24]
 8004d04:	b992      	cbnz	r2, 8004d2c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d00a      	beq.n	8004d20 <DMA_CheckFifoParam+0x20>
 8004d0a:	b11b      	cbz	r3, 8004d14 <DMA_CheckFifoParam+0x14>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d001      	beq.n	8004d14 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2000      	movs	r0, #0
 8004d12:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d16:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004d1a:	d12c      	bne.n	8004d76 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d26:	d028      	beq.n	8004d7a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2000      	movs	r0, #0
 8004d2a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004d30:	d005      	beq.n	8004d3e <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d929      	bls.n	8004d8a <DMA_CheckFifoParam+0x8a>
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d015      	beq.n	8004d66 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	4770      	bx	lr
    switch (tmp)
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d803      	bhi.n	8004d4a <DMA_CheckFifoParam+0x4a>
 8004d42:	e8df f003 	tbb	[pc, r3]
 8004d46:	041c      	.short	0x041c
 8004d48:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004d54:	d115      	bne.n	8004d82 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2000      	movs	r0, #0
 8004d58:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d60:	d011      	beq.n	8004d86 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2000      	movs	r0, #0
 8004d64:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004d6c:	d001      	beq.n	8004d72 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8004d6e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004d70:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2000      	movs	r0, #0
 8004d74:	4770      	bx	lr
        status = HAL_ERROR;
 8004d76:	2001      	movs	r0, #1
 8004d78:	4770      	bx	lr
        status = HAL_ERROR;
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	4770      	bx	lr
      status = HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
 8004d80:	4770      	bx	lr
        status = HAL_ERROR;
 8004d82:	2001      	movs	r0, #1
 8004d84:	4770      	bx	lr
        status = HAL_ERROR;
 8004d86:	2001      	movs	r0, #1
 8004d88:	4770      	bx	lr
      status = HAL_ERROR;
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_DMA_Init>:
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d94:	f7ff feec 	bl	8004b70 <HAL_GetTick>
  if(hdma == NULL)
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	d05b      	beq.n	8004e54 <HAL_DMA_Init+0xc4>
 8004d9c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da4:	2302      	movs	r3, #2
 8004da6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	f012 0f01 	tst.w	r2, #1
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dbe:	f7ff fed7 	bl	8004b70 <HAL_GetTick>
 8004dc2:	1b40      	subs	r0, r0, r5
 8004dc4:	2805      	cmp	r0, #5
 8004dc6:	d9f5      	bls.n	8004db4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc8:	2320      	movs	r3, #32
 8004dca:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dcc:	2003      	movs	r0, #3
 8004dce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004dd4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dd6:	4820      	ldr	r0, [pc, #128]	; (8004e58 <HAL_DMA_Init+0xc8>)
 8004dd8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dda:	6861      	ldr	r1, [r4, #4]
 8004ddc:	68a2      	ldr	r2, [r4, #8]
 8004dde:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de4:	6921      	ldr	r1, [r4, #16]
 8004de6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	69a1      	ldr	r1, [r4, #24]
 8004dee:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df0:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df4:	6a21      	ldr	r1, [r4, #32]
 8004df6:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004dfc:	2904      	cmp	r1, #4
 8004dfe:	d01e      	beq.n	8004e3e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004e00:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004e02:	6826      	ldr	r6, [r4, #0]
 8004e04:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e06:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8004e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e0c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d107      	bne.n	8004e22 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8004e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e14:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e18:	b11b      	cbz	r3, 8004e22 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ff70 	bl	8004d00 <DMA_CheckFifoParam>
 8004e20:	b990      	cbnz	r0, 8004e48 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8004e22:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff ff4d 	bl	8004cc4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e2c:	233f      	movs	r3, #63	; 0x3f
 8004e2e:	4093      	lsls	r3, r2
 8004e30:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e32:	2000      	movs	r0, #0
 8004e34:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004e3c:	e7c9      	b.n	8004dd2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e40:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004e42:	4301      	orrs	r1, r0
 8004e44:	430a      	orrs	r2, r1
 8004e46:	e7db      	b.n	8004e00 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004e52:	e7be      	b.n	8004dd2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8004e54:	2001      	movs	r0, #1
 8004e56:	e7bc      	b.n	8004dd2 <HAL_DMA_Init+0x42>
 8004e58:	f010803f 	.word	0xf010803f

08004e5c <HAL_DMA_Start_IT>:
{
 8004e5c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004e60:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004e64:	2c01      	cmp	r4, #1
 8004e66:	d02c      	beq.n	8004ec2 <HAL_DMA_Start_IT+0x66>
 8004e68:	2401      	movs	r4, #1
 8004e6a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e6e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004e72:	b2e4      	uxtb	r4, r4
 8004e74:	2c01      	cmp	r4, #1
 8004e76:	d004      	beq.n	8004e82 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8004e7e:	2002      	movs	r0, #2
}
 8004e80:	bd38      	pop	{r3, r4, r5, pc}
 8004e82:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e84:	2002      	movs	r0, #2
 8004e86:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff ff01 	bl	8004c96 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e94:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e96:	233f      	movs	r3, #63	; 0x3f
 8004e98:	4093      	lsls	r3, r2
 8004e9a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	f043 0316 	orr.w	r3, r3, #22
 8004ea4:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea8:	b123      	cbz	r3, 8004eb4 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	f043 0308 	orr.w	r3, r3, #8
 8004eb2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e7de      	b.n	8004e80 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8004ec2:	2002      	movs	r0, #2
 8004ec4:	e7dc      	b.n	8004e80 <HAL_DMA_Start_IT+0x24>
	...

08004ec8 <HAL_DMA_IRQHandler>:
{
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ed2:	4b72      	ldr	r3, [pc, #456]	; (800509c <HAL_DMA_IRQHandler+0x1d4>)
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	4b72      	ldr	r3, [pc, #456]	; (80050a0 <HAL_DMA_IRQHandler+0x1d8>)
 8004ed8:	fba3 3505 	umull	r3, r5, r3, r5
 8004edc:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ede:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8004ee0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	4093      	lsls	r3, r2
 8004ee8:	4233      	tst	r3, r6
 8004eea:	d010      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004eec:	6803      	ldr	r3, [r0, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	f012 0f04 	tst.w	r2, #4
 8004ef4:	d00b      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	f022 0204 	bic.w	r2, r2, #4
 8004efc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004efe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004f00:	2308      	movs	r3, #8
 8004f02:	4093      	lsls	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f06:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f10:	2301      	movs	r3, #1
 8004f12:	4093      	lsls	r3, r2
 8004f14:	4233      	tst	r3, r6
 8004f16:	d009      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	6952      	ldr	r2, [r2, #20]
 8004f1c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f20:	d004      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f22:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f2e:	2304      	movs	r3, #4
 8004f30:	4093      	lsls	r3, r2
 8004f32:	4233      	tst	r3, r6
 8004f34:	d009      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	f012 0f02 	tst.w	r2, #2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f40:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	4093      	lsls	r3, r2
 8004f50:	4233      	tst	r3, r6
 8004f52:	d024      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	f012 0f08 	tst.w	r2, #8
 8004f5c:	d01f      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f5e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004f68:	d00d      	beq.n	8004f86 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004f70:	d104      	bne.n	8004f7c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8004f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f74:	b19b      	cbz	r3, 8004f9e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8004f76:	4620      	mov	r0, r4
 8004f78:	4798      	blx	r3
 8004f7a:	e010      	b.n	8004f9e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f7e:	b173      	cbz	r3, 8004f9e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004f80:	4620      	mov	r0, r4
 8004f82:	4798      	blx	r3
 8004f84:	e00b      	b.n	8004f9e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004f8c:	d103      	bne.n	8004f96 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f022 0208 	bic.w	r2, r2, #8
 8004f94:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f98:	b10b      	cbz	r3, 8004f9e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	4093      	lsls	r3, r2
 8004fa4:	4233      	tst	r3, r6
 8004fa6:	d055      	beq.n	8005054 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	f012 0f10 	tst.w	r2, #16
 8004fb0:	d050      	beq.n	8005054 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fb2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fb4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004fc6:	d033      	beq.n	8005030 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004fce:	d12a      	bne.n	8005026 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8004fd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d03e      	beq.n	8005054 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4798      	blx	r3
 8004fda:	e03b      	b.n	8005054 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	f023 0316 	bic.w	r3, r3, #22
 8004fe4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	6953      	ldr	r3, [r2, #20]
 8004fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fee:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff2:	b1a3      	cbz	r3, 800501e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	6813      	ldr	r3, [r2, #0]
 8004ff8:	f023 0308 	bic.w	r3, r3, #8
 8004ffc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ffe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005000:	233f      	movs	r3, #63	; 0x3f
 8005002:	4093      	lsls	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005006:	2300      	movs	r3, #0
 8005008:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800500c:	2301      	movs	r3, #1
 800500e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005012:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005014:	2b00      	cmp	r3, #0
 8005016:	d03f      	beq.n	8005098 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005018:	4620      	mov	r0, r4
 800501a:	4798      	blx	r3
 800501c:	e03c      	b.n	8005098 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800501e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e7      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x12c>
 8005024:	e7eb      	b.n	8004ffe <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005026:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005028:	b1a3      	cbz	r3, 8005054 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800502a:	4620      	mov	r0, r4
 800502c:	4798      	blx	r3
 800502e:	e011      	b.n	8005054 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005036:	d109      	bne.n	800504c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f022 0210 	bic.w	r2, r2, #16
 800503e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005040:	2300      	movs	r3, #0
 8005042:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005046:	2301      	movs	r3, #1
 8005048:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800504c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800504e:	b10b      	cbz	r3, 8005054 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005050:	4620      	mov	r0, r4
 8005052:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005054:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005056:	b1fb      	cbz	r3, 8005098 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005058:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800505a:	f013 0f01 	tst.w	r3, #1
 800505e:	d017      	beq.n	8005090 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005060:	2305      	movs	r3, #5
 8005062:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	3301      	adds	r3, #1
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	42ab      	cmp	r3, r5
 8005078:	d804      	bhi.n	8005084 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f013 0f01 	tst.w	r3, #1
 8005082:	d1f5      	bne.n	8005070 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005084:	2300      	movs	r3, #0
 8005086:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800508a:	2301      	movs	r3, #1
 800508c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005090:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005092:	b10b      	cbz	r3, 8005098 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005094:	4620      	mov	r0, r4
 8005096:	4798      	blx	r3
}
 8005098:	b003      	add	sp, #12
 800509a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509c:	200011c0 	.word	0x200011c0
 80050a0:	1b4e81b5 	.word	0x1b4e81b5

080050a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80050a4:	b508      	push	{r3, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80050a6:	6803      	ldr	r3, [r0, #0]
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	2301      	movs	r3, #1
 80050ae:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80050b0:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <HAL_EXTI_IRQHandler+0x20>)
 80050b2:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 80050b4:	421a      	tst	r2, r3
 80050b6:	d004      	beq.n	80050c2 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80050b8:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <HAL_EXTI_IRQHandler+0x20>)
 80050ba:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80050bc:	6843      	ldr	r3, [r0, #4]
 80050be:	b103      	cbz	r3, 80050c2 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 80050c0:	4798      	blx	r3
    }
  }
}
 80050c2:	bd08      	pop	{r3, pc}
 80050c4:	40013c00 	.word	0x40013c00

080050c8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	f200 80d1 	bhi.w	8005272 <HAL_GPIO_Init+0x1aa>
{
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	b083      	sub	sp, #12
 80050d4:	e039      	b.n	800514a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050d6:	2206      	movs	r2, #6
 80050d8:	e000      	b.n	80050dc <HAL_GPIO_Init+0x14>
 80050da:	2200      	movs	r2, #0
 80050dc:	40aa      	lsls	r2, r5
 80050de:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e0:	3402      	adds	r4, #2
 80050e2:	4d64      	ldr	r5, [pc, #400]	; (8005274 <HAL_GPIO_Init+0x1ac>)
 80050e4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050e8:	4a63      	ldr	r2, [pc, #396]	; (8005278 <HAL_GPIO_Init+0x1b0>)
 80050ea:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80050ec:	43f2      	mvns	r2, r6
 80050ee:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050f2:	684f      	ldr	r7, [r1, #4]
 80050f4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80050f8:	d001      	beq.n	80050fe <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80050fa:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 80050fe:	4c5e      	ldr	r4, [pc, #376]	; (8005278 <HAL_GPIO_Init+0x1b0>)
 8005100:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8005102:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005104:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005108:	684f      	ldr	r7, [r1, #4]
 800510a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800510e:	d001      	beq.n	8005114 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005110:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8005114:	4c58      	ldr	r4, [pc, #352]	; (8005278 <HAL_GPIO_Init+0x1b0>)
 8005116:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005118:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800511a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511e:	684f      	ldr	r7, [r1, #4]
 8005120:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005124:	d001      	beq.n	800512a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005126:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 800512a:	4c53      	ldr	r4, [pc, #332]	; (8005278 <HAL_GPIO_Init+0x1b0>)
 800512c:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800512e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005130:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005132:	684d      	ldr	r5, [r1, #4]
 8005134:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005138:	d001      	beq.n	800513e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800513a:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 800513e:	4c4e      	ldr	r4, [pc, #312]	; (8005278 <HAL_GPIO_Init+0x1b0>)
 8005140:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005142:	3301      	adds	r3, #1
 8005144:	2b0f      	cmp	r3, #15
 8005146:	f200 8092 	bhi.w	800526e <HAL_GPIO_Init+0x1a6>
    ioposition = 0x01U << position;
 800514a:	2201      	movs	r2, #1
 800514c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514e:	680c      	ldr	r4, [r1, #0]
 8005150:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005154:	42b2      	cmp	r2, r6
 8005156:	d1f4      	bne.n	8005142 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005158:	684c      	ldr	r4, [r1, #4]
 800515a:	1e65      	subs	r5, r4, #1
 800515c:	2d01      	cmp	r5, #1
 800515e:	d903      	bls.n	8005168 <HAL_GPIO_Init+0xa0>
 8005160:	2c11      	cmp	r4, #17
 8005162:	d001      	beq.n	8005168 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005164:	2c12      	cmp	r4, #18
 8005166:	d112      	bne.n	800518e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005168:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800516a:	005f      	lsls	r7, r3, #1
 800516c:	2403      	movs	r4, #3
 800516e:	40bc      	lsls	r4, r7
 8005170:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005174:	68cc      	ldr	r4, [r1, #12]
 8005176:	40bc      	lsls	r4, r7
 8005178:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800517a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800517c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800517e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005182:	684c      	ldr	r4, [r1, #4]
 8005184:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005188:	409a      	lsls	r2, r3
 800518a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800518c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800518e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005190:	005f      	lsls	r7, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	40ba      	lsls	r2, r7
 8005196:	43d2      	mvns	r2, r2
 8005198:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519a:	688d      	ldr	r5, [r1, #8]
 800519c:	40bd      	lsls	r5, r7
 800519e:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80051a0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051a2:	684c      	ldr	r4, [r1, #4]
 80051a4:	2c02      	cmp	r4, #2
 80051a6:	d001      	beq.n	80051ac <HAL_GPIO_Init+0xe4>
 80051a8:	2c12      	cmp	r4, #18
 80051aa:	d113      	bne.n	80051d4 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80051ac:	08dd      	lsrs	r5, r3, #3
 80051ae:	3508      	adds	r5, #8
 80051b0:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051b4:	f003 0407 	and.w	r4, r3, #7
 80051b8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80051bc:	240f      	movs	r4, #15
 80051be:	fa04 f40c 	lsl.w	r4, r4, ip
 80051c2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051c6:	690c      	ldr	r4, [r1, #16]
 80051c8:	fa04 f40c 	lsl.w	r4, r4, ip
 80051cc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80051d0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80051d4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051d6:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051d8:	684c      	ldr	r4, [r1, #4]
 80051da:	f004 0403 	and.w	r4, r4, #3
 80051de:	40bc      	lsls	r4, r7
 80051e0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80051e2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051e4:	684a      	ldr	r2, [r1, #4]
 80051e6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80051ea:	d0aa      	beq.n	8005142 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ec:	2200      	movs	r2, #0
 80051ee:	9201      	str	r2, [sp, #4]
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_GPIO_Init+0x1b4>)
 80051f2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80051f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80051f8:	6454      	str	r4, [r2, #68]	; 0x44
 80051fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005200:	9201      	str	r2, [sp, #4]
 8005202:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005204:	089c      	lsrs	r4, r3, #2
 8005206:	1ca5      	adds	r5, r4, #2
 8005208:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_GPIO_Init+0x1ac>)
 800520a:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800520e:	f003 0203 	and.w	r2, r3, #3
 8005212:	0095      	lsls	r5, r2, #2
 8005214:	220f      	movs	r2, #15
 8005216:	40aa      	lsls	r2, r5
 8005218:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800521c:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_GPIO_Init+0x1b8>)
 800521e:	4290      	cmp	r0, r2
 8005220:	f43f af5b 	beq.w	80050da <HAL_GPIO_Init+0x12>
 8005224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005228:	4290      	cmp	r0, r2
 800522a:	d016      	beq.n	800525a <HAL_GPIO_Init+0x192>
 800522c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005230:	4290      	cmp	r0, r2
 8005232:	d014      	beq.n	800525e <HAL_GPIO_Init+0x196>
 8005234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005238:	4290      	cmp	r0, r2
 800523a:	d012      	beq.n	8005262 <HAL_GPIO_Init+0x19a>
 800523c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005240:	4290      	cmp	r0, r2
 8005242:	d010      	beq.n	8005266 <HAL_GPIO_Init+0x19e>
 8005244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005248:	4290      	cmp	r0, r2
 800524a:	d00e      	beq.n	800526a <HAL_GPIO_Init+0x1a2>
 800524c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005250:	4290      	cmp	r0, r2
 8005252:	f43f af40 	beq.w	80050d6 <HAL_GPIO_Init+0xe>
 8005256:	2207      	movs	r2, #7
 8005258:	e740      	b.n	80050dc <HAL_GPIO_Init+0x14>
 800525a:	2201      	movs	r2, #1
 800525c:	e73e      	b.n	80050dc <HAL_GPIO_Init+0x14>
 800525e:	2202      	movs	r2, #2
 8005260:	e73c      	b.n	80050dc <HAL_GPIO_Init+0x14>
 8005262:	2203      	movs	r2, #3
 8005264:	e73a      	b.n	80050dc <HAL_GPIO_Init+0x14>
 8005266:	2204      	movs	r2, #4
 8005268:	e738      	b.n	80050dc <HAL_GPIO_Init+0x14>
 800526a:	2205      	movs	r2, #5
 800526c:	e736      	b.n	80050dc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800526e:	b003      	add	sp, #12
 8005270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005272:	4770      	bx	lr
 8005274:	40013800 	.word	0x40013800
 8005278:	40013c00 	.word	0x40013c00
 800527c:	40023800 	.word	0x40023800
 8005280:	40020000 	.word	0x40020000

08005284 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005284:	2300      	movs	r3, #0
 8005286:	2b0f      	cmp	r3, #15
 8005288:	f200 8082 	bhi.w	8005390 <HAL_GPIO_DeInit+0x10c>
{
 800528c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528e:	e029      	b.n	80052e4 <HAL_GPIO_DeInit+0x60>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005290:	2706      	movs	r7, #6
 8005292:	e000      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
 8005294:	2700      	movs	r7, #0
 8005296:	fa07 f505 	lsl.w	r5, r7, r5
 800529a:	42b5      	cmp	r5, r6
 800529c:	d05f      	beq.n	800535e <HAL_GPIO_DeInit+0xda>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800529e:	6805      	ldr	r5, [r0, #0]
 80052a0:	005e      	lsls	r6, r3, #1
 80052a2:	2403      	movs	r4, #3
 80052a4:	40b4      	lsls	r4, r6
 80052a6:	43e4      	mvns	r4, r4
 80052a8:	4025      	ands	r5, r4
 80052aa:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052ac:	08dd      	lsrs	r5, r3, #3
 80052ae:	3508      	adds	r5, #8
 80052b0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80052b4:	f003 0707 	and.w	r7, r3, #7
 80052b8:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80052bc:	270f      	movs	r7, #15
 80052be:	fa07 f70c 	lsl.w	r7, r7, ip
 80052c2:	ea26 0607 	bic.w	r6, r6, r7
 80052c6:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ca:	68c5      	ldr	r5, [r0, #12]
 80052cc:	4025      	ands	r5, r4
 80052ce:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052d0:	6845      	ldr	r5, [r0, #4]
 80052d2:	ea25 0202 	bic.w	r2, r5, r2
 80052d6:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052d8:	6882      	ldr	r2, [r0, #8]
 80052da:	4014      	ands	r4, r2
 80052dc:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052de:	3301      	adds	r3, #1
 80052e0:	2b0f      	cmp	r3, #15
 80052e2:	d854      	bhi.n	800538e <HAL_GPIO_DeInit+0x10a>
    ioposition = 0x01U << position;
 80052e4:	2201      	movs	r2, #1
 80052e6:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80052e8:	ea02 0401 	and.w	r4, r2, r1
    if(iocurrent == ioposition)
 80052ec:	42a2      	cmp	r2, r4
 80052ee:	d1f6      	bne.n	80052de <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052f0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80052f4:	f10e 0602 	add.w	r6, lr, #2
 80052f8:	4d26      	ldr	r5, [pc, #152]	; (8005394 <HAL_GPIO_DeInit+0x110>)
 80052fa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052fe:	f003 0503 	and.w	r5, r3, #3
 8005302:	00ad      	lsls	r5, r5, #2
 8005304:	f04f 0c0f 	mov.w	ip, #15
 8005308:	fa0c fc05 	lsl.w	ip, ip, r5
 800530c:	ea0c 0606 	and.w	r6, ip, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005310:	4f21      	ldr	r7, [pc, #132]	; (8005398 <HAL_GPIO_DeInit+0x114>)
 8005312:	42b8      	cmp	r0, r7
 8005314:	d0be      	beq.n	8005294 <HAL_GPIO_DeInit+0x10>
 8005316:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800531a:	42b8      	cmp	r0, r7
 800531c:	d015      	beq.n	800534a <HAL_GPIO_DeInit+0xc6>
 800531e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005322:	42b8      	cmp	r0, r7
 8005324:	d013      	beq.n	800534e <HAL_GPIO_DeInit+0xca>
 8005326:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800532a:	42b8      	cmp	r0, r7
 800532c:	d011      	beq.n	8005352 <HAL_GPIO_DeInit+0xce>
 800532e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005332:	42b8      	cmp	r0, r7
 8005334:	d00f      	beq.n	8005356 <HAL_GPIO_DeInit+0xd2>
 8005336:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800533a:	42b8      	cmp	r0, r7
 800533c:	d00d      	beq.n	800535a <HAL_GPIO_DeInit+0xd6>
 800533e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005342:	42b8      	cmp	r0, r7
 8005344:	d0a4      	beq.n	8005290 <HAL_GPIO_DeInit+0xc>
 8005346:	2707      	movs	r7, #7
 8005348:	e7a5      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
 800534a:	2701      	movs	r7, #1
 800534c:	e7a3      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
 800534e:	2702      	movs	r7, #2
 8005350:	e7a1      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
 8005352:	2703      	movs	r7, #3
 8005354:	e79f      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
 8005356:	2704      	movs	r7, #4
 8005358:	e79d      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
 800535a:	2705      	movs	r7, #5
 800535c:	e79b      	b.n	8005296 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800535e:	4d0f      	ldr	r5, [pc, #60]	; (800539c <HAL_GPIO_DeInit+0x118>)
 8005360:	682e      	ldr	r6, [r5, #0]
 8005362:	43e4      	mvns	r4, r4
 8005364:	4026      	ands	r6, r4
 8005366:	602e      	str	r6, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005368:	686e      	ldr	r6, [r5, #4]
 800536a:	4026      	ands	r6, r4
 800536c:	606e      	str	r6, [r5, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800536e:	68ae      	ldr	r6, [r5, #8]
 8005370:	4026      	ands	r6, r4
 8005372:	60ae      	str	r6, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005374:	68ee      	ldr	r6, [r5, #12]
 8005376:	4034      	ands	r4, r6
 8005378:	60ec      	str	r4, [r5, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800537a:	4e06      	ldr	r6, [pc, #24]	; (8005394 <HAL_GPIO_DeInit+0x110>)
 800537c:	f10e 0402 	add.w	r4, lr, #2
 8005380:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8005384:	ea25 050c 	bic.w	r5, r5, ip
 8005388:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 800538c:	e787      	b.n	800529e <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40013800 	.word	0x40013800
 8005398:	40020000 	.word	0x40020000
 800539c:	40013c00 	.word	0x40013c00

080053a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a0:	b912      	cbnz	r2, 80053a8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053a2:	0409      	lsls	r1, r1, #16
 80053a4:	6181      	str	r1, [r0, #24]
  }
}
 80053a6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80053a8:	6181      	str	r1, [r0, #24]
 80053aa:	4770      	bx	lr

080053ac <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80053b4:	d011      	beq.n	80053da <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053bc:	2300      	movs	r3, #0
 80053be:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053c0:	2220      	movs	r2, #32
 80053c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80053cc:	f042 0204 	orr.w	r2, r2, #4
 80053d0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80053d6:	2001      	movs	r0, #1
 80053d8:	4770      	bx	lr
  }
  return HAL_OK;
 80053da:	2000      	movs	r0, #0
}
 80053dc:	4770      	bx	lr

080053de <I2C_WaitOnFlagUntilTimeout>:
{
 80053de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e0:	4606      	mov	r6, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	4617      	mov	r7, r2
 80053e6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053e8:	e022      	b.n	8005430 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7ff fbc1 	bl	8004b70 <HAL_GetTick>
 80053ee:	9b06      	ldr	r3, [sp, #24]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	42a8      	cmp	r0, r5
 80053f4:	d800      	bhi.n	80053f8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80053f6:	b9dd      	cbnz	r5, 8005430 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053fc:	2220      	movs	r2, #32
 80053fe:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005402:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005408:	f042 0220 	orr.w	r2, r2, #32
 800540c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800540e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8005412:	2001      	movs	r0, #1
 8005414:	e01a      	b.n	800544c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005416:	6833      	ldr	r3, [r6, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	ea24 0303 	bic.w	r3, r4, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	fab3 f383 	clz	r3, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	429f      	cmp	r7, r3
 8005428:	d10f      	bne.n	800544a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800542a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800542e:	d1dc      	bne.n	80053ea <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005430:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005434:	2b01      	cmp	r3, #1
 8005436:	d0ee      	beq.n	8005416 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005438:	6833      	ldr	r3, [r6, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	ea24 0303 	bic.w	r3, r4, r3
 8005440:	b29b      	uxth	r3, r3
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	e7ed      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800544a:	2000      	movs	r0, #0
}
 800544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800544e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800544e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	460d      	mov	r5, r1
 8005454:	4616      	mov	r6, r2
 8005456:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005458:	e03c      	b.n	80054d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005460:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005468:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800546a:	2300      	movs	r3, #0
 800546c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800546e:	2220      	movs	r2, #32
 8005470:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005474:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005478:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800547a:	f042 0204 	orr.w	r2, r2, #4
 800547e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005480:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005484:	2001      	movs	r0, #1
 8005486:	e033      	b.n	80054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005488:	f7ff fb72 	bl	8004b70 <HAL_GetTick>
 800548c:	1bc0      	subs	r0, r0, r7
 800548e:	42b0      	cmp	r0, r6
 8005490:	d800      	bhi.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005492:	b9fe      	cbnz	r6, 80054d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005494:	2300      	movs	r3, #0
 8005496:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	2220      	movs	r2, #32
 800549a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054a4:	f042 0220 	orr.w	r2, r2, #32
 80054a8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80054aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80054ae:	2001      	movs	r0, #1
 80054b0:	e01e      	b.n	80054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	ea25 0303 	bic.w	r3, r5, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3300      	adds	r3, #0
 80054be:	bf18      	it	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	b1a3      	cbz	r3, 80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80054cc:	d1c5      	bne.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80054ce:	f1b6 3fff 	cmp.w	r6, #4294967295
 80054d2:	d1d9      	bne.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054d4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d0ea      	beq.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	ea25 0303 	bic.w	r3, r5, r3
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3300      	adds	r3, #0
 80054e8:	bf18      	it	ne
 80054ea:	2301      	movne	r3, #1
 80054ec:	e7e9      	b.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80054ee:	2000      	movs	r0, #0
}
 80054f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054f2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80054f2:	b570      	push	{r4, r5, r6, lr}
 80054f4:	4604      	mov	r4, r0
 80054f6:	460d      	mov	r5, r1
 80054f8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005502:	d11c      	bne.n	800553e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005504:	4620      	mov	r0, r4
 8005506:	f7ff ff51 	bl	80053ac <I2C_IsAcknowledgeFailed>
 800550a:	b9d0      	cbnz	r0, 8005542 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800550c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005510:	d0f3      	beq.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7ff fb2d 	bl	8004b70 <HAL_GetTick>
 8005516:	1b80      	subs	r0, r0, r6
 8005518:	42a8      	cmp	r0, r5
 800551a:	d801      	bhi.n	8005520 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800551c:	2d00      	cmp	r5, #0
 800551e:	d1ec      	bne.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005520:	2300      	movs	r3, #0
 8005522:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	2220      	movs	r2, #32
 8005526:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800552e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005530:	f042 0220 	orr.w	r2, r2, #32
 8005534:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005536:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800553a:	2001      	movs	r0, #1
 800553c:	e000      	b.n	8005540 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800553e:	2000      	movs	r0, #0
}
 8005540:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005542:	2001      	movs	r0, #1
 8005544:	e7fc      	b.n	8005540 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08005548 <I2C_RequestMemoryWrite>:
{
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	4604      	mov	r4, r0
 8005550:	4688      	mov	r8, r1
 8005552:	4616      	mov	r6, r2
 8005554:	461f      	mov	r7, r3
 8005556:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005558:	6802      	ldr	r2, [r0, #0]
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005560:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	9500      	str	r5, [sp, #0]
 8005564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005566:	2200      	movs	r2, #0
 8005568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800556c:	f7ff ff37 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005570:	b160      	cbz	r0, 800558c <I2C_RequestMemoryWrite+0x44>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f413 7f80 	tst.w	r3, #256	; 0x100
 800557a:	d04f      	beq.n	800561c <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005580:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
}
 8005584:	4618      	mov	r0, r3
 8005586:	b004      	add	sp, #16
 8005588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8005592:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005594:	462b      	mov	r3, r5
 8005596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005598:	4921      	ldr	r1, [pc, #132]	; (8005620 <I2C_RequestMemoryWrite+0xd8>)
 800559a:	4620      	mov	r0, r4
 800559c:	f7ff ff57 	bl	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a0:	b108      	cbz	r0, 80055a6 <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e7ee      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a6:	2300      	movs	r3, #0
 80055a8:	9303      	str	r3, [sp, #12]
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	9203      	str	r2, [sp, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b6:	462a      	mov	r2, r5
 80055b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7ff ff99 	bl	80054f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	b158      	cbz	r0, 80055dc <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d001      	beq.n	80055ce <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e7da      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	6813      	ldr	r3, [r2, #0]
 80055d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d6:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e7d3      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055dc:	2f01      	cmp	r7, #1
 80055de:	d00e      	beq.n	80055fe <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	0a32      	lsrs	r2, r6, #8
 80055e4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e6:	462a      	mov	r2, r5
 80055e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7ff ff81 	bl	80054f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	b178      	cbz	r0, 8005614 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d005      	beq.n	8005606 <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e7c2      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	b2f6      	uxtb	r6, r6
 8005602:	6116      	str	r6, [r2, #16]
 8005604:	e7be      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	6813      	ldr	r3, [r2, #0]
 800560a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800560e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e7b7      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	b2f6      	uxtb	r6, r6
 8005618:	6116      	str	r6, [r2, #16]
 800561a:	e7b3      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e7b1      	b.n	8005584 <I2C_RequestMemoryWrite+0x3c>
 8005620:	00010002 	.word	0x00010002

08005624 <I2C_RequestMemoryRead>:
{
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	4604      	mov	r4, r0
 800562c:	460e      	mov	r6, r1
 800562e:	4617      	mov	r7, r2
 8005630:	4698      	mov	r8, r3
 8005632:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005634:	6802      	ldr	r2, [r0, #0]
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563e:	6802      	ldr	r2, [r0, #0]
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005646:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005648:	9500      	str	r5, [sp, #0]
 800564a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564c:	2200      	movs	r2, #0
 800564e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005652:	f7ff fec4 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005656:	b168      	cbz	r0, 8005674 <I2C_RequestMemoryRead+0x50>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005660:	f000 8089 	beq.w	8005776 <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005668:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
}
 800566c:	4618      	mov	r0, r3
 800566e:	b004      	add	sp, #16
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005674:	b2f6      	uxtb	r6, r6
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 800567c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800567e:	462b      	mov	r3, r5
 8005680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005682:	493f      	ldr	r1, [pc, #252]	; (8005780 <I2C_RequestMemoryRead+0x15c>)
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff fee2 	bl	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800568a:	b108      	cbz	r0, 8005690 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e7ed      	b.n	800566c <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005690:	2300      	movs	r3, #0
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	9203      	str	r2, [sp, #12]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a0:	462a      	mov	r2, r5
 80056a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff ff24 	bl	80054f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80056aa:	b158      	cbz	r0, 80056c4 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d001      	beq.n	80056b6 <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e7da      	b.n	800566c <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	6813      	ldr	r3, [r2, #0]
 80056ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056be:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e7d3      	b.n	800566c <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056c4:	f1b8 0f01 	cmp.w	r8, #1
 80056c8:	d10d      	bne.n	80056e6 <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	b2ff      	uxtb	r7, r7
 80056ce:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d0:	462a      	mov	r2, r5
 80056d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056d4:	4620      	mov	r0, r4
 80056d6:	f7ff ff0c 	bl	80054f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80056da:	b320      	cbz	r0, 8005726 <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d01a      	beq.n	8005718 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e7c2      	b.n	800566c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0a3a      	lsrs	r2, r7, #8
 80056ea:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ec:	462a      	mov	r2, r5
 80056ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff fefe 	bl	80054f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f6:	b158      	cbz	r0, 8005710 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d001      	beq.n	8005702 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e7b4      	b.n	800566c <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	6813      	ldr	r3, [r2, #0]
 8005706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800570a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e7ad      	b.n	800566c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	b2ff      	uxtb	r7, r7
 8005714:	611f      	str	r7, [r3, #16]
 8005716:	e7db      	b.n	80056d0 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005718:	6822      	ldr	r2, [r4, #0]
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005720:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e7a2      	b.n	800566c <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	6813      	ldr	r3, [r2, #0]
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005730:	9500      	str	r5, [sp, #0]
 8005732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005734:	2200      	movs	r2, #0
 8005736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fe4f 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005740:	b148      	cbz	r0, 8005756 <I2C_RequestMemoryRead+0x132>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f413 7f80 	tst.w	r3, #256	; 0x100
 800574a:	d016      	beq.n	800577a <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800574c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005750:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e78a      	b.n	800566c <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	f046 0601 	orr.w	r6, r6, #1
 800575c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800575e:	462b      	mov	r3, r5
 8005760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005762:	4907      	ldr	r1, [pc, #28]	; (8005780 <I2C_RequestMemoryRead+0x15c>)
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff fe72 	bl	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2800      	cmp	r0, #0
 800576e:	f43f af7d 	beq.w	800566c <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e77a      	b.n	800566c <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e778      	b.n	800566c <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e776      	b.n	800566c <I2C_RequestMemoryRead+0x48>
 800577e:	bf00      	nop
 8005780:	00010002 	.word	0x00010002

08005784 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4604      	mov	r4, r0
 8005788:	460d      	mov	r5, r1
 800578a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f013 0f04 	tst.w	r3, #4
 8005794:	d11c      	bne.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff fe08 	bl	80053ac <I2C_IsAcknowledgeFailed>
 800579c:	b9d0      	cbnz	r0, 80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800579e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80057a2:	d0f3      	beq.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7ff f9e4 	bl	8004b70 <HAL_GetTick>
 80057a8:	1b80      	subs	r0, r0, r6
 80057aa:	42a8      	cmp	r0, r5
 80057ac:	d801      	bhi.n	80057b2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d1ec      	bne.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057b6:	2220      	movs	r2, #32
 80057b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057c2:	f042 0220 	orr.w	r2, r2, #32
 80057c6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80057c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80057cc:	2001      	movs	r0, #1
 80057ce:	e000      	b.n	80057d2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80057d0:	2000      	movs	r0, #0
}
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
 80057d6:	e7fc      	b.n	80057d2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080057d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4605      	mov	r5, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057e8:	d129      	bne.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	f012 0f10 	tst.w	r2, #16
 80057f0:	d115      	bne.n	800581e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7ff f9bd 	bl	8004b70 <HAL_GetTick>
 80057f6:	1b80      	subs	r0, r0, r6
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d801      	bhi.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80057fc:	2c00      	cmp	r4, #0
 80057fe:	d1ef      	bne.n	80057e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	2300      	movs	r3, #0
 8005802:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005804:	2220      	movs	r2, #32
 8005806:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800580e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005810:	f042 0220 	orr.w	r2, r2, #32
 8005814:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005816:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800581a:	2001      	movs	r0, #1
}
 800581c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800581e:	f06f 0210 	mvn.w	r2, #16
 8005822:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005824:	2300      	movs	r3, #0
 8005826:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	2220      	movs	r2, #32
 800582a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005832:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005834:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005836:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800583a:	2001      	movs	r0, #1
 800583c:	e7ee      	b.n	800581c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800583e:	2000      	movs	r0, #0
 8005840:	e7ec      	b.n	800581c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

08005842 <HAL_I2C_MspInit>:
}
 8005842:	4770      	bx	lr

08005844 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005844:	2800      	cmp	r0, #0
 8005846:	f000 80c8 	beq.w	80059da <HAL_I2C_Init+0x196>
{
 800584a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800584e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005852:	2b00      	cmp	r3, #0
 8005854:	d075      	beq.n	8005942 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005856:	2324      	movs	r3, #36	; 0x24
 8005858:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	6813      	ldr	r3, [r2, #0]
 8005874:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005878:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800587a:	f000 fbaf 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800587e:	6862      	ldr	r2, [r4, #4]
 8005880:	4b58      	ldr	r3, [pc, #352]	; (80059e4 <HAL_I2C_Init+0x1a0>)
 8005882:	429a      	cmp	r2, r3
 8005884:	d862      	bhi.n	800594c <HAL_I2C_Init+0x108>
 8005886:	4b58      	ldr	r3, [pc, #352]	; (80059e8 <HAL_I2C_Init+0x1a4>)
 8005888:	4298      	cmp	r0, r3
 800588a:	bf8c      	ite	hi
 800588c:	2300      	movhi	r3, #0
 800588e:	2301      	movls	r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 80a4 	bne.w	80059de <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8005896:	4b55      	ldr	r3, [pc, #340]	; (80059ec <HAL_I2C_Init+0x1a8>)
 8005898:	fba3 2300 	umull	r2, r3, r3, r0
 800589c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800589e:	6821      	ldr	r1, [r4, #0]
 80058a0:	684a      	ldr	r2, [r1, #4]
 80058a2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80058a6:	431a      	orrs	r2, r3
 80058a8:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	6a2a      	ldr	r2, [r5, #32]
 80058ae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80058b2:	6866      	ldr	r6, [r4, #4]
 80058b4:	494b      	ldr	r1, [pc, #300]	; (80059e4 <HAL_I2C_Init+0x1a0>)
 80058b6:	428e      	cmp	r6, r1
 80058b8:	d84e      	bhi.n	8005958 <HAL_I2C_Init+0x114>
 80058ba:	3301      	adds	r3, #1
 80058bc:	4313      	orrs	r3, r2
 80058be:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058c0:	6825      	ldr	r5, [r4, #0]
 80058c2:	69e9      	ldr	r1, [r5, #28]
 80058c4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80058c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	4a45      	ldr	r2, [pc, #276]	; (80059e4 <HAL_I2C_Init+0x1a0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d84b      	bhi.n	800596c <HAL_I2C_Init+0x128>
 80058d4:	3801      	subs	r0, #1
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058dc:	3301      	adds	r3, #1
 80058de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	bf38      	it	cc
 80058e6:	2304      	movcc	r3, #4
 80058e8:	430b      	orrs	r3, r1
 80058ea:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058ec:	6821      	ldr	r1, [r4, #0]
 80058ee:	680b      	ldr	r3, [r1, #0]
 80058f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058f4:	69e2      	ldr	r2, [r4, #28]
 80058f6:	6a20      	ldr	r0, [r4, #32]
 80058f8:	4302      	orrs	r2, r0
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	688b      	ldr	r3, [r1, #8]
 8005902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800590a:	6922      	ldr	r2, [r4, #16]
 800590c:	68e0      	ldr	r0, [r4, #12]
 800590e:	4302      	orrs	r2, r0
 8005910:	4313      	orrs	r3, r2
 8005912:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005914:	6821      	ldr	r1, [r4, #0]
 8005916:	68cb      	ldr	r3, [r1, #12]
 8005918:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800591c:	6962      	ldr	r2, [r4, #20]
 800591e:	69a0      	ldr	r0, [r4, #24]
 8005920:	4302      	orrs	r2, r0
 8005922:	4313      	orrs	r3, r2
 8005924:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005930:	2000      	movs	r0, #0
 8005932:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005934:	2320      	movs	r3, #32
 8005936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8005940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005942:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005946:	f7ff ff7c 	bl	8005842 <HAL_I2C_MspInit>
 800594a:	e784      	b.n	8005856 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800594c:	4b28      	ldr	r3, [pc, #160]	; (80059f0 <HAL_I2C_Init+0x1ac>)
 800594e:	4298      	cmp	r0, r3
 8005950:	bf8c      	ite	hi
 8005952:	2300      	movhi	r3, #0
 8005954:	2301      	movls	r3, #1
 8005956:	e79b      	b.n	8005890 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005958:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4924      	ldr	r1, [pc, #144]	; (80059f4 <HAL_I2C_Init+0x1b0>)
 8005962:	fba1 1303 	umull	r1, r3, r1, r3
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	3301      	adds	r3, #1
 800596a:	e7a7      	b.n	80058bc <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800596c:	68a2      	ldr	r2, [r4, #8]
 800596e:	b9ba      	cbnz	r2, 80059a0 <HAL_I2C_Init+0x15c>
 8005970:	1e46      	subs	r6, r0, #1
 8005972:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8005976:	fbb6 f6f7 	udiv	r6, r6, r7
 800597a:	3601      	adds	r6, #1
 800597c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005980:	fab6 f686 	clz	r6, r6
 8005984:	0976      	lsrs	r6, r6, #5
 8005986:	bb36      	cbnz	r6, 80059d6 <HAL_I2C_Init+0x192>
 8005988:	b9c2      	cbnz	r2, 80059bc <HAL_I2C_Init+0x178>
 800598a:	3801      	subs	r0, #1
 800598c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005990:	fbb0 f3f3 	udiv	r3, r0, r3
 8005994:	3301      	adds	r3, #1
 8005996:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800599a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800599e:	e7a3      	b.n	80058e8 <HAL_I2C_Init+0xa4>
 80059a0:	1e46      	subs	r6, r0, #1
 80059a2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80059a6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80059aa:	fbb6 f6f7 	udiv	r6, r6, r7
 80059ae:	3601      	adds	r6, #1
 80059b0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80059b4:	fab6 f686 	clz	r6, r6
 80059b8:	0976      	lsrs	r6, r6, #5
 80059ba:	e7e4      	b.n	8005986 <HAL_I2C_Init+0x142>
 80059bc:	3801      	subs	r0, #1
 80059be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059c6:	fbb0 f2f3 	udiv	r2, r0, r3
 80059ca:	3201      	adds	r2, #1
 80059cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80059d0:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80059d4:	e788      	b.n	80058e8 <HAL_I2C_Init+0xa4>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e786      	b.n	80058e8 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80059da:	2001      	movs	r0, #1
}
 80059dc:	4770      	bx	lr
    return HAL_ERROR;
 80059de:	2001      	movs	r0, #1
 80059e0:	e7ae      	b.n	8005940 <HAL_I2C_Init+0xfc>
 80059e2:	bf00      	nop
 80059e4:	000186a0 	.word	0x000186a0
 80059e8:	001e847f 	.word	0x001e847f
 80059ec:	431bde83 	.word	0x431bde83
 80059f0:	003d08ff 	.word	0x003d08ff
 80059f4:	10624dd3 	.word	0x10624dd3

080059f8 <HAL_I2C_MspDeInit>:
}
 80059f8:	4770      	bx	lr

080059fa <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80059fa:	b1a8      	cbz	r0, 8005a28 <HAL_I2C_DeInit+0x2e>
{
 80059fc:	b510      	push	{r4, lr}
 80059fe:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a00:	2324      	movs	r3, #36	; 0x24
 8005a02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005a06:	6802      	ldr	r2, [r0, #0]
 8005a08:	6813      	ldr	r3, [r2, #0]
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005a10:	f7ff fff2 	bl	80059f8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a14:	2000      	movs	r0, #0
 8005a16:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005a18:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a1e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8005a22:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005a26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a28:	2001      	movs	r0, #1
}
 8005a2a:	4770      	bx	lr

08005a2c <HAL_I2C_Mem_Write>:
{
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	4604      	mov	r4, r0
 8005a34:	460e      	mov	r6, r1
 8005a36:	4617      	mov	r7, r2
 8005a38:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8005a3a:	f7ff f899 	bl	8004b70 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a3e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d004      	beq.n	8005a52 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	b002      	add	sp, #8
 8005a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a52:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a54:	9000      	str	r0, [sp, #0]
 8005a56:	2319      	movs	r3, #25
 8005a58:	2201      	movs	r2, #1
 8005a5a:	494c      	ldr	r1, [pc, #304]	; (8005b8c <HAL_I2C_Mem_Write+0x160>)
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fcbe 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 808b 	bne.w	8005b7e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8005a68:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	f000 8088 	beq.w	8005b82 <HAL_I2C_Mem_Write+0x156>
 8005a72:	2301      	movs	r3, #1
 8005a74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f012 0f01 	tst.w	r2, #1
 8005a80:	d103      	bne.n	8005a8a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	6813      	ldr	r3, [r2, #0]
 8005a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a92:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a94:	2321      	movs	r3, #33	; 0x21
 8005a96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a9a:	2340      	movs	r3, #64	; 0x40
 8005a9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005aa4:	9b08      	ldr	r3, [sp, #32]
 8005aa6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aa8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005aac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005aae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ab0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ab2:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <HAL_I2C_Mem_Write+0x164>)
 8005ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ab6:	9501      	str	r5, [sp, #4]
 8005ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4643      	mov	r3, r8
 8005abe:	463a      	mov	r2, r7
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff fd40 	bl	8005548 <I2C_RequestMemoryWrite>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d15c      	bne.n	8005b86 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8005acc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d034      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7ff fd0b 	bl	80054f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8005adc:	bb10      	cbnz	r0, 8005b24 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005ae6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ae8:	1c4b      	adds	r3, r1, #1
 8005aea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005aec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005af4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005af6:	3a01      	subs	r2, #1
 8005af8:	b292      	uxth	r2, r2
 8005afa:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	6950      	ldr	r0, [r2, #20]
 8005b00:	f010 0f04 	tst.w	r0, #4
 8005b04:	d0e2      	beq.n	8005acc <HAL_I2C_Mem_Write+0xa0>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0e0      	beq.n	8005acc <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0a:	784b      	ldrb	r3, [r1, #1]
 8005b0c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8005b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005b14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005b1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005b22:	e7d3      	b.n	8005acc <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e78d      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	6813      	ldr	r3, [r2, #0]
 8005b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b36:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e786      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7ff fe1f 	bl	8005784 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	b158      	cbz	r0, 8005b62 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d001      	beq.n	8005b54 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e77a      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b5c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e773      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	680a      	ldr	r2, [r1, #0]
 8005b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b72:	2200      	movs	r2, #0
 8005b74:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005b78:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8005b7c:	e765      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e763      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8005b82:	2302      	movs	r3, #2
 8005b84:	e761      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e75f      	b.n	8005a4a <HAL_I2C_Mem_Write+0x1e>
 8005b8a:	bf00      	nop
 8005b8c:	00100002 	.word	0x00100002
 8005b90:	ffff0000 	.word	0xffff0000

08005b94 <HAL_I2C_Mem_Read>:
{
 8005b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	4617      	mov	r7, r2
 8005ba0:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8005ba2:	f7fe ffe5 	bl	8004b70 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d004      	beq.n	8005bba <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8005bb0:	2602      	movs	r6, #2
}
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	b006      	add	sp, #24
 8005bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bba:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bbc:	9000      	str	r0, [sp, #0]
 8005bbe:	2319      	movs	r3, #25
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	499e      	ldr	r1, [pc, #632]	; (8005e3c <HAL_I2C_Mem_Read+0x2a8>)
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fc0a 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f040 8134 	bne.w	8005e38 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8005bd0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f000 8137 	beq.w	8005e48 <HAL_I2C_Mem_Read+0x2b4>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	f012 0f01 	tst.w	r2, #1
 8005be8:	d103      	bne.n	8005bf2 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	6813      	ldr	r3, [r2, #0]
 8005bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bfa:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bfc:	2322      	movs	r3, #34	; 0x22
 8005bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c02:	2340      	movs	r3, #64	; 0x40
 8005c04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c0e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c10:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8005c14:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c18:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c1a:	4b89      	ldr	r3, [pc, #548]	; (8005e40 <HAL_I2C_Mem_Read+0x2ac>)
 8005c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c1e:	9501      	str	r5, [sp, #4]
 8005c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4643      	mov	r3, r8
 8005c26:	463a      	mov	r2, r7
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff fcfa 	bl	8005624 <I2C_RequestMemoryRead>
 8005c30:	4606      	mov	r6, r0
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f040 810a 	bne.w	8005e4c <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8005c38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005c3a:	b95b      	cbnz	r3, 8005c54 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3c:	9302      	str	r3, [sp, #8]
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	9202      	str	r2, [sp, #8]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	9202      	str	r2, [sp, #8]
 8005c48:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e072      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d00a      	beq.n	8005c6e <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d01a      	beq.n	8005c92 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9305      	str	r3, [sp, #20]
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	9205      	str	r2, [sp, #20]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	9305      	str	r3, [sp, #20]
 8005c6a:	9b05      	ldr	r3, [sp, #20]
 8005c6c:	e065      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c76:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	9203      	str	r2, [sp, #12]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	9203      	str	r2, [sp, #12]
 8005c86:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e053      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c9a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	6813      	ldr	r3, [r2, #0]
 8005ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ca4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	9204      	str	r2, [sp, #16]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	e040      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb8:	462a      	mov	r2, r5
 8005cba:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff fd8b 	bl	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 80c4 	bne.w	8005e50 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cce:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005cd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005ce4:	e029      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ce6:	9500      	str	r5, [sp, #0]
 8005ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cea:	2200      	movs	r2, #0
 8005cec:	4955      	ldr	r1, [pc, #340]	; (8005e44 <HAL_I2C_Mem_Read+0x2b0>)
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7ff fb75 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f040 80ad 	bne.w	8005e54 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d02:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d0a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005d0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d0e:	1c53      	adds	r3, r2, #1
 8005d10:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d28:	3301      	adds	r3, #1
 8005d2a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d072      	beq.n	8005e26 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d849      	bhi.n	8005dd8 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d0b7      	beq.n	8005cb8 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d0cc      	beq.n	8005ce6 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d4c:	9500      	str	r5, [sp, #0]
 8005d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d50:	2200      	movs	r2, #0
 8005d52:	493c      	ldr	r1, [pc, #240]	; (8005e44 <HAL_I2C_Mem_Read+0x2b0>)
 8005d54:	4620      	mov	r0, r4
 8005d56:	f7ff fb42 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d17c      	bne.n	8005e58 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	6813      	ldr	r3, [r2, #0]
 8005d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d66:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d72:	3301      	adds	r3, #1
 8005d74:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d84:	9500      	str	r5, [sp, #0]
 8005d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d88:	2200      	movs	r2, #0
 8005d8a:	492e      	ldr	r1, [pc, #184]	; (8005e44 <HAL_I2C_Mem_Read+0x2b0>)
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f7ff fb26 	bl	80053de <I2C_WaitOnFlagUntilTimeout>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d162      	bne.n	8005e5c <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d9e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005daa:	1c53      	adds	r3, r2, #1
 8005dac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005dae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005db0:	3b01      	subs	r3, #1
 8005db2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005db4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005dc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005dce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005dd6:	e7b0      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd8:	462a      	mov	r2, r5
 8005dda:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f7ff fcfb 	bl	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d13c      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005dee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005df0:	1c53      	adds	r3, r2, #1
 8005df2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005df4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005dfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	6959      	ldr	r1, [r3, #20]
 8005e06:	f011 0f04 	tst.w	r1, #4
 8005e0a:	d096      	beq.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e12:	3301      	adds	r3, #1
 8005e14:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005e16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005e1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005e24:	e789      	b.n	8005d3a <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e26:	2320      	movs	r3, #32
 8005e28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005e32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005e36:	e6bc      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8005e38:	2602      	movs	r6, #2
 8005e3a:	e6ba      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
 8005e3c:	00100002 	.word	0x00100002
 8005e40:	ffff0000 	.word	0xffff0000
 8005e44:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8005e48:	2602      	movs	r6, #2
 8005e4a:	e6b2      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8005e4c:	2601      	movs	r6, #1
 8005e4e:	e6b0      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005e50:	2601      	movs	r6, #1
 8005e52:	e6ae      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005e54:	2601      	movs	r6, #1
 8005e56:	e6ac      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005e58:	2601      	movs	r6, #1
 8005e5a:	e6aa      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005e5c:	2601      	movs	r6, #1
 8005e5e:	e6a8      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 8005e60:	2601      	movs	r6, #1
 8005e62:	e6a6      	b.n	8005bb2 <HAL_I2C_Mem_Read+0x1e>

08005e64 <HAL_I2C_GetState>:
  return hi2c->State;
 8005e64:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005e68:	4770      	bx	lr

08005e6a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005e6a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f000 809e 	beq.w	8005fb2 <HAL_RCC_ClockConfig+0x142>
{
 8005e76:	b570      	push	{r4, r5, r6, lr}
 8005e78:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7a:	4b50      	ldr	r3, [pc, #320]	; (8005fbc <HAL_RCC_ClockConfig+0x14c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	428b      	cmp	r3, r1
 8005e84:	d209      	bcs.n	8005e9a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e86:	b2cb      	uxtb	r3, r1
 8005e88:	4a4c      	ldr	r2, [pc, #304]	; (8005fbc <HAL_RCC_ClockConfig+0x14c>)
 8005e8a:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8c:	6813      	ldr	r3, [r2, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	428b      	cmp	r3, r1
 8005e94:	d001      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8005e96:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	f013 0f02 	tst.w	r3, #2
 8005ea0:	d017      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea2:	f013 0f04 	tst.w	r3, #4
 8005ea6:	d004      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ea8:	4a45      	ldr	r2, [pc, #276]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005eaa:	6893      	ldr	r3, [r2, #8]
 8005eac:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eb0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f013 0f08 	tst.w	r3, #8
 8005eb8:	d004      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eba:	4a41      	ldr	r2, [pc, #260]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005ebc:	6893      	ldr	r3, [r2, #8]
 8005ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ec2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec4:	4a3e      	ldr	r2, [pc, #248]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005ec6:	6893      	ldr	r3, [r2, #8]
 8005ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ecc:	68a0      	ldr	r0, [r4, #8]
 8005ece:	4303      	orrs	r3, r0
 8005ed0:	6093      	str	r3, [r2, #8]
 8005ed2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f013 0f01 	tst.w	r3, #1
 8005eda:	d032      	beq.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d021      	beq.n	8005f26 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ee2:	1e9a      	subs	r2, r3, #2
 8005ee4:	2a01      	cmp	r2, #1
 8005ee6:	d925      	bls.n	8005f34 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee8:	4a35      	ldr	r2, [pc, #212]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	f012 0f02 	tst.w	r2, #2
 8005ef0:	d061      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef2:	4933      	ldr	r1, [pc, #204]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005ef4:	688a      	ldr	r2, [r1, #8]
 8005ef6:	f022 0203 	bic.w	r2, r2, #3
 8005efa:	4313      	orrs	r3, r2
 8005efc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005efe:	f7fe fe37 	bl	8004b70 <HAL_GetTick>
 8005f02:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f04:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	6862      	ldr	r2, [r4, #4]
 8005f0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005f12:	d016      	beq.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f14:	f7fe fe2c 	bl	8004b70 <HAL_GetTick>
 8005f18:	1b80      	subs	r0, r0, r6
 8005f1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	d9f0      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8005f22:	2003      	movs	r0, #3
 8005f24:	e7b8      	b.n	8005e98 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	4a26      	ldr	r2, [pc, #152]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005f2e:	d1e0      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005f30:	2001      	movs	r0, #1
 8005f32:	e7b1      	b.n	8005e98 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f34:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005f3c:	d1d9      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e7aa      	b.n	8005e98 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f42:	4b1e      	ldr	r3, [pc, #120]	; (8005fbc <HAL_RCC_ClockConfig+0x14c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	42ab      	cmp	r3, r5
 8005f4c:	d909      	bls.n	8005f62 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	b2ea      	uxtb	r2, r5
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <HAL_RCC_ClockConfig+0x14c>)
 8005f52:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	42ab      	cmp	r3, r5
 8005f5c:	d001      	beq.n	8005f62 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8005f5e:	2001      	movs	r0, #1
 8005f60:	e79a      	b.n	8005e98 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	f013 0f04 	tst.w	r3, #4
 8005f68:	d006      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6a:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005f6c:	6893      	ldr	r3, [r2, #8]
 8005f6e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005f72:	68e1      	ldr	r1, [r4, #12]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	f013 0f08 	tst.w	r3, #8
 8005f7e:	d007      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005f82:	6893      	ldr	r3, [r2, #8]
 8005f84:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005f88:	6921      	ldr	r1, [r4, #16]
 8005f8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005f8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f90:	f000 fa82 	bl	8006498 <HAL_RCC_GetSysClockFreq>
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <HAL_RCC_ClockConfig+0x150>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f9c:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <HAL_RCC_ClockConfig+0x154>)
 8005f9e:	5cd3      	ldrb	r3, [r2, r3]
 8005fa0:	40d8      	lsrs	r0, r3
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <HAL_RCC_ClockConfig+0x158>)
 8005fa4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_ClockConfig+0x15c>)
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	f7fe fd95 	bl	8004ad8 <HAL_InitTick>
  return HAL_OK;
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e772      	b.n	8005e98 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005fb2:	2001      	movs	r0, #1
}
 8005fb4:	4770      	bx	lr
        return HAL_ERROR;
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	e76e      	b.n	8005e98 <HAL_RCC_ClockConfig+0x28>
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	080162ac 	.word	0x080162ac
 8005fc8:	200011c0 	.word	0x200011c0
 8005fcc:	20001304 	.word	0x20001304

08005fd0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005fd0:	4b01      	ldr	r3, [pc, #4]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	200011c0 	.word	0x200011c0

08005fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fdc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fde:	f7ff fff7 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8005fe2:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005fea:	4a03      	ldr	r2, [pc, #12]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
}
 8005fee:	40d8      	lsrs	r0, r3
 8005ff0:	bd08      	pop	{r3, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	080162bc 	.word	0x080162bc

08005ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ffc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ffe:	f7ff ffe7 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800600a:	4a03      	ldr	r2, [pc, #12]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800600c:	5cd3      	ldrb	r3, [r2, r3]
}
 800600e:	40d8      	lsrs	r0, r3
 8006010:	bd08      	pop	{r3, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	080162bc 	.word	0x080162bc

0800601c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800601c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601e:	b083      	sub	sp, #12
 8006020:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006022:	6803      	ldr	r3, [r0, #0]
 8006024:	f013 0f01 	tst.w	r3, #1
 8006028:	d00c      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800602a:	4a96      	ldr	r2, [pc, #600]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800602c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006030:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006034:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006036:	430b      	orrs	r3, r1
 8006038:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800603c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800603e:	b33b      	cbz	r3, 8006090 <HAL_RCCEx_PeriphCLKConfig+0x74>
  uint32_t plli2sused = 0U;
 8006040:	2600      	movs	r6, #0
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006044:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f013 0f02 	tst.w	r3, #2
 800604c:	d00b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800604e:	4a8d      	ldr	r2, [pc, #564]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006050:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006054:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8006058:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800605a:	430b      	orrs	r3, r1
 800605c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006060:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006062:	b903      	cbnz	r3, 8006066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 8006064:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f013 0f04 	tst.w	r3, #4
 800606c:	d014      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800606e:	4a85      	ldr	r2, [pc, #532]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006070:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006078:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800607a:	430b      	orrs	r3, r1
 800607c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006080:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006086:	d005      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006088:	2b00      	cmp	r3, #0
 800608a:	d07b      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x168>
  uint32_t pllsaiused = 0U;
 800608c:	2500      	movs	r5, #0
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      plli2sused = 1U;
 8006090:	2601      	movs	r6, #1
 8006092:	e7d8      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 8006094:	2601      	movs	r6, #1
 8006096:	e7f7      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  uint32_t pllsaiused = 0U;
 8006098:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	f013 0f08 	tst.w	r3, #8
 80060a0:	d00e      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060a2:	4a78      	ldr	r2, [pc, #480]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80060a8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80060ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ae:	430b      	orrs	r3, r1
 80060b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ba:	d065      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060bc:	b903      	cbnz	r3, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      pllsaiused = 1U;
 80060be:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	f013 0f20 	tst.w	r3, #32
 80060c6:	d161      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	f013 0f10 	tst.w	r3, #16
 80060ce:	d003      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060d0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80060d4:	4b6c      	ldr	r3, [pc, #432]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060d6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060de:	d008      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80060e0:	4a68      	ldr	r2, [pc, #416]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80060e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80060ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80060ec:	430b      	orrs	r3, r1
 80060ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060fa:	4a62      	ldr	r2, [pc, #392]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006100:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006104:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006106:	430b      	orrs	r3, r1
 8006108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006112:	d00d      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006114:	4a5b      	ldr	r2, [pc, #364]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006116:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800611a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800611e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006120:	430b      	orrs	r3, r1
 8006122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006126:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800612c:	f000 8095 	beq.w	800625a <HAL_RCCEx_PeriphCLKConfig+0x23e>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006136:	d008      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006138:	4a52      	ldr	r2, [pc, #328]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800613e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006142:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006144:	430b      	orrs	r3, r1
 8006146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006150:	d00c      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006152:	4a4c      	ldr	r2, [pc, #304]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006154:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006158:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800615c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800615e:	430b      	orrs	r3, r1
 8006160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006164:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616a:	d078      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x242>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800616c:	2e00      	cmp	r6, #0
 800616e:	d176      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d072      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x242>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006178:	2d00      	cmp	r5, #0
 800617a:	f040 8122 	bne.w	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800617e:	2000      	movs	r0, #0
}
 8006180:	b003      	add	sp, #12
 8006182:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1U;
 8006184:	2501      	movs	r5, #1
 8006186:	e788      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      plli2sused = 1U;
 8006188:	2601      	movs	r6, #1
 800618a:	e797      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_PWR_CLK_ENABLE();
 800618c:	2300      	movs	r3, #0
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	4b3c      	ldr	r3, [pc, #240]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006194:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80061a4:	4a39      	ldr	r2, [pc, #228]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80061ae:	f7fe fcdf 	bl	8004b70 <HAL_GetTick>
 80061b2:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061b4:	4b35      	ldr	r3, [pc, #212]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061bc:	d106      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061be:	f7fe fcd7 	bl	8004b70 <HAL_GetTick>
 80061c2:	1bc0      	subs	r0, r0, r7
 80061c4:	2802      	cmp	r0, #2
 80061c6:	d9f5      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
        return HAL_TIMEOUT;
 80061c8:	2003      	movs	r0, #3
 80061ca:	e7d9      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80061d4:	d012      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80061d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061d8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80061dc:	429a      	cmp	r2, r3
 80061de:	d00d      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e8:	4929      	ldr	r1, [pc, #164]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80061ea:	2001      	movs	r0, #1
 80061ec:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ee:	2000      	movs	r0, #0
 80061f0:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80061f2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	f013 0f01 	tst.w	r3, #1
 80061fa:	d112      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006202:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006206:	d01d      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800620a:	6893      	ldr	r3, [r2, #8]
 800620c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006210:	6093      	str	r3, [r2, #8]
 8006212:	491c      	ldr	r1, [pc, #112]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006214:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8006216:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006218:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800621c:	4313      	orrs	r3, r2
 800621e:	670b      	str	r3, [r1, #112]	; 0x70
 8006220:	e752      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8006222:	f7fe fca5 	bl	8004b70 <HAL_GetTick>
 8006226:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	f013 0f02 	tst.w	r3, #2
 8006230:	d1e4      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006232:	f7fe fc9d 	bl	8004b70 <HAL_GetTick>
 8006236:	1bc0      	subs	r0, r0, r7
 8006238:	f241 3388 	movw	r3, #5000	; 0x1388
 800623c:	4298      	cmp	r0, r3
 800623e:	d9f3      	bls.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x20c>
            return HAL_TIMEOUT;
 8006240:	2003      	movs	r0, #3
 8006242:	e79d      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006244:	490f      	ldr	r1, [pc, #60]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006246:	688a      	ldr	r2, [r1, #8]
 8006248:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800624c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]
 8006258:	e7db      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      pllsaiused = 1U;
 800625a:	2501      	movs	r5, #1
 800625c:	e768      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_PLLI2S_DISABLE();
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006264:	f7fe fc84 	bl	8004b70 <HAL_GetTick>
 8006268:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006272:	d011      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006274:	f7fe fc7c 	bl	8004b70 <HAL_GetTick>
 8006278:	1b80      	subs	r0, r0, r6
 800627a:	2802      	cmp	r0, #2
 800627c:	d9f5      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x24e>
        return HAL_TIMEOUT;
 800627e:	2003      	movs	r0, #3
 8006280:	e77e      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	424711e0 	.word	0x424711e0
 800628c:	40007000 	.word	0x40007000
 8006290:	42470e40 	.word	0x42470e40
 8006294:	42470068 	.word	0x42470068
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f013 0f01 	tst.w	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80062a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062a2:	b122      	cbz	r2, 80062ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062a4:	f013 0f02 	tst.w	r3, #2
 80062a8:	d015      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80062aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062ac:	b99b      	cbnz	r3, 80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80062ae:	4a77      	ldr	r2, [pc, #476]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80062b0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062b4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	68a6      	ldr	r6, [r4, #8]
 80062bc:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80062c0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80062c4:	4303      	orrs	r3, r0
 80062c6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80062ca:	430b      	orrs	r3, r1
 80062cc:	6961      	ldr	r1, [r4, #20]
 80062ce:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80062d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	f013 0f04 	tst.w	r3, #4
 80062dc:	d003      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80062de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80062e0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80062e4:	d006      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80062e6:	f013 0f08 	tst.w	r3, #8
 80062ea:	d020      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x312>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80062ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f2:	d11c      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x312>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80062f4:	4a65      	ldr	r2, [pc, #404]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80062f6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062fa:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	68a6      	ldr	r6, [r4, #8]
 8006302:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8006306:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800630a:	4303      	orrs	r3, r0
 800630c:	6920      	ldr	r0, [r4, #16]
 800630e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006312:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006316:	430b      	orrs	r3, r1
 8006318:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800631c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006320:	f023 031f 	bic.w	r3, r3, #31
 8006324:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006326:	3901      	subs	r1, #1
 8006328:	430b      	orrs	r3, r1
 800632a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006334:	d003      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800633c:	d028      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x374>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006344:	d011      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	68a2      	ldr	r2, [r4, #8]
 800634a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800634e:	68e2      	ldr	r2, [r4, #12]
 8006350:	0852      	lsrs	r2, r2, #1
 8006352:	3a01      	subs	r2, #1
 8006354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800635e:	6962      	ldr	r2, [r4, #20]
 8006360:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006364:	4a49      	ldr	r2, [pc, #292]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006366:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800636a:	4b49      	ldr	r3, [pc, #292]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006370:	f7fe fbfe 	bl	8004b70 <HAL_GetTick>
 8006374:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006376:	4b45      	ldr	r3, [pc, #276]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800637e:	f47f aefb 	bne.w	8006178 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006382:	f7fe fbf5 	bl	8004b70 <HAL_GetTick>
 8006386:	1b80      	subs	r0, r0, r6
 8006388:	2802      	cmp	r0, #2
 800638a:	d9f4      	bls.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        return HAL_TIMEOUT;
 800638c:	2003      	movs	r0, #3
 800638e:	e6f7      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006390:	483e      	ldr	r0, [pc, #248]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006392:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006396:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800639a:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800639c:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	68a1      	ldr	r1, [r4, #8]
 80063a4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80063a8:	68e1      	ldr	r1, [r4, #12]
 80063aa:	0849      	lsrs	r1, r1, #1
 80063ac:	3901      	subs	r1, #1
 80063ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80063b2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80063b6:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80063c0:	e7bd      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x322>
    __HAL_RCC_PLLSAI_DISABLE();
 80063c2:	4b34      	ldr	r3, [pc, #208]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80063c8:	f7fe fbd2 	bl	8004b70 <HAL_GetTick>
 80063cc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063ce:	4b2f      	ldr	r3, [pc, #188]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80063d6:	d006      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063d8:	f7fe fbca 	bl	8004b70 <HAL_GetTick>
 80063dc:	1b40      	subs	r0, r0, r5
 80063de:	2802      	cmp	r0, #2
 80063e0:	d9f5      	bls.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x3b2>
        return HAL_TIMEOUT;
 80063e2:	2003      	movs	r0, #3
 80063e4:	e6cc      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	f013 0f04 	tst.w	r3, #4
 80063ec:	d001      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80063ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063f0:	b122      	cbz	r2, 80063fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80063f2:	f013 0f08 	tst.w	r3, #8
 80063f6:	d01a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x412>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063fa:	b9c3      	cbnz	r3, 800642e <HAL_RCCEx_PeriphCLKConfig+0x412>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80063fc:	4a23      	ldr	r2, [pc, #140]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80063fe:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006402:	69a3      	ldr	r3, [r4, #24]
 8006404:	69e0      	ldr	r0, [r4, #28]
 8006406:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800640a:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800640e:	430b      	orrs	r3, r1
 8006410:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006412:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006416:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800641a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800641e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006422:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006424:	3901      	subs	r1, #1
 8006426:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800642a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006434:	d003      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006436:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800643c:	d011      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x446>
    __HAL_RCC_PLLSAI_ENABLE();
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006444:	f7fe fb94 	bl	8004b70 <HAL_GetTick>
 8006448:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800644a:	4b10      	ldr	r3, [pc, #64]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006452:	d118      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006454:	f7fe fb8c 	bl	8004b70 <HAL_GetTick>
 8006458:	1b00      	subs	r0, r0, r4
 800645a:	2802      	cmp	r0, #2
 800645c:	d9f5      	bls.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        return HAL_TIMEOUT;
 800645e:	2003      	movs	r0, #3
 8006460:	e68e      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006462:	480a      	ldr	r0, [pc, #40]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006464:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006468:	69a3      	ldr	r3, [r4, #24]
 800646a:	69e2      	ldr	r2, [r4, #28]
 800646c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006470:	6a22      	ldr	r2, [r4, #32]
 8006472:	0852      	lsrs	r2, r2, #1
 8006474:	3a01      	subs	r2, #1
 8006476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800647a:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8006484:	e7db      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x422>
  return HAL_OK;
 8006486:	2000      	movs	r0, #0
 8006488:	e67a      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800648a:	bf00      	nop
 800648c:	40023800 	.word	0x40023800
 8006490:	42470068 	.word	0x42470068
 8006494:	42470070 	.word	0x42470070

08006498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006498:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800649c:	4b44      	ldr	r3, [pc, #272]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 030c 	and.w	r3, r3, #12
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d006      	beq.n	80064b6 <HAL_RCC_GetSysClockFreq+0x1e>
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d042      	beq.n	8006532 <HAL_RCC_GetSysClockFreq+0x9a>
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d07c      	beq.n	80065aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064b0:	4840      	ldr	r0, [pc, #256]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x11c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80064b2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b6:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80064c4:	d012      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c6:	4b3a      	ldr	r3, [pc, #232]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80064ce:	2300      	movs	r3, #0
 80064d0:	4839      	ldr	r0, [pc, #228]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x120>)
 80064d2:	fba1 0100 	umull	r0, r1, r1, r0
 80064d6:	f7fa fbcf 	bl	8000c78 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064da:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80064e2:	3301      	adds	r3, #1
 80064e4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80064e6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80064ea:	e7e2      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ec:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80064f4:	461e      	mov	r6, r3
 80064f6:	2700      	movs	r7, #0
 80064f8:	015c      	lsls	r4, r3, #5
 80064fa:	2500      	movs	r5, #0
 80064fc:	1ae4      	subs	r4, r4, r3
 80064fe:	eb65 0507 	sbc.w	r5, r5, r7
 8006502:	01a9      	lsls	r1, r5, #6
 8006504:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006508:	01a0      	lsls	r0, r4, #6
 800650a:	1b00      	subs	r0, r0, r4
 800650c:	eb61 0105 	sbc.w	r1, r1, r5
 8006510:	00cb      	lsls	r3, r1, #3
 8006512:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006516:	00c4      	lsls	r4, r0, #3
 8006518:	19a0      	adds	r0, r4, r6
 800651a:	eb43 0107 	adc.w	r1, r3, r7
 800651e:	028b      	lsls	r3, r1, #10
 8006520:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006524:	0284      	lsls	r4, r0, #10
 8006526:	4620      	mov	r0, r4
 8006528:	4619      	mov	r1, r3
 800652a:	2300      	movs	r3, #0
 800652c:	f7fa fba4 	bl	8000c78 <__aeabi_uldivmod>
 8006530:	e7d3      	b.n	80064da <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006532:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006540:	d010      	beq.n	8006564 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800654a:	2300      	movs	r3, #0
 800654c:	481a      	ldr	r0, [pc, #104]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x120>)
 800654e:	fba1 0100 	umull	r0, r1, r1, r0
 8006552:	f7fa fb91 	bl	8000c78 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006556:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 800655e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8006562:	e7a6      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006564:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x118>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800656c:	461e      	mov	r6, r3
 800656e:	2700      	movs	r7, #0
 8006570:	015c      	lsls	r4, r3, #5
 8006572:	2500      	movs	r5, #0
 8006574:	1ae4      	subs	r4, r4, r3
 8006576:	eb65 0507 	sbc.w	r5, r5, r7
 800657a:	01a9      	lsls	r1, r5, #6
 800657c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006580:	01a0      	lsls	r0, r4, #6
 8006582:	1b00      	subs	r0, r0, r4
 8006584:	eb61 0105 	sbc.w	r1, r1, r5
 8006588:	00cb      	lsls	r3, r1, #3
 800658a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800658e:	00c4      	lsls	r4, r0, #3
 8006590:	19a0      	adds	r0, r4, r6
 8006592:	eb43 0107 	adc.w	r1, r3, r7
 8006596:	028b      	lsls	r3, r1, #10
 8006598:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800659c:	0284      	lsls	r4, r0, #10
 800659e:	4620      	mov	r0, r4
 80065a0:	4619      	mov	r1, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	f7fa fb68 	bl	8000c78 <__aeabi_uldivmod>
 80065a8:	e7d5      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0xbe>
      sysclockfreq = HSE_VALUE;
 80065aa:	4803      	ldr	r0, [pc, #12]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x120>)
  return sysclockfreq;
 80065ac:	e781      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	017d7840 	.word	0x017d7840

080065bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c2:	6803      	ldr	r3, [r0, #0]
 80065c4:	f013 0f01 	tst.w	r3, #1
 80065c8:	d041      	beq.n	800664e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065ca:	4ba6      	ldr	r3, [pc, #664]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d032      	beq.n	800663c <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065d6:	4ba3      	ldr	r3, [pc, #652]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d027      	beq.n	8006632 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e2:	4ba0      	ldr	r3, [pc, #640]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d059      	beq.n	80066a2 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d05b      	beq.n	80066ae <HAL_RCC_OscConfig+0xf2>
 80065f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065fa:	d05e      	beq.n	80066ba <HAL_RCC_OscConfig+0xfe>
 80065fc:	4b99      	ldr	r3, [pc, #612]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800660c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05c      	beq.n	80066ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fe faac 	bl	8004b70 <HAL_GetTick>
 8006618:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b92      	ldr	r3, [pc, #584]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006622:	d114      	bne.n	800664e <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006624:	f7fe faa4 	bl	8004b70 <HAL_GetTick>
 8006628:	1b40      	subs	r0, r0, r5
 800662a:	2864      	cmp	r0, #100	; 0x64
 800662c:	d9f5      	bls.n	800661a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800662e:	2003      	movs	r0, #3
 8006630:	e19d      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006632:	4b8c      	ldr	r3, [pc, #560]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800663a:	d0d2      	beq.n	80065e2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800663c:	4b89      	ldr	r3, [pc, #548]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006644:	d003      	beq.n	800664e <HAL_RCC_OscConfig+0x92>
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 818d 	beq.w	8006968 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	f013 0f02 	tst.w	r3, #2
 8006654:	d067      	beq.n	8006726 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006656:	4b83      	ldr	r3, [pc, #524]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f013 0f0c 	tst.w	r3, #12
 800665e:	d04a      	beq.n	80066f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006660:	4b80      	ldr	r3, [pc, #512]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006668:	2b08      	cmp	r3, #8
 800666a:	d03f      	beq.n	80066ec <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666c:	4b7d      	ldr	r3, [pc, #500]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d048      	beq.n	800670a <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006678:	68e3      	ldr	r3, [r4, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d074      	beq.n	8006768 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800667e:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fe fa74 	bl	8004b70 <HAL_GetTick>
 8006688:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668a:	4b76      	ldr	r3, [pc, #472]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f013 0f02 	tst.w	r3, #2
 8006692:	d160      	bne.n	8006756 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006694:	f7fe fa6c 	bl	8004b70 <HAL_GetTick>
 8006698:	1b40      	subs	r0, r0, r5
 800669a:	2802      	cmp	r0, #2
 800669c:	d9f5      	bls.n	800668a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800669e:	2003      	movs	r0, #3
 80066a0:	e165      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4b70      	ldr	r3, [pc, #448]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80066aa:	d0a0      	beq.n	80065ee <HAL_RCC_OscConfig+0x32>
 80066ac:	e7c6      	b.n	800663c <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ae:	4a6d      	ldr	r2, [pc, #436]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80066b0:	6813      	ldr	r3, [r2, #0]
 80066b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e7a9      	b.n	800660e <HAL_RCC_OscConfig+0x52>
 80066ba:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e79f      	b.n	800660e <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 80066ce:	f7fe fa4f 	bl	8004b70 <HAL_GetTick>
 80066d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d4:	4b63      	ldr	r3, [pc, #396]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80066dc:	d0b7      	beq.n	800664e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066de:	f7fe fa47 	bl	8004b70 <HAL_GetTick>
 80066e2:	1b40      	subs	r0, r0, r5
 80066e4:	2864      	cmp	r0, #100	; 0x64
 80066e6:	d9f5      	bls.n	80066d4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80066e8:	2003      	movs	r0, #3
 80066ea:	e140      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80066ec:	4b5d      	ldr	r3, [pc, #372]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80066f4:	d1ba      	bne.n	800666c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066f6:	4b5b      	ldr	r3, [pc, #364]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f013 0f02 	tst.w	r3, #2
 80066fe:	d00a      	beq.n	8006716 <HAL_RCC_OscConfig+0x15a>
 8006700:	68e3      	ldr	r3, [r4, #12]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d007      	beq.n	8006716 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8006706:	2001      	movs	r0, #1
 8006708:	e131      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800670a:	4b56      	ldr	r3, [pc, #344]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006712:	d1b1      	bne.n	8006678 <HAL_RCC_OscConfig+0xbc>
 8006714:	e7ef      	b.n	80066f6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006716:	4a53      	ldr	r2, [pc, #332]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006718:	6813      	ldr	r3, [r2, #0]
 800671a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800671e:	6921      	ldr	r1, [r4, #16]
 8006720:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006724:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	f013 0f08 	tst.w	r3, #8
 800672c:	d040      	beq.n	80067b0 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800672e:	6963      	ldr	r3, [r4, #20]
 8006730:	b363      	cbz	r3, 800678c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006732:	4b4e      	ldr	r3, [pc, #312]	; (800686c <HAL_RCC_OscConfig+0x2b0>)
 8006734:	2201      	movs	r2, #1
 8006736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fe fa1a 	bl	8004b70 <HAL_GetTick>
 800673c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800673e:	4b49      	ldr	r3, [pc, #292]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006742:	f013 0f02 	tst.w	r3, #2
 8006746:	d133      	bne.n	80067b0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006748:	f7fe fa12 	bl	8004b70 <HAL_GetTick>
 800674c:	1b40      	subs	r0, r0, r5
 800674e:	2802      	cmp	r0, #2
 8006750:	d9f5      	bls.n	800673e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8006752:	2003      	movs	r0, #3
 8006754:	e10b      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006756:	4a43      	ldr	r2, [pc, #268]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006758:	6813      	ldr	r3, [r2, #0]
 800675a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800675e:	6921      	ldr	r1, [r4, #16]
 8006760:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e7de      	b.n	8006726 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8006768:	4b3f      	ldr	r3, [pc, #252]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800676e:	f7fe f9ff 	bl	8004b70 <HAL_GetTick>
 8006772:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006774:	4b3b      	ldr	r3, [pc, #236]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f013 0f02 	tst.w	r3, #2
 800677c:	d0d3      	beq.n	8006726 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800677e:	f7fe f9f7 	bl	8004b70 <HAL_GetTick>
 8006782:	1b40      	subs	r0, r0, r5
 8006784:	2802      	cmp	r0, #2
 8006786:	d9f5      	bls.n	8006774 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8006788:	2003      	movs	r0, #3
 800678a:	e0f0      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800678c:	4b37      	ldr	r3, [pc, #220]	; (800686c <HAL_RCC_OscConfig+0x2b0>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006792:	f7fe f9ed 	bl	8004b70 <HAL_GetTick>
 8006796:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006798:	4b32      	ldr	r3, [pc, #200]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 800679a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679c:	f013 0f02 	tst.w	r3, #2
 80067a0:	d006      	beq.n	80067b0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a2:	f7fe f9e5 	bl	8004b70 <HAL_GetTick>
 80067a6:	1b40      	subs	r0, r0, r5
 80067a8:	2802      	cmp	r0, #2
 80067aa:	d9f5      	bls.n	8006798 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80067ac:	2003      	movs	r0, #3
 80067ae:	e0de      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	f013 0f04 	tst.w	r3, #4
 80067b6:	d079      	beq.n	80068ac <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b8:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80067c0:	d133      	bne.n	800682a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	4b27      	ldr	r3, [pc, #156]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80067c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80067da:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <HAL_RCC_OscConfig+0x2b4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067e4:	d023      	beq.n	800682e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d034      	beq.n	8006856 <HAL_RCC_OscConfig+0x29a>
 80067ec:	2b05      	cmp	r3, #5
 80067ee:	d041      	beq.n	8006874 <HAL_RCC_OscConfig+0x2b8>
 80067f0:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 80067f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	671a      	str	r2, [r3, #112]	; 0x70
 80067fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067fc:	f022 0204 	bic.w	r2, r2, #4
 8006800:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006802:	68a3      	ldr	r3, [r4, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d03f      	beq.n	8006888 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006808:	f7fe f9b2 	bl	8004b70 <HAL_GetTick>
 800680c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800680e:	4b15      	ldr	r3, [pc, #84]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	f013 0f02 	tst.w	r3, #2
 8006816:	d148      	bne.n	80068aa <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006818:	f7fe f9aa 	bl	8004b70 <HAL_GetTick>
 800681c:	1b80      	subs	r0, r0, r6
 800681e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006822:	4298      	cmp	r0, r3
 8006824:	d9f3      	bls.n	800680e <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8006826:	2003      	movs	r0, #3
 8006828:	e0a1      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800682a:	2500      	movs	r5, #0
 800682c:	e7d6      	b.n	80067dc <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800682e:	4a10      	ldr	r2, [pc, #64]	; (8006870 <HAL_RCC_OscConfig+0x2b4>)
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006836:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006838:	f7fe f99a 	bl	8004b70 <HAL_GetTick>
 800683c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <HAL_RCC_OscConfig+0x2b4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006846:	d1ce      	bne.n	80067e6 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006848:	f7fe f992 	bl	8004b70 <HAL_GetTick>
 800684c:	1b80      	subs	r0, r0, r6
 800684e:	2802      	cmp	r0, #2
 8006850:	d9f5      	bls.n	800683e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8006852:	2003      	movs	r0, #3
 8006854:	e08b      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006856:	4a03      	ldr	r2, [pc, #12]	; (8006864 <HAL_RCC_OscConfig+0x2a8>)
 8006858:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	6713      	str	r3, [r2, #112]	; 0x70
 8006860:	e7cf      	b.n	8006802 <HAL_RCC_OscConfig+0x246>
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800
 8006868:	42470000 	.word	0x42470000
 800686c:	42470e80 	.word	0x42470e80
 8006870:	40007000 	.word	0x40007000
 8006874:	4b40      	ldr	r3, [pc, #256]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 8006876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006878:	f042 0204 	orr.w	r2, r2, #4
 800687c:	671a      	str	r2, [r3, #112]	; 0x70
 800687e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006880:	f042 0201 	orr.w	r2, r2, #1
 8006884:	671a      	str	r2, [r3, #112]	; 0x70
 8006886:	e7bc      	b.n	8006802 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006888:	f7fe f972 	bl	8004b70 <HAL_GetTick>
 800688c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800688e:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	f013 0f02 	tst.w	r3, #2
 8006896:	d008      	beq.n	80068aa <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006898:	f7fe f96a 	bl	8004b70 <HAL_GetTick>
 800689c:	1b80      	subs	r0, r0, r6
 800689e:	f241 3388 	movw	r3, #5000	; 0x1388
 80068a2:	4298      	cmp	r0, r3
 80068a4:	d9f3      	bls.n	800688e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80068a6:	2003      	movs	r0, #3
 80068a8:	e061      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068aa:	b9e5      	cbnz	r5, 80068e6 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ac:	69a3      	ldr	r3, [r4, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d05c      	beq.n	800696c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068b2:	4a31      	ldr	r2, [pc, #196]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 80068b4:	6892      	ldr	r2, [r2, #8]
 80068b6:	f002 020c 	and.w	r2, r2, #12
 80068ba:	2a08      	cmp	r2, #8
 80068bc:	d059      	beq.n	8006972 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d017      	beq.n	80068f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c2:	4b2e      	ldr	r3, [pc, #184]	; (800697c <HAL_RCC_OscConfig+0x3c0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fe f952 	bl	8004b70 <HAL_GetTick>
 80068cc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ce:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80068d6:	d045      	beq.n	8006964 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d8:	f7fe f94a 	bl	8004b70 <HAL_GetTick>
 80068dc:	1b00      	subs	r0, r0, r4
 80068de:	2802      	cmp	r0, #2
 80068e0:	d9f5      	bls.n	80068ce <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 80068e2:	2003      	movs	r0, #3
 80068e4:	e043      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e6:	4a24      	ldr	r2, [pc, #144]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 80068e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80068ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6413      	str	r3, [r2, #64]	; 0x40
 80068f0:	e7dc      	b.n	80068ac <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80068f2:	4b22      	ldr	r3, [pc, #136]	; (800697c <HAL_RCC_OscConfig+0x3c0>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80068f8:	f7fe f93a 	bl	8004b70 <HAL_GetTick>
 80068fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fe:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006906:	d006      	beq.n	8006916 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006908:	f7fe f932 	bl	8004b70 <HAL_GetTick>
 800690c:	1b40      	subs	r0, r0, r5
 800690e:	2802      	cmp	r0, #2
 8006910:	d9f5      	bls.n	80068fe <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8006912:	2003      	movs	r0, #3
 8006914:	e02b      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006916:	69e3      	ldr	r3, [r4, #28]
 8006918:	6a22      	ldr	r2, [r4, #32]
 800691a:	4313      	orrs	r3, r2
 800691c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800691e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006922:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006924:	0852      	lsrs	r2, r2, #1
 8006926:	3a01      	subs	r2, #1
 8006928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800692c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800692e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006932:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006934:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006938:	4a0f      	ldr	r2, [pc, #60]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 800693a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800693c:	4b0f      	ldr	r3, [pc, #60]	; (800697c <HAL_RCC_OscConfig+0x3c0>)
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006942:	f7fe f915 	bl	8004b70 <HAL_GetTick>
 8006946:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_RCC_OscConfig+0x3bc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006950:	d106      	bne.n	8006960 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006952:	f7fe f90d 	bl	8004b70 <HAL_GetTick>
 8006956:	1b00      	subs	r0, r0, r4
 8006958:	2802      	cmp	r0, #2
 800695a:	d9f5      	bls.n	8006948 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 800695c:	2003      	movs	r0, #3
 800695e:	e006      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8006960:	2000      	movs	r0, #0
 8006962:	e004      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
 8006964:	2000      	movs	r0, #0
 8006966:	e002      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8006968:	2001      	movs	r0, #1
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 800696c:	2000      	movs	r0, #0
}
 800696e:	b002      	add	sp, #8
 8006970:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006972:	2001      	movs	r0, #1
 8006974:	e7fb      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
 8006976:	bf00      	nop
 8006978:	40023800 	.word	0x40023800
 800697c:	42470060 	.word	0x42470060

08006980 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006984:	6802      	ldr	r2, [r0, #0]
 8006986:	68d3      	ldr	r3, [r2, #12]
 8006988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800698c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800698e:	f7fe f8ef 	bl	8004b70 <HAL_GetTick>
 8006992:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f013 0f20 	tst.w	r3, #32
 800699c:	d107      	bne.n	80069ae <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800699e:	f7fe f8e7 	bl	8004b70 <HAL_GetTick>
 80069a2:	1b40      	subs	r0, r0, r5
 80069a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80069a8:	d9f4      	bls.n	8006994 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80069aa:	2003      	movs	r0, #3
 80069ac:	e000      	b.n	80069b0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80069ae:	2000      	movs	r0, #0
}
 80069b0:	bd38      	pop	{r3, r4, r5, pc}

080069b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80069b2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069b4:	6803      	ldr	r3, [r0, #0]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80069bc:	d001      	beq.n	80069c2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80069be:	2000      	movs	r0, #0
}
 80069c0:	bd38      	pop	{r3, r4, r5, pc}
 80069c2:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80069ca:	f7fe f8d1 	bl	8004b70 <HAL_GetTick>
 80069ce:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069d8:	d107      	bne.n	80069ea <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80069da:	f7fe f8c9 	bl	8004b70 <HAL_GetTick>
 80069de:	1b40      	subs	r0, r0, r5
 80069e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80069e4:	d9f4      	bls.n	80069d0 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80069e6:	2003      	movs	r0, #3
 80069e8:	e7ea      	b.n	80069c0 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80069ea:	2000      	movs	r0, #0
 80069ec:	e7e8      	b.n	80069c0 <RTC_EnterInitMode+0xe>

080069ee <HAL_RTC_Init>:
{
 80069ee:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d05c      	beq.n	8006aae <HAL_RTC_Init+0xc0>
 80069f4:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069f6:	7f43      	ldrb	r3, [r0, #29]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d040      	beq.n	8006a7e <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069fc:	2302      	movs	r3, #2
 80069fe:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	22ca      	movs	r2, #202	; 0xca
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	2253      	movs	r2, #83	; 0x53
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff ffd0 	bl	80069b2 <RTC_EnterInitMode>
 8006a12:	4605      	mov	r5, r0
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d136      	bne.n	8006a86 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	6893      	ldr	r3, [r2, #8]
 8006a1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	688a      	ldr	r2, [r1, #8]
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	6920      	ldr	r0, [r4, #16]
 8006a2e:	4303      	orrs	r3, r0
 8006a30:	6960      	ldr	r0, [r4, #20]
 8006a32:	4303      	orrs	r3, r0
 8006a34:	4313      	orrs	r3, r2
 8006a36:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	68e2      	ldr	r2, [r4, #12]
 8006a3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	6913      	ldr	r3, [r2, #16]
 8006a42:	68a1      	ldr	r1, [r4, #8]
 8006a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006a48:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	68d3      	ldr	r3, [r2, #12]
 8006a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a52:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f013 0f20 	tst.w	r3, #32
 8006a5c:	d01b      	beq.n	8006a96 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a66:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006a6c:	69a1      	ldr	r1, [r4, #24]
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8006a7c:	e009      	b.n	8006a92 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8006a7e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006a80:	f7fa fbd0 	bl	8001224 <HAL_RTC_MspInit>
 8006a84:	e7ba      	b.n	80069fc <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	22ff      	movs	r2, #255	; 0xff
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8006a90:	2501      	movs	r5, #1
}
 8006a92:	4628      	mov	r0, r5
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff ff72 	bl	8006980 <HAL_RTC_WaitForSynchro>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d0de      	beq.n	8006a5e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8006aaa:	2501      	movs	r5, #1
 8006aac:	e7f1      	b.n	8006a92 <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8006aae:	2501      	movs	r5, #1
 8006ab0:	e7ef      	b.n	8006a92 <HAL_RTC_Init+0xa4>

08006ab2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006ab2:	2300      	movs	r3, #0

  while(Value >= 10U)
 8006ab4:	e002      	b.n	8006abc <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006ab6:	3301      	adds	r3, #1
    Value -= 10U;
 8006ab8:	380a      	subs	r0, #10
 8006aba:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8006abc:	2809      	cmp	r0, #9
 8006abe:	d8fa      	bhi.n	8006ab6 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	b2db      	uxtb	r3, r3
}
 8006ac4:	4318      	orrs	r0, r3
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_RTC_SetTime>:
{
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006aca:	7f03      	ldrb	r3, [r0, #28]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d078      	beq.n	8006bc2 <HAL_RTC_SetTime+0xfa>
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d146      	bne.n	8006b6e <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ae0:	6803      	ldr	r3, [r0, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ae8:	d101      	bne.n	8006aee <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006aee:	7828      	ldrb	r0, [r5, #0]
 8006af0:	f7ff ffdf 	bl	8006ab2 <RTC_ByteToBcd2>
 8006af4:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006af6:	7868      	ldrb	r0, [r5, #1]
 8006af8:	f7ff ffdb 	bl	8006ab2 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006afc:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b00:	78a8      	ldrb	r0, [r5, #2]
 8006b02:	f7ff ffd6 	bl	8006ab2 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b06:	4330      	orrs	r0, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b08:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	22ca      	movs	r2, #202	; 0xca
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	2253      	movs	r2, #83	; 0x53
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff ff49 	bl	80069b2 <RTC_EnterInitMode>
 8006b20:	4607      	mov	r7, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d135      	bne.n	8006b92 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8006b2c:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 8006b30:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	6893      	ldr	r3, [r2, #8]
 8006b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b3a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	688b      	ldr	r3, [r1, #8]
 8006b40:	68ea      	ldr	r2, [r5, #12]
 8006b42:	6928      	ldr	r0, [r5, #16]
 8006b44:	4302      	orrs	r2, r0
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	68d3      	ldr	r3, [r2, #12]
 8006b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b52:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f013 0f20 	tst.w	r3, #32
 8006b5c:	d023      	beq.n	8006ba6 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	22ff      	movs	r2, #255	; 0xff
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8006b64:	2301      	movs	r3, #1
 8006b66:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8006b6c:	e019      	b.n	8006ba2 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b76:	d101      	bne.n	8006b7c <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b7c:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b7e:	7868      	ldrb	r0, [r5, #1]
 8006b80:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8006b86:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b88:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006b8a:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b8c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8006b90:	e7bd      	b.n	8006b0e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	22ff      	movs	r2, #255	; 0xff
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b98:	2304      	movs	r3, #4
 8006b9a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8006ba0:	2701      	movs	r7, #1
}
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7ff feea 	bl	8006980 <HAL_RTC_WaitForSynchro>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0d6      	beq.n	8006b5e <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8006bbe:	2701      	movs	r7, #1
 8006bc0:	e7ef      	b.n	8006ba2 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8006bc2:	2702      	movs	r7, #2
 8006bc4:	e7ed      	b.n	8006ba2 <HAL_RTC_SetTime+0xda>

08006bc6 <HAL_RTC_SetDate>:
{
 8006bc6:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8006bc8:	7f03      	ldrb	r3, [r0, #28]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d066      	beq.n	8006c9c <HAL_RTC_SetDate+0xd6>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bd6:	b93a      	cbnz	r2, 8006be8 <HAL_RTC_SetDate+0x22>
 8006bd8:	784b      	ldrb	r3, [r1, #1]
 8006bda:	f013 0f10 	tst.w	r3, #16
 8006bde:	d003      	beq.n	8006be8 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006be0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006be4:	330a      	adds	r3, #10
 8006be6:	704b      	strb	r3, [r1, #1]
 8006be8:	460e      	mov	r6, r1
 8006bea:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d132      	bne.n	8006c56 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006bf0:	78c8      	ldrb	r0, [r1, #3]
 8006bf2:	f7ff ff5e 	bl	8006ab2 <RTC_ByteToBcd2>
 8006bf6:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006bf8:	7870      	ldrb	r0, [r6, #1]
 8006bfa:	f7ff ff5a 	bl	8006ab2 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006bfe:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006c02:	78b0      	ldrb	r0, [r6, #2]
 8006c04:	f7ff ff55 	bl	8006ab2 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c08:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 8006c0a:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c0c:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	22ca      	movs	r2, #202	; 0xca
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	2253      	movs	r2, #83	; 0x53
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7ff fec8 	bl	80069b2 <RTC_EnterInitMode>
 8006c22:	4606      	mov	r6, r0
 8006c24:	bb10      	cbnz	r0, 8006c6c <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006c2c:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8006c30:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	68d3      	ldr	r3, [r2, #12]
 8006c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c3a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f013 0f20 	tst.w	r3, #32
 8006c44:	d01c      	beq.n	8006c80 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	22ff      	movs	r2, #255	; 0xff
 8006c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8006c50:	2300      	movs	r3, #0
 8006c52:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8006c54:	e012      	b.n	8006c7c <HAL_RTC_SetDate+0xb6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c56:	78cd      	ldrb	r5, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c58:	7848      	ldrb	r0, [r1, #1]
 8006c5a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8006c60:	788d      	ldrb	r5, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c62:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006c64:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c66:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8006c6a:	e7d1      	b.n	8006c10 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c72:	2304      	movs	r3, #4
 8006c74:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8006c76:	2300      	movs	r3, #0
 8006c78:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8006c7a:	2601      	movs	r6, #1
}
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff fe7d 	bl	8006980 <HAL_RTC_WaitForSynchro>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0dd      	beq.n	8006c46 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c90:	2304      	movs	r3, #4
 8006c92:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8006c94:	2300      	movs	r3, #0
 8006c96:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8006c98:	2601      	movs	r6, #1
 8006c9a:	e7ef      	b.n	8006c7c <HAL_RTC_SetDate+0xb6>
 __HAL_LOCK(hrtc);
 8006c9c:	2602      	movs	r6, #2
 8006c9e:	e7ed      	b.n	8006c7c <HAL_RTC_SetDate+0xb6>

08006ca0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006ca0:	0903      	lsrs	r3, r0, #4
 8006ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ca6:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8006ca8:	f000 000f 	and.w	r0, r0, #15
 8006cac:	4410      	add	r0, r2
}
 8006cae:	b2c0      	uxtb	r0, r0
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_RTC_GetTime>:
{
 8006cb2:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006cb4:	6803      	ldr	r3, [r0, #0]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006cba:	6803      	ldr	r3, [r0, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cc2:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ccc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006cd0:	0c1d      	lsrs	r5, r3, #16
 8006cd2:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8006cd6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006cd8:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8006cdc:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006cde:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8006ce2:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006ce4:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8006ce8:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8006cea:	b95a      	cbnz	r2, 8006d04 <HAL_RTC_GetTime+0x52>
 8006cec:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006cee:	f7ff ffd7 	bl	8006ca0 <RTC_Bcd2ToByte>
 8006cf2:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff ffd3 	bl	8006ca0 <RTC_Bcd2ToByte>
 8006cfa:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7ff ffcf 	bl	8006ca0 <RTC_Bcd2ToByte>
 8006d02:	70a8      	strb	r0, [r5, #2]
}
 8006d04:	2000      	movs	r0, #0
 8006d06:	bd70      	pop	{r4, r5, r6, pc}

08006d08 <HAL_RTC_GetDate>:
{
 8006d08:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d0a:	6803      	ldr	r3, [r0, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006d16:	0c18      	lsrs	r0, r3, #16
 8006d18:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006d1a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8006d1e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d20:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8006d24:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006d26:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006d2a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8006d2c:	b95a      	cbnz	r2, 8006d46 <HAL_RTC_GetDate+0x3e>
 8006d2e:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d30:	f7ff ffb6 	bl	8006ca0 <RTC_Bcd2ToByte>
 8006d34:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff ffb2 	bl	8006ca0 <RTC_Bcd2ToByte>
 8006d3c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f7ff ffae 	bl	8006ca0 <RTC_Bcd2ToByte>
 8006d44:	70a0      	strb	r0, [r4, #2]
}
 8006d46:	2000      	movs	r0, #0
 8006d48:	bd70      	pop	{r4, r5, r6, pc}

08006d4a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d4c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4e:	6a04      	ldr	r4, [r0, #32]
 8006d50:	f024 0401 	bic.w	r4, r4, #1
 8006d54:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d58:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d5c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d60:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006d64:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d66:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d68:	6203      	str	r3, [r0, #32]
}
 8006d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d70:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d72:	6a03      	ldr	r3, [r0, #32]
 8006d74:	f023 0310 	bic.w	r3, r3, #16
 8006d78:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d7a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006d7c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d7e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d82:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d8a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d90:	6203      	str	r3, [r0, #32]
}
 8006d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d98:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d9e:	4319      	orrs	r1, r3
 8006da0:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da4:	6081      	str	r1, [r0, #8]
}
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da8:	6802      	ldr	r2, [r0, #0]
 8006daa:	68d3      	ldr	r3, [r2, #12]
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db2:	6802      	ldr	r2, [r0, #0]
 8006db4:	6893      	ldr	r3, [r2, #8]
 8006db6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dba:	2b06      	cmp	r3, #6
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	6013      	str	r3, [r2, #0]
}
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006dca:	6802      	ldr	r2, [r0, #0]
 8006dcc:	68d3      	ldr	r3, [r2, #12]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006dd4:	6803      	ldr	r3, [r0, #0]
 8006dd6:	6a19      	ldr	r1, [r3, #32]
 8006dd8:	f241 1211 	movw	r2, #4369	; 0x1111
 8006ddc:	4211      	tst	r1, r2
 8006dde:	d108      	bne.n	8006df2 <HAL_TIM_Base_Stop_IT+0x28>
 8006de0:	6a19      	ldr	r1, [r3, #32]
 8006de2:	f240 4244 	movw	r2, #1092	; 0x444
 8006de6:	4211      	tst	r1, r2
 8006de8:	d103      	bne.n	8006df2 <HAL_TIM_Base_Stop_IT+0x28>
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	2000      	movs	r0, #0
 8006df4:	4770      	bx	lr

08006df6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIM_IC_CaptureCallback>:
}
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIM_TriggerCallback>:
}
 8006dfc:	4770      	bx	lr

08006dfe <HAL_TIM_IRQHandler>:
{
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e02:	6803      	ldr	r3, [r0, #0]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	f012 0f02 	tst.w	r2, #2
 8006e0a:	d011      	beq.n	8006e30 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	f012 0f02 	tst.w	r2, #2
 8006e12:	d00d      	beq.n	8006e30 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e14:	f06f 0202 	mvn.w	r2, #2
 8006e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e1e:	6803      	ldr	r3, [r0, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f013 0f03 	tst.w	r3, #3
 8006e26:	d070      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006e28:	f7ff ffe6 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	f012 0f04 	tst.w	r2, #4
 8006e38:	d012      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	f012 0f04 	tst.w	r2, #4
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e42:	f06f 0204 	mvn.w	r2, #4
 8006e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006e54:	d05f      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	4620      	mov	r0, r4
 8006e58:	f7ff ffce 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	f012 0f08 	tst.w	r2, #8
 8006e68:	d012      	beq.n	8006e90 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	f012 0f08 	tst.w	r2, #8
 8006e70:	d00e      	beq.n	8006e90 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e72:	f06f 0208 	mvn.w	r2, #8
 8006e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e78:	2304      	movs	r3, #4
 8006e7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f013 0f03 	tst.w	r3, #3
 8006e84:	d04e      	beq.n	8006f24 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff ffb6 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	f012 0f10 	tst.w	r2, #16
 8006e98:	d012      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	f012 0f10 	tst.w	r2, #16
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ea2:	f06f 0210 	mvn.w	r2, #16
 8006ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006eb4:	d03d      	beq.n	8006f32 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff ff9e 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	f012 0f01 	tst.w	r2, #1
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	f012 0f01 	tst.w	r2, #1
 8006ed0:	d136      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006eda:	d003      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ee2:	d134      	bne.n	8006f4e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ef4:	d132      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	691a      	ldr	r2, [r3, #16]
 8006efa:	f012 0f20 	tst.w	r2, #32
 8006efe:	d003      	beq.n	8006f08 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	f012 0f20 	tst.w	r2, #32
 8006f06:	d130      	bne.n	8006f6a <HAL_TIM_IRQHandler+0x16c>
}
 8006f08:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0a:	f7ff ff74 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff ff73 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
 8006f14:	e78a      	b.n	8006e2c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff ff6d 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff ff6c 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
 8006f22:	e79b      	b.n	8006e5c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff ff66 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7ff ff65 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
 8006f30:	e7ac      	b.n	8006e8c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff ff5f 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff ff5e 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
 8006f3e:	e7bd      	b.n	8006ebc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f40:	f06f 0201 	mvn.w	r2, #1
 8006f44:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 ffd0 	bl	8007eec <HAL_TIM_PeriodElapsedCallback>
 8006f4c:	e7c1      	b.n	8006ed2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 f94a 	bl	80071ee <HAL_TIMEx_BreakCallback>
 8006f5a:	e7c3      	b.n	8006ee4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f60:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff ff4a 	bl	8006dfc <HAL_TIM_TriggerCallback>
 8006f68:	e7c5      	b.n	8006ef6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f6a:	f06f 0220 	mvn.w	r2, #32
 8006f6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 f93b 	bl	80071ec <HAL_TIMEx_CommutCallback>
}
 8006f76:	e7c7      	b.n	8006f08 <HAL_TIM_IRQHandler+0x10a>

08006f78 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006f78:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f7a:	4a30      	ldr	r2, [pc, #192]	; (800703c <TIM_Base_SetConfig+0xc4>)
 8006f7c:	4290      	cmp	r0, r2
 8006f7e:	d012      	beq.n	8006fa6 <TIM_Base_SetConfig+0x2e>
 8006f80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006f84:	d00f      	beq.n	8006fa6 <TIM_Base_SetConfig+0x2e>
 8006f86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f8a:	4290      	cmp	r0, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_Base_SetConfig+0x2e>
 8006f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f92:	4290      	cmp	r0, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_Base_SetConfig+0x2e>
 8006f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_Base_SetConfig+0x2e>
 8006f9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006fa2:	4290      	cmp	r0, r2
 8006fa4:	d103      	bne.n	8006fae <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006faa:	684a      	ldr	r2, [r1, #4]
 8006fac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <TIM_Base_SetConfig+0xc4>)
 8006fb0:	4290      	cmp	r0, r2
 8006fb2:	d02a      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006fb8:	d027      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006fbe:	4290      	cmp	r0, r2
 8006fc0:	d023      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fc6:	4290      	cmp	r0, r2
 8006fc8:	d01f      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fce:	4290      	cmp	r0, r2
 8006fd0:	d01b      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006fd6:	4290      	cmp	r0, r2
 8006fd8:	d017      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fda:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006fde:	4290      	cmp	r0, r2
 8006fe0:	d013      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fe6:	4290      	cmp	r0, r2
 8006fe8:	d00f      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fee:	4290      	cmp	r0, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006ff2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006ff6:	4290      	cmp	r0, r2
 8006ff8:	d007      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8006ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ffe:	4290      	cmp	r0, r2
 8007000:	d003      	beq.n	800700a <TIM_Base_SetConfig+0x92>
 8007002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007006:	4290      	cmp	r0, r2
 8007008:	d103      	bne.n	8007012 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800700a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800700e:	68ca      	ldr	r2, [r1, #12]
 8007010:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007016:	694a      	ldr	r2, [r1, #20]
 8007018:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800701a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800701c:	688b      	ldr	r3, [r1, #8]
 800701e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <TIM_Base_SetConfig+0xc4>)
 8007026:	4298      	cmp	r0, r3
 8007028:	d003      	beq.n	8007032 <TIM_Base_SetConfig+0xba>
 800702a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702e:	4298      	cmp	r0, r3
 8007030:	d101      	bne.n	8007036 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8007032:	690b      	ldr	r3, [r1, #16]
 8007034:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007036:	2301      	movs	r3, #1
 8007038:	6143      	str	r3, [r0, #20]
}
 800703a:	4770      	bx	lr
 800703c:	40010000 	.word	0x40010000

08007040 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007040:	b1a8      	cbz	r0, 800706e <HAL_TIM_Base_Init+0x2e>
{
 8007042:	b510      	push	{r4, lr}
 8007044:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800704a:	b15b      	cbz	r3, 8007064 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	2302      	movs	r3, #2
 800704e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007052:	1d21      	adds	r1, r4, #4
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	f7ff ff8f 	bl	8006f78 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800705a:	2301      	movs	r3, #1
 800705c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007060:	2000      	movs	r0, #0
}
 8007062:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007064:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007068:	f7fa f8ea 	bl	8001240 <HAL_TIM_Base_MspInit>
 800706c:	e7ee      	b.n	800704c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800706e:	2001      	movs	r0, #1
}
 8007070:	4770      	bx	lr

08007072 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007072:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007074:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007076:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800707a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800707e:	430b      	orrs	r3, r1
 8007080:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007082:	6083      	str	r3, [r0, #8]
}
 8007084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800708a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800708e:	2b01      	cmp	r3, #1
 8007090:	d066      	beq.n	8007160 <HAL_TIM_ConfigClockSource+0xd6>
{
 8007092:	b510      	push	{r4, lr}
 8007094:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007096:	2301      	movs	r3, #1
 8007098:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	2302      	movs	r3, #2
 800709e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80070a2:	6802      	ldr	r2, [r0, #0]
 80070a4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80070ae:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80070b0:	680b      	ldr	r3, [r1, #0]
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d04a      	beq.n	800714c <HAL_TIM_ConfigClockSource+0xc2>
 80070b6:	d913      	bls.n	80070e0 <HAL_TIM_ConfigClockSource+0x56>
 80070b8:	2b60      	cmp	r3, #96	; 0x60
 80070ba:	d03d      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0xae>
 80070bc:	d91e      	bls.n	80070fc <HAL_TIM_ConfigClockSource+0x72>
 80070be:	2b70      	cmp	r3, #112	; 0x70
 80070c0:	d028      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x8a>
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c6:	d130      	bne.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80070c8:	68cb      	ldr	r3, [r1, #12]
 80070ca:	684a      	ldr	r2, [r1, #4]
 80070cc:	6889      	ldr	r1, [r1, #8]
 80070ce:	6800      	ldr	r0, [r0, #0]
 80070d0:	f7ff ffcf 	bl	8007072 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	6893      	ldr	r3, [r2, #8]
 80070d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070dc:	6093      	str	r3, [r2, #8]
      break;
 80070de:	e024      	b.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d006      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x68>
 80070e4:	d904      	bls.n	80070f0 <HAL_TIM_ConfigClockSource+0x66>
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d003      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x68>
 80070ea:	2b30      	cmp	r3, #48	; 0x30
 80070ec:	d001      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x68>
 80070ee:	e01c      	b.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
 80070f0:	b9db      	cbnz	r3, 800712a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070f2:	4619      	mov	r1, r3
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	f7ff fe4f 	bl	8006d98 <TIM_ITRx_SetConfig>
      break;
 80070fa:	e016      	b.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80070fc:	2b50      	cmp	r3, #80	; 0x50
 80070fe:	d114      	bne.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007100:	68ca      	ldr	r2, [r1, #12]
 8007102:	6849      	ldr	r1, [r1, #4]
 8007104:	6800      	ldr	r0, [r0, #0]
 8007106:	f7ff fe20 	bl	8006d4a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800710a:	2150      	movs	r1, #80	; 0x50
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	f7ff fe43 	bl	8006d98 <TIM_ITRx_SetConfig>
      break;
 8007112:	e00a      	b.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8007114:	68cb      	ldr	r3, [r1, #12]
 8007116:	684a      	ldr	r2, [r1, #4]
 8007118:	6889      	ldr	r1, [r1, #8]
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	f7ff ffa9 	bl	8007072 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007120:	6822      	ldr	r2, [r4, #0]
 8007122:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007128:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800712a:	2301      	movs	r3, #1
 800712c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007130:	2000      	movs	r0, #0
 8007132:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007136:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007138:	68ca      	ldr	r2, [r1, #12]
 800713a:	6849      	ldr	r1, [r1, #4]
 800713c:	6800      	ldr	r0, [r0, #0]
 800713e:	f7ff fe17 	bl	8006d70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007142:	2160      	movs	r1, #96	; 0x60
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	f7ff fe27 	bl	8006d98 <TIM_ITRx_SetConfig>
      break;
 800714a:	e7ee      	b.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800714c:	68ca      	ldr	r2, [r1, #12]
 800714e:	6849      	ldr	r1, [r1, #4]
 8007150:	6800      	ldr	r0, [r0, #0]
 8007152:	f7ff fdfa 	bl	8006d4a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007156:	2140      	movs	r1, #64	; 0x40
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	f7ff fe1d 	bl	8006d98 <TIM_ITRx_SetConfig>
      break;
 800715e:	e7e4      	b.n	800712a <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8007160:	2002      	movs	r0, #2
}
 8007162:	4770      	bx	lr

08007164 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007164:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d03b      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800716c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800716e:	2301      	movs	r3, #1
 8007170:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	2302      	movs	r3, #2
 8007176:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800717a:	6803      	ldr	r3, [r0, #0]
 800717c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800717e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007180:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007184:	680a      	ldr	r2, [r1, #0]
 8007186:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	6803      	ldr	r3, [r0, #0]
 800718c:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01a      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d017      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007198:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80071a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80071a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80071b0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80071b8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80071c0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d104      	bne.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071cc:	684a      	ldr	r2, [r1, #4]
 80071ce:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071d0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d8:	2300      	movs	r3, #0
 80071da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80071de:	4618      	mov	r0, r3
}
 80071e0:	bc30      	pop	{r4, r5}
 80071e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80071e4:	2002      	movs	r0, #2
}
 80071e6:	4770      	bx	lr
 80071e8:	40010000 	.word	0x40010000

080071ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071ec:	4770      	bx	lr

080071ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ee:	4770      	bx	lr

080071f0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071f0:	6802      	ldr	r2, [r0, #0]
 80071f2:	68d3      	ldr	r3, [r2, #12]
 80071f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071f8:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fa:	2320      	movs	r3, #32
 80071fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8007200:	4770      	bx	lr

08007202 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007202:	6802      	ldr	r2, [r0, #0]
 8007204:	68d3      	ldr	r3, [r2, #12]
 8007206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800720a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	6802      	ldr	r2, [r0, #0]
 800720e:	6953      	ldr	r3, [r2, #20]
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007216:	2320      	movs	r3, #32
 8007218:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800721c:	4770      	bx	lr
	...

08007220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007220:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8007224:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007226:	6802      	ldr	r2, [r0, #0]
 8007228:	6913      	ldr	r3, [r2, #16]
 800722a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800722e:	68c1      	ldr	r1, [r0, #12]
 8007230:	430b      	orrs	r3, r1
 8007232:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007234:	6883      	ldr	r3, [r0, #8]
 8007236:	6902      	ldr	r2, [r0, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	6942      	ldr	r2, [r0, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	69c2      	ldr	r2, [r0, #28]
 8007240:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8007242:	6801      	ldr	r1, [r0, #0]
 8007244:	68cb      	ldr	r3, [r1, #12]
 8007246:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800724a:	f023 030c 	bic.w	r3, r3, #12
 800724e:	4313      	orrs	r3, r2
 8007250:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007252:	6802      	ldr	r2, [r0, #0]
 8007254:	6953      	ldr	r3, [r2, #20]
 8007256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725a:	6981      	ldr	r1, [r0, #24]
 800725c:	430b      	orrs	r3, r1
 800725e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007260:	69c3      	ldr	r3, [r0, #28]
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007266:	d03b      	beq.n	80072e0 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007268:	6803      	ldr	r3, [r0, #0]
 800726a:	4a71      	ldr	r2, [pc, #452]	; (8007430 <UART_SetConfig+0x210>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f000 80ab 	beq.w	80073c8 <UART_SetConfig+0x1a8>
 8007272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007276:	4293      	cmp	r3, r2
 8007278:	f000 80a6 	beq.w	80073c8 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fe feae 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007280:	f04f 0900 	mov.w	r9, #0
 8007284:	1806      	adds	r6, r0, r0
 8007286:	eb49 0709 	adc.w	r7, r9, r9
 800728a:	eb16 0b00 	adds.w	fp, r6, r0
 800728e:	eb47 0c09 	adc.w	ip, r7, r9
 8007292:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007296:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800729a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800729e:	4693      	mov	fp, r2
 80072a0:	469c      	mov	ip, r3
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	009a      	lsls	r2, r3, #2
 80072a6:	0f9b      	lsrs	r3, r3, #30
 80072a8:	eb10 000b 	adds.w	r0, r0, fp
 80072ac:	eb49 010c 	adc.w	r1, r9, ip
 80072b0:	f7f9 fce2 	bl	8000c78 <__aeabi_uldivmod>
 80072b4:	4d5f      	ldr	r5, [pc, #380]	; (8007434 <UART_SetConfig+0x214>)
 80072b6:	fba5 3200 	umull	r3, r2, r5, r0
 80072ba:	0951      	lsrs	r1, r2, #5
 80072bc:	2264      	movs	r2, #100	; 0x64
 80072be:	fb02 0211 	mls	r2, r2, r1, r0
 80072c2:	0113      	lsls	r3, r2, #4
 80072c4:	3332      	adds	r3, #50	; 0x32
 80072c6:	fba5 2303 	umull	r2, r3, r5, r3
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	6821      	ldr	r1, [r4, #0]
 80072da:	4413      	add	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
    }
  }
}
 80072de:	e0a4      	b.n	800742a <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072e0:	6803      	ldr	r3, [r0, #0]
 80072e2:	4a53      	ldr	r2, [pc, #332]	; (8007430 <UART_SetConfig+0x210>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d039      	beq.n	800735c <UART_SetConfig+0x13c>
 80072e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d035      	beq.n	800735c <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80072f0:	f7fe fe74 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072f4:	4683      	mov	fp, r0
 80072f6:	f04f 0c00 	mov.w	ip, #0
 80072fa:	1806      	adds	r6, r0, r0
 80072fc:	eb4c 070c 	adc.w	r7, ip, ip
 8007300:	eb16 0800 	adds.w	r8, r6, r0
 8007304:	eb47 090c 	adc.w	r9, r7, ip
 8007308:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800730c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007310:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007314:	4690      	mov	r8, r2
 8007316:	4699      	mov	r9, r3
 8007318:	6862      	ldr	r2, [r4, #4]
 800731a:	2100      	movs	r1, #0
 800731c:	1892      	adds	r2, r2, r2
 800731e:	eb41 0301 	adc.w	r3, r1, r1
 8007322:	eb1b 0008 	adds.w	r0, fp, r8
 8007326:	eb4c 0109 	adc.w	r1, ip, r9
 800732a:	f7f9 fca5 	bl	8000c78 <__aeabi_uldivmod>
 800732e:	4d41      	ldr	r5, [pc, #260]	; (8007434 <UART_SetConfig+0x214>)
 8007330:	fba5 3200 	umull	r3, r2, r5, r0
 8007334:	0951      	lsrs	r1, r2, #5
 8007336:	2264      	movs	r2, #100	; 0x64
 8007338:	fb02 0211 	mls	r2, r2, r1, r0
 800733c:	00d3      	lsls	r3, r2, #3
 800733e:	3332      	adds	r3, #50	; 0x32
 8007340:	fba5 2303 	umull	r2, r3, r5, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	005a      	lsls	r2, r3, #1
 8007348:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800734c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	6821      	ldr	r1, [r4, #0]
 8007356:	4413      	add	r3, r2
 8007358:	608b      	str	r3, [r1, #8]
 800735a:	e066      	b.n	800742a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800735c:	f7fe fe4e 	bl	8005ffc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007360:	4680      	mov	r8, r0
 8007362:	f04f 0900 	mov.w	r9, #0
 8007366:	1806      	adds	r6, r0, r0
 8007368:	eb49 0709 	adc.w	r7, r9, r9
 800736c:	eb16 0b00 	adds.w	fp, r6, r0
 8007370:	eb47 0c09 	adc.w	ip, r7, r9
 8007374:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007378:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800737c:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007380:	4693      	mov	fp, r2
 8007382:	469c      	mov	ip, r3
 8007384:	6862      	ldr	r2, [r4, #4]
 8007386:	2100      	movs	r1, #0
 8007388:	1892      	adds	r2, r2, r2
 800738a:	eb41 0301 	adc.w	r3, r1, r1
 800738e:	eb18 000b 	adds.w	r0, r8, fp
 8007392:	eb49 010c 	adc.w	r1, r9, ip
 8007396:	f7f9 fc6f 	bl	8000c78 <__aeabi_uldivmod>
 800739a:	4d26      	ldr	r5, [pc, #152]	; (8007434 <UART_SetConfig+0x214>)
 800739c:	fba5 3200 	umull	r3, r2, r5, r0
 80073a0:	0951      	lsrs	r1, r2, #5
 80073a2:	2264      	movs	r2, #100	; 0x64
 80073a4:	fb02 0211 	mls	r2, r2, r1, r0
 80073a8:	00d3      	lsls	r3, r2, #3
 80073aa:	3332      	adds	r3, #50	; 0x32
 80073ac:	fba5 2303 	umull	r2, r3, r5, r3
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	005a      	lsls	r2, r3, #1
 80073b4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80073b8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	4413      	add	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
 80073c6:	e030      	b.n	800742a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80073c8:	f7fe fe18 	bl	8005ffc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073cc:	f04f 0900 	mov.w	r9, #0
 80073d0:	1806      	adds	r6, r0, r0
 80073d2:	eb49 0709 	adc.w	r7, r9, r9
 80073d6:	eb16 0b00 	adds.w	fp, r6, r0
 80073da:	eb47 0c09 	adc.w	ip, r7, r9
 80073de:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80073e2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80073e6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80073ea:	4693      	mov	fp, r2
 80073ec:	469c      	mov	ip, r3
 80073ee:	6863      	ldr	r3, [r4, #4]
 80073f0:	009a      	lsls	r2, r3, #2
 80073f2:	0f9b      	lsrs	r3, r3, #30
 80073f4:	eb10 000b 	adds.w	r0, r0, fp
 80073f8:	eb49 010c 	adc.w	r1, r9, ip
 80073fc:	f7f9 fc3c 	bl	8000c78 <__aeabi_uldivmod>
 8007400:	4d0c      	ldr	r5, [pc, #48]	; (8007434 <UART_SetConfig+0x214>)
 8007402:	fba5 3200 	umull	r3, r2, r5, r0
 8007406:	0951      	lsrs	r1, r2, #5
 8007408:	2264      	movs	r2, #100	; 0x64
 800740a:	fb02 0211 	mls	r2, r2, r1, r0
 800740e:	0113      	lsls	r3, r2, #4
 8007410:	3332      	adds	r3, #50	; 0x32
 8007412:	fba5 2303 	umull	r2, r3, r5, r3
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800741c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	6821      	ldr	r1, [r4, #0]
 8007426:	4413      	add	r3, r2
 8007428:	608b      	str	r3, [r1, #8]
}
 800742a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800742e:	bf00      	nop
 8007430:	40011000 	.word	0x40011000
 8007434:	51eb851f 	.word	0x51eb851f

08007438 <UART_WaitOnFlagUntilTimeout>:
{
 8007438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743c:	4605      	mov	r5, r0
 800743e:	460f      	mov	r7, r1
 8007440:	4616      	mov	r6, r2
 8007442:	4698      	mov	r8, r3
 8007444:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	ea37 0303 	bics.w	r3, r7, r3
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	42b3      	cmp	r3, r6
 8007456:	d11d      	bne.n	8007494 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8007458:	f1b4 3fff 	cmp.w	r4, #4294967295
 800745c:	d0f3      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800745e:	b12c      	cbz	r4, 800746c <UART_WaitOnFlagUntilTimeout+0x34>
 8007460:	f7fd fb86 	bl	8004b70 <HAL_GetTick>
 8007464:	eba0 0008 	sub.w	r0, r0, r8
 8007468:	42a0      	cmp	r0, r4
 800746a:	d9ec      	bls.n	8007446 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746c:	682a      	ldr	r2, [r5, #0]
 800746e:	68d3      	ldr	r3, [r2, #12]
 8007470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007474:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	682a      	ldr	r2, [r5, #0]
 8007478:	6953      	ldr	r3, [r2, #20]
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007480:	2320      	movs	r3, #32
 8007482:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007486:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800748a:	2300      	movs	r3, #0
 800748c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8007490:	2003      	movs	r0, #3
 8007492:	e000      	b.n	8007496 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8007494:	2000      	movs	r0, #0
}
 8007496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800749a <HAL_UART_MspInit>:
}
 800749a:	4770      	bx	lr

0800749c <HAL_UART_Init>:
  if (huart == NULL)
 800749c:	b358      	cbz	r0, 80074f6 <HAL_UART_Init+0x5a>
{
 800749e:	b510      	push	{r4, lr}
 80074a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80074a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80074a6:	b30b      	cbz	r3, 80074ec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80074a8:	2324      	movs	r3, #36	; 0x24
 80074aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	68d3      	ldr	r3, [r2, #12]
 80074b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7ff feb1 	bl	8007220 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	6913      	ldr	r3, [r2, #16]
 80074c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80074c6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	6953      	ldr	r3, [r2, #20]
 80074cc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80074d0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	68d3      	ldr	r3, [r2, #12]
 80074d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074da:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074dc:	2000      	movs	r0, #0
 80074de:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80074e0:	2320      	movs	r3, #32
 80074e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80074e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80074ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80074ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80074f0:	f7ff ffd3 	bl	800749a <HAL_UART_MspInit>
 80074f4:	e7d8      	b.n	80074a8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80074f6:	2001      	movs	r0, #1
}
 80074f8:	4770      	bx	lr

080074fa <HAL_UART_Transmit>:
{
 80074fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074fe:	b083      	sub	sp, #12
 8007500:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007502:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b20      	cmp	r3, #32
 800750a:	d156      	bne.n	80075ba <HAL_UART_Transmit+0xc0>
 800750c:	4604      	mov	r4, r0
 800750e:	460d      	mov	r5, r1
 8007510:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007512:	2900      	cmp	r1, #0
 8007514:	d056      	beq.n	80075c4 <HAL_UART_Transmit+0xca>
 8007516:	2a00      	cmp	r2, #0
 8007518:	d056      	beq.n	80075c8 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 800751a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800751e:	2b01      	cmp	r3, #1
 8007520:	d054      	beq.n	80075cc <HAL_UART_Transmit+0xd2>
 8007522:	2301      	movs	r3, #1
 8007524:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007528:	f04f 0900 	mov.w	r9, #0
 800752c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007530:	2321      	movs	r3, #33	; 0x21
 8007532:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8007536:	f7fd fb1b 	bl	8004b70 <HAL_GetTick>
 800753a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800753c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8007540:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8007544:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8007548:	e010      	b.n	800756c <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800754a:	9600      	str	r6, [sp, #0]
 800754c:	463b      	mov	r3, r7
 800754e:	2200      	movs	r2, #0
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	4620      	mov	r0, r4
 8007554:	f7ff ff70 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 8007558:	2800      	cmp	r0, #0
 800755a:	d139      	bne.n	80075d0 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800755c:	882b      	ldrh	r3, [r5, #0]
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007564:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	b9c3      	cbnz	r3, 800759c <HAL_UART_Transmit+0xa2>
          pData += 2U;
 800756a:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800756c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800756e:	b29b      	uxth	r3, r3
 8007570:	b1b3      	cbz	r3, 80075a0 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8007572:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007574:	3b01      	subs	r3, #1
 8007576:	b29b      	uxth	r3, r3
 8007578:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007580:	d0e3      	beq.n	800754a <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007582:	9600      	str	r6, [sp, #0]
 8007584:	463b      	mov	r3, r7
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	4620      	mov	r0, r4
 800758c:	f7ff ff54 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 8007590:	bb00      	cbnz	r0, 80075d4 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007592:	782a      	ldrb	r2, [r5, #0]
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	3501      	adds	r5, #1
 800759a:	e7e7      	b.n	800756c <HAL_UART_Transmit+0x72>
          pData += 1U;
 800759c:	3501      	adds	r5, #1
 800759e:	e7e5      	b.n	800756c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a0:	9600      	str	r6, [sp, #0]
 80075a2:	463b      	mov	r3, r7
 80075a4:	2200      	movs	r2, #0
 80075a6:	2140      	movs	r1, #64	; 0x40
 80075a8:	4620      	mov	r0, r4
 80075aa:	f7ff ff45 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	b990      	cbnz	r0, 80075d8 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 80075b2:	2220      	movs	r2, #32
 80075b4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 80075b8:	e000      	b.n	80075bc <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80075ba:	2302      	movs	r3, #2
}
 80075bc:	4618      	mov	r0, r3
 80075be:	b003      	add	sp, #12
 80075c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e7f9      	b.n	80075bc <HAL_UART_Transmit+0xc2>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e7f7      	b.n	80075bc <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80075cc:	2302      	movs	r3, #2
 80075ce:	e7f5      	b.n	80075bc <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e7f3      	b.n	80075bc <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e7f1      	b.n	80075bc <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e7ef      	b.n	80075bc <HAL_UART_Transmit+0xc2>

080075dc <HAL_UART_Receive_DMA>:
{
 80075dc:	b530      	push	{r4, r5, lr}
 80075de:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e0:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80075e4:	b2e4      	uxtb	r4, r4
 80075e6:	2c20      	cmp	r4, #32
 80075e8:	d13d      	bne.n	8007666 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 80075ea:	2900      	cmp	r1, #0
 80075ec:	d03e      	beq.n	800766c <HAL_UART_Receive_DMA+0x90>
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	d03e      	beq.n	8007670 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 80075f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d03c      	beq.n	8007674 <HAL_UART_Receive_DMA+0x98>
 80075fa:	4613      	mov	r3, r2
 80075fc:	460a      	mov	r2, r1
 80075fe:	4604      	mov	r4, r0
 8007600:	2101      	movs	r1, #1
 8007602:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8007606:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8007608:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760a:	2500      	movs	r5, #0
 800760c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800760e:	2122      	movs	r1, #34	; 0x22
 8007610:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007614:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007616:	4818      	ldr	r0, [pc, #96]	; (8007678 <HAL_UART_Receive_DMA+0x9c>)
 8007618:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800761a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800761c:	4817      	ldr	r0, [pc, #92]	; (800767c <HAL_UART_Receive_DMA+0xa0>)
 800761e:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007622:	4817      	ldr	r0, [pc, #92]	; (8007680 <HAL_UART_Receive_DMA+0xa4>)
 8007624:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8007626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007628:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800762a:	6821      	ldr	r1, [r4, #0]
 800762c:	3104      	adds	r1, #4
 800762e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007630:	f7fd fc14 	bl	8004e5c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007634:	9501      	str	r5, [sp, #4]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8007642:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800764c:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	6953      	ldr	r3, [r2, #20]
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007658:	6822      	ldr	r2, [r4, #0]
 800765a:	6953      	ldr	r3, [r2, #20]
 800765c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007660:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007662:	4628      	mov	r0, r5
 8007664:	e000      	b.n	8007668 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8007666:	2002      	movs	r0, #2
}
 8007668:	b003      	add	sp, #12
 800766a:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800766c:	2001      	movs	r0, #1
 800766e:	e7fb      	b.n	8007668 <HAL_UART_Receive_DMA+0x8c>
 8007670:	2001      	movs	r0, #1
 8007672:	e7f9      	b.n	8007668 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8007674:	2002      	movs	r0, #2
 8007676:	e7f7      	b.n	8007668 <HAL_UART_Receive_DMA+0x8c>
 8007678:	08007687 	.word	0x08007687
 800767c:	080076c7 	.word	0x080076c7
 8007680:	080076d3 	.word	0x080076d3

08007684 <HAL_UART_RxCpltCallback>:
}
 8007684:	4770      	bx	lr

08007686 <UART_DMAReceiveCplt>:
{
 8007686:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007688:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800768a:	6802      	ldr	r2, [r0, #0]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007692:	d113      	bne.n	80076bc <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8007694:	2200      	movs	r2, #0
 8007696:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	68ca      	ldr	r2, [r1, #12]
 800769c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a0:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	694a      	ldr	r2, [r1, #20]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ac:	6819      	ldr	r1, [r3, #0]
 80076ae:	694a      	ldr	r2, [r1, #20]
 80076b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b4:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ffe1 	bl	8007684 <HAL_UART_RxCpltCallback>
}
 80076c2:	bd08      	pop	{r3, pc}

080076c4 <HAL_UART_RxHalfCpltCallback>:
}
 80076c4:	4770      	bx	lr

080076c6 <UART_DMARxHalfCplt>:
{
 80076c6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80076c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80076ca:	f7ff fffb 	bl	80076c4 <HAL_UART_RxHalfCpltCallback>
}
 80076ce:	bd08      	pop	{r3, pc}

080076d0 <HAL_UART_ErrorCallback>:
}
 80076d0:	4770      	bx	lr

080076d2 <UART_DMAError>:
{
 80076d2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b21      	cmp	r3, #33	; 0x21
 80076e2:	d010      	beq.n	8007706 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076ec:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b22      	cmp	r3, #34	; 0x22
 80076f4:	d011      	beq.n	800771a <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076f8:	f043 0310 	orr.w	r3, r3, #16
 80076fc:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff ffe6 	bl	80076d0 <HAL_UART_ErrorCallback>
}
 8007704:	bd10      	pop	{r4, pc}
 8007706:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800770a:	2a00      	cmp	r2, #0
 800770c:	d0ea      	beq.n	80076e4 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800770e:	2300      	movs	r3, #0
 8007710:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff fd6c 	bl	80071f0 <UART_EndTxTransfer>
 8007718:	e7e4      	b.n	80076e4 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800771a:	2a00      	cmp	r2, #0
 800771c:	d0eb      	beq.n	80076f6 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800771e:	2300      	movs	r3, #0
 8007720:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007722:	4620      	mov	r0, r4
 8007724:	f7ff fd6d 	bl	8007202 <UART_EndRxTransfer>
 8007728:	e7e5      	b.n	80076f6 <UART_DMAError+0x24>
	...

0800772c <DWT_Init>:
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800772c:	4a05      	ldr	r2, [pc, #20]	; (8007744 <DWT_Init+0x18>)
 800772e:	68d3      	ldr	r3, [r2, #12]
 8007730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007734:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8007736:	4a04      	ldr	r2, [pc, #16]	; (8007748 <DWT_Init+0x1c>)
 8007738:	6813      	ldr	r3, [r2, #0]
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	6013      	str	r3, [r2, #0]
}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	e000edf0 	.word	0xe000edf0
 8007748:	e0001000 	.word	0xe0001000

0800774c <DWT_Start>:
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <DWT_Start+0x10>)
 800774e:	2200      	movs	r2, #0
 8007750:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	f042 0201 	orr.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	4770      	bx	lr
 800775c:	e0001000 	.word	0xe0001000

08007760 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 8007760:	b082      	sub	sp, #8
  volatile uint32_t cycles_count = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	9301      	str	r3, [sp, #4]
  uint32_t system_core_clock_mhz = 0U;

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <DWT_Stop+0x2c>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	9301      	str	r3, [sp, #4]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <DWT_Stop+0x30>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4806      	ldr	r0, [pc, #24]	; (8007794 <DWT_Stop+0x34>)
 800777a:	fba0 2303 	umull	r2, r3, r0, r3
 800777e:	0c9b      	lsrs	r3, r3, #18
  return cycles_count / system_core_clock_mhz;
 8007780:	9801      	ldr	r0, [sp, #4]
}
 8007782:	fbb0 f0f3 	udiv	r0, r0, r3
 8007786:	b002      	add	sp, #8
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	e0001000 	.word	0xe0001000
 8007790:	200011c0 	.word	0x200011c0
 8007794:	431bde83 	.word	0x431bde83

08007798 <TIM_Config>:
{
 8007798:	b508      	push	{r3, lr}
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800779a:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <TIM_Config+0x38>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a0d      	ldr	r2, [pc, #52]	; (80077d4 <TIM_Config+0x3c>)
 80077a0:	fba2 2303 	umull	r2, r3, r2, r3
 80077a4:	09db      	lsrs	r3, r3, #7
 80077a6:	3b01      	subs	r3, #1
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80077a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80077ac:	fbb2 f2f0 	udiv	r2, r2, r0
 80077b0:	3a01      	subs	r2, #1
  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80077b2:	4809      	ldr	r0, [pc, #36]	; (80077d8 <TIM_Config+0x40>)
 80077b4:	6043      	str	r3, [r0, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077b6:	2300      	movs	r3, #0
 80077b8:	6083      	str	r3, [r0, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80077ba:	60c2      	str	r2, [r0, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077bc:	6103      	str	r3, [r0, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077be:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80077c0:	f7ff fc3e 	bl	8007040 <HAL_TIM_Base_Init>
 80077c4:	b900      	cbnz	r0, 80077c8 <TIM_Config+0x30>
}
 80077c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80077c8:	f7f9 fcf6 	bl	80011b8 <Error_Handler>
}
 80077cc:	e7fb      	b.n	80077c6 <TIM_Config+0x2e>
 80077ce:	bf00      	nop
 80077d0:	200011c0 	.word	0x200011c0
 80077d4:	10624dd3 	.word	0x10624dd3
 80077d8:	2000278c 	.word	0x2000278c

080077dc <Init_Sensors>:
{
 80077dc:	b508      	push	{r3, lr}
  BSP_SENSOR_ACC_Init();
 80077de:	f001 f8bb 	bl	8008958 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 80077e2:	f001 f8bf 	bl	8008964 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 80077e6:	f001 f8c3 	bl	8008970 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 80077ea:	f001 f8c7 	bl	800897c <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 80077ee:	f001 f8cb 	bl	8008988 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 80077f2:	f001 f8cf 	bl	8008994 <BSP_SENSOR_HUM_Init>
  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80077f6:	4803      	ldr	r0, [pc, #12]	; (8007804 <Init_Sensors+0x28>)
 80077f8:	f001 f944 	bl	8008a84 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80077fc:	2004      	movs	r0, #4
 80077fe:	f001 f948 	bl	8008a92 <BSP_SENSOR_ACC_SetFullScale>
}
 8007802:	bd08      	pop	{r3, pc}
 8007804:	42c80000 	.word	0x42c80000

08007808 <MX_DataLogFusion_Init>:
{
 8007808:	b500      	push	{lr}
 800780a:	b085      	sub	sp, #20
  BSP_LED_Init(LED2);
 800780c:	2000      	movs	r0, #0
 800780e:	f7fd f8f5 	bl	80049fc <BSP_LED_Init>
  BSP_COM_Init(COM1);
 8007812:	2000      	movs	r0, #0
 8007814:	f7fd f944 	bl	8004aa0 <BSP_COM_Init>
  BSP_IP_TIM_Init();
 8007818:	f7f9 fca4 	bl	8001164 <MX_TIM3_Init>
  TIM_Config(ALGO_FREQ);
 800781c:	2064      	movs	r0, #100	; 0x64
 800781e:	f7ff ffbb 	bl	8007798 <TIM_Config>
  Init_Sensors();
 8007822:	f7ff ffdb 	bl	80077dc <Init_Sensors>
  MotionFX_manager_init();
 8007826:	f001 f951 	bl	8008acc <MotionFX_manager_init>
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 800782a:	491f      	ldr	r1, [pc, #124]	; (80078a8 <MX_DataLogFusion_Init+0xa0>)
 800782c:	481f      	ldr	r0, [pc, #124]	; (80078ac <MX_DataLogFusion_Init+0xa4>)
 800782e:	f001 f9b5 	bl	8008b9c <MotionFX_manager_get_version>
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8007832:	200a      	movs	r0, #10
 8007834:	f001 f9c0 	bl	8008bb8 <MotionFX_manager_MagCal_start>
  MotionFX_MagCal_getParams(&mag_cal_test);
 8007838:	4668      	mov	r0, sp
 800783a:	f00c f945 	bl	8013ac8 <MotionFX_MagCal_getParams>
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800783e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d010      	beq.n	8007868 <MX_DataLogFusion_Init+0x60>
  DWT_Init();
 8007846:	f7ff ff71 	bl	800772c <DWT_Init>
  BSP_LED_On(LED2);
 800784a:	2000      	movs	r0, #0
 800784c:	f7fd f8fc 	bl	8004a48 <BSP_LED_On>
  HAL_Delay(500);
 8007850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007854:	f7fd f992 	bl	8004b7c <HAL_Delay>
  BSP_LED_Off(LED2);
 8007858:	2000      	movs	r0, #0
 800785a:	f7fd f8ff 	bl	8004a5c <BSP_LED_Off>
  UART_StartReceiveMsg();
 800785e:	f000 fd4f 	bl	8008300 <UART_StartReceiveMsg>
}
 8007862:	b005      	add	sp, #20
 8007864:	f85d fb04 	ldr.w	pc, [sp], #4
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8007868:	eddf 6a11 	vldr	s13, [pc, #68]	; 80078b0 <MX_DataLogFusion_Init+0xa8>
 800786c:	ed9d 7a00 	vldr	s14, [sp]
 8007870:	ee27 7a26 	vmul.f32	s14, s14, s13
    MagOffset.x = (int32_t)ans_float;
 8007874:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007878:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <MX_DataLogFusion_Init+0xac>)
 800787a:	ed83 7a00 	vstr	s14, [r3]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800787e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007882:	ee27 7a26 	vmul.f32	s14, s14, s13
    MagOffset.y = (int32_t)ans_float;
 8007886:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800788a:	ed83 7a01 	vstr	s14, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800788e:	eddd 7a02 	vldr	s15, [sp, #8]
 8007892:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MagOffset.z = (int32_t)ans_float;
 8007896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800789a:	edc3 7a02 	vstr	s15, [r3, #8]
    MagCalStatus = 1;
 800789e:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <MX_DataLogFusion_Init+0xb0>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	e7cf      	b.n	8007846 <MX_DataLogFusion_Init+0x3e>
 80078a6:	bf00      	nop
 80078a8:	20002abc 	.word	0x20002abc
 80078ac:	20002a98 	.word	0x20002a98
 80078b0:	43fa0000 	.word	0x43fa0000
 80078b4:	200022f4 	.word	0x200022f4
 80078b8:	200022f1 	.word	0x200022f1

080078bc <RTC_Handler>:
{
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	4604      	mov	r4, r0
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 80078c2:	4e10      	ldr	r6, [pc, #64]	; (8007904 <RTC_Handler+0x48>)
 80078c4:	68f5      	ldr	r5, [r6, #12]
  (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80078c6:	2200      	movs	r2, #0
 80078c8:	4669      	mov	r1, sp
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff f9f1 	bl	8006cb2 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80078d0:	2200      	movs	r2, #0
 80078d2:	a905      	add	r1, sp, #20
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7ff fa17 	bl	8006d08 <HAL_RTC_GetDate>
  ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	1aea      	subs	r2, r5, r3
 80078de:	2364      	movs	r3, #100	; 0x64
 80078e0:	fb03 f302 	mul.w	r3, r3, r2
  ans_int32 /= RtcSynchPrediv + 1;
 80078e4:	3501      	adds	r5, #1
 80078e6:	fbb3 f3f5 	udiv	r3, r3, r5
  Msg->Data[3] = (uint8_t)stimestructure.Hours;
 80078ea:	f89d 2000 	ldrb.w	r2, [sp]
 80078ee:	71e2      	strb	r2, [r4, #7]
  Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 80078f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80078f4:	7222      	strb	r2, [r4, #8]
  Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 80078f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80078fa:	7262      	strb	r2, [r4, #9]
  Msg->Data[6] = sub_sec;
 80078fc:	72a3      	strb	r3, [r4, #10]
}
 80078fe:	b006      	add	sp, #24
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	bf00      	nop
 8007904:	200027cc 	.word	0x200027cc

08007908 <Accelero_Sensor_Handler>:
{
 8007908:	b538      	push	{r3, r4, r5, lr}
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800790a:	4b17      	ldr	r3, [pc, #92]	; (8007968 <Accelero_Sensor_Handler+0x60>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f013 0f10 	tst.w	r3, #16
 8007912:	d024      	beq.n	800795e <Accelero_Sensor_Handler+0x56>
 8007914:	4604      	mov	r4, r0
    if (UseOfflineData == 1)
 8007916:	4b15      	ldr	r3, [pc, #84]	; (800796c <Accelero_Sensor_Handler+0x64>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d120      	bne.n	8007960 <Accelero_Sensor_Handler+0x58>
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800791e:	4b14      	ldr	r3, [pc, #80]	; (8007970 <Accelero_Sensor_Handler+0x68>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a14      	ldr	r2, [pc, #80]	; (8007974 <Accelero_Sensor_Handler+0x6c>)
 8007924:	2134      	movs	r1, #52	; 0x34
 8007926:	fb01 2303 	mla	r3, r1, r3, r2
 800792a:	6919      	ldr	r1, [r3, #16]
 800792c:	4a12      	ldr	r2, [pc, #72]	; (8007978 <Accelero_Sensor_Handler+0x70>)
 800792e:	6011      	str	r1, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 8007930:	6959      	ldr	r1, [r3, #20]
 8007932:	6051      	str	r1, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	6093      	str	r3, [r2, #8]
    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 8007938:	4d0f      	ldr	r5, [pc, #60]	; (8007978 <Accelero_Sensor_Handler+0x70>)
 800793a:	2204      	movs	r2, #4
 800793c:	6829      	ldr	r1, [r5, #0]
 800793e:	f104 0017 	add.w	r0, r4, #23
 8007942:	f001 f9ac 	bl	8008c9e <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 8007946:	2204      	movs	r2, #4
 8007948:	6869      	ldr	r1, [r5, #4]
 800794a:	f104 001b 	add.w	r0, r4, #27
 800794e:	f001 f9a6 	bl	8008c9e <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 8007952:	2204      	movs	r2, #4
 8007954:	68a9      	ldr	r1, [r5, #8]
 8007956:	f104 001f 	add.w	r0, r4, #31
 800795a:	f001 f9a0 	bl	8008c9e <Serialize_s32>
}
 800795e:	bd38      	pop	{r3, r4, r5, pc}
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 8007960:	4805      	ldr	r0, [pc, #20]	; (8007978 <Accelero_Sensor_Handler+0x70>)
 8007962:	f001 f865 	bl	8008a30 <BSP_SENSOR_ACC_GetAxes>
 8007966:	e7e7      	b.n	8007938 <Accelero_Sensor_Handler+0x30>
 8007968:	20002320 	.word	0x20002320
 800796c:	2000232c 	.word	0x2000232c
 8007970:	20002310 	.word	0x20002310
 8007974:	200028f8 	.word	0x200028f8
 8007978:	200022d0 	.word	0x200022d0

0800797c <Gyro_Sensor_Handler>:
{
 800797c:	b538      	push	{r3, r4, r5, lr}
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800797e:	4b17      	ldr	r3, [pc, #92]	; (80079dc <Gyro_Sensor_Handler+0x60>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f013 0f20 	tst.w	r3, #32
 8007986:	d024      	beq.n	80079d2 <Gyro_Sensor_Handler+0x56>
 8007988:	4604      	mov	r4, r0
    if (UseOfflineData == 1)
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <Gyro_Sensor_Handler+0x64>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d120      	bne.n	80079d4 <Gyro_Sensor_Handler+0x58>
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <Gyro_Sensor_Handler+0x68>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <Gyro_Sensor_Handler+0x6c>)
 8007998:	2134      	movs	r1, #52	; 0x34
 800799a:	fb01 2303 	mla	r3, r1, r3, r2
 800799e:	69d9      	ldr	r1, [r3, #28]
 80079a0:	4a12      	ldr	r2, [pc, #72]	; (80079ec <Gyro_Sensor_Handler+0x70>)
 80079a2:	6011      	str	r1, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 80079a4:	6a19      	ldr	r1, [r3, #32]
 80079a6:	6051      	str	r1, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	6093      	str	r3, [r2, #8]
    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 80079ac:	4d0f      	ldr	r5, [pc, #60]	; (80079ec <Gyro_Sensor_Handler+0x70>)
 80079ae:	2204      	movs	r2, #4
 80079b0:	6829      	ldr	r1, [r5, #0]
 80079b2:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80079b6:	f001 f972 	bl	8008c9e <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 80079ba:	2204      	movs	r2, #4
 80079bc:	6869      	ldr	r1, [r5, #4]
 80079be:	f104 0027 	add.w	r0, r4, #39	; 0x27
 80079c2:	f001 f96c 	bl	8008c9e <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 80079c6:	2204      	movs	r2, #4
 80079c8:	68a9      	ldr	r1, [r5, #8]
 80079ca:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80079ce:	f001 f966 	bl	8008c9e <Serialize_s32>
}
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <Gyro_Sensor_Handler+0x70>)
 80079d6:	f001 f832 	bl	8008a3e <BSP_SENSOR_GYR_GetAxes>
 80079da:	e7e7      	b.n	80079ac <Gyro_Sensor_Handler+0x30>
 80079dc:	20002320 	.word	0x20002320
 80079e0:	2000232c 	.word	0x2000232c
 80079e4:	20002310 	.word	0x20002310
 80079e8:	200028f8 	.word	0x200028f8
 80079ec:	200022e0 	.word	0x200022e0

080079f0 <Magneto_Sensor_Handler>:
  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 80079f0:	4b47      	ldr	r3, [pc, #284]	; (8007b10 <Magneto_Sensor_Handler+0x120>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079f8:	f000 8089 	beq.w	8007b0e <Magneto_Sensor_Handler+0x11e>
{
 80079fc:	b530      	push	{r4, r5, lr}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	4604      	mov	r4, r0
    if (UseOfflineData == 1)
 8007a02:	4b44      	ldr	r3, [pc, #272]	; (8007b14 <Magneto_Sensor_Handler+0x124>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d121      	bne.n	8007a4e <Magneto_Sensor_Handler+0x5e>
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 8007a0a:	4b43      	ldr	r3, [pc, #268]	; (8007b18 <Magneto_Sensor_Handler+0x128>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a43      	ldr	r2, [pc, #268]	; (8007b1c <Magneto_Sensor_Handler+0x12c>)
 8007a10:	2134      	movs	r1, #52	; 0x34
 8007a12:	fb01 2303 	mla	r3, r1, r3, r2
 8007a16:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007a18:	4a41      	ldr	r2, [pc, #260]	; (8007b20 <Magneto_Sensor_Handler+0x130>)
 8007a1a:	6011      	str	r1, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 8007a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a1e:	6051      	str	r1, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	6093      	str	r3, [r2, #8]
    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 8007a24:	4d3e      	ldr	r5, [pc, #248]	; (8007b20 <Magneto_Sensor_Handler+0x130>)
 8007a26:	2204      	movs	r2, #4
 8007a28:	6829      	ldr	r1, [r5, #0]
 8007a2a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8007a2e:	f001 f936 	bl	8008c9e <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 8007a32:	2204      	movs	r2, #4
 8007a34:	6869      	ldr	r1, [r5, #4]
 8007a36:	f104 0033 	add.w	r0, r4, #51	; 0x33
 8007a3a:	f001 f930 	bl	8008c9e <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 8007a3e:	2204      	movs	r2, #4
 8007a40:	68a9      	ldr	r1, [r5, #8]
 8007a42:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8007a46:	f001 f92a 	bl	8008c9e <Serialize_s32>
}
 8007a4a:	b009      	add	sp, #36	; 0x24
 8007a4c:	bd30      	pop	{r4, r5, pc}
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 8007a4e:	4834      	ldr	r0, [pc, #208]	; (8007b20 <Magneto_Sensor_Handler+0x130>)
 8007a50:	f000 fffc 	bl	8008a4c <BSP_SENSOR_MAG_GetAxes>
      if (MagCalStatus == 0U)
 8007a54:	4b33      	ldr	r3, [pc, #204]	; (8007b24 <Magneto_Sensor_Handler+0x134>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b173      	cbz	r3, 8007a78 <Magneto_Sensor_Handler+0x88>
      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <Magneto_Sensor_Handler+0x130>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	4932      	ldr	r1, [pc, #200]	; (8007b28 <Magneto_Sensor_Handler+0x138>)
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	1a12      	subs	r2, r2, r0
 8007a64:	601a      	str	r2, [r3, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	6848      	ldr	r0, [r1, #4]
 8007a6a:	1a12      	subs	r2, r2, r0
 8007a6c:	605a      	str	r2, [r3, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	6889      	ldr	r1, [r1, #8]
 8007a72:	1a52      	subs	r2, r2, r1
 8007a74:	609a      	str	r2, [r3, #8]
 8007a76:	e7d5      	b.n	8007a24 <Magneto_Sensor_Handler+0x34>
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8007a78:	4b29      	ldr	r3, [pc, #164]	; (8007b20 <Magneto_Sensor_Handler+0x130>)
 8007a7a:	edd3 7a00 	vldr	s15, [r3]
 8007a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a82:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007b2c <Magneto_Sensor_Handler+0x13c>
 8007a86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007a8a:	ed8d 7a04 	vstr	s14, [sp, #16]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8007a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007a9a:	ed8d 7a05 	vstr	s14, [sp, #20]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8007a9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007aaa:	edcd 7a06 	vstr	s15, [sp, #24]
        mag_data_in.time_stamp = (int)TimeStamp;
 8007aae:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <Magneto_Sensor_Handler+0x140>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	9207      	str	r2, [sp, #28]
        TimeStamp += (uint32_t)ALGO_PERIOD;
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	320a      	adds	r2, #10
 8007ab8:	601a      	str	r2, [r3, #0]
        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8007aba:	4669      	mov	r1, sp
 8007abc:	a804      	add	r0, sp, #16
 8007abe:	f001 f873 	bl	8008ba8 <MotionFX_manager_MagCal_run>
        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8007ac2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d1c7      	bne.n	8007a5a <Magneto_Sensor_Handler+0x6a>
          MagCalStatus = 1;
 8007aca:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <Magneto_Sensor_Handler+0x134>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	701a      	strb	r2, [r3, #0]
          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8007ad0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007b34 <Magneto_Sensor_Handler+0x144>
 8007ad4:	ed9d 7a00 	vldr	s14, [sp]
 8007ad8:	ee27 7a26 	vmul.f32	s14, s14, s13
          MagOffset.x = (int32_t)ans_float;
 8007adc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007ae0:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <Magneto_Sensor_Handler+0x138>)
 8007ae2:	ed83 7a00 	vstr	s14, [r3]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8007ae6:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007aea:	ee27 7a26 	vmul.f32	s14, s14, s13
          MagOffset.y = (int32_t)ans_float;
 8007aee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007af2:	ed83 7a01 	vstr	s14, [r3, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8007af6:	eddd 7a02 	vldr	s15, [sp, #8]
 8007afa:	ee67 7aa6 	vmul.f32	s15, s15, s13
          MagOffset.z = (int32_t)ans_float;
 8007afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b02:	edc3 7a02 	vstr	s15, [r3, #8]
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8007b06:	200a      	movs	r0, #10
 8007b08:	f001 f85b 	bl	8008bc2 <MotionFX_manager_MagCal_stop>
 8007b0c:	e7a5      	b.n	8007a5a <Magneto_Sensor_Handler+0x6a>
 8007b0e:	4770      	bx	lr
 8007b10:	20002320 	.word	0x20002320
 8007b14:	2000232c 	.word	0x2000232c
 8007b18:	20002310 	.word	0x20002310
 8007b1c:	200028f8 	.word	0x200028f8
 8007b20:	20002300 	.word	0x20002300
 8007b24:	200022f1 	.word	0x200022f1
 8007b28:	200022f4 	.word	0x200022f4
 8007b2c:	3b03126f 	.word	0x3b03126f
 8007b30:	20002328 	.word	0x20002328
 8007b34:	43fa0000 	.word	0x43fa0000

08007b38 <Humidity_Sensor_Handler>:
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <Humidity_Sensor_Handler+0x3c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f013 0f04 	tst.w	r3, #4
 8007b40:	d017      	beq.n	8007b72 <Humidity_Sensor_Handler+0x3a>
{
 8007b42:	b510      	push	{r4, lr}
 8007b44:	4604      	mov	r4, r0
    if (UseOfflineData == 1)
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <Humidity_Sensor_Handler+0x40>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d10d      	bne.n	8007b6a <Humidity_Sensor_Handler+0x32>
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <Humidity_Sensor_Handler+0x44>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a0b      	ldr	r2, [pc, #44]	; (8007b80 <Humidity_Sensor_Handler+0x48>)
 8007b54:	2134      	movs	r1, #52	; 0x34
 8007b56:	fb01 2303 	mla	r3, r1, r3, r2
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <Humidity_Sensor_Handler+0x4c>)
 8007b5e:	601a      	str	r2, [r3, #0]
    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 8007b60:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <Humidity_Sensor_Handler+0x4c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8c4 3013 	str.w	r3, [r4, #19]
}
 8007b68:	bd10      	pop	{r4, pc}
      BSP_SENSOR_HUM_GetValue(&HumValue);
 8007b6a:	4806      	ldr	r0, [pc, #24]	; (8007b84 <Humidity_Sensor_Handler+0x4c>)
 8007b6c:	f000 ff83 	bl	8008a76 <BSP_SENSOR_HUM_GetValue>
 8007b70:	e7f6      	b.n	8007b60 <Humidity_Sensor_Handler+0x28>
 8007b72:	4770      	bx	lr
 8007b74:	20002320 	.word	0x20002320
 8007b78:	2000232c 	.word	0x2000232c
 8007b7c:	20002310 	.word	0x20002310
 8007b80:	200028f8 	.word	0x200028f8
 8007b84:	200022ec 	.word	0x200022ec

08007b88 <Temperature_Sensor_Handler>:
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <Temperature_Sensor_Handler+0x3c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f013 0f02 	tst.w	r3, #2
 8007b90:	d017      	beq.n	8007bc2 <Temperature_Sensor_Handler+0x3a>
{
 8007b92:	b510      	push	{r4, lr}
 8007b94:	4604      	mov	r4, r0
    if (UseOfflineData == 1)
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <Temperature_Sensor_Handler+0x40>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d10d      	bne.n	8007bba <Temperature_Sensor_Handler+0x32>
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <Temperature_Sensor_Handler+0x44>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a0b      	ldr	r2, [pc, #44]	; (8007bd0 <Temperature_Sensor_Handler+0x48>)
 8007ba4:	2134      	movs	r1, #52	; 0x34
 8007ba6:	fb01 2303 	mla	r3, r1, r3, r2
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <Temperature_Sensor_Handler+0x4c>)
 8007bae:	601a      	str	r2, [r3, #0]
    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 8007bb0:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <Temperature_Sensor_Handler+0x4c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8c4 300f 	str.w	r3, [r4, #15]
}
 8007bb8:	bd10      	pop	{r4, pc}
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 8007bba:	4806      	ldr	r0, [pc, #24]	; (8007bd4 <Temperature_Sensor_Handler+0x4c>)
 8007bbc:	f000 ff54 	bl	8008a68 <BSP_SENSOR_TEMP_GetValue>
 8007bc0:	e7f6      	b.n	8007bb0 <Temperature_Sensor_Handler+0x28>
 8007bc2:	4770      	bx	lr
 8007bc4:	20002320 	.word	0x20002320
 8007bc8:	2000232c 	.word	0x2000232c
 8007bcc:	20002310 	.word	0x20002310
 8007bd0:	200028f8 	.word	0x200028f8
 8007bd4:	20002324 	.word	0x20002324

08007bd8 <Pressure_Sensor_Handler>:
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <Pressure_Sensor_Handler+0x3c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f013 0f01 	tst.w	r3, #1
 8007be0:	d017      	beq.n	8007c12 <Pressure_Sensor_Handler+0x3a>
{
 8007be2:	b510      	push	{r4, lr}
 8007be4:	4604      	mov	r4, r0
    if (UseOfflineData == 1)
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <Pressure_Sensor_Handler+0x40>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10d      	bne.n	8007c0a <Pressure_Sensor_Handler+0x32>
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 8007bee:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <Pressure_Sensor_Handler+0x44>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a0b      	ldr	r2, [pc, #44]	; (8007c20 <Pressure_Sensor_Handler+0x48>)
 8007bf4:	2134      	movs	r1, #52	; 0x34
 8007bf6:	fb01 2303 	mla	r3, r1, r3, r2
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <Pressure_Sensor_Handler+0x4c>)
 8007bfe:	601a      	str	r2, [r3, #0]
    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <Pressure_Sensor_Handler+0x4c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8c4 300b 	str.w	r3, [r4, #11]
}
 8007c08:	bd10      	pop	{r4, pc}
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 8007c0a:	4806      	ldr	r0, [pc, #24]	; (8007c24 <Pressure_Sensor_Handler+0x4c>)
 8007c0c:	f000 ff25 	bl	8008a5a <BSP_SENSOR_PRESS_GetValue>
 8007c10:	e7f6      	b.n	8007c00 <Pressure_Sensor_Handler+0x28>
 8007c12:	4770      	bx	lr
 8007c14:	20002320 	.word	0x20002320
 8007c18:	2000232c 	.word	0x2000232c
 8007c1c:	20002310 	.word	0x20002310
 8007c20:	200028f8 	.word	0x200028f8
 8007c24:	20002318 	.word	0x20002318

08007c28 <FX_Data_Handler>:
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8007c28:	4b66      	ldr	r3, [pc, #408]	; (8007dc4 <FX_Data_Handler+0x19c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f013 0f10 	tst.w	r3, #16
 8007c30:	d009      	beq.n	8007c46 <FX_Data_Handler+0x1e>
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8007c32:	4b64      	ldr	r3, [pc, #400]	; (8007dc4 <FX_Data_Handler+0x19c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f013 0f20 	tst.w	r3, #32
 8007c3a:	d004      	beq.n	8007c46 <FX_Data_Handler+0x1e>
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8007c3c:	4b61      	ldr	r3, [pc, #388]	; (8007dc4 <FX_Data_Handler+0x19c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c44:	d100      	bne.n	8007c48 <FX_Data_Handler+0x20>
 8007c46:	4770      	bx	lr
{
 8007c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c4a:	b0a9      	sub	sp, #164	; 0xa4
 8007c4c:	4604      	mov	r4, r0
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8007c4e:	4b5e      	ldr	r3, [pc, #376]	; (8007dc8 <FX_Data_Handler+0x1a0>)
 8007c50:	edd3 7a00 	vldr	s15, [r3]
 8007c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c58:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8007dcc <FX_Data_Handler+0x1a4>
 8007c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c60:	ed8d 7a25 	vstr	s14, [sp, #148]	; 0x94
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8007c64:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c70:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8007c74:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c80:	ed8d 7a27 	vstr	s14, [sp, #156]	; 0x9c
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8007c84:	4b52      	ldr	r3, [pc, #328]	; (8007dd0 <FX_Data_Handler+0x1a8>)
 8007c86:	ed93 7a00 	vldr	s14, [r3]
 8007c8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c92:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8007c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ca2:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8007ca6:	ed93 7a02 	vldr	s14, [r3, #8]
 8007caa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8007cb6:	4b47      	ldr	r3, [pc, #284]	; (8007dd4 <FX_Data_Handler+0x1ac>)
 8007cb8:	edd3 7a00 	vldr	s15, [r3]
 8007cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cc0:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007dd8 <FX_Data_Handler+0x1b0>
 8007cc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007cc8:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8007ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007cd8:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8007cdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8007ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ce4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ce8:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
        BSP_LED_On(LED2);
 8007cec:	2000      	movs	r0, #0
 8007cee:	f7fc feab 	bl	8004a48 <BSP_LED_On>
        DWT_Start();
 8007cf2:	f7ff fd2b 	bl	800774c <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 8007cf6:	4a39      	ldr	r2, [pc, #228]	; (8007ddc <FX_Data_Handler+0x1b4>)
 8007cf8:	a901      	add	r1, sp, #4
 8007cfa:	a81f      	add	r0, sp, #124	; 0x7c
 8007cfc:	f000 ff1a 	bl	8008b34 <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 8007d00:	f7ff fd2e 	bl	8007760 <DWT_Stop>
 8007d04:	4607      	mov	r7, r0
        BSP_LED_Off(LED2);
 8007d06:	2000      	movs	r0, #0
 8007d08:	f7fc fea8 	bl	8004a5c <BSP_LED_Off>
        if (Enabled6X == 1U)
 8007d0c:	4b34      	ldr	r3, [pc, #208]	; (8007de0 <FX_Data_Handler+0x1b8>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d02e      	beq.n	8007d72 <FX_Data_Handler+0x14a>
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_9X, 4U * sizeof(float));
 8007d14:	f104 063b 	add.w	r6, r4, #59	; 0x3b
 8007d18:	ad04      	add	r5, sp, #16
 8007d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d1c:	f8c4 003b 	str.w	r0, [r4, #59]	; 0x3b
 8007d20:	6071      	str	r1, [r6, #4]
 8007d22:	60b2      	str	r2, [r6, #8]
 8007d24:	60f3      	str	r3, [r6, #12]
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_9X, 3U * sizeof(float));
 8007d26:	f104 054b 	add.w	r5, r4, #75	; 0x4b
 8007d2a:	ab01      	add	r3, sp, #4
 8007d2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d2e:	f8c4 004b 	str.w	r0, [r4, #75]	; 0x4b
 8007d32:	6069      	str	r1, [r5, #4]
 8007d34:	60aa      	str	r2, [r5, #8]
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_9X, 3U * sizeof(float));
 8007d36:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8007d3a:	ab08      	add	r3, sp, #32
 8007d3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d3e:	f8c4 0057 	str.w	r0, [r4, #87]	; 0x57
 8007d42:	6069      	str	r1, [r5, #4]
 8007d44:	60aa      	str	r2, [r5, #8]
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 8007d46:	f104 0563 	add.w	r5, r4, #99	; 0x63
 8007d4a:	ab0b      	add	r3, sp, #44	; 0x2c
 8007d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d4e:	f8c4 0063 	str.w	r0, [r4, #99]	; 0x63
 8007d52:	6069      	str	r1, [r5, #4]
 8007d54:	60aa      	str	r2, [r5, #8]
          (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading_9X), sizeof(float));
 8007d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d58:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_9X), sizeof(float));
 8007d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d5e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 8007d62:	2204      	movs	r2, #4
 8007d64:	4639      	mov	r1, r7
 8007d66:	f104 0077 	add.w	r0, r4, #119	; 0x77
 8007d6a:	f000 ff98 	bl	8008c9e <Serialize_s32>
}
 8007d6e:	b029      	add	sp, #164	; 0xa4
 8007d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_6X, 4U * sizeof(float));
 8007d72:	f104 063b 	add.w	r6, r4, #59	; 0x3b
 8007d76:	ad13      	add	r5, sp, #76	; 0x4c
 8007d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d7a:	f8c4 003b 	str.w	r0, [r4, #59]	; 0x3b
 8007d7e:	6071      	str	r1, [r6, #4]
 8007d80:	60b2      	str	r2, [r6, #8]
 8007d82:	60f3      	str	r3, [r6, #12]
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_6X, 3U * sizeof(float));
 8007d84:	f104 054b 	add.w	r5, r4, #75	; 0x4b
 8007d88:	ab10      	add	r3, sp, #64	; 0x40
 8007d8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d8c:	f8c4 004b 	str.w	r0, [r4, #75]	; 0x4b
 8007d90:	6069      	str	r1, [r5, #4]
 8007d92:	60aa      	str	r2, [r5, #8]
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_6X, 3U * sizeof(float));
 8007d94:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8007d98:	ab17      	add	r3, sp, #92	; 0x5c
 8007d9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d9c:	f8c4 0057 	str.w	r0, [r4, #87]	; 0x57
 8007da0:	6069      	str	r1, [r5, #4]
 8007da2:	60aa      	str	r2, [r5, #8]
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 8007da4:	f104 0563 	add.w	r5, r4, #99	; 0x63
 8007da8:	ab1a      	add	r3, sp, #104	; 0x68
 8007daa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007dac:	f8c4 0063 	str.w	r0, [r4, #99]	; 0x63
 8007db0:	6069      	str	r1, [r5, #4]
 8007db2:	60aa      	str	r2, [r5, #8]
          (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading_6X), sizeof(float));
 8007db4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007db6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_6X), sizeof(float));
 8007dba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dbc:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
 8007dc0:	e7cf      	b.n	8007d62 <FX_Data_Handler+0x13a>
 8007dc2:	bf00      	nop
 8007dc4:	20002320 	.word	0x20002320
 8007dc8:	200022e0 	.word	0x200022e0
 8007dcc:	3a83126f 	.word	0x3a83126f
 8007dd0:	200022d0 	.word	0x200022d0
 8007dd4:	20002300 	.word	0x20002300
 8007dd8:	3b03126f 	.word	0x3b03126f
 8007ddc:	3c23d70a 	.word	0x3c23d70a
 8007de0:	200022dd 	.word	0x200022dd

08007de4 <MX_DataLogFusion_Process>:
{
 8007de4:	b510      	push	{r4, lr}
  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8007de6:	4834      	ldr	r0, [pc, #208]	; (8007eb8 <MX_DataLogFusion_Process+0xd4>)
 8007de8:	f000 f9fc 	bl	80081e4 <UART_ReceivedMSG>
 8007dec:	2801      	cmp	r0, #1
 8007dee:	d00a      	beq.n	8007e06 <MX_DataLogFusion_Process+0x22>
  if (MagCalRequest == 1U)
 8007df0:	4b32      	ldr	r3, [pc, #200]	; (8007ebc <MX_DataLogFusion_Process+0xd8>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d00d      	beq.n	8007e16 <MX_DataLogFusion_Process+0x32>
  if (SensorReadRequest == 1U)
 8007dfa:	4b31      	ldr	r3, [pc, #196]	; (8007ec0 <MX_DataLogFusion_Process+0xdc>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d015      	beq.n	8007e30 <MX_DataLogFusion_Process+0x4c>
}
 8007e04:	bd10      	pop	{r4, pc}
    if (msg_cmd.Data[0] == DEV_ADDR)
 8007e06:	4b2c      	ldr	r3, [pc, #176]	; (8007eb8 <MX_DataLogFusion_Process+0xd4>)
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	2b32      	cmp	r3, #50	; 0x32
 8007e0c:	d1f0      	bne.n	8007df0 <MX_DataLogFusion_Process+0xc>
      (void)HandleMSG((TMsg *)&msg_cmd);
 8007e0e:	482a      	ldr	r0, [pc, #168]	; (8007eb8 <MX_DataLogFusion_Process+0xd4>)
 8007e10:	f000 faf2 	bl	80083f8 <HandleMSG>
 8007e14:	e7ec      	b.n	8007df0 <MX_DataLogFusion_Process+0xc>
    MagCalRequest = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	4a28      	ldr	r2, [pc, #160]	; (8007ebc <MX_DataLogFusion_Process+0xd8>)
 8007e1a:	7013      	strb	r3, [r2, #0]
    MagCalStatus = 0;
 8007e1c:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <MX_DataLogFusion_Process+0xe0>)
 8007e1e:	7013      	strb	r3, [r2, #0]
    MagOffset.x = 0;
 8007e20:	4a29      	ldr	r2, [pc, #164]	; (8007ec8 <MX_DataLogFusion_Process+0xe4>)
 8007e22:	6013      	str	r3, [r2, #0]
    MagOffset.y = 0;
 8007e24:	6053      	str	r3, [r2, #4]
    MagOffset.z = 0;
 8007e26:	6093      	str	r3, [r2, #8]
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8007e28:	200a      	movs	r0, #10
 8007e2a:	f000 fec5 	bl	8008bb8 <MotionFX_manager_MagCal_start>
 8007e2e:	e7e4      	b.n	8007dfa <MX_DataLogFusion_Process+0x16>
    SensorReadRequest = 0;
 8007e30:	4b23      	ldr	r3, [pc, #140]	; (8007ec0 <MX_DataLogFusion_Process+0xdc>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
    RTC_Handler(&msg_dat);
 8007e36:	4c25      	ldr	r4, [pc, #148]	; (8007ecc <MX_DataLogFusion_Process+0xe8>)
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff fd3f 	bl	80078bc <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7ff fd62 	bl	8007908 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff fd99 	bl	800797c <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fdd0 	bl	80079f0 <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7ff fe71 	bl	8007b38 <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7ff fe96 	bl	8007b88 <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f7ff febb 	bl	8007bd8 <Pressure_Sensor_Handler>
    FX_Data_Handler(&msg_dat);
 8007e62:	4620      	mov	r0, r4
 8007e64:	f7ff fee0 	bl	8007c28 <FX_Data_Handler>
    INIT_STREAMING_HEADER(&msg_dat);
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fa61 	bl	8008330 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 8007e6e:	2377      	movs	r3, #119	; 0x77
 8007e70:	6023      	str	r3, [r4, #0]
    if (UseOfflineData == 1U)
 8007e72:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <MX_DataLogFusion_Process+0xec>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d003      	beq.n	8007e82 <MX_DataLogFusion_Process+0x9e>
    UART_SendMsg(&msg_dat);
 8007e7a:	4814      	ldr	r0, [pc, #80]	; (8007ecc <MX_DataLogFusion_Process+0xe8>)
 8007e7c:	f000 fa2a 	bl	80082d4 <UART_SendMsg>
}
 8007e80:	e7c0      	b.n	8007e04 <MX_DataLogFusion_Process+0x20>
      OfflineDataCount--;
 8007e82:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <MX_DataLogFusion_Process+0xf0>)
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	db10      	blt.n	8007eb0 <MX_DataLogFusion_Process+0xcc>
      OfflineDataReadIndex++;
 8007e8e:	4a12      	ldr	r2, [pc, #72]	; (8007ed8 <MX_DataLogFusion_Process+0xf4>)
 8007e90:	6813      	ldr	r3, [r2, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 8007e96:	2b07      	cmp	r3, #7
 8007e98:	dd02      	ble.n	8007ea0 <MX_DataLogFusion_Process+0xbc>
        OfflineDataReadIndex = 0;
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]
      if (OfflineDataCount > 0)
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <MX_DataLogFusion_Process+0xf0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dde8      	ble.n	8007e7a <MX_DataLogFusion_Process+0x96>
        SensorReadRequest = 1;
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <MX_DataLogFusion_Process+0xdc>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e7e4      	b.n	8007e7a <MX_DataLogFusion_Process+0x96>
        OfflineDataCount = 0;
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e7ea      	b.n	8007e8e <MX_DataLogFusion_Process+0xaa>
 8007eb8:	20002330 	.word	0x20002330
 8007ebc:	200022f0 	.word	0x200022f0
 8007ec0:	2000231c 	.word	0x2000231c
 8007ec4:	200022f1 	.word	0x200022f1
 8007ec8:	200022f4 	.word	0x200022f4
 8007ecc:	20002434 	.word	0x20002434
 8007ed0:	2000232c 	.word	0x2000232c
 8007ed4:	2000230c 	.word	0x2000230c
 8007ed8:	20002310 	.word	0x20002310

08007edc <MX_MEMS_Init>:
{
 8007edc:	b508      	push	{r3, lr}
  MX_DataLogFusion_Init();
 8007ede:	f7ff fc93 	bl	8007808 <MX_DataLogFusion_Init>
}
 8007ee2:	bd08      	pop	{r3, pc}

08007ee4 <MX_MEMS_Process>:
{
 8007ee4:	b508      	push	{r3, lr}
  MX_DataLogFusion_Process();
 8007ee6:	f7ff ff7d 	bl	8007de4 <MX_DataLogFusion_Process>
}
 8007eea:	bd08      	pop	{r3, pc}

08007eec <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8007eec:	6802      	ldr	r2, [r0, #0]
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d000      	beq.n	8007ef8 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8007ef6:	4770      	bx	lr
    SensorReadRequest = 1;
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8007efa:	2201      	movs	r2, #1
 8007efc:	701a      	strb	r2, [r3, #0]
}
 8007efe:	e7fa      	b.n	8007ef6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8007f00:	2000278c 	.word	0x2000278c
 8007f04:	2000231c 	.word	0x2000231c

08007f08 <Get_DMA_Flag_Status>:
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8007f08:	6803      	ldr	r3, [r0, #0]
 8007f0a:	4ab0      	ldr	r2, [pc, #704]	; (80081cc <Get_DMA_Flag_Status+0x2c4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d955      	bls.n	8007fbc <Get_DMA_Flag_Status+0xb4>
 8007f10:	3a58      	subs	r2, #88	; 0x58
 8007f12:	6850      	ldr	r0, [r2, #4]
 8007f14:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d031      	beq.n	8007f80 <Get_DMA_Flag_Status+0x78>
 8007f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d030      	beq.n	8007f86 <Get_DMA_Flag_Status+0x7e>
 8007f24:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d02e      	beq.n	8007f8a <Get_DMA_Flag_Status+0x82>
 8007f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d02c      	beq.n	8007f8e <Get_DMA_Flag_Status+0x86>
 8007f34:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d02a      	beq.n	8007f92 <Get_DMA_Flag_Status+0x8a>
 8007f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d029      	beq.n	8007f98 <Get_DMA_Flag_Status+0x90>
 8007f44:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d028      	beq.n	8007f9e <Get_DMA_Flag_Status+0x96>
 8007f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d027      	beq.n	8007fa4 <Get_DMA_Flag_Status+0x9c>
 8007f54:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d026      	beq.n	8007faa <Get_DMA_Flag_Status+0xa2>
 8007f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d025      	beq.n	8007fb0 <Get_DMA_Flag_Status+0xa8>
 8007f64:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d024      	beq.n	8007fb6 <Get_DMA_Flag_Status+0xae>
 8007f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d002      	beq.n	8007f7a <Get_DMA_Flag_Status+0x72>
 8007f74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f78:	e003      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f7e:	e000      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f80:	2308      	movs	r3, #8
 8007f82:	4018      	ands	r0, r3
 8007f84:	4770      	bx	lr
 8007f86:	2308      	movs	r3, #8
 8007f88:	e7fb      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	e7f9      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	e7f7      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f96:	e7f4      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f9c:	e7f1      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa2:	e7ee      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa8:	e7eb      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007faa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fae:	e7e8      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007fb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fb4:	e7e5      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007fb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fba:	e7e2      	b.n	8007f82 <Get_DMA_Flag_Status+0x7a>
 8007fbc:	4a84      	ldr	r2, [pc, #528]	; (80081d0 <Get_DMA_Flag_Status+0x2c8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d956      	bls.n	8008070 <Get_DMA_Flag_Status+0x168>
 8007fc2:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8007fc6:	6810      	ldr	r0, [r2, #0]
 8007fc8:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d031      	beq.n	8008034 <Get_DMA_Flag_Status+0x12c>
 8007fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d030      	beq.n	800803a <Get_DMA_Flag_Status+0x132>
 8007fd8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d02e      	beq.n	800803e <Get_DMA_Flag_Status+0x136>
 8007fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d02c      	beq.n	8008042 <Get_DMA_Flag_Status+0x13a>
 8007fe8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d02a      	beq.n	8008046 <Get_DMA_Flag_Status+0x13e>
 8007ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d029      	beq.n	800804c <Get_DMA_Flag_Status+0x144>
 8007ff8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d028      	beq.n	8008052 <Get_DMA_Flag_Status+0x14a>
 8008000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008004:	4293      	cmp	r3, r2
 8008006:	d027      	beq.n	8008058 <Get_DMA_Flag_Status+0x150>
 8008008:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800800c:	4293      	cmp	r3, r2
 800800e:	d026      	beq.n	800805e <Get_DMA_Flag_Status+0x156>
 8008010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008014:	4293      	cmp	r3, r2
 8008016:	d025      	beq.n	8008064 <Get_DMA_Flag_Status+0x15c>
 8008018:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800801c:	4293      	cmp	r3, r2
 800801e:	d024      	beq.n	800806a <Get_DMA_Flag_Status+0x162>
 8008020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008024:	4293      	cmp	r3, r2
 8008026:	d002      	beq.n	800802e <Get_DMA_Flag_Status+0x126>
 8008028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800802c:	e003      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 800802e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008032:	e000      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008034:	2308      	movs	r3, #8
 8008036:	4018      	ands	r0, r3
 8008038:	4770      	bx	lr
 800803a:	2308      	movs	r3, #8
 800803c:	e7fb      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 800803e:	2308      	movs	r3, #8
 8008040:	e7f9      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008042:	2308      	movs	r3, #8
 8008044:	e7f7      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804a:	e7f4      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 800804c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008050:	e7f1      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008056:	e7ee      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805c:	e7eb      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 800805e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008062:	e7e8      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008064:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008068:	e7e5      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 800806a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800806e:	e7e2      	b.n	8008036 <Get_DMA_Flag_Status+0x12e>
 8008070:	4a58      	ldr	r2, [pc, #352]	; (80081d4 <Get_DMA_Flag_Status+0x2cc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d954      	bls.n	8008120 <Get_DMA_Flag_Status+0x218>
 8008076:	3a58      	subs	r2, #88	; 0x58
 8008078:	6850      	ldr	r0, [r2, #4]
 800807a:	3210      	adds	r2, #16
 800807c:	4293      	cmp	r3, r2
 800807e:	d031      	beq.n	80080e4 <Get_DMA_Flag_Status+0x1dc>
 8008080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008084:	4293      	cmp	r3, r2
 8008086:	d030      	beq.n	80080ea <Get_DMA_Flag_Status+0x1e2>
 8008088:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800808c:	4293      	cmp	r3, r2
 800808e:	d02e      	beq.n	80080ee <Get_DMA_Flag_Status+0x1e6>
 8008090:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008094:	4293      	cmp	r3, r2
 8008096:	d02c      	beq.n	80080f2 <Get_DMA_Flag_Status+0x1ea>
 8008098:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800809c:	4293      	cmp	r3, r2
 800809e:	d02a      	beq.n	80080f6 <Get_DMA_Flag_Status+0x1ee>
 80080a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d029      	beq.n	80080fc <Get_DMA_Flag_Status+0x1f4>
 80080a8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d028      	beq.n	8008102 <Get_DMA_Flag_Status+0x1fa>
 80080b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d027      	beq.n	8008108 <Get_DMA_Flag_Status+0x200>
 80080b8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80080bc:	4293      	cmp	r3, r2
 80080be:	d026      	beq.n	800810e <Get_DMA_Flag_Status+0x206>
 80080c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d025      	beq.n	8008114 <Get_DMA_Flag_Status+0x20c>
 80080c8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d024      	beq.n	800811a <Get_DMA_Flag_Status+0x212>
 80080d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d002      	beq.n	80080de <Get_DMA_Flag_Status+0x1d6>
 80080d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080dc:	e003      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 80080de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80080e2:	e000      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 80080e4:	2308      	movs	r3, #8
 80080e6:	4018      	ands	r0, r3
 80080e8:	4770      	bx	lr
 80080ea:	2308      	movs	r3, #8
 80080ec:	e7fb      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 80080ee:	2308      	movs	r3, #8
 80080f0:	e7f9      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 80080f2:	2308      	movs	r3, #8
 80080f4:	e7f7      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 80080f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fa:	e7f4      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 80080fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008100:	e7f1      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 8008102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008106:	e7ee      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 8008108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810c:	e7eb      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 800810e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008112:	e7e8      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 8008114:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008118:	e7e5      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 800811a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800811e:	e7e2      	b.n	80080e6 <Get_DMA_Flag_Status+0x1de>
 8008120:	4a2d      	ldr	r2, [pc, #180]	; (80081d8 <Get_DMA_Flag_Status+0x2d0>)
 8008122:	6810      	ldr	r0, [r2, #0]
 8008124:	3210      	adds	r2, #16
 8008126:	4293      	cmp	r3, r2
 8008128:	d031      	beq.n	800818e <Get_DMA_Flag_Status+0x286>
 800812a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800812e:	4293      	cmp	r3, r2
 8008130:	d030      	beq.n	8008194 <Get_DMA_Flag_Status+0x28c>
 8008132:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008136:	4293      	cmp	r3, r2
 8008138:	d02e      	beq.n	8008198 <Get_DMA_Flag_Status+0x290>
 800813a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800813e:	4293      	cmp	r3, r2
 8008140:	d02c      	beq.n	800819c <Get_DMA_Flag_Status+0x294>
 8008142:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008146:	4293      	cmp	r3, r2
 8008148:	d02a      	beq.n	80081a0 <Get_DMA_Flag_Status+0x298>
 800814a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800814e:	4293      	cmp	r3, r2
 8008150:	d029      	beq.n	80081a6 <Get_DMA_Flag_Status+0x29e>
 8008152:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008156:	4293      	cmp	r3, r2
 8008158:	d028      	beq.n	80081ac <Get_DMA_Flag_Status+0x2a4>
 800815a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800815e:	4293      	cmp	r3, r2
 8008160:	d027      	beq.n	80081b2 <Get_DMA_Flag_Status+0x2aa>
 8008162:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8008166:	4293      	cmp	r3, r2
 8008168:	d026      	beq.n	80081b8 <Get_DMA_Flag_Status+0x2b0>
 800816a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800816e:	4293      	cmp	r3, r2
 8008170:	d025      	beq.n	80081be <Get_DMA_Flag_Status+0x2b6>
 8008172:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8008176:	4293      	cmp	r3, r2
 8008178:	d024      	beq.n	80081c4 <Get_DMA_Flag_Status+0x2bc>
 800817a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800817e:	4293      	cmp	r3, r2
 8008180:	d002      	beq.n	8008188 <Get_DMA_Flag_Status+0x280>
 8008182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008186:	e003      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 8008188:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800818c:	e000      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 800818e:	2308      	movs	r3, #8
 8008190:	4018      	ands	r0, r3
}
 8008192:	4770      	bx	lr
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8008194:	2308      	movs	r3, #8
 8008196:	e7fb      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 8008198:	2308      	movs	r3, #8
 800819a:	e7f9      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 800819c:	2308      	movs	r3, #8
 800819e:	e7f7      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a4:	e7f4      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081aa:	e7f1      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b0:	e7ee      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b6:	e7eb      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80081bc:	e7e8      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80081c2:	e7e5      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80081c8:	e7e2      	b.n	8008190 <Get_DMA_Flag_Status+0x288>
 80081ca:	bf00      	nop
 80081cc:	40026458 	.word	0x40026458
 80081d0:	400260b8 	.word	0x400260b8
 80081d4:	40026058 	.word	0x40026058
 80081d8:	40026000 	.word	0x40026000

080081dc <Get_DMA_Counter>:
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 80081dc:	6803      	ldr	r3, [r0, #0]
 80081de:	6858      	ldr	r0, [r3, #4]
}
 80081e0:	4770      	bx	lr
	...

080081e4 <UART_ReceivedMSG>:
{
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4606      	mov	r6, r0
  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 80081ea:	4b37      	ldr	r3, [pc, #220]	; (80082c8 <UART_ReceivedMSG+0xe4>)
 80081ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80081ee:	f7ff fe8b 	bl	8007f08 <Get_DMA_Flag_Status>
 80081f2:	b118      	cbz	r0, 80081fc <UART_ReceivedMSG+0x18>
  return 0;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 80081fc:	4b32      	ldr	r3, [pc, #200]	; (80082c8 <UART_ReceivedMSG+0xe4>)
 80081fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008200:	f7ff ffec 	bl	80081dc <Get_DMA_Counter>
 8008204:	b280      	uxth	r0, r0
 8008206:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 800820a:	b280      	uxth	r0, r0
    if (dma_counter >= UartEngine.StartOfMsg)
 800820c:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <UART_ReceivedMSG+0xe8>)
 800820e:	889d      	ldrh	r5, [r3, #4]
 8008210:	4285      	cmp	r5, r0
 8008212:	d804      	bhi.n	800821e <UART_ReceivedMSG+0x3a>
      length = dma_counter - UartEngine.StartOfMsg;
 8008214:	1b41      	subs	r1, r0, r5
 8008216:	b289      	uxth	r1, r1
    j = UartEngine.StartOfMsg;
 8008218:	462b      	mov	r3, r5
    for (k = 0; k < length; k++)
 800821a:	2400      	movs	r4, #0
 800821c:	e009      	b.n	8008232 <UART_ReceivedMSG+0x4e>
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800821e:	1b41      	subs	r1, r0, r5
 8008220:	b289      	uxth	r1, r1
 8008222:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8008226:	b289      	uxth	r1, r1
 8008228:	e7f6      	b.n	8008218 <UART_ReceivedMSG+0x34>
      if (data == (uint8_t)TMsg_EOF)
 800822a:	2af0      	cmp	r2, #240	; 0xf0
 800822c:	d016      	beq.n	800825c <UART_ReceivedMSG+0x78>
    for (k = 0; k < length; k++)
 800822e:	3401      	adds	r4, #1
 8008230:	b2a4      	uxth	r4, r4
 8008232:	428c      	cmp	r4, r1
 8008234:	d23f      	bcs.n	80082b6 <UART_ReceivedMSG+0xd2>
      data = UartRxBuffer[j];
 8008236:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <UART_ReceivedMSG+0xec>)
 8008238:	5cd2      	ldrb	r2, [r2, r3]
 800823a:	b2d2      	uxtb	r2, r2
      j++;
 800823c:	3301      	adds	r3, #1
 800823e:	b29b      	uxth	r3, r3
      if (j >= (uint16_t)UART_RxBufferSize)
 8008240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008244:	d3f1      	bcc.n	800822a <UART_ReceivedMSG+0x46>
        j = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	e7ef      	b.n	800822a <UART_ReceivedMSG+0x46>
            UartEngine.StartOfMsg = j;
 800824a:	4b20      	ldr	r3, [pc, #128]	; (80082cc <UART_ReceivedMSG+0xe8>)
 800824c:	809d      	strh	r5, [r3, #4]
            return 0;
 800824e:	2300      	movs	r3, #0
 8008250:	e7d1      	b.n	80081f6 <UART_ReceivedMSG+0x12>
            UartEngine.StartOfMsg = j2;
 8008252:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <UART_ReceivedMSG+0xe8>)
 8008254:	f8a3 8004 	strh.w	r8, [r3, #4]
            return 0;
 8008258:	2300      	movs	r3, #0
 800825a:	e7cc      	b.n	80081f6 <UART_ReceivedMSG+0x12>
  uint16_t source = 0;
 800825c:	2700      	movs	r7, #0
        for (i = 0; i < k; i += inc)
 800825e:	46b9      	mov	r9, r7
 8008260:	45a1      	cmp	r9, r4
 8008262:	d21a      	bcs.n	800829a <UART_ReceivedMSG+0xb6>
          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8008264:	f105 0801 	add.w	r8, r5, #1
 8008268:	f3c8 0808 	ubfx	r8, r8, #0, #9
          if (source >= TMsg_MaxLen)
 800826c:	2fff      	cmp	r7, #255	; 0xff
 800826e:	d8ec      	bhi.n	800824a <UART_ReceivedMSG+0x66>
          Source0 = UartRxBuffer[j];
 8008270:	4b17      	ldr	r3, [pc, #92]	; (80082d0 <UART_ReceivedMSG+0xec>)
 8008272:	5d58      	ldrb	r0, [r3, r5]
          Source1 = UartRxBuffer[j2];
 8008274:	f813 1008 	ldrb.w	r1, [r3, r8]
          Dest    = &Msg->Data[source];
 8008278:	19f2      	adds	r2, r6, r7
          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800827a:	3204      	adds	r2, #4
 800827c:	f000 fcd0 	bl	8008c20 <ReverseByteStuffCopyByte2>
 8008280:	b2c0      	uxtb	r0, r0
          if (inc == 0U)
 8008282:	2800      	cmp	r0, #0
 8008284:	d0e5      	beq.n	8008252 <UART_ReceivedMSG+0x6e>
          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8008286:	b280      	uxth	r0, r0
 8008288:	4405      	add	r5, r0
 800828a:	f3c5 0508 	ubfx	r5, r5, #0, #9
          source++;
 800828e:	3701      	adds	r7, #1
 8008290:	b2bf      	uxth	r7, r7
        for (i = 0; i < k; i += inc)
 8008292:	4448      	add	r0, r9
 8008294:	fa1f f980 	uxth.w	r9, r0
 8008298:	e7e2      	b.n	8008260 <UART_ReceivedMSG+0x7c>
        Msg->Len = source;
 800829a:	6037      	str	r7, [r6, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800829c:	3501      	adds	r5, #1
 800829e:	f3c5 0508 	ubfx	r5, r5, #0, #9
        UartEngine.StartOfMsg = j;
 80082a2:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <UART_ReceivedMSG+0xe8>)
 80082a4:	809d      	strh	r5, [r3, #4]
        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 fcdd 	bl	8008c66 <CHK_CheckAndRemove>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d0a1      	beq.n	80081f6 <UART_ReceivedMSG+0x12>
          return 1;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e79f      	b.n	80081f6 <UART_ReceivedMSG+0x12>
    if (length > (uint16_t)Uart_Msg_Max_Size)
 80082b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80082ba:	d903      	bls.n	80082c4 <UART_ReceivedMSG+0xe0>
      UartEngine.StartOfMsg = dma_counter;
 80082bc:	4b03      	ldr	r3, [pc, #12]	; (80082cc <UART_ReceivedMSG+0xe8>)
 80082be:	8098      	strh	r0, [r3, #4]
  return 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e798      	b.n	80081f6 <UART_ReceivedMSG+0x12>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e796      	b.n	80081f6 <UART_ReceivedMSG+0x12>
 80082c8:	200028b4 	.word	0x200028b4
 80082cc:	20002cc0 	.word	0x20002cc0
 80082d0:	20002ac0 	.word	0x20002ac0

080082d4 <UART_SendMsg>:
{
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4605      	mov	r5, r0
  CHK_ComputeAndAdd(Msg);
 80082d8:	f000 fcb5 	bl	8008c46 <CHK_ComputeAndAdd>
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80082dc:	4c06      	ldr	r4, [pc, #24]	; (80082f8 <UART_SendMsg+0x24>)
 80082de:	4629      	mov	r1, r5
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fc89 	bl	8008bf8 <ByteStuffCopy>
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80082e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80082ea:	b282      	uxth	r2, r0
 80082ec:	4621      	mov	r1, r4
 80082ee:	4803      	ldr	r0, [pc, #12]	; (80082fc <UART_SendMsg+0x28>)
 80082f0:	f7ff f903 	bl	80074fa <HAL_UART_Transmit>
}
 80082f4:	bd38      	pop	{r3, r4, r5, pc}
 80082f6:	bf00      	nop
 80082f8:	20002538 	.word	0x20002538
 80082fc:	200028b4 	.word	0x200028b4

08008300 <UART_StartReceiveMsg>:
{
 8008300:	b508      	push	{r3, lr}
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <UART_StartReceiveMsg+0x18>)
 8008304:	4905      	ldr	r1, [pc, #20]	; (800831c <UART_StartReceiveMsg+0x1c>)
 8008306:	6281      	str	r1, [r0, #40]	; 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8008308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830c:	8582      	strh	r2, [r0, #44]	; 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800830e:	2300      	movs	r3, #0
 8008310:	63c3      	str	r3, [r0, #60]	; 0x3c
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8008312:	f7ff f963 	bl	80075dc <HAL_UART_Receive_DMA>
}
 8008316:	bd08      	pop	{r3, pc}
 8008318:	200028b4 	.word	0x200028b4
 800831c:	20002ac0 	.word	0x20002ac0

08008320 <BUILD_REPLY_HEADER>:
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
  Msg->Data[0] = Msg->Data[1];
 8008320:	7943      	ldrb	r3, [r0, #5]
 8008322:	7103      	strb	r3, [r0, #4]
  Msg->Data[1] = DEV_ADDR;
 8008324:	2332      	movs	r3, #50	; 0x32
 8008326:	7143      	strb	r3, [r0, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8008328:	7983      	ldrb	r3, [r0, #6]
 800832a:	3b80      	subs	r3, #128	; 0x80
 800832c:	7183      	strb	r3, [r0, #6]
}
 800832e:	4770      	bx	lr

08008330 <INIT_STREAMING_HEADER>:
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
  Msg->Data[0] = DataStreamingDest;
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <INIT_STREAMING_HEADER+0x14>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	7103      	strb	r3, [r0, #4]
  Msg->Data[1] = DEV_ADDR;
 8008336:	2332      	movs	r3, #50	; 0x32
 8008338:	7143      	strb	r3, [r0, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800833a:	2308      	movs	r3, #8
 800833c:	7183      	strb	r3, [r0, #6]
  Msg->Len = 3;
 800833e:	2303      	movs	r3, #3
 8008340:	6003      	str	r3, [r0, #0]
}
 8008342:	4770      	bx	lr
 8008344:	2000130c 	.word	0x2000130c

08008348 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 8008348:	b500      	push	{lr}
 800834a:	b083      	sub	sp, #12
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800834c:	f88d 0007 	strb.w	r0, [sp, #7]
  sdatestructure.Month   = m;
 8008350:	f88d 1005 	strb.w	r1, [sp, #5]
  sdatestructure.Date    = d;
 8008354:	f88d 2006 	strb.w	r2, [sp, #6]
  sdatestructure.WeekDay = dw;
 8008358:	a902      	add	r1, sp, #8
 800835a:	f801 3d04 	strb.w	r3, [r1, #-4]!

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800835e:	2200      	movs	r2, #0
 8008360:	4804      	ldr	r0, [pc, #16]	; (8008374 <RTC_DateRegulate+0x2c>)
 8008362:	f7fe fc30 	bl	8006bc6 <HAL_RTC_SetDate>
 8008366:	b910      	cbnz	r0, 800836e <RTC_DateRegulate+0x26>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 8008368:	b003      	add	sp, #12
 800836a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800836e:	f7f8 ff23 	bl	80011b8 <Error_Handler>
}
 8008372:	e7f9      	b.n	8008368 <RTC_DateRegulate+0x20>
 8008374:	200027cc 	.word	0x200027cc

08008378 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8008378:	b500      	push	{lr}
 800837a:	b087      	sub	sp, #28
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800837c:	f88d 0004 	strb.w	r0, [sp, #4]
  stimestructure.Minutes        = mm;
 8008380:	f88d 1005 	strb.w	r1, [sp, #5]
  stimestructure.Seconds        = ss;
 8008384:	f88d 2006 	strb.w	r2, [sp, #6]
  stimestructure.SubSeconds     = 0;
 8008388:	2200      	movs	r2, #0
 800838a:	9202      	str	r2, [sp, #8]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800838c:	f88d 2007 	strb.w	r2, [sp, #7]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008390:	9204      	str	r2, [sp, #16]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8008392:	9205      	str	r2, [sp, #20]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 8008394:	a901      	add	r1, sp, #4
 8008396:	4805      	ldr	r0, [pc, #20]	; (80083ac <RTC_TimeRegulate+0x34>)
 8008398:	f7fe fb96 	bl	8006ac8 <HAL_RTC_SetTime>
 800839c:	b910      	cbnz	r0, 80083a4 <RTC_TimeRegulate+0x2c>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 800839e:	b007      	add	sp, #28
 80083a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80083a4:	f7f8 ff08 	bl	80011b8 <Error_Handler>
}
 80083a8:	e7f9      	b.n	800839e <RTC_TimeRegulate+0x26>
 80083aa:	bf00      	nop
 80083ac:	200027cc 	.word	0x200027cc

080083b0 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 80083b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b2:	b09b      	sub	sp, #108	; 0x6c
 80083b4:	4607      	mov	r7, r0
 80083b6:	460e      	mov	r6, r1
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	9309      	str	r3, [sp, #36]	; 0x24
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 80083bc:	466c      	mov	r4, sp
 80083be:	4d0d      	ldr	r5, [pc, #52]	; (80083f4 <Get_PresentationString+0x44>)
 80083c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	6023      	str	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 80083cc:	a909      	add	r1, sp, #36	; 0x24
 80083ce:	a80a      	add	r0, sp, #40	; 0x28
 80083d0:	f000 fbe4 	bl	8008b9c <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 80083d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d6:	2b0d      	cmp	r3, #13
 80083d8:	dc08      	bgt.n	80083ec <Get_PresentationString+0x3c>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
  }
  else
  {
    lib_version_num = lib_version_string;
 80083da:	ab0a      	add	r3, sp, #40	; 0x28
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 80083dc:	466a      	mov	r2, sp
 80083de:	2140      	movs	r1, #64	; 0x40
 80083e0:	4638      	mov	r0, r7
 80083e2:	f00b fc05 	bl	8013bf0 <sniprintf>
 80083e6:	6030      	str	r0, [r6, #0]
}
 80083e8:	b01b      	add	sp, #108	; 0x6c
 80083ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lib_version_num = lib_version_string + string_pointer_shift;
 80083ec:	f10d 0335 	add.w	r3, sp, #53	; 0x35
 80083f0:	e7f4      	b.n	80083dc <Get_PresentationString+0x2c>
 80083f2:	bf00      	nop
 80083f4:	080162f4 	.word	0x080162f4

080083f8 <HandleMSG>:
{
 80083f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fa:	b093      	sub	sp, #76	; 0x4c
  uint32_t ps_len = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	9301      	str	r3, [sp, #4]
  if (Msg->Len < 2U)
 8008400:	6803      	ldr	r3, [r0, #0]
 8008402:	2b01      	cmp	r3, #1
 8008404:	f240 8286 	bls.w	8008914 <HandleMSG+0x51c>
  if (Msg->Data[0] != DEV_ADDR)
 8008408:	7902      	ldrb	r2, [r0, #4]
 800840a:	2a32      	cmp	r2, #50	; 0x32
 800840c:	d002      	beq.n	8008414 <HandleMSG+0x1c>
    return 0;
 800840e:	2000      	movs	r0, #0
}
 8008410:	b013      	add	sp, #76	; 0x4c
 8008412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008414:	4604      	mov	r4, r0
  switch (Msg->Data[2])   /* CMD */
 8008416:	7982      	ldrb	r2, [r0, #6]
 8008418:	3a01      	subs	r2, #1
 800841a:	2a79      	cmp	r2, #121	; 0x79
 800841c:	f200 827c 	bhi.w	8008918 <HandleMSG+0x520>
 8008420:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008424:	0091007a 	.word	0x0091007a
 8008428:	027a027a 	.word	0x027a027a
 800842c:	027a027a 	.word	0x027a027a
 8008430:	00f70260 	.word	0x00f70260
 8008434:	027a0143 	.word	0x027a0143
 8008438:	0165027a 	.word	0x0165027a
 800843c:	0087027a 	.word	0x0087027a
 8008440:	017d027a 	.word	0x017d027a
 8008444:	02460224 	.word	0x02460224
 8008448:	027a027a 	.word	0x027a027a
 800844c:	027a027a 	.word	0x027a027a
 8008450:	027a027a 	.word	0x027a027a
 8008454:	027a027a 	.word	0x027a027a
 8008458:	027a027a 	.word	0x027a027a
 800845c:	027a027a 	.word	0x027a027a
 8008460:	027a027a 	.word	0x027a027a
 8008464:	027a027a 	.word	0x027a027a
 8008468:	027a027a 	.word	0x027a027a
 800846c:	027a027a 	.word	0x027a027a
 8008470:	027a027a 	.word	0x027a027a
 8008474:	027a027a 	.word	0x027a027a
 8008478:	027a027a 	.word	0x027a027a
 800847c:	027a027a 	.word	0x027a027a
 8008480:	027a027a 	.word	0x027a027a
 8008484:	027a027a 	.word	0x027a027a
 8008488:	027a027a 	.word	0x027a027a
 800848c:	027a027a 	.word	0x027a027a
 8008490:	027a027a 	.word	0x027a027a
 8008494:	027a027a 	.word	0x027a027a
 8008498:	027a027a 	.word	0x027a027a
 800849c:	027a027a 	.word	0x027a027a
 80084a0:	027a027a 	.word	0x027a027a
 80084a4:	027a027a 	.word	0x027a027a
 80084a8:	027a027a 	.word	0x027a027a
 80084ac:	027a027a 	.word	0x027a027a
 80084b0:	027a027a 	.word	0x027a027a
 80084b4:	027a027a 	.word	0x027a027a
 80084b8:	027a027a 	.word	0x027a027a
 80084bc:	027a027a 	.word	0x027a027a
 80084c0:	027a027a 	.word	0x027a027a
 80084c4:	027a027a 	.word	0x027a027a
 80084c8:	027a027a 	.word	0x027a027a
 80084cc:	027a027a 	.word	0x027a027a
 80084d0:	027a027a 	.word	0x027a027a
 80084d4:	027a027a 	.word	0x027a027a
 80084d8:	027a027a 	.word	0x027a027a
 80084dc:	027a027a 	.word	0x027a027a
 80084e0:	00af027a 	.word	0x00af027a
 80084e4:	00c1027a 	.word	0x00c1027a
 80084e8:	027a027a 	.word	0x027a027a
 80084ec:	027a027a 	.word	0x027a027a
 80084f0:	027a027a 	.word	0x027a027a
 80084f4:	027a027a 	.word	0x027a027a
 80084f8:	027a027a 	.word	0x027a027a
 80084fc:	027a027a 	.word	0x027a027a
 8008500:	027a027a 	.word	0x027a027a
 8008504:	027a027a 	.word	0x027a027a
 8008508:	027a027a 	.word	0x027a027a
 800850c:	00d3027a 	.word	0x00d3027a
 8008510:	027a027a 	.word	0x027a027a
 8008514:	00e5027a 	.word	0x00e5027a
      if (Msg->Len != 3U)
 8008518:	2b03      	cmp	r3, #3
 800851a:	d001      	beq.n	8008520 <HandleMSG+0x128>
        return 0;
 800851c:	2000      	movs	r0, #0
 800851e:	e777      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 8008520:	f7ff fefe 	bl	8008320 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008524:	2303      	movs	r3, #3
 8008526:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 8008528:	4620      	mov	r0, r4
 800852a:	f7ff fed3 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 800852e:	2001      	movs	r0, #1
      break;
 8008530:	e76e      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len != 3U)
 8008532:	2b03      	cmp	r3, #3
 8008534:	d001      	beq.n	800853a <HandleMSG+0x142>
        return 0;
 8008536:	2000      	movs	r0, #0
 8008538:	e76a      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 800853a:	f7ff fef1 	bl	8008320 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800853e:	2303      	movs	r3, #3
 8008540:	6023      	str	r3, [r4, #0]
  int ret = 1;
 8008542:	2001      	movs	r0, #1
      break;
 8008544:	e764      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len != 3U)
 8008546:	2b03      	cmp	r3, #3
 8008548:	d001      	beq.n	800854e <HandleMSG+0x156>
        return 0;
 800854a:	2000      	movs	r0, #0
 800854c:	e760      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 800854e:	f7ff fee7 	bl	8008320 <BUILD_REPLY_HEADER>
      Get_PresentationString(ps, &ps_len);
 8008552:	a901      	add	r1, sp, #4
 8008554:	a802      	add	r0, sp, #8
 8008556:	f7ff ff2b 	bl	80083b0 <Get_PresentationString>
      i = 0;
 800855a:	2300      	movs	r3, #0
      while (i < ps_len)
 800855c:	e007      	b.n	800856e <HandleMSG+0x176>
        Msg->Data[3U + i] = ps[i];
 800855e:	1cda      	adds	r2, r3, #3
 8008560:	a912      	add	r1, sp, #72	; 0x48
 8008562:	4419      	add	r1, r3
 8008564:	f811 1c40 	ldrb.w	r1, [r1, #-64]
 8008568:	4422      	add	r2, r4
 800856a:	7111      	strb	r1, [r2, #4]
        i++;
 800856c:	3301      	adds	r3, #1
      while (i < ps_len)
 800856e:	9a01      	ldr	r2, [sp, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d8f4      	bhi.n	800855e <HandleMSG+0x166>
      Msg->Len = 3U + i;
 8008574:	3303      	adds	r3, #3
 8008576:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 8008578:	4620      	mov	r0, r4
 800857a:	f7ff feab 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 800857e:	2001      	movs	r0, #1
      break;
 8008580:	e746      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 8008582:	2b02      	cmp	r3, #2
 8008584:	d801      	bhi.n	800858a <HandleMSG+0x192>
        return 0;
 8008586:	2000      	movs	r0, #0
 8008588:	e742      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 800858a:	f7ff fec9 	bl	8008320 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800858e:	2204      	movs	r2, #4
 8008590:	2103      	movs	r1, #3
 8008592:	1de0      	adds	r0, r4, #7
 8008594:	f000 fb83 	bl	8008c9e <Serialize_s32>
      Msg->Len = 3 + 4;
 8008598:	2307      	movs	r3, #7
 800859a:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 800859c:	4620      	mov	r0, r4
 800859e:	f7ff fe99 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 80085a2:	2001      	movs	r0, #1
      break;
 80085a4:	e734      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d801      	bhi.n	80085ae <HandleMSG+0x1b6>
        return 0;
 80085aa:	2000      	movs	r0, #0
 80085ac:	e730      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 80085ae:	f7ff feb7 	bl	8008320 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 80085b2:	2204      	movs	r2, #4
 80085b4:	2101      	movs	r1, #1
 80085b6:	1de0      	adds	r0, r4, #7
 80085b8:	f000 fb71 	bl	8008c9e <Serialize_s32>
      Msg->Len = 3 + 4;
 80085bc:	2307      	movs	r3, #7
 80085be:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff fe87 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 80085c6:	2001      	movs	r0, #1
      break;
 80085c8:	e722      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d801      	bhi.n	80085d2 <HandleMSG+0x1da>
        return 0;
 80085ce:	2000      	movs	r0, #0
 80085d0:	e71e      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 80085d2:	f7ff fea5 	bl	8008320 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 80085d6:	2204      	movs	r2, #4
 80085d8:	2103      	movs	r1, #3
 80085da:	1de0      	adds	r0, r4, #7
 80085dc:	f000 fb5f 	bl	8008c9e <Serialize_s32>
      Msg->Len = 3 + 4;
 80085e0:	2307      	movs	r3, #7
 80085e2:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff fe75 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 80085ea:	2001      	movs	r0, #1
      break;
 80085ec:	e710      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d801      	bhi.n	80085f6 <HandleMSG+0x1fe>
        return 0;
 80085f2:	2000      	movs	r0, #0
 80085f4:	e70c      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 80085f6:	f7ff fe93 	bl	8008320 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 80085fa:	2204      	movs	r2, #4
 80085fc:	2102      	movs	r1, #2
 80085fe:	1de0      	adds	r0, r4, #7
 8008600:	f000 fb4d 	bl	8008c9e <Serialize_s32>
      Msg->Len = 3 + 4;
 8008604:	2307      	movs	r3, #7
 8008606:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 8008608:	4620      	mov	r0, r4
 800860a:	f7ff fe63 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 800860e:	2001      	movs	r0, #1
      break;
 8008610:	e6fe      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 8008612:	2b02      	cmp	r3, #2
 8008614:	d801      	bhi.n	800861a <HandleMSG+0x222>
        return 0;
 8008616:	2000      	movs	r0, #0
 8008618:	e6fa      	b.n	8008410 <HandleMSG+0x18>
      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800861a:	2104      	movs	r1, #4
 800861c:	3007      	adds	r0, #7
 800861e:	f000 fb33 	bl	8008c88 <Deserialize>
 8008622:	4bc1      	ldr	r3, [pc, #772]	; (8008928 <HandleMSG+0x530>)
 8008624:	6018      	str	r0, [r3, #0]
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f013 0f01 	tst.w	r3, #1
 800862c:	d12b      	bne.n	8008686 <HandleMSG+0x28e>
      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800862e:	4bbe      	ldr	r3, [pc, #760]	; (8008928 <HandleMSG+0x530>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f013 0f02 	tst.w	r3, #2
 8008636:	d129      	bne.n	800868c <HandleMSG+0x294>
      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8008638:	4bbb      	ldr	r3, [pc, #748]	; (8008928 <HandleMSG+0x530>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f013 0f04 	tst.w	r3, #4
 8008640:	d127      	bne.n	8008692 <HandleMSG+0x29a>
      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8008642:	4bb9      	ldr	r3, [pc, #740]	; (8008928 <HandleMSG+0x530>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f013 0f10 	tst.w	r3, #16
 800864a:	d125      	bne.n	8008698 <HandleMSG+0x2a0>
      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800864c:	4bb6      	ldr	r3, [pc, #728]	; (8008928 <HandleMSG+0x530>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f013 0f20 	tst.w	r3, #32
 8008654:	d123      	bne.n	800869e <HandleMSG+0x2a6>
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8008656:	4bb4      	ldr	r3, [pc, #720]	; (8008928 <HandleMSG+0x530>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800865e:	d121      	bne.n	80086a4 <HandleMSG+0x2ac>
      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8008660:	48b2      	ldr	r0, [pc, #712]	; (800892c <HandleMSG+0x534>)
 8008662:	f7fe fba1 	bl	8006da8 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8008666:	2501      	movs	r5, #1
 8008668:	4bb1      	ldr	r3, [pc, #708]	; (8008930 <HandleMSG+0x538>)
 800866a:	701d      	strb	r5, [r3, #0]
      DataStreamingDest = Msg->Data[1];
 800866c:	7962      	ldrb	r2, [r4, #5]
 800866e:	4bb1      	ldr	r3, [pc, #708]	; (8008934 <HandleMSG+0x53c>)
 8008670:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8008672:	4620      	mov	r0, r4
 8008674:	f7ff fe54 	bl	8008320 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008678:	2303      	movs	r3, #3
 800867a:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 800867c:	4620      	mov	r0, r4
 800867e:	f7ff fe29 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 8008682:	4628      	mov	r0, r5
      break;
 8008684:	e6c4      	b.n	8008410 <HandleMSG+0x18>
        BSP_SENSOR_PRESS_Enable();
 8008686:	f000 f99d 	bl	80089c4 <BSP_SENSOR_PRESS_Enable>
 800868a:	e7d0      	b.n	800862e <HandleMSG+0x236>
        BSP_SENSOR_TEMP_Enable();
 800868c:	f000 f9a0 	bl	80089d0 <BSP_SENSOR_TEMP_Enable>
 8008690:	e7d2      	b.n	8008638 <HandleMSG+0x240>
        BSP_SENSOR_HUM_Enable();
 8008692:	f000 f9a3 	bl	80089dc <BSP_SENSOR_HUM_Enable>
 8008696:	e7d4      	b.n	8008642 <HandleMSG+0x24a>
        BSP_SENSOR_ACC_Enable();
 8008698:	f000 f982 	bl	80089a0 <BSP_SENSOR_ACC_Enable>
 800869c:	e7d6      	b.n	800864c <HandleMSG+0x254>
        BSP_SENSOR_GYR_Enable();
 800869e:	f000 f985 	bl	80089ac <BSP_SENSOR_GYR_Enable>
 80086a2:	e7d8      	b.n	8008656 <HandleMSG+0x25e>
        BSP_SENSOR_MAG_Enable();
 80086a4:	f000 f988 	bl	80089b8 <BSP_SENSOR_MAG_Enable>
 80086a8:	e7da      	b.n	8008660 <HandleMSG+0x268>
      if (Msg->Len < 3U)
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d801      	bhi.n	80086b2 <HandleMSG+0x2ba>
        return 0;
 80086ae:	2000      	movs	r0, #0
 80086b0:	e6ae      	b.n	8008410 <HandleMSG+0x18>
      DataLoggerActive = 0;
 80086b2:	2500      	movs	r5, #0
 80086b4:	4b9e      	ldr	r3, [pc, #632]	; (8008930 <HandleMSG+0x538>)
 80086b6:	701d      	strb	r5, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80086b8:	489c      	ldr	r0, [pc, #624]	; (800892c <HandleMSG+0x534>)
 80086ba:	f7fe fb86 	bl	8006dca <HAL_TIM_Base_Stop_IT>
      BSP_SENSOR_ACC_Disable();
 80086be:	f000 f993 	bl	80089e8 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 80086c2:	f000 f997 	bl	80089f4 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 80086c6:	f000 f99b 	bl	8008a00 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 80086ca:	f000 f99f 	bl	8008a0c <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 80086ce:	f000 f9a3 	bl	8008a18 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 80086d2:	f000 f9a7 	bl	8008a24 <BSP_SENSOR_HUM_Disable>
      SensorsEnabled = 0;
 80086d6:	4b94      	ldr	r3, [pc, #592]	; (8008928 <HandleMSG+0x530>)
 80086d8:	601d      	str	r5, [r3, #0]
      UseOfflineData = 0;
 80086da:	4b97      	ldr	r3, [pc, #604]	; (8008938 <HandleMSG+0x540>)
 80086dc:	701d      	strb	r5, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 80086de:	4620      	mov	r0, r4
 80086e0:	f7ff fe1e 	bl	8008320 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff fdf5 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 80086ea:	2001      	movs	r0, #1
      break;
 80086ec:	e690      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d801      	bhi.n	80086f6 <HandleMSG+0x2fe>
        return 0;
 80086f2:	2000      	movs	r0, #0
 80086f4:	e68c      	b.n	8008410 <HandleMSG+0x18>
      BUILD_REPLY_HEADER(Msg);
 80086f6:	f7ff fe13 	bl	8008320 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80086fa:	2303      	movs	r3, #3
 80086fc:	6023      	str	r3, [r4, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 80086fe:	7a62      	ldrb	r2, [r4, #9]
 8008700:	7a21      	ldrb	r1, [r4, #8]
 8008702:	79e0      	ldrb	r0, [r4, #7]
 8008704:	f7ff fe38 	bl	8008378 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 8008708:	7b63      	ldrb	r3, [r4, #13]
 800870a:	7b22      	ldrb	r2, [r4, #12]
 800870c:	7ae1      	ldrb	r1, [r4, #11]
 800870e:	7aa0      	ldrb	r0, [r4, #10]
 8008710:	f7ff fe1a 	bl	8008348 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 8008714:	4620      	mov	r0, r4
 8008716:	f7ff fddd 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 800871a:	2001      	movs	r0, #1
      break;
 800871c:	e678      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 55U)
 800871e:	2b36      	cmp	r3, #54	; 0x36
 8008720:	f240 80fc 	bls.w	800891c <HandleMSG+0x524>
      msg_count = (uint32_t)Msg->Data[3];
 8008724:	79c7      	ldrb	r7, [r0, #7]
      msg_offset = 4;
 8008726:	2304      	movs	r3, #4
      for (i = 0; i < msg_count; i++)
 8008728:	2600      	movs	r6, #0
 800872a:	e000      	b.n	800872e <HandleMSG+0x336>
 800872c:	3601      	adds	r6, #1
 800872e:	42be      	cmp	r6, r7
 8008730:	f080 8092 	bcs.w	8008858 <HandleMSG+0x460>
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8008734:	4a81      	ldr	r2, [pc, #516]	; (800893c <HandleMSG+0x544>)
 8008736:	6810      	ldr	r0, [r2, #0]
 8008738:	18e2      	adds	r2, r4, r3
 800873a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800873e:	4a80      	ldr	r2, [pc, #512]	; (8008940 <HandleMSG+0x548>)
 8008740:	2134      	movs	r1, #52	; 0x34
 8008742:	fb01 f100 	mul.w	r1, r1, r0
 8008746:	1855      	adds	r5, r2, r1
 8008748:	f802 c001 	strb.w	ip, [r2, r1]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800874c:	f103 0c01 	add.w	ip, r3, #1
 8008750:	44a4      	add	ip, r4
 8008752:	f89c c004 	ldrb.w	ip, [ip, #4]
 8008756:	f885 c001 	strb.w	ip, [r5, #1]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800875a:	f103 0c02 	add.w	ip, r3, #2
 800875e:	44a4      	add	ip, r4
 8008760:	f89c c004 	ldrb.w	ip, [ip, #4]
 8008764:	f885 c002 	strb.w	ip, [r5, #2]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 8008768:	f103 0c03 	add.w	ip, r3, #3
 800876c:	44a4      	add	ip, r4
 800876e:	f89c c004 	ldrb.w	ip, [ip, #4]
 8008772:	f885 c003 	strb.w	ip, [r5, #3]
        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8008776:	f103 0c04 	add.w	ip, r3, #4
 800877a:	44a4      	add	ip, r4
 800877c:	f8dc c004 	ldr.w	ip, [ip, #4]
 8008780:	f8c5 c004 	str.w	ip, [r5, #4]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 8008784:	f101 0c08 	add.w	ip, r1, #8
 8008788:	eb0c 0e02 	add.w	lr, ip, r2
 800878c:	f103 0508 	add.w	r5, r3, #8
 8008790:	4425      	add	r5, r4
 8008792:	686d      	ldr	r5, [r5, #4]
 8008794:	f8ce 5004 	str.w	r5, [lr, #4]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 8008798:	f103 050c 	add.w	r5, r3, #12
 800879c:	4425      	add	r5, r4
 800879e:	686d      	ldr	r5, [r5, #4]
 80087a0:	f84c 5002 	str.w	r5, [ip, r2]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 80087a4:	f101 0c10 	add.w	ip, r1, #16
 80087a8:	eb0c 0e02 	add.w	lr, ip, r2
 80087ac:	f103 0510 	add.w	r5, r3, #16
 80087b0:	4425      	add	r5, r4
 80087b2:	686d      	ldr	r5, [r5, #4]
 80087b4:	f84c 5002 	str.w	r5, [ip, r2]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 80087b8:	f103 0514 	add.w	r5, r3, #20
 80087bc:	4425      	add	r5, r4
 80087be:	686d      	ldr	r5, [r5, #4]
 80087c0:	f8ce 5004 	str.w	r5, [lr, #4]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 80087c4:	f101 0c18 	add.w	ip, r1, #24
 80087c8:	eb0c 0e02 	add.w	lr, ip, r2
 80087cc:	f103 0518 	add.w	r5, r3, #24
 80087d0:	4425      	add	r5, r4
 80087d2:	686d      	ldr	r5, [r5, #4]
 80087d4:	f84c 5002 	str.w	r5, [ip, r2]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 80087d8:	f103 051c 	add.w	r5, r3, #28
 80087dc:	4425      	add	r5, r4
 80087de:	686d      	ldr	r5, [r5, #4]
 80087e0:	f8ce 5004 	str.w	r5, [lr, #4]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 80087e4:	f101 0c20 	add.w	ip, r1, #32
 80087e8:	eb0c 0e02 	add.w	lr, ip, r2
 80087ec:	f103 0520 	add.w	r5, r3, #32
 80087f0:	4425      	add	r5, r4
 80087f2:	686d      	ldr	r5, [r5, #4]
 80087f4:	f84c 5002 	str.w	r5, [ip, r2]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 80087f8:	f103 0524 	add.w	r5, r3, #36	; 0x24
 80087fc:	4425      	add	r5, r4
 80087fe:	686d      	ldr	r5, [r5, #4]
 8008800:	f8ce 5004 	str.w	r5, [lr, #4]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 8008804:	f101 0c28 	add.w	ip, r1, #40	; 0x28
 8008808:	eb0c 0e02 	add.w	lr, ip, r2
 800880c:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8008810:	4425      	add	r5, r4
 8008812:	686d      	ldr	r5, [r5, #4]
 8008814:	f84c 5002 	str.w	r5, [ip, r2]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 8008818:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 800881c:	4425      	add	r5, r4
 800881e:	686d      	ldr	r5, [r5, #4]
 8008820:	f8ce 5004 	str.w	r5, [lr, #4]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 8008824:	3130      	adds	r1, #48	; 0x30
 8008826:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800882a:	4425      	add	r5, r4
 800882c:	686d      	ldr	r5, [r5, #4]
 800882e:	508d      	str	r5, [r1, r2]
        msg_offset += 52;
 8008830:	3334      	adds	r3, #52	; 0x34
        OfflineDataCount++;
 8008832:	4944      	ldr	r1, [pc, #272]	; (8008944 <HandleMSG+0x54c>)
 8008834:	680a      	ldr	r2, [r1, #0]
 8008836:	3201      	adds	r2, #1
 8008838:	600a      	str	r2, [r1, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800883a:	2a08      	cmp	r2, #8
 800883c:	dd02      	ble.n	8008844 <HandleMSG+0x44c>
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800883e:	460a      	mov	r2, r1
 8008840:	2108      	movs	r1, #8
 8008842:	6011      	str	r1, [r2, #0]
        OfflineDataWriteIndex++;
 8008844:	3001      	adds	r0, #1
 8008846:	493d      	ldr	r1, [pc, #244]	; (800893c <HandleMSG+0x544>)
 8008848:	6008      	str	r0, [r1, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800884a:	2807      	cmp	r0, #7
 800884c:	f77f af6e 	ble.w	800872c <HandleMSG+0x334>
          OfflineDataWriteIndex = 0;
 8008850:	460a      	mov	r2, r1
 8008852:	2100      	movs	r1, #0
 8008854:	6011      	str	r1, [r2, #0]
 8008856:	e769      	b.n	800872c <HandleMSG+0x334>
      SensorReadRequest = 1;
 8008858:	2501      	movs	r5, #1
 800885a:	4b3b      	ldr	r3, [pc, #236]	; (8008948 <HandleMSG+0x550>)
 800885c:	701d      	strb	r5, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff fd5e 	bl	8008320 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008864:	2303      	movs	r3, #3
 8008866:	6023      	str	r3, [r4, #0]
  int ret = 1;
 8008868:	4628      	mov	r0, r5
      break;
 800886a:	e5d1      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 4U)
 800886c:	2b03      	cmp	r3, #3
 800886e:	d957      	bls.n	8008920 <HandleMSG+0x528>
      if (Msg->Data[3] == 1U)
 8008870:	79c3      	ldrb	r3, [r0, #7]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d00e      	beq.n	8008894 <HandleMSG+0x49c>
        UseOfflineData = 0U;
 8008876:	4b30      	ldr	r3, [pc, #192]	; (8008938 <HandleMSG+0x540>)
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800887c:	4b33      	ldr	r3, [pc, #204]	; (800894c <HandleMSG+0x554>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4b29      	ldr	r3, [pc, #164]	; (8008928 <HandleMSG+0x530>)
 8008882:	601a      	str	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8008884:	4620      	mov	r0, r4
 8008886:	f7ff fd4b 	bl	8008320 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800888a:	4620      	mov	r0, r4
 800888c:	f7ff fd22 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 8008890:	2001      	movs	r0, #1
      break;
 8008892:	e5bd      	b.n	8008410 <HandleMSG+0x18>
        UseOfflineData = 1U;
 8008894:	4b28      	ldr	r3, [pc, #160]	; (8008938 <HandleMSG+0x540>)
 8008896:	2201      	movs	r2, #1
 8008898:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800889a:	4b23      	ldr	r3, [pc, #140]	; (8008928 <HandleMSG+0x530>)
 800889c:	6819      	ldr	r1, [r3, #0]
 800889e:	4a2b      	ldr	r2, [pc, #172]	; (800894c <HandleMSG+0x554>)
 80088a0:	6011      	str	r1, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80088a8:	4820      	ldr	r0, [pc, #128]	; (800892c <HandleMSG+0x534>)
 80088aa:	f7fe fa8e 	bl	8006dca <HAL_TIM_Base_Stop_IT>
 80088ae:	e7e9      	b.n	8008884 <HandleMSG+0x48c>
      if (Msg->Len < 3U)
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d801      	bhi.n	80088b8 <HandleMSG+0x4c0>
        return 0;
 80088b4:	2000      	movs	r0, #0
 80088b6:	e5ab      	b.n	8008410 <HandleMSG+0x18>
      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 80088b8:	2204      	movs	r2, #4
 80088ba:	4b25      	ldr	r3, [pc, #148]	; (8008950 <HandleMSG+0x558>)
 80088bc:	6819      	ldr	r1, [r3, #0]
 80088be:	3007      	adds	r0, #7
 80088c0:	f000 f9ed 	bl	8008c9e <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 80088c4:	2201      	movs	r2, #1
 80088c6:	2130      	movs	r1, #48	; 0x30
 80088c8:	f104 000b 	add.w	r0, r4, #11
 80088cc:	f000 f9e7 	bl	8008c9e <Serialize_s32>
      BUILD_REPLY_HEADER(Msg);
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7ff fd25 	bl	8008320 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 80088d6:	2308      	movs	r3, #8
 80088d8:	6023      	str	r3, [r4, #0]
      UART_SendMsg(Msg);
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff fcfa 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 80088e0:	2001      	movs	r0, #1
      break;
 80088e2:	e595      	b.n	8008410 <HandleMSG+0x18>
      if (Msg->Len < 3U)
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d91d      	bls.n	8008924 <HandleMSG+0x52c>
      Enabled6X = Msg->Data[3];
 80088e8:	79c3      	ldrb	r3, [r0, #7]
 80088ea:	4a1a      	ldr	r2, [pc, #104]	; (8008954 <HandleMSG+0x55c>)
 80088ec:	7013      	strb	r3, [r2, #0]
      if (Enabled6X == 1U)
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d00b      	beq.n	800890a <HandleMSG+0x512>
        MotionFX_manager_stop_6X();
 80088f2:	f000 f944 	bl	8008b7e <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 80088f6:	f000 f947 	bl	8008b88 <MotionFX_manager_start_9X>
      BUILD_REPLY_HEADER(Msg);
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff fd10 	bl	8008320 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8008900:	4620      	mov	r0, r4
 8008902:	f7ff fce7 	bl	80082d4 <UART_SendMsg>
  int ret = 1;
 8008906:	2001      	movs	r0, #1
      break;
 8008908:	e582      	b.n	8008410 <HandleMSG+0x18>
        MotionFX_manager_stop_9X();
 800890a:	f000 f942 	bl	8008b92 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 800890e:	f000 f931 	bl	8008b74 <MotionFX_manager_start_6X>
 8008912:	e7f2      	b.n	80088fa <HandleMSG+0x502>
    return 0;
 8008914:	2000      	movs	r0, #0
 8008916:	e57b      	b.n	8008410 <HandleMSG+0x18>
      ret = 0;
 8008918:	2000      	movs	r0, #0
 800891a:	e579      	b.n	8008410 <HandleMSG+0x18>
        return 0;
 800891c:	2000      	movs	r0, #0
 800891e:	e577      	b.n	8008410 <HandleMSG+0x18>
        return 0;
 8008920:	2000      	movs	r0, #0
 8008922:	e575      	b.n	8008410 <HandleMSG+0x18>
        return 0;
 8008924:	2000      	movs	r0, #0
 8008926:	e573      	b.n	8008410 <HandleMSG+0x18>
 8008928:	20002320 	.word	0x20002320
 800892c:	2000278c 	.word	0x2000278c
 8008930:	200022dc 	.word	0x200022dc
 8008934:	2000130c 	.word	0x2000130c
 8008938:	2000232c 	.word	0x2000232c
 800893c:	20002314 	.word	0x20002314
 8008940:	200028f8 	.word	0x200028f8
 8008944:	2000230c 	.word	0x2000230c
 8008948:	2000231c 	.word	0x2000231c
 800894c:	20002738 	.word	0x20002738
 8008950:	20001308 	.word	0x20001308
 8008954:	200022dd 	.word	0x200022dd

08008958 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8008958:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800895a:	2102      	movs	r1, #2
 800895c:	2000      	movs	r0, #0
 800895e:	f7fb fe5f 	bl	8004620 <IKS01A2_MOTION_SENSOR_Init>
}
 8008962:	bd08      	pop	{r3, pc}

08008964 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8008964:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8008966:	2101      	movs	r1, #1
 8008968:	2000      	movs	r0, #0
 800896a:	f7fb fe59 	bl	8004620 <IKS01A2_MOTION_SENSOR_Init>
}
 800896e:	bd08      	pop	{r3, pc}

08008970 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8008970:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8008972:	2104      	movs	r1, #4
 8008974:	2002      	movs	r0, #2
 8008976:	f7fb fe53 	bl	8004620 <IKS01A2_MOTION_SENSOR_Init>
}
 800897a:	bd08      	pop	{r3, pc}

0800897c <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800897c:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800897e:	2102      	movs	r1, #2
 8008980:	2001      	movs	r0, #1
 8008982:	f7fb fbb9 	bl	80040f8 <IKS01A2_ENV_SENSOR_Init>
}
 8008986:	bd08      	pop	{r3, pc}

08008988 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8008988:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800898a:	2101      	movs	r1, #1
 800898c:	2000      	movs	r0, #0
 800898e:	f7fb fbb3 	bl	80040f8 <IKS01A2_ENV_SENSOR_Init>
}
 8008992:	bd08      	pop	{r3, pc}

08008994 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8008994:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8008996:	2104      	movs	r1, #4
 8008998:	2000      	movs	r0, #0
 800899a:	f7fb fbad 	bl	80040f8 <IKS01A2_ENV_SENSOR_Init>
}
 800899e:	bd08      	pop	{r3, pc}

080089a0 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80089a0:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80089a2:	2102      	movs	r1, #2
 80089a4:	2000      	movs	r0, #0
 80089a6:	f7fb fefb 	bl	80047a0 <IKS01A2_MOTION_SENSOR_Enable>
}
 80089aa:	bd08      	pop	{r3, pc}

080089ac <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 80089ac:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80089ae:	2101      	movs	r1, #1
 80089b0:	2000      	movs	r0, #0
 80089b2:	f7fb fef5 	bl	80047a0 <IKS01A2_MOTION_SENSOR_Enable>
}
 80089b6:	bd08      	pop	{r3, pc}

080089b8 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 80089b8:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80089ba:	2104      	movs	r1, #4
 80089bc:	2002      	movs	r0, #2
 80089be:	f7fb feef 	bl	80047a0 <IKS01A2_MOTION_SENSOR_Enable>
}
 80089c2:	bd08      	pop	{r3, pc}

080089c4 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 80089c4:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 80089c6:	2102      	movs	r1, #2
 80089c8:	2001      	movs	r0, #1
 80089ca:	f7fb fc25 	bl	8004218 <IKS01A2_ENV_SENSOR_Enable>
}
 80089ce:	bd08      	pop	{r3, pc}

080089d0 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 80089d0:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 80089d2:	2101      	movs	r1, #1
 80089d4:	2000      	movs	r0, #0
 80089d6:	f7fb fc1f 	bl	8004218 <IKS01A2_ENV_SENSOR_Enable>
}
 80089da:	bd08      	pop	{r3, pc}

080089dc <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 80089dc:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 80089de:	2104      	movs	r1, #4
 80089e0:	2000      	movs	r0, #0
 80089e2:	f7fb fc19 	bl	8004218 <IKS01A2_ENV_SENSOR_Enable>
}
 80089e6:	bd08      	pop	{r3, pc}

080089e8 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 80089e8:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80089ea:	2102      	movs	r1, #2
 80089ec:	2000      	movs	r0, #0
 80089ee:	f7fb ff03 	bl	80047f8 <IKS01A2_MOTION_SENSOR_Disable>
}
 80089f2:	bd08      	pop	{r3, pc}

080089f4 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 80089f4:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80089f6:	2101      	movs	r1, #1
 80089f8:	2000      	movs	r0, #0
 80089fa:	f7fb fefd 	bl	80047f8 <IKS01A2_MOTION_SENSOR_Disable>
}
 80089fe:	bd08      	pop	{r3, pc}

08008a00 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8008a00:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8008a02:	2104      	movs	r1, #4
 8008a04:	2002      	movs	r0, #2
 8008a06:	f7fb fef7 	bl	80047f8 <IKS01A2_MOTION_SENSOR_Disable>
}
 8008a0a:	bd08      	pop	{r3, pc}

08008a0c <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8008a0c:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8008a0e:	2102      	movs	r1, #2
 8008a10:	2001      	movs	r0, #1
 8008a12:	f7fb fc2d 	bl	8004270 <IKS01A2_ENV_SENSOR_Disable>
}
 8008a16:	bd08      	pop	{r3, pc}

08008a18 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8008a18:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7fb fc27 	bl	8004270 <IKS01A2_ENV_SENSOR_Disable>
}
 8008a22:	bd08      	pop	{r3, pc}

08008a24 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8008a24:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8008a26:	2104      	movs	r1, #4
 8008a28:	2000      	movs	r0, #0
 8008a2a:	f7fb fc21 	bl	8004270 <IKS01A2_ENV_SENSOR_Disable>
}
 8008a2e:	bd08      	pop	{r3, pc}

08008a30 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8008a30:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8008a32:	4602      	mov	r2, r0
 8008a34:	2102      	movs	r1, #2
 8008a36:	2000      	movs	r0, #0
 8008a38:	f7fb ff0a 	bl	8004850 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8008a3c:	bd08      	pop	{r3, pc}

08008a3e <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8008a3e:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8008a40:	4602      	mov	r2, r0
 8008a42:	2101      	movs	r1, #1
 8008a44:	2000      	movs	r0, #0
 8008a46:	f7fb ff03 	bl	8004850 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8008a4a:	bd08      	pop	{r3, pc}

08008a4c <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8008a4c:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8008a4e:	4602      	mov	r2, r0
 8008a50:	2104      	movs	r1, #4
 8008a52:	2002      	movs	r0, #2
 8008a54:	f7fb fefc 	bl	8004850 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8008a58:	bd08      	pop	{r3, pc}

08008a5a <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 8008a5a:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	2102      	movs	r1, #2
 8008a60:	2001      	movs	r0, #1
 8008a62:	f7fb fc31 	bl	80042c8 <IKS01A2_ENV_SENSOR_GetValue>
}
 8008a66:	bd08      	pop	{r3, pc}

08008a68 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 8008a68:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f7fb fc2a 	bl	80042c8 <IKS01A2_ENV_SENSOR_GetValue>
}
 8008a74:	bd08      	pop	{r3, pc}

08008a76 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 8008a76:	b508      	push	{r3, lr}
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 8008a78:	4602      	mov	r2, r0
 8008a7a:	2104      	movs	r1, #4
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f7fb fc23 	bl	80042c8 <IKS01A2_ENV_SENSOR_GetValue>
}
 8008a82:	bd08      	pop	{r3, pc}

08008a84 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8008a84:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8008a86:	4602      	mov	r2, r0
 8008a88:	2102      	movs	r1, #2
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f7fb ff0e 	bl	80048ac <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8008a90:	bd08      	pop	{r3, pc}

08008a92 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8008a92:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8008a94:	4602      	mov	r2, r0
 8008a96:	2102      	movs	r1, #2
 8008a98:	2000      	movs	r0, #0
 8008a9a:	f7fb ff35 	bl	8004908 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8008a9e:	bd08      	pop	{r3, pc}

08008aa0 <BSP_SENSOR_ACC_GetOrientation>:
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
  Orientation[0] = 'n';
 8008aa0:	236e      	movs	r3, #110	; 0x6e
 8008aa2:	7003      	strb	r3, [r0, #0]
  Orientation[1] = 'w';
 8008aa4:	2377      	movs	r3, #119	; 0x77
 8008aa6:	7043      	strb	r3, [r0, #1]
  Orientation[2] = 'u';
 8008aa8:	2375      	movs	r3, #117	; 0x75
 8008aaa:	7083      	strb	r3, [r0, #2]
}
 8008aac:	4770      	bx	lr

08008aae <BSP_SENSOR_GYR_GetOrientation>:
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
  Orientation[0] = 'n';
 8008aae:	236e      	movs	r3, #110	; 0x6e
 8008ab0:	7003      	strb	r3, [r0, #0]
  Orientation[1] = 'w';
 8008ab2:	2377      	movs	r3, #119	; 0x77
 8008ab4:	7043      	strb	r3, [r0, #1]
  Orientation[2] = 'u';
 8008ab6:	2375      	movs	r3, #117	; 0x75
 8008ab8:	7083      	strb	r3, [r0, #2]
}
 8008aba:	4770      	bx	lr

08008abc <BSP_SENSOR_MAG_GetOrientation>:
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
  Orientation[0] = 'n';
 8008abc:	236e      	movs	r3, #110	; 0x6e
 8008abe:	7003      	strb	r3, [r0, #0]
  Orientation[1] = 'e';
 8008ac0:	2365      	movs	r3, #101	; 0x65
 8008ac2:	7043      	strb	r3, [r0, #1]
  Orientation[2] = 'u';
 8008ac4:	2375      	movs	r3, #117	; 0x75
 8008ac6:	7083      	strb	r3, [r0, #2]
}
 8008ac8:	4770      	bx	lr
	...

08008acc <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8008acc:	b510      	push	{r4, lr}
  MotionFX_initialize();
 8008ace:	f009 fc0f 	bl	80122f0 <MotionFX_initialize>

  MotionFX_getKnobs(ipKnobs);
 8008ad2:	4c14      	ldr	r4, [pc, #80]	; (8008b24 <MotionFX_manager_init+0x58>)
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f009 fed1 	bl	801287c <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8008ada:	f104 0029 	add.w	r0, r4, #41	; 0x29
 8008ade:	f7ff ffdf 	bl	8008aa0 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8008ae2:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8008ae6:	f7ff ffe2 	bl	8008aae <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8008aea:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8008aee:	f7ff ffe5 	bl	8008abc <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 8008af2:	490d      	ldr	r1, [pc, #52]	; (8008b28 <MotionFX_manager_init+0x5c>)
 8008af4:	6161      	str	r1, [r4, #20]
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 8008af6:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <MotionFX_manager_init+0x60>)
 8008af8:	61a2      	str	r2, [r4, #24]
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <MotionFX_manager_init+0x64>)
 8008afc:	6123      	str	r3, [r4, #16]

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 8008afe:	6221      	str	r1, [r4, #32]
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 8008b00:	6262      	str	r2, [r4, #36]	; 0x24
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 8008b02:	61e3      	str	r3, [r4, #28]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  ipKnobs->LMode = 1;
 8008b0a:	7323      	strb	r3, [r4, #12]
  ipKnobs->modx = DECIMATION;
 8008b0c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

  MotionFX_setKnobs(ipKnobs);
 8008b10:	4620      	mov	r0, r4
 8008b12:	f009 fe4f 	bl	80127b4 <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 8008b16:	2000      	movs	r0, #0
 8008b18:	f009 ff06 	bl	8012928 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f009 ff23 	bl	8012968 <MotionFX_enable_9X>
}
 8008b22:	bd10      	pop	{r4, pc}
 8008b24:	20002740 	.word	0x20002740
 8008b28:	3ac88a48 	.word	0x3ac88a48
 8008b2c:	3b83126f 	.word	0x3b83126f
 8008b30:	3b449ba6 	.word	0x3b449ba6

08008b34 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8008b34:	b530      	push	{r4, r5, lr}
 8008b36:	b083      	sub	sp, #12
 8008b38:	9201      	str	r2, [sp, #4]
  if (discardedCount == sampleToDiscard)
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <MotionFX_manager_run+0x38>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a0c      	ldr	r2, [pc, #48]	; (8008b70 <MotionFX_manager_run+0x3c>)
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d004      	beq.n	8008b50 <MotionFX_manager_run+0x1c>
    MotionFX_propagate(data_out, data_in, &delta_time);
    MotionFX_update(data_out, data_in, &delta_time, NULL);
  }
  else
  {
    discardedCount++;
 8008b46:	3301      	adds	r3, #1
 8008b48:	4a08      	ldr	r2, [pc, #32]	; (8008b6c <MotionFX_manager_run+0x38>)
 8008b4a:	6013      	str	r3, [r2, #0]
  }
}
 8008b4c:	b003      	add	sp, #12
 8008b4e:	bd30      	pop	{r4, r5, pc}
 8008b50:	460c      	mov	r4, r1
 8008b52:	4605      	mov	r5, r0
    MotionFX_propagate(data_out, data_in, &delta_time);
 8008b54:	aa01      	add	r2, sp, #4
 8008b56:	4601      	mov	r1, r0
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f00a f8e9 	bl	8012d30 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, &delta_time, NULL);
 8008b5e:	2300      	movs	r3, #0
 8008b60:	aa01      	add	r2, sp, #4
 8008b62:	4629      	mov	r1, r5
 8008b64:	4620      	mov	r0, r4
 8008b66:	f009 ff21 	bl	80129ac <MotionFX_update>
 8008b6a:	e7ef      	b.n	8008b4c <MotionFX_manager_run+0x18>
 8008b6c:	2000273c 	.word	0x2000273c
 8008b70:	20001310 	.word	0x20001310

08008b74 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8008b74:	b508      	push	{r3, lr}
  MotionFX_enable_6X(MFX_ENGINE_ENABLE);
 8008b76:	2001      	movs	r0, #1
 8008b78:	f009 fed6 	bl	8012928 <MotionFX_enable_6X>
}
 8008b7c:	bd08      	pop	{r3, pc}

08008b7e <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8008b7e:	b508      	push	{r3, lr}
  MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 8008b80:	2000      	movs	r0, #0
 8008b82:	f009 fed1 	bl	8012928 <MotionFX_enable_6X>
}
 8008b86:	bd08      	pop	{r3, pc}

08008b88 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8008b88:	b508      	push	{r3, lr}
  MotionFX_enable_9X(MFX_ENGINE_ENABLE);
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	f009 feec 	bl	8012968 <MotionFX_enable_9X>
}
 8008b90:	bd08      	pop	{r3, pc}

08008b92 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 8008b92:	b508      	push	{r3, lr}
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 8008b94:	2000      	movs	r0, #0
 8008b96:	f009 fee7 	bl	8012968 <MotionFX_enable_9X>
}
 8008b9a:	bd08      	pop	{r3, pc}

08008b9c <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	460c      	mov	r4, r1
  *length = (int)MotionFX_GetLibVersion(version);
 8008ba0:	f00a ffc2 	bl	8013b28 <MotionFX_GetLibVersion>
 8008ba4:	6020      	str	r0, [r4, #0]
}
 8008ba6:	bd10      	pop	{r4, pc}

08008ba8 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	460c      	mov	r4, r1
  MotionFX_MagCal_run(data_in);
 8008bac:	f00a fee6 	bl	801397c <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f00a ff89 	bl	8013ac8 <MotionFX_MagCal_getParams>
}
 8008bb6:	bd10      	pop	{r4, pc}

08008bb8 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8008bb8:	b508      	push	{r3, lr}
  MotionFX_MagCal_init(sampletime, 1);
 8008bba:	2101      	movs	r1, #1
 8008bbc:	f00a fe2e 	bl	801381c <MotionFX_MagCal_init>
}
 8008bc0:	bd08      	pop	{r3, pc}

08008bc2 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8008bc2:	b508      	push	{r3, lr}
  MotionFX_MagCal_init(sampletime, 0);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	f00a fe29 	bl	801381c <MotionFX_MagCal_init>
}
 8008bca:	bd08      	pop	{r3, pc}

08008bcc <MotionFX_LoadMagCalFromNVM>:
 * @retval (1) fail, (0) success
 */
char MotionFX_LoadMagCalFromNVM(unsigned short int dataSize, unsigned int *data)
{
  return (char)1;
}
 8008bcc:	2001      	movs	r0, #1
 8008bce:	4770      	bx	lr

08008bd0 <MotionFX_SaveMagCalInNVM>:
 * @retval (1) fail, (0) success
 */
char MotionFX_SaveMagCalInNVM(unsigned short int dataSize, unsigned int *data)
{
  return (char)1;
}
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	4770      	bx	lr

08008bd4 <ByteStuffCopyByte>:
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
  int ret = 2;

  switch (Source)
 8008bd4:	29f0      	cmp	r1, #240	; 0xf0
 8008bd6:	d004      	beq.n	8008be2 <ByteStuffCopyByte+0xe>
 8008bd8:	29f1      	cmp	r1, #241	; 0xf1
 8008bda:	d008      	beq.n	8008bee <ByteStuffCopyByte+0x1a>
      Dest[0] = TMsg_BS;
      Dest[1] = TMsg_BS;
      break;

    default:
      Dest[0] = Source;
 8008bdc:	7001      	strb	r1, [r0, #0]
      ret = 1;
 8008bde:	2001      	movs	r0, #1
      break;
  }

  return ret;
}
 8008be0:	4770      	bx	lr
      Dest[0] = TMsg_BS;
 8008be2:	23f1      	movs	r3, #241	; 0xf1
 8008be4:	7003      	strb	r3, [r0, #0]
      Dest[1] = TMsg_BS_EOF;
 8008be6:	23f2      	movs	r3, #242	; 0xf2
 8008be8:	7043      	strb	r3, [r0, #1]
  int ret = 2;
 8008bea:	2002      	movs	r0, #2
      break;
 8008bec:	4770      	bx	lr
      Dest[0] = TMsg_BS;
 8008bee:	23f1      	movs	r3, #241	; 0xf1
 8008bf0:	7003      	strb	r3, [r0, #0]
      Dest[1] = TMsg_BS;
 8008bf2:	7043      	strb	r3, [r0, #1]
  int ret = 2;
 8008bf4:	2002      	movs	r0, #2
      break;
 8008bf6:	4770      	bx	lr

08008bf8 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	460e      	mov	r6, r1
  uint32_t i;
  int32_t count = 0;
 8008bfe:	2500      	movs	r5, #0

  for (i = 0; i < Source->Len; i++)
 8008c00:	462c      	mov	r4, r5
 8008c02:	e006      	b.n	8008c12 <ByteStuffCopy+0x1a>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8008c04:	1933      	adds	r3, r6, r4
 8008c06:	7919      	ldrb	r1, [r3, #4]
 8008c08:	1978      	adds	r0, r7, r5
 8008c0a:	f7ff ffe3 	bl	8008bd4 <ByteStuffCopyByte>
 8008c0e:	4405      	add	r5, r0
  for (i = 0; i < Source->Len; i++)
 8008c10:	3401      	adds	r4, #1
 8008c12:	6833      	ldr	r3, [r6, #0]
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	d8f5      	bhi.n	8008c04 <ByteStuffCopy+0xc>
  }

  Dest[count] = TMsg_EOF;
 8008c18:	23f0      	movs	r3, #240	; 0xf0
 8008c1a:	557b      	strb	r3, [r7, r5]
  count++;
  return count;
}
 8008c1c:	1c68      	adds	r0, r5, #1
 8008c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c20 <ReverseByteStuffCopyByte2>:
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
  if (Source0 == (uint8_t)TMsg_BS)
 8008c20:	28f1      	cmp	r0, #241	; 0xf1
 8008c22:	d002      	beq.n	8008c2a <ReverseByteStuffCopyByte2+0xa>

    return 0; // invalid sequence
  }
  else
  {
    *Dest = Source0;
 8008c24:	7010      	strb	r0, [r2, #0]
    return 1;
 8008c26:	2001      	movs	r0, #1
 8008c28:	4770      	bx	lr
    if (Source1 == (uint8_t)TMsg_BS)
 8008c2a:	29f1      	cmp	r1, #241	; 0xf1
 8008c2c:	d003      	beq.n	8008c36 <ReverseByteStuffCopyByte2+0x16>
    if (Source1 == (uint8_t)TMsg_BS_EOF)
 8008c2e:	29f2      	cmp	r1, #242	; 0xf2
 8008c30:	d005      	beq.n	8008c3e <ReverseByteStuffCopyByte2+0x1e>
    return 0; // invalid sequence
 8008c32:	2000      	movs	r0, #0
  }
}
 8008c34:	4770      	bx	lr
      *Dest = TMsg_BS;
 8008c36:	23f1      	movs	r3, #241	; 0xf1
 8008c38:	7013      	strb	r3, [r2, #0]
      return 2;
 8008c3a:	2002      	movs	r0, #2
 8008c3c:	4770      	bx	lr
      *Dest = TMsg_EOF;
 8008c3e:	23f0      	movs	r3, #240	; 0xf0
 8008c40:	7013      	strb	r3, [r2, #0]
      return 2;
 8008c42:	2002      	movs	r0, #2
 8008c44:	4770      	bx	lr

08008c46 <CHK_ComputeAndAdd>:
void CHK_ComputeAndAdd(TMsg *Msg)
{
  uint8_t chk = 0;
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8008c46:	2300      	movs	r3, #0
  uint8_t chk = 0;
 8008c48:	461a      	mov	r2, r3
  for (i = 0; i < Msg->Len; i++)
 8008c4a:	e004      	b.n	8008c56 <CHK_ComputeAndAdd+0x10>
  {
    chk -= Msg->Data[i];
 8008c4c:	18c1      	adds	r1, r0, r3
 8008c4e:	7909      	ldrb	r1, [r1, #4]
 8008c50:	1a52      	subs	r2, r2, r1
 8008c52:	b2d2      	uxtb	r2, r2
  for (i = 0; i < Msg->Len; i++)
 8008c54:	3301      	adds	r3, #1
 8008c56:	6801      	ldr	r1, [r0, #0]
 8008c58:	4299      	cmp	r1, r3
 8008c5a:	d8f7      	bhi.n	8008c4c <CHK_ComputeAndAdd+0x6>
  }

  Msg->Data[i] = chk;
 8008c5c:	4403      	add	r3, r0
 8008c5e:	711a      	strb	r2, [r3, #4]
  Msg->Len++;
 8008c60:	3101      	adds	r1, #1
 8008c62:	6001      	str	r1, [r0, #0]
}
 8008c64:	4770      	bx	lr

08008c66 <CHK_CheckAndRemove>:
int CHK_CheckAndRemove(TMsg *Msg)
{
  uint8_t chk = 0;
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8008c66:	2300      	movs	r3, #0
  uint8_t chk = 0;
 8008c68:	461a      	mov	r2, r3
  for (i = 0; i < Msg->Len; i++)
 8008c6a:	e004      	b.n	8008c76 <CHK_CheckAndRemove+0x10>
  {
    chk += Msg->Data[i];
 8008c6c:	18c1      	adds	r1, r0, r3
 8008c6e:	7909      	ldrb	r1, [r1, #4]
 8008c70:	440a      	add	r2, r1
 8008c72:	b2d2      	uxtb	r2, r2
  for (i = 0; i < Msg->Len; i++)
 8008c74:	3301      	adds	r3, #1
 8008c76:	6801      	ldr	r1, [r0, #0]
 8008c78:	4299      	cmp	r1, r3
 8008c7a:	d8f7      	bhi.n	8008c6c <CHK_CheckAndRemove+0x6>
  }

  Msg->Len--;
 8008c7c:	3901      	subs	r1, #1
 8008c7e:	6001      	str	r1, [r0, #0]
  return (int32_t)(chk == 0U);
}
 8008c80:	fab2 f082 	clz	r0, r2
 8008c84:	0940      	lsrs	r0, r0, #5
 8008c86:	4770      	bx	lr

08008c88 <Deserialize>:
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
  uint32_t app;

  app = Source[--Len];
 8008c88:	3901      	subs	r1, #1
 8008c8a:	5c43      	ldrb	r3, [r0, r1]
  while (Len > 0U)
 8008c8c:	e003      	b.n	8008c96 <Deserialize+0xe>
  {
    app <<= 8;
    app += Source[--Len];
 8008c8e:	3901      	subs	r1, #1
 8008c90:	5c42      	ldrb	r2, [r0, r1]
 8008c92:	eb02 2303 	add.w	r3, r2, r3, lsl #8
  while (Len > 0U)
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d1f9      	bne.n	8008c8e <Deserialize+0x6>
  }

  return app;
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	4770      	bx	lr

08008c9e <Serialize_s32>:
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e002      	b.n	8008ca8 <Serialize_s32+0xa>
  {
    source_uint32 = (uint32_t)Source;
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8008ca2:	54c1      	strb	r1, [r0, r3]
    source_uint32 >>= 8;
 8008ca4:	0a09      	lsrs	r1, r1, #8
  for (i = 0; i < Len; i++)
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d3fa      	bcc.n	8008ca2 <Serialize_s32+0x4>
    Source = (int32_t)source_uint32;
  }
}
 8008cac:	4770      	bx	lr
	...

08008cb0 <m_mldivide>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	ed2d 8b02 	vpush	{d8}
 8008cb8:	b099      	sub	sp, #100	; 0x64
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	f100 0820 	add.w	r8, r0, #32
 8008cc6:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8008cca:	6838      	ldr	r0, [r7, #0]
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	46f4      	mov	ip, lr
 8008cd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008cd8:	3710      	adds	r7, #16
 8008cda:	4547      	cmp	r7, r8
 8008cdc:	46e6      	mov	lr, ip
 8008cde:	d1f4      	bne.n	8008cca <m_mldivide+0x1a>
 8008ce0:	edd6 7a00 	vldr	s15, [r6]
 8008ce4:	ed96 7a01 	vldr	s14, [r6, #4]
 8008ce8:	6838      	ldr	r0, [r7, #0]
 8008cea:	f8cc 0000 	str.w	r0, [ip]
 8008cee:	eef0 7ae7 	vabs.f32	s15, s15
 8008cf2:	eeb0 7ac7 	vabs.f32	s14, s14
 8008cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	f100 8173 	bmi.w	8008fe8 <m_mldivide+0x338>
 8008d02:	2307      	movs	r3, #7
 8008d04:	2004      	movs	r0, #4
 8008d06:	f04f 0b00 	mov.w	fp, #0
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	9004      	str	r0, [sp, #16]
 8008d10:	eeb0 7a67 	vmov.f32	s14, s15
 8008d14:	46de      	mov	lr, fp
 8008d16:	f04f 0806 	mov.w	r8, #6
 8008d1a:	2703      	movs	r7, #3
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	edd6 7a02 	vldr	s15, [r6, #8]
 8008d22:	eef0 7ae7 	vabs.f32	s15, s15
 8008d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2e:	f300 816a 	bgt.w	8009006 <m_mldivide+0x356>
 8008d32:	2202      	movs	r2, #2
 8008d34:	9202      	str	r2, [sp, #8]
 8008d36:	9a01      	ldr	r2, [sp, #4]
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f04f 0c05 	mov.w	ip, #5
 8008d3e:	4430      	add	r0, r6
 8008d40:	4476      	add	r6, lr
 8008d42:	edd0 6a00 	vldr	s13, [r0]
 8008d46:	ed96 7a00 	vldr	s14, [r6]
 8008d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d4e:	0090      	lsls	r0, r2, #2
 8008d50:	aa18      	add	r2, sp, #96	; 0x60
 8008d52:	eb02 0e00 	add.w	lr, r2, r0
 8008d56:	9006      	str	r0, [sp, #24]
 8008d58:	9a02      	ldr	r2, [sp, #8]
 8008d5a:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8008d5e:	ae18      	add	r6, sp, #96	; 0x60
 8008d60:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d62:	1830      	adds	r0, r6, r0
 8008d64:	9e04      	ldr	r6, [sp, #16]
 8008d66:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8008d6a:	aa18      	add	r2, sp, #96	; 0x60
 8008d6c:	00b6      	lsls	r6, r6, #2
 8008d6e:	4452      	add	r2, sl
 8008d70:	9208      	str	r2, [sp, #32]
 8008d72:	00bf      	lsls	r7, r7, #2
 8008d74:	4632      	mov	r2, r6
 8008d76:	9607      	str	r6, [sp, #28]
 8008d78:	ae18      	add	r6, sp, #96	; 0x60
 8008d7a:	970c      	str	r7, [sp, #48]	; 0x30
 8008d7c:	19f7      	adds	r7, r6, r7
 8008d7e:	9709      	str	r7, [sp, #36]	; 0x24
 8008d80:	4637      	mov	r7, r6
 8008d82:	18b9      	adds	r1, r7, r2
 8008d84:	9103      	str	r1, [sp, #12]
 8008d86:	9908      	ldr	r1, [sp, #32]
 8008d88:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 8008d8c:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8008d90:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8008d94:	9805      	ldr	r0, [sp, #20]
 8008d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d9a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8008d9e:	0080      	lsls	r0, r0, #2
 8008da0:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8008da4:	eb07 0c09 	add.w	ip, r7, r9
 8008da8:	4616      	mov	r6, r2
 8008daa:	4607      	mov	r7, r0
 8008dac:	920d      	str	r2, [sp, #52]	; 0x34
 8008dae:	aa18      	add	r2, sp, #96	; 0x60
 8008db0:	9008      	str	r0, [sp, #32]
 8008db2:	1990      	adds	r0, r2, r6
 8008db4:	19d6      	adds	r6, r2, r7
 8008db6:	960a      	str	r6, [sp, #40]	; 0x28
 8008db8:	9f03      	ldr	r7, [sp, #12]
 8008dba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dbc:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 8008dc0:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 8008dc4:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 8008dc8:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 8008dcc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	eb02 0803 	add.w	r8, r2, r3
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 8008ddc:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8008de0:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 8008de4:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 8008de8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008dec:	4611      	mov	r1, r2
 8008dee:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 8008df2:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 8008df6:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8008dfa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008dfc:	9f03      	ldr	r7, [sp, #12]
 8008dfe:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 8008e02:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008e06:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 8008e0a:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8008e0e:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8008e12:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 8008e16:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008e1a:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 8008e1e:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 8008e22:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 8008e26:	eeb0 6ae7 	vabs.f32	s12, s15
 8008e2a:	eef0 6ac7 	vabs.f32	s13, s14
 8008e2e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8008e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e36:	dc14      	bgt.n	8008e62 <m_mldivide+0x1b2>
 8008e38:	9802      	ldr	r0, [sp, #8]
 8008e3a:	9901      	ldr	r1, [sp, #4]
 8008e3c:	9e04      	ldr	r6, [sp, #16]
 8008e3e:	9001      	str	r0, [sp, #4]
 8008e40:	9805      	ldr	r0, [sp, #20]
 8008e42:	f8cd a018 	str.w	sl, [sp, #24]
 8008e46:	eef0 6a47 	vmov.f32	s13, s14
 8008e4a:	e9cd 9307 	strd	r9, r3, [sp, #28]
 8008e4e:	eeb0 7a67 	vmov.f32	s14, s15
 8008e52:	9102      	str	r1, [sp, #8]
 8008e54:	eef0 7a66 	vmov.f32	s15, s13
 8008e58:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008e5c:	0083      	lsls	r3, r0, #2
 8008e5e:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8008e62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008e66:	9a07      	ldr	r2, [sp, #28]
 8008e68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008e6a:	a818      	add	r0, sp, #96	; 0x60
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4616      	mov	r6, r2
 8008e70:	9a08      	ldr	r2, [sp, #32]
 8008e72:	4402      	add	r2, r0
 8008e74:	4610      	mov	r0, r2
 8008e76:	aa18      	add	r2, sp, #96	; 0x60
 8008e78:	1899      	adds	r1, r3, r2
 8008e7a:	eb05 0e07 	add.w	lr, r5, r7
 8008e7e:	ed9e 7a00 	vldr	s14, [lr]
 8008e82:	ed46 6a09 	vstr	s13, [r6, #-36]	; 0xffffffdc
 8008e86:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 8008e8a:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 8008e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e90:	ed84 7a00 	vstr	s14, [r4]
 8008e94:	eee6 7ac6 	vfms.f32	s15, s13, s12
 8008e98:	eb02 0e0a 	add.w	lr, r2, sl
 8008e9c:	4413      	add	r3, r2
 8008e9e:	44aa      	add	sl, r5
 8008ea0:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 8008ea4:	ed5e 1a09 	vldr	s3, [lr, #-36]	; 0xffffffdc
 8008ea8:	edda 6a00 	vldr	s13, [sl]
 8008eac:	ed56 2a09 	vldr	s5, [r6, #-36]	; 0xffffffdc
 8008eb0:	ed11 3a09 	vldr	s6, [r1, #-36]	; 0xffffffdc
 8008eb4:	4698      	mov	r8, r3
 8008eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb8:	ed58 3a09 	vldr	s7, [r8, #-36]	; 0xffffffdc
 8008ebc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008ec0:	eef1 8a61 	vneg.f32	s17, s3
 8008ec4:	eee8 6a87 	vfma.f32	s13, s17, s14
 8008ec8:	4413      	add	r3, r2
 8008eca:	eb02 0c07 	add.w	ip, r2, r7
 8008ece:	eec1 4a27 	vdiv.f32	s9, s2, s15
 8008ed2:	461f      	mov	r7, r3
 8008ed4:	9b06      	ldr	r3, [sp, #24]
 8008ed6:	4491      	add	r9, r2
 8008ed8:	eb02 0e03 	add.w	lr, r2, r3
 8008edc:	18e8      	adds	r0, r5, r3
 8008ede:	9a02      	ldr	r2, [sp, #8]
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8008ee6:	edc4 6a01 	vstr	s13, [r4, #4]
 8008eea:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 8008eee:	ed1e 2a09 	vldr	s4, [lr, #-36]	; 0xffffffdc
 8008ef2:	ed90 6a00 	vldr	s12, [r0]
 8008ef6:	ed5c 0a09 	vldr	s1, [ip, #-36]	; 0xffffffdc
 8008efa:	ed17 4a09 	vldr	s8, [r7, #-36]	; 0xffffffdc
 8008efe:	ee81 5a25 	vdiv.f32	s10, s2, s11
 8008f02:	eb05 0c8b 	add.w	ip, r5, fp, lsl #2
 8008f06:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8008f0a:	eeb1 8a42 	vneg.f32	s16, s4
 8008f0e:	eea8 6a07 	vfma.f32	s12, s16, s14
 8008f12:	eeb1 0a62 	vneg.f32	s0, s5
 8008f16:	eea0 6a26 	vfma.f32	s12, s0, s13
 8008f1a:	eec1 5a20 	vdiv.f32	s11, s2, s1
 8008f1e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008f22:	eef1 0a43 	vneg.f32	s1, s6
 8008f26:	eee0 6a86 	vfma.f32	s13, s1, s12
 8008f2a:	eeb1 1a63 	vneg.f32	s2, s7
 8008f2e:	eea1 7a06 	vfma.f32	s14, s2, s12
 8008f32:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008f36:	eef1 7a44 	vneg.f32	s15, s8
 8008f3a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008f3e:	ed84 6a02 	vstr	s12, [r4, #8]
 8008f42:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008f46:	edc4 6a01 	vstr	s13, [r4, #4]
 8008f4a:	ed84 7a00 	vstr	s14, [r4]
 8008f4e:	ed9c 7a03 	vldr	s14, [ip, #12]
 8008f52:	ed84 7a03 	vstr	s14, [r4, #12]
 8008f56:	edd7 6a03 	vldr	s13, [r7, #12]
 8008f5a:	eee8 6a87 	vfma.f32	s13, s17, s14
 8008f5e:	edc4 6a04 	vstr	s13, [r4, #16]
 8008f62:	ed96 6a03 	vldr	s12, [r6, #12]
 8008f66:	eea8 6a07 	vfma.f32	s12, s16, s14
 8008f6a:	eea0 6a26 	vfma.f32	s12, s0, s13
 8008f6e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008f72:	eee0 6a86 	vfma.f32	s13, s1, s12
 8008f76:	eea1 7a06 	vfma.f32	s14, s2, s12
 8008f7a:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008f7e:	ed84 6a05 	vstr	s12, [r4, #20]
 8008f82:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008f86:	edc4 6a04 	vstr	s13, [r4, #16]
 8008f8a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008f8e:	ed84 7a03 	vstr	s14, [r4, #12]
 8008f92:	ed9c 7a06 	vldr	s14, [ip, #24]
 8008f96:	ed84 7a06 	vstr	s14, [r4, #24]
 8008f9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f9e:	eeb1 6a47 	vneg.f32	s12, s14
 8008fa2:	eee6 7a21 	vfma.f32	s15, s12, s3
 8008fa6:	edc4 7a07 	vstr	s15, [r4, #28]
 8008faa:	edd6 6a06 	vldr	s13, [r6, #24]
 8008fae:	eee6 6a02 	vfma.f32	s13, s12, s4
 8008fb2:	eee7 6ae2 	vfms.f32	s13, s15, s5
 8008fb6:	ee66 4aa4 	vmul.f32	s9, s13, s9
 8008fba:	eef1 6a64 	vneg.f32	s13, s9
 8008fbe:	eee6 7a83 	vfma.f32	s15, s13, s6
 8008fc2:	eea6 7aa3 	vfma.f32	s14, s13, s7
 8008fc6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008fca:	edc4 4a08 	vstr	s9, [r4, #32]
 8008fce:	eea7 7ac4 	vfms.f32	s14, s15, s8
 8008fd2:	edc4 7a07 	vstr	s15, [r4, #28]
 8008fd6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008fda:	ed84 7a06 	vstr	s14, [r4, #24]
 8008fde:	b019      	add	sp, #100	; 0x64
 8008fe0:	ecbd 8b02 	vpop	{d8}
 8008fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2704      	movs	r7, #4
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f04f 0c06 	mov.w	ip, #6
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	46be      	mov	lr, r7
 8008ff8:	f04f 0807 	mov.w	r8, #7
 8008ffc:	e9cd 3c04 	strd	r3, ip, [sp, #16]
 8009000:	f04f 0b01 	mov.w	fp, #1
 8009004:	e68b      	b.n	8008d1e <m_mldivide+0x6e>
 8009006:	2207      	movs	r2, #7
 8009008:	2304      	movs	r3, #4
 800900a:	f04f 0808 	mov.w	r8, #8
 800900e:	9205      	str	r2, [sp, #20]
 8009010:	2100      	movs	r1, #0
 8009012:	2201      	movs	r2, #1
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	4618      	mov	r0, r3
 8009018:	46c6      	mov	lr, r8
 800901a:	2306      	movs	r3, #6
 800901c:	f04f 0c03 	mov.w	ip, #3
 8009020:	2705      	movs	r7, #5
 8009022:	f04f 0b02 	mov.w	fp, #2
 8009026:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800902a:	e688      	b.n	8008d3e <m_mldivide+0x8e>

0800902c <m_qmult_eml>:
 800902c:	ed91 3a02 	vldr	s6, [r1, #8]
 8009030:	edd0 3a01 	vldr	s7, [r0, #4]
 8009034:	ed91 5a03 	vldr	s10, [r1, #12]
 8009038:	ed90 4a02 	vldr	s8, [r0, #8]
 800903c:	ed91 2a00 	vldr	s4, [r1]
 8009040:	edd1 2a01 	vldr	s5, [r1, #4]
 8009044:	edd0 4a00 	vldr	s9, [r0]
 8009048:	edd0 5a03 	vldr	s11, [r0, #12]
 800904c:	eeb1 1a43 	vneg.f32	s2, s6
 8009050:	ee23 6a83 	vmul.f32	s12, s7, s6
 8009054:	ee24 7a01 	vmul.f32	s14, s8, s2
 8009058:	ee64 6a02 	vmul.f32	s13, s8, s4
 800905c:	ee64 7a05 	vmul.f32	s15, s8, s10
 8009060:	eef1 0a62 	vneg.f32	s1, s5
 8009064:	eef1 1a42 	vneg.f32	s3, s4
 8009068:	eea4 6a85 	vfma.f32	s12, s9, s10
 800906c:	eea3 7aa0 	vfma.f32	s14, s7, s1
 8009070:	eee3 6a85 	vfma.f32	s13, s7, s10
 8009074:	eee3 7aa1 	vfma.f32	s15, s7, s3
 8009078:	eea4 6a20 	vfma.f32	s12, s8, s1
 800907c:	eee4 6a81 	vfma.f32	s13, s9, s2
 8009080:	eea4 7aa1 	vfma.f32	s14, s9, s3
 8009084:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8009088:	eea5 6a82 	vfma.f32	s12, s11, s4
 800908c:	eee5 6aa2 	vfma.f32	s13, s11, s5
 8009090:	eea5 7a85 	vfma.f32	s14, s11, s10
 8009094:	eee5 7a83 	vfma.f32	s15, s11, s6
 8009098:	ed82 6a00 	vstr	s12, [r2]
 800909c:	edc2 6a01 	vstr	s13, [r2, #4]
 80090a0:	ed82 7a03 	vstr	s14, [r2, #12]
 80090a4:	edc2 7a02 	vstr	s15, [r2, #8]
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop

080090ac <m_q2dcm_eml>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	ed2d 8b06 	vpush	{d8-d10}
 80090b2:	edd0 9a01 	vldr	s19, [r0, #4]
 80090b6:	ed90 9a03 	vldr	s18, [r0, #12]
 80090ba:	ed90 8a00 	vldr	s16, [r0]
 80090be:	edd0 8a02 	vldr	s17, [r0, #8]
 80090c2:	ee29 aaa9 	vmul.f32	s20, s19, s19
 80090c6:	ee69 aa09 	vmul.f32	s21, s18, s18
 80090ca:	460c      	mov	r4, r1
 80090cc:	1d08      	adds	r0, r1, #4
 80090ce:	2220      	movs	r2, #32
 80090d0:	2100      	movs	r1, #0
 80090d2:	f00a fd84 	bl	8013bde <memset>
 80090d6:	eef1 4a48 	vneg.f32	s9, s16
 80090da:	eeb0 5a4a 	vmov.f32	s10, s20
 80090de:	eef0 5a4a 	vmov.f32	s11, s20
 80090e2:	eeb0 6a6a 	vmov.f32	s12, s21
 80090e6:	eee4 5a88 	vfma.f32	s11, s9, s16
 80090ea:	ee98 5a08 	vfnms.f32	s10, s16, s16
 80090ee:	eea8 6aa8 	vfma.f32	s12, s17, s17
 80090f2:	eeb1 4a68 	vneg.f32	s8, s17
 80090f6:	ee29 7aa8 	vmul.f32	s14, s19, s17
 80090fa:	ee68 6a89 	vmul.f32	s13, s17, s18
 80090fe:	ee69 7a89 	vmul.f32	s15, s19, s18
 8009102:	eea4 5a28 	vfma.f32	s10, s8, s17
 8009106:	eee4 5a28 	vfma.f32	s11, s8, s17
 800910a:	eea4 6a88 	vfma.f32	s12, s9, s16
 800910e:	eeb0 4a47 	vmov.f32	s8, s14
 8009112:	eea4 4a89 	vfma.f32	s8, s9, s18
 8009116:	eef0 3a66 	vmov.f32	s7, s13
 800911a:	eef0 4a67 	vmov.f32	s9, s15
 800911e:	eee8 3a29 	vfma.f32	s7, s16, s19
 8009122:	eed8 6a29 	vfnms.f32	s13, s16, s19
 8009126:	eea8 7a09 	vfma.f32	s14, s16, s18
 800912a:	eed8 4a28 	vfnms.f32	s9, s16, s17
 800912e:	eee8 7a28 	vfma.f32	s15, s16, s17
 8009132:	ee35 5a2a 	vadd.f32	s10, s10, s21
 8009136:	ee75 5aaa 	vadd.f32	s11, s11, s21
 800913a:	ee36 6a4a 	vsub.f32	s12, s12, s20
 800913e:	ecbd 8b06 	vpop	{d8-d10}
 8009142:	ee73 3aa3 	vadd.f32	s7, s7, s7
 8009146:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800914a:	ee34 4a04 	vadd.f32	s8, s8, s8
 800914e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009152:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8009156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800915a:	ed84 5a00 	vstr	s10, [r4]
 800915e:	edc4 5a04 	vstr	s11, [r4, #16]
 8009162:	ed84 6a08 	vstr	s12, [r4, #32]
 8009166:	edc4 3a03 	vstr	s7, [r4, #12]
 800916a:	edc4 6a01 	vstr	s13, [r4, #4]
 800916e:	ed84 4a05 	vstr	s8, [r4, #20]
 8009172:	ed84 7a07 	vstr	s14, [r4, #28]
 8009176:	edc4 4a06 	vstr	s9, [r4, #24]
 800917a:	edc4 7a02 	vstr	s15, [r4, #8]
 800917e:	bd10      	pop	{r4, pc}

08009180 <MEMS_EmptyDataFrame>:
 8009180:	2300      	movs	r3, #0
 8009182:	8103      	strh	r3, [r0, #8]
 8009184:	60c3      	str	r3, [r0, #12]
 8009186:	4770      	bx	lr

08009188 <MEMS_DataBuffInit>:
 8009188:	b510      	push	{r4, lr}
 800918a:	4604      	mov	r4, r0
 800918c:	f7ff fff8 	bl	8009180 <MEMS_EmptyDataFrame>
 8009190:	2382      	movs	r3, #130	; 0x82
 8009192:	8163      	strh	r3, [r4, #10]
 8009194:	4b01      	ldr	r3, [pc, #4]	; (800919c <MEMS_DataBuffInit+0x14>)
 8009196:	6123      	str	r3, [r4, #16]
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	20001398 	.word	0x20001398

080091a0 <MEMS_checkTimeToRun>:
 80091a0:	7803      	ldrb	r3, [r0, #0]
 80091a2:	b363      	cbz	r3, 80091fe <MEMS_checkTimeToRun+0x5e>
 80091a4:	890b      	ldrh	r3, [r1, #8]
 80091a6:	894a      	ldrh	r2, [r1, #10]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d027      	beq.n	80091fc <MEMS_checkTimeToRun+0x5c>
 80091ac:	b430      	push	{r4, r5}
 80091ae:	b373      	cbz	r3, 800920e <MEMS_checkTimeToRun+0x6e>
 80091b0:	68ca      	ldr	r2, [r1, #12]
 80091b2:	3201      	adds	r2, #1
 80091b4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80091b8:	441a      	add	r2, r3
 80091ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091be:	bf08      	it	eq
 80091c0:	2200      	moveq	r2, #0
 80091c2:	f502 531c 	add.w	r3, r2, #9984	; 0x2700
 80091c6:	3310      	adds	r3, #16
 80091c8:	6844      	ldr	r4, [r0, #4]
 80091ca:	429c      	cmp	r4, r3
 80091cc:	bf88      	it	hi
 80091ce:	6042      	strhi	r2, [r0, #4]
 80091d0:	8905      	ldrh	r5, [r0, #8]
 80091d2:	6844      	ldr	r4, [r0, #4]
 80091d4:	442c      	add	r4, r5
 80091d6:	4294      	cmp	r4, r2
 80091d8:	d815      	bhi.n	8009206 <MEMS_checkTimeToRun+0x66>
 80091da:	890b      	ldrh	r3, [r1, #8]
 80091dc:	b18b      	cbz	r3, 8009202 <MEMS_checkTimeToRun+0x62>
 80091de:	3b01      	subs	r3, #1
 80091e0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80091e4:	68c9      	ldr	r1, [r1, #12]
 80091e6:	fb04 1313 	mls	r3, r4, r3, r1
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	42ab      	cmp	r3, r5
 80091f0:	bfb4      	ite	lt
 80091f2:	2300      	movlt	r3, #0
 80091f4:	2301      	movge	r3, #1
 80091f6:	4618      	mov	r0, r3
 80091f8:	bc30      	pop	{r4, r5}
 80091fa:	4770      	bx	lr
 80091fc:	2301      	movs	r3, #1
 80091fe:	4618      	mov	r0, r3
 8009200:	4770      	bx	lr
 8009202:	2300      	movs	r3, #0
 8009204:	e7f1      	b.n	80091ea <MEMS_checkTimeToRun+0x4a>
 8009206:	2300      	movs	r3, #0
 8009208:	4618      	mov	r0, r3
 800920a:	bc30      	pop	{r4, r5}
 800920c:	4770      	bx	lr
 800920e:	2200      	movs	r2, #0
 8009210:	e7d7      	b.n	80091c2 <MEMS_checkTimeToRun+0x22>
 8009212:	bf00      	nop

08009214 <updateProcBuffer_Temp>:
 8009214:	f8d1 c000 	ldr.w	ip, [r1]
 8009218:	790b      	ldrb	r3, [r1, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d05a      	beq.n	80092d4 <updateProcBuffer_Temp+0xc0>
 800921e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009222:	2400      	movs	r4, #0
 8009224:	f04f 087a 	mov.w	r8, #122	; 0x7a
 8009228:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800922c:	f04f 0e01 	mov.w	lr, #1
 8009230:	fb08 1604 	mla	r6, r8, r4, r1
 8009234:	79b3      	ldrb	r3, [r6, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d045      	beq.n	80092c6 <updateProcBuffer_Temp+0xb2>
 800923a:	8943      	ldrh	r3, [r0, #10]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d042      	beq.n	80092c6 <updateProcBuffer_Temp+0xb2>
 8009240:	8902      	ldrh	r2, [r0, #8]
 8009242:	4293      	cmp	r3, r2
 8009244:	bf28      	it	cs
 8009246:	4613      	movcs	r3, r2
 8009248:	8103      	strh	r3, [r0, #8]
 800924a:	79b3      	ldrb	r3, [r6, #6]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d03a      	beq.n	80092c6 <updateProcBuffer_Temp+0xb2>
 8009250:	2200      	movs	r2, #0
 8009252:	fb08 f704 	mul.w	r7, r8, r4
 8009256:	8903      	ldrh	r3, [r0, #8]
 8009258:	3301      	adds	r3, #1
 800925a:	b29b      	uxth	r3, r3
 800925c:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8009260:	454b      	cmp	r3, r9
 8009262:	bf28      	it	cs
 8009264:	464b      	movcs	r3, r9
 8009266:	8103      	strh	r3, [r0, #8]
 8009268:	eb03 0905 	add.w	r9, r3, r5
 800926c:	6903      	ldr	r3, [r0, #16]
 800926e:	f803 e039 	strb.w	lr, [r3, r9, lsl #3]
 8009272:	eb07 09c2 	add.w	r9, r7, r2, lsl #3
 8009276:	4489      	add	r9, r1
 8009278:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
 800927c:	8903      	ldrh	r3, [r0, #8]
 800927e:	eb03 0b05 	add.w	fp, r3, r5
 8009282:	6903      	ldr	r3, [r0, #16]
 8009284:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009288:	f8a3 a002 	strh.w	sl, [r3, #2]
 800928c:	f9b9 a00c 	ldrsh.w	sl, [r9, #12]
 8009290:	8903      	ldrh	r3, [r0, #8]
 8009292:	eb03 0b05 	add.w	fp, r3, r5
 8009296:	6903      	ldr	r3, [r0, #16]
 8009298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800929c:	f8a3 a004 	strh.w	sl, [r3, #4]
 80092a0:	f9b9 a00e 	ldrsh.w	sl, [r9, #14]
 80092a4:	8903      	ldrh	r3, [r0, #8]
 80092a6:	eb03 0b05 	add.w	fp, r3, r5
 80092aa:	6903      	ldr	r3, [r0, #16]
 80092ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092b0:	f8a3 a006 	strh.w	sl, [r3, #6]
 80092b4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80092b8:	4463      	add	r3, ip
 80092ba:	60c3      	str	r3, [r0, #12]
 80092bc:	3201      	adds	r2, #1
 80092be:	b2d2      	uxtb	r2, r2
 80092c0:	79b3      	ldrb	r3, [r6, #6]
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d8c7      	bhi.n	8009256 <updateProcBuffer_Temp+0x42>
 80092c6:	3401      	adds	r4, #1
 80092c8:	b2e4      	uxtb	r4, r4
 80092ca:	790b      	ldrb	r3, [r1, #4]
 80092cc:	42a3      	cmp	r3, r4
 80092ce:	d8af      	bhi.n	8009230 <updateProcBuffer_Temp+0x1c>
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop

080092d8 <MEMS_getSensorData_I16>:
 80092d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	8903      	ldrh	r3, [r0, #8]
 80092de:	fa1f fe82 	uxth.w	lr, r2
 80092e2:	4573      	cmp	r3, lr
 80092e4:	d95e      	bls.n	80093a4 <MEMS_getSensorData_I16+0xcc>
 80092e6:	f8a1 e004 	strh.w	lr, [r1, #4]
 80092ea:	f890 c008 	ldrb.w	ip, [r0, #8]
 80092ee:	ebac 0c02 	sub.w	ip, ip, r2
 80092f2:	fa5f fc8c 	uxtb.w	ip, ip
 80092f6:	8903      	ldrh	r3, [r0, #8]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80092fe:	68c5      	ldr	r5, [r0, #12]
 8009300:	fb04 5313 	mls	r3, r4, r3, r5
 8009304:	600b      	str	r3, [r1, #0]
 8009306:	888b      	ldrh	r3, [r1, #4]
 8009308:	b1db      	cbz	r3, 8009342 <MEMS_getSensorData_I16+0x6a>
 800930a:	2600      	movs	r6, #0
 800930c:	00f7      	lsls	r7, r6, #3
 800930e:	6903      	ldr	r3, [r0, #16]
 8009310:	f813 4036 	ldrb.w	r4, [r3, r6, lsl #3]
 8009314:	688b      	ldr	r3, [r1, #8]
 8009316:	f803 4036 	strb.w	r4, [r3, r6, lsl #3]
 800931a:	2500      	movs	r5, #0
 800931c:	6903      	ldr	r3, [r0, #16]
 800931e:	19dc      	adds	r4, r3, r7
 8009320:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8009324:	4444      	add	r4, r8
 8009326:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800932a:	688b      	ldr	r3, [r1, #8]
 800932c:	443b      	add	r3, r7
 800932e:	4443      	add	r3, r8
 8009330:	805c      	strh	r4, [r3, #2]
 8009332:	3501      	adds	r5, #1
 8009334:	2d03      	cmp	r5, #3
 8009336:	d1f1      	bne.n	800931c <MEMS_getSensorData_I16+0x44>
 8009338:	3601      	adds	r6, #1
 800933a:	b2f6      	uxtb	r6, r6
 800933c:	888b      	ldrh	r3, [r1, #4]
 800933e:	42b3      	cmp	r3, r6
 8009340:	d8e4      	bhi.n	800930c <MEMS_getSensorData_I16+0x34>
 8009342:	8903      	ldrh	r3, [r0, #8]
 8009344:	459e      	cmp	lr, r3
 8009346:	d22a      	bcs.n	800939e <MEMS_getSensorData_I16+0xc6>
 8009348:	eba3 0e0e 	sub.w	lr, r3, lr
 800934c:	f8a0 e008 	strh.w	lr, [r0, #8]
 8009350:	f1bc 0f00 	cmp.w	ip, #0
 8009354:	d021      	beq.n	800939a <MEMS_getSensorData_I16+0xc2>
 8009356:	f10c 3cff 	add.w	ip, ip, #4294967295
 800935a:	fa5f fc8c 	uxtb.w	ip, ip
 800935e:	f10c 0c01 	add.w	ip, ip, #1
 8009362:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009366:	00d2      	lsls	r2, r2, #3
 8009368:	2600      	movs	r6, #0
 800936a:	46b6      	mov	lr, r6
 800936c:	6903      	ldr	r3, [r0, #16]
 800936e:	1997      	adds	r7, r2, r6
 8009370:	5dd9      	ldrb	r1, [r3, r7]
 8009372:	5599      	strb	r1, [r3, r6]
 8009374:	2100      	movs	r1, #0
 8009376:	6903      	ldr	r3, [r0, #16]
 8009378:	19dc      	adds	r4, r3, r7
 800937a:	004d      	lsls	r5, r1, #1
 800937c:	442c      	add	r4, r5
 800937e:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8009382:	4433      	add	r3, r6
 8009384:	442b      	add	r3, r5
 8009386:	805c      	strh	r4, [r3, #2]
 8009388:	3101      	adds	r1, #1
 800938a:	2903      	cmp	r1, #3
 800938c:	d1f3      	bne.n	8009376 <MEMS_getSensorData_I16+0x9e>
 800938e:	6903      	ldr	r3, [r0, #16]
 8009390:	f803 e007 	strb.w	lr, [r3, r7]
 8009394:	3608      	adds	r6, #8
 8009396:	4566      	cmp	r6, ip
 8009398:	d1e8      	bne.n	800936c <MEMS_getSensorData_I16+0x94>
 800939a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800939e:	2300      	movs	r3, #0
 80093a0:	8103      	strh	r3, [r0, #8]
 80093a2:	e7d5      	b.n	8009350 <MEMS_getSensorData_I16+0x78>
 80093a4:	808b      	strh	r3, [r1, #4]
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	e7a4      	b.n	80092f6 <MEMS_getSensorData_I16+0x1e>

080093ac <m_dcm2q_eml>:
 80093ac:	ed90 7a04 	vldr	s14, [r0, #16]
 80093b0:	edd0 7a00 	vldr	s15, [r0]
 80093b4:	edd0 6a08 	vldr	s13, [r0, #32]
 80093b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80093c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ce:	ed2d 8b02 	vpush	{d8}
 80093d2:	4604      	mov	r4, r0
 80093d4:	460d      	mov	r5, r1
 80093d6:	f340 80bc 	ble.w	8009552 <m_dcm2q_eml+0x1a6>
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e2:	ee17 0a90 	vmov	r0, s15
 80093e6:	f7f7 f8c7 	bl	8000578 <__aeabi_f2d>
 80093ea:	f00b f9a7 	bl	801473c <sqrt>
 80093ee:	f7f7 fbf3 	bl	8000bd8 <__aeabi_d2f>
 80093f2:	ee07 0a10 	vmov	s14, r0
 80093f6:	edd4 7a05 	vldr	s15, [r4, #20]
 80093fa:	edd4 5a07 	vldr	s11, [r4, #28]
 80093fe:	ed94 5a06 	vldr	s10, [r4, #24]
 8009402:	ed94 6a02 	vldr	s12, [r4, #8]
 8009406:	edd4 6a03 	vldr	s13, [r4, #12]
 800940a:	edd4 4a01 	vldr	s9, [r4, #4]
 800940e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009412:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8009416:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800941a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	bf54      	ite	pl
 8009424:	eef0 5a48 	vmovpl.f32	s11, s16
 8009428:	eef0 5a67 	vmovmi.f32	s11, s15
 800942c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009430:	ee36 6a45 	vsub.f32	s12, s12, s10
 8009434:	ed85 7a00 	vstr	s14, [r5]
 8009438:	ed94 7a04 	vldr	s14, [r4, #16]
 800943c:	ed94 5a00 	vldr	s10, [r4]
 8009440:	edd4 5a08 	vldr	s11, [r4, #32]
 8009444:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009448:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800944c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8009450:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009458:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800945c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8009460:	bf54      	ite	pl
 8009462:	eef0 8a48 	vmovpl.f32	s17, s16
 8009466:	eef0 8a67 	vmovmi.f32	s17, s15
 800946a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009472:	bf48      	it	mi
 8009474:	eeb0 8a67 	vmovmi.f32	s16, s15
 8009478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947c:	dd66      	ble.n	800954c <m_dcm2q_eml+0x1a0>
 800947e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009486:	ee17 0a90 	vmov	r0, s15
 800948a:	f7f7 f875 	bl	8000578 <__aeabi_f2d>
 800948e:	f00b f955 	bl	801473c <sqrt>
 8009492:	f7f7 fba1 	bl	8000bd8 <__aeabi_d2f>
 8009496:	ee07 0a90 	vmov	s15, r0
 800949a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800949e:	edc5 7a01 	vstr	s15, [r5, #4]
 80094a2:	edd4 6a04 	vldr	s13, [r4, #16]
 80094a6:	ed94 7a00 	vldr	s14, [r4]
 80094aa:	edd4 7a08 	vldr	s15, [r4, #32]
 80094ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094b2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80094b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80094be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c2:	dd40      	ble.n	8009546 <m_dcm2q_eml+0x19a>
 80094c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094cc:	ee17 0a90 	vmov	r0, s15
 80094d0:	f7f7 f852 	bl	8000578 <__aeabi_f2d>
 80094d4:	f00b f932 	bl	801473c <sqrt>
 80094d8:	f7f7 fb7e 	bl	8000bd8 <__aeabi_d2f>
 80094dc:	ee07 0a90 	vmov	s15, r0
 80094e0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80094e4:	edc5 7a02 	vstr	s15, [r5, #8]
 80094e8:	ed94 7a04 	vldr	s14, [r4, #16]
 80094ec:	edd4 7a00 	vldr	s15, [r4]
 80094f0:	edd4 6a08 	vldr	s13, [r4, #32]
 80094f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80094fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009508:	dd16      	ble.n	8009538 <m_dcm2q_eml+0x18c>
 800950a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800950e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009512:	ee17 0a90 	vmov	r0, s15
 8009516:	f7f7 f82f 	bl	8000578 <__aeabi_f2d>
 800951a:	f00b f90f 	bl	801473c <sqrt>
 800951e:	f7f7 fb5b 	bl	8000bd8 <__aeabi_d2f>
 8009522:	ecbd 8b02 	vpop	{d8}
 8009526:	ee07 0a10 	vmov	s14, r0
 800952a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800952e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009532:	edc5 7a03 	vstr	s15, [r5, #12]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	ecbd 8b02 	vpop	{d8}
 800953c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009558 <m_dcm2q_eml+0x1ac>
 8009540:	edc5 7a03 	vstr	s15, [r5, #12]
 8009544:	bd38      	pop	{r3, r4, r5, pc}
 8009546:	eddf 7a04 	vldr	s15, [pc, #16]	; 8009558 <m_dcm2q_eml+0x1ac>
 800954a:	e7cb      	b.n	80094e4 <m_dcm2q_eml+0x138>
 800954c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8009558 <m_dcm2q_eml+0x1ac>
 8009550:	e7a5      	b.n	800949e <m_dcm2q_eml+0xf2>
 8009552:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8009558 <m_dcm2q_eml+0x1ac>
 8009556:	e74e      	b.n	80093f6 <m_dcm2q_eml+0x4a>
 8009558:	00000000 	.word	0x00000000

0800955c <SpacePointGyroProp>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	ed92 6a01 	vldr	s12, [r2, #4]
 8009562:	ed92 7a00 	vldr	s14, [r2]
 8009566:	edd2 6a02 	vldr	s13, [r2, #8]
 800956a:	edd1 7a02 	vldr	s15, [r1, #8]
 800956e:	ed2d 8b04 	vpush	{d8-d9}
 8009572:	edd1 8a01 	vldr	s17, [r1, #4]
 8009576:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 8009668 <SpacePointGyroProp+0x10c>
 800957a:	ed91 9a00 	vldr	s18, [r1]
 800957e:	9d08      	ldr	r5, [sp, #32]
 8009580:	ee20 8a08 	vmul.f32	s16, s0, s16
 8009584:	ee78 8ac6 	vsub.f32	s17, s17, s12
 8009588:	ee39 9a47 	vsub.f32	s18, s18, s14
 800958c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8009590:	ee29 9a08 	vmul.f32	s18, s18, s16
 8009594:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8009598:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800959c:	eea9 7a09 	vfma.f32	s14, s18, s18
 80095a0:	4606      	mov	r6, r0
 80095a2:	461c      	mov	r4, r3
 80095a4:	ee27 8a88 	vmul.f32	s16, s15, s16
 80095a8:	eef0 7a47 	vmov.f32	s15, s14
 80095ac:	eee8 7a08 	vfma.f32	s15, s16, s16
 80095b0:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80095b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c4:	d445      	bmi.n	8009652 <SpacePointGyroProp+0xf6>
 80095c6:	2000      	movs	r0, #0
 80095c8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80095cc:	ee29 9a00 	vmul.f32	s18, s18, s0
 80095d0:	ee68 8a80 	vmul.f32	s17, s17, s0
 80095d4:	ee28 8a00 	vmul.f32	s16, s16, s0
 80095d8:	4622      	mov	r2, r4
 80095da:	60e8      	str	r0, [r5, #12]
 80095dc:	4631      	mov	r1, r6
 80095de:	ed85 9a00 	vstr	s18, [r5]
 80095e2:	edc5 8a01 	vstr	s17, [r5, #4]
 80095e6:	ed85 8a02 	vstr	s16, [r5, #8]
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7ff fd1e 	bl	800902c <m_qmult_eml>
 80095f0:	edd4 8a02 	vldr	s17, [r4, #8]
 80095f4:	ed94 9a01 	vldr	s18, [r4, #4]
 80095f8:	ed94 8a03 	vldr	s16, [r4, #12]
 80095fc:	edd4 9a00 	vldr	s19, [r4]
 8009600:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8009604:	eee9 7a09 	vfma.f32	s15, s18, s18
 8009608:	eee8 7a08 	vfma.f32	s15, s16, s16
 800960c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8009610:	ee17 0a90 	vmov	r0, s15
 8009614:	f7f6 ffb0 	bl	8000578 <__aeabi_f2d>
 8009618:	f00b f890 	bl	801473c <sqrt>
 800961c:	f7f7 fadc 	bl	8000bd8 <__aeabi_d2f>
 8009620:	ee07 0a90 	vmov	s15, r0
 8009624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009628:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800962c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8009630:	ee29 9a27 	vmul.f32	s18, s18, s15
 8009634:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009638:	ee28 8a27 	vmul.f32	s16, s16, s15
 800963c:	edc4 9a00 	vstr	s19, [r4]
 8009640:	ed84 9a01 	vstr	s18, [r4, #4]
 8009644:	edc4 8a02 	vstr	s17, [r4, #8]
 8009648:	ed84 8a03 	vstr	s16, [r4, #12]
 800964c:	ecbd 8b04 	vpop	{d8-d9}
 8009650:	bd70      	pop	{r4, r5, r6, pc}
 8009652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009656:	ee17 0a90 	vmov	r0, s15
 800965a:	f7f6 ff8d 	bl	8000578 <__aeabi_f2d>
 800965e:	f00b f86d 	bl	801473c <sqrt>
 8009662:	f7f7 fab9 	bl	8000bd8 <__aeabi_d2f>
 8009666:	e7af      	b.n	80095c8 <SpacePointGyroProp+0x6c>
 8009668:	3c8efa35 	.word	0x3c8efa35

0800966c <quatErr2EulerErr>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	2300      	movs	r3, #0
 8009672:	ed2d 8b04 	vpush	{d8-d9}
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	6053      	str	r3, [r2, #4]
 800967a:	6093      	str	r3, [r2, #8]
 800967c:	ed9f 8a71 	vldr	s16, [pc, #452]	; 8009844 <quatErr2EulerErr+0x1d8>
 8009680:	edd0 7a01 	vldr	s15, [r0, #4]
 8009684:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009688:	4606      	mov	r6, r0
 800968a:	ee17 0a90 	vmov	r0, s15
 800968e:	460c      	mov	r4, r1
 8009690:	4615      	mov	r5, r2
 8009692:	f00a ff3d 	bl	8014510 <cosf>
 8009696:	edd6 8a02 	vldr	s17, [r6, #8]
 800969a:	ee68 8a88 	vmul.f32	s17, s17, s16
 800969e:	ee09 0a10 	vmov	s18, r0
 80096a2:	ee18 0a90 	vmov	r0, s17
 80096a6:	f00a ff93 	bl	80145d0 <sinf>
 80096aa:	ee08 0a10 	vmov	s16, r0
 80096ae:	ee18 0a90 	vmov	r0, s17
 80096b2:	f00a ff2d 	bl	8014510 <cosf>
 80096b6:	ee06 0a10 	vmov	s12, r0
 80096ba:	edd4 7a01 	vldr	s15, [r4, #4]
 80096be:	edd4 6a02 	vldr	s13, [r4, #8]
 80096c2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8009848 <quatErr2EulerErr+0x1dc>
 80096c6:	ee66 8a06 	vmul.f32	s17, s12, s12
 80096ca:	ee28 8a08 	vmul.f32	s16, s16, s16
 80096ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80096d2:	eee8 7a26 	vfma.f32	s15, s16, s13
 80096d6:	eef1 6ae7 	vsqrt.f32	s13, s15
 80096da:	ee66 7a87 	vmul.f32	s15, s13, s14
 80096de:	ee17 0a90 	vmov	r0, s15
 80096e2:	f7f6 ff49 	bl	8000578 <__aeabi_f2d>
 80096e6:	2200      	movs	r2, #0
 80096e8:	4b58      	ldr	r3, [pc, #352]	; (800984c <quatErr2EulerErr+0x1e0>)
 80096ea:	4680      	mov	r8, r0
 80096ec:	4689      	mov	r9, r1
 80096ee:	f7f7 fa17 	bl	8000b20 <__aeabi_dcmple>
 80096f2:	b918      	cbnz	r0, 80096fc <quatErr2EulerErr+0x90>
 80096f4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800984c <quatErr2EulerErr+0x1e0>
 80096f8:	f04f 0800 	mov.w	r8, #0
 80096fc:	4649      	mov	r1, r9
 80096fe:	4640      	mov	r0, r8
 8009700:	f7f7 fa6a 	bl	8000bd8 <__aeabi_d2f>
 8009704:	f7f6 ff38 	bl	8000578 <__aeabi_f2d>
 8009708:	2200      	movs	r2, #0
 800970a:	4b51      	ldr	r3, [pc, #324]	; (8009850 <quatErr2EulerErr+0x1e4>)
 800970c:	4680      	mov	r8, r0
 800970e:	4689      	mov	r9, r1
 8009710:	f7f7 fa10 	bl	8000b34 <__aeabi_dcmpge>
 8009714:	b918      	cbnz	r0, 800971e <quatErr2EulerErr+0xb2>
 8009716:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8009850 <quatErr2EulerErr+0x1e4>
 800971a:	f04f 0800 	mov.w	r8, #0
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	f7f7 fa59 	bl	8000bd8 <__aeabi_d2f>
 8009726:	6068      	str	r0, [r5, #4]
 8009728:	edd4 7a02 	vldr	s15, [r4, #8]
 800972c:	ed94 6a01 	vldr	s12, [r4, #4]
 8009730:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009854 <quatErr2EulerErr+0x1e8>
 8009734:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009848 <quatErr2EulerErr+0x1dc>
 8009738:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800973c:	eea9 7a09 	vfma.f32	s14, s18, s18
 8009740:	eee8 7a06 	vfma.f32	s15, s16, s12
 8009744:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8009748:	eef1 7ac6 	vsqrt.f32	s15, s12
 800974c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009750:	ee17 0a90 	vmov	r0, s15
 8009754:	f7f6 ff10 	bl	8000578 <__aeabi_f2d>
 8009758:	2200      	movs	r2, #0
 800975a:	4b3f      	ldr	r3, [pc, #252]	; (8009858 <quatErr2EulerErr+0x1ec>)
 800975c:	4680      	mov	r8, r0
 800975e:	4689      	mov	r9, r1
 8009760:	f7f7 f9de 	bl	8000b20 <__aeabi_dcmple>
 8009764:	b918      	cbnz	r0, 800976e <quatErr2EulerErr+0x102>
 8009766:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8009858 <quatErr2EulerErr+0x1ec>
 800976a:	f04f 0800 	mov.w	r8, #0
 800976e:	4649      	mov	r1, r9
 8009770:	4640      	mov	r0, r8
 8009772:	f7f7 fa31 	bl	8000bd8 <__aeabi_d2f>
 8009776:	f7f6 feff 	bl	8000578 <__aeabi_f2d>
 800977a:	2200      	movs	r2, #0
 800977c:	4b34      	ldr	r3, [pc, #208]	; (8009850 <quatErr2EulerErr+0x1e4>)
 800977e:	4680      	mov	r8, r0
 8009780:	4689      	mov	r9, r1
 8009782:	f7f7 f9d7 	bl	8000b34 <__aeabi_dcmpge>
 8009786:	b918      	cbnz	r0, 8009790 <quatErr2EulerErr+0x124>
 8009788:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8009850 <quatErr2EulerErr+0x1e4>
 800978c:	f04f 0800 	mov.w	r8, #0
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7f7 fa20 	bl	8000bd8 <__aeabi_d2f>
 8009798:	6028      	str	r0, [r5, #0]
 800979a:	edd6 7a01 	vldr	s15, [r6, #4]
 800979e:	eddf 5a29 	vldr	s11, [pc, #164]	; 8009844 <quatErr2EulerErr+0x1d8>
 80097a2:	edd4 6a02 	vldr	s13, [r4, #8]
 80097a6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800985c <quatErr2EulerErr+0x1f0>
 80097aa:	ed94 6a01 	vldr	s12, [r4, #4]
 80097ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80097b2:	ee28 8a26 	vmul.f32	s16, s16, s13
 80097b6:	eef0 6ae7 	vabs.f32	s13, s15
 80097ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	eea8 8a86 	vfma.f32	s16, s17, s12
 80097c6:	d430      	bmi.n	800982a <quatErr2EulerErr+0x1be>
 80097c8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009860 <quatErr2EulerErr+0x1f4>
 80097cc:	edd4 7a00 	vldr	s15, [r4]
 80097d0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80097d4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80097d8:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8009848 <quatErr2EulerErr+0x1dc>
 80097dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e0:	ee17 0a90 	vmov	r0, s15
 80097e4:	f7f6 fec8 	bl	8000578 <__aeabi_f2d>
 80097e8:	2200      	movs	r2, #0
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <quatErr2EulerErr+0x1ec>)
 80097ec:	4606      	mov	r6, r0
 80097ee:	460f      	mov	r7, r1
 80097f0:	f7f7 f996 	bl	8000b20 <__aeabi_dcmple>
 80097f4:	b908      	cbnz	r0, 80097fa <quatErr2EulerErr+0x18e>
 80097f6:	4f18      	ldr	r7, [pc, #96]	; (8009858 <quatErr2EulerErr+0x1ec>)
 80097f8:	2600      	movs	r6, #0
 80097fa:	4639      	mov	r1, r7
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7f7 f9eb 	bl	8000bd8 <__aeabi_d2f>
 8009802:	f7f6 feb9 	bl	8000578 <__aeabi_f2d>
 8009806:	2200      	movs	r2, #0
 8009808:	4b11      	ldr	r3, [pc, #68]	; (8009850 <quatErr2EulerErr+0x1e4>)
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	f7f7 f991 	bl	8000b34 <__aeabi_dcmpge>
 8009812:	b908      	cbnz	r0, 8009818 <quatErr2EulerErr+0x1ac>
 8009814:	4f0e      	ldr	r7, [pc, #56]	; (8009850 <quatErr2EulerErr+0x1e4>)
 8009816:	2600      	movs	r6, #0
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f7 f9dc 	bl	8000bd8 <__aeabi_d2f>
 8009820:	ecbd 8b04 	vpop	{d8-d9}
 8009824:	60a8      	str	r0, [r5, #8]
 8009826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982a:	ee17 0a90 	vmov	r0, s15
 800982e:	f00a ff09 	bl	8014644 <tanf>
 8009832:	ee07 0a10 	vmov	s14, r0
 8009836:	edd4 7a00 	vldr	s15, [r4]
 800983a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800983e:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009842:	e7c7      	b.n	80097d4 <quatErr2EulerErr+0x168>
 8009844:	3c8efa35 	.word	0x3c8efa35
 8009848:	42e52ee1 	.word	0x42e52ee1
 800984c:	40568000 	.word	0x40568000
 8009850:	3ff00000 	.word	0x3ff00000
 8009854:	3a83126f 	.word	0x3a83126f
 8009858:	40668000 	.word	0x40668000
 800985c:	3fbc430e 	.word	0x3fbc430e
 8009860:	42c6ab07 	.word	0x42c6ab07

08009864 <rt_InitInfAndNaN.isra.3>:
 8009864:	4b05      	ldr	r3, [pc, #20]	; (800987c <rt_InitInfAndNaN.isra.3+0x18>)
 8009866:	4a06      	ldr	r2, [pc, #24]	; (8009880 <rt_InitInfAndNaN.isra.3+0x1c>)
 8009868:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 800986c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8009870:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8009874:	6008      	str	r0, [r1, #0]
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20001398 	.word	0x20001398
 8009880:	ff800000 	.word	0xff800000

08009884 <MEMSloadFromNVM.isra.10>:
 8009884:	f7ff b9a2 	b.w	8008bcc <MotionFX_LoadMagCalFromNVM>

08009888 <MEMSLoadMagCalNVM>:
 8009888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800988a:	b097      	sub	sp, #92	; 0x5c
 800988c:	4604      	mov	r4, r0
 800988e:	2301      	movs	r3, #1
 8009890:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8009894:	a916      	add	r1, sp, #88	; 0x58
 8009896:	2300      	movs	r3, #0
 8009898:	f801 3d54 	strb.w	r3, [r1, #-84]!
 800989c:	2054      	movs	r0, #84	; 0x54
 800989e:	f7ff fff1 	bl	8009884 <MEMSloadFromNVM.isra.10>
 80098a2:	2801      	cmp	r0, #1
 80098a4:	d101      	bne.n	80098aa <MEMSLoadMagCalNVM+0x22>
 80098a6:	b017      	add	sp, #92	; 0x5c
 80098a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098aa:	2300      	movs	r3, #0
 80098ac:	f88d 3004 	strb.w	r3, [sp, #4]
 80098b0:	9d02      	ldr	r5, [sp, #8]
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	d0f7      	beq.n	80098a6 <MEMSLoadMagCalNVM+0x1e>
 80098b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0f3      	beq.n	80098a6 <MEMSLoadMagCalNVM+0x1e>
 80098be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0ef      	beq.n	80098a6 <MEMSLoadMagCalNVM+0x1e>
 80098c6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d3eb      	bcc.n	80098a6 <MEMSLoadMagCalNVM+0x1e>
 80098ce:	f10d 0c0c 	add.w	ip, sp, #12
 80098d2:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 80098d6:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 80098da:	4667      	mov	r7, ip
 80098dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80098de:	6030      	str	r0, [r6, #0]
 80098e0:	6071      	str	r1, [r6, #4]
 80098e2:	60b2      	str	r2, [r6, #8]
 80098e4:	60f3      	str	r3, [r6, #12]
 80098e6:	46bc      	mov	ip, r7
 80098e8:	3610      	adds	r6, #16
 80098ea:	4577      	cmp	r7, lr
 80098ec:	d1f5      	bne.n	80098da <MEMSLoadMagCalNVM+0x52>
 80098ee:	6838      	ldr	r0, [r7, #0]
 80098f0:	6030      	str	r0, [r6, #0]
 80098f2:	61e5      	str	r5, [r4, #28]
 80098f4:	ad10      	add	r5, sp, #64	; 0x40
 80098f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098f8:	6560      	str	r0, [r4, #84]	; 0x54
 80098fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80098fc:	65e2      	str	r2, [r4, #92]	; 0x5c
 80098fe:	6623      	str	r3, [r4, #96]	; 0x60
 8009900:	cd03      	ldmia	r5!, {r0, r1}
 8009902:	6660      	str	r0, [r4, #100]	; 0x64
 8009904:	66a1      	str	r1, [r4, #104]	; 0x68
 8009906:	e7ce      	b.n	80098a6 <MEMSLoadMagCalNVM+0x1e>

08009908 <MEMSsaveInNVM.isra.11>:
 8009908:	f7ff b962 	b.w	8008bd0 <MotionFX_SaveMagCalInNVM>

0800990c <MEMSSaveMagCalNVM>:
 800990c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990e:	b097      	sub	sp, #92	; 0x5c
 8009910:	4606      	mov	r6, r0
 8009912:	2301      	movs	r3, #1
 8009914:	f88d 3004 	strb.w	r3, [sp, #4]
 8009918:	f100 0458 	add.w	r4, r0, #88	; 0x58
 800991c:	af03      	add	r7, sp, #12
 800991e:	f100 0c88 	add.w	ip, r0, #136	; 0x88
 8009922:	463d      	mov	r5, r7
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	6861      	ldr	r1, [r4, #4]
 8009928:	68a2      	ldr	r2, [r4, #8]
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800992e:	3410      	adds	r4, #16
 8009930:	462f      	mov	r7, r5
 8009932:	4564      	cmp	r4, ip
 8009934:	d1f5      	bne.n	8009922 <MEMSSaveMagCalNVM+0x16>
 8009936:	6820      	ldr	r0, [r4, #0]
 8009938:	6028      	str	r0, [r5, #0]
 800993a:	68b3      	ldr	r3, [r6, #8]
 800993c:	9302      	str	r3, [sp, #8]
 800993e:	ac10      	add	r4, sp, #64	; 0x40
 8009940:	f856 0f40 	ldr.w	r0, [r6, #64]!
 8009944:	6871      	ldr	r1, [r6, #4]
 8009946:	68b2      	ldr	r2, [r6, #8]
 8009948:	68f3      	ldr	r3, [r6, #12]
 800994a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800994c:	6930      	ldr	r0, [r6, #16]
 800994e:	6971      	ldr	r1, [r6, #20]
 8009950:	c403      	stmia	r4!, {r0, r1}
 8009952:	a901      	add	r1, sp, #4
 8009954:	2054      	movs	r0, #84	; 0x54
 8009956:	f7ff ffd7 	bl	8009908 <MEMSsaveInNVM.isra.11>
 800995a:	b017      	add	sp, #92	; 0x5c
 800995c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995e:	bf00      	nop

08009960 <llEvaluate.constprop.23>:
 8009960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009962:	b085      	sub	sp, #20
 8009964:	4606      	mov	r6, r0
 8009966:	f102 0e10 	add.w	lr, r2, #16
 800996a:	4607      	mov	r7, r0
 800996c:	4604      	mov	r4, r0
 800996e:	466b      	mov	r3, sp
 8009970:	f852 5b04 	ldr.w	r5, [r2], #4
 8009974:	601d      	str	r5, [r3, #0]
 8009976:	46ec      	mov	ip, sp
 8009978:	463d      	mov	r5, r7
 800997a:	42a5      	cmp	r5, r4
 800997c:	edd3 7a00 	vldr	s15, [r3]
 8009980:	d008      	beq.n	8009994 <llEvaluate.constprop.23+0x34>
 8009982:	ecbc 7a01 	vldmia	ip!, {s14}
 8009986:	ecf5 6a01 	vldmia	r5!, {s13}
 800998a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800998e:	edc3 7a00 	vstr	s15, [r3]
 8009992:	e7f2      	b.n	800997a <llEvaluate.constprop.23+0x1a>
 8009994:	edd5 6a00 	vldr	s13, [r5]
 8009998:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800999c:	462c      	mov	r4, r5
 800999e:	4572      	cmp	r2, lr
 80099a0:	f107 0710 	add.w	r7, r7, #16
 80099a4:	f104 0414 	add.w	r4, r4, #20
 80099a8:	eca3 7a01 	vstmia	r3!, {s14}
 80099ac:	d1e0      	bne.n	8009970 <llEvaluate.constprop.23+0x10>
 80099ae:	f10d 0c10 	add.w	ip, sp, #16
 80099b2:	f101 0410 	add.w	r4, r1, #16
 80099b6:	2203      	movs	r2, #3
 80099b8:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 80099bc:	f844 5c04 	str.w	r5, [r4, #-4]
 80099c0:	1c53      	adds	r3, r2, #1
 80099c2:	b25b      	sxtb	r3, r3
 80099c4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80099c8:	b21d      	sxth	r5, r3
 80099ca:	eb00 1705 	add.w	r7, r0, r5, lsl #4
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	4477      	add	r7, lr
 80099d2:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80099d6:	ed54 7a01 	vldr	s15, [r4, #-4]
 80099da:	d00a      	beq.n	80099f2 <llEvaluate.constprop.23+0x92>
 80099dc:	edd7 6a00 	vldr	s13, [r7]
 80099e0:	ed95 7a00 	vldr	s14, [r5]
 80099e4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80099e8:	3301      	adds	r3, #1
 80099ea:	b25b      	sxtb	r3, r3
 80099ec:	ed44 7a01 	vstr	s15, [r4, #-4]
 80099f0:	e7ea      	b.n	80099c8 <llEvaluate.constprop.23+0x68>
 80099f2:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 80099f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80099fa:	3a01      	subs	r2, #1
 80099fc:	1c53      	adds	r3, r2, #1
 80099fe:	f1a6 0614 	sub.w	r6, r6, #20
 8009a02:	ed24 7a01 	vstmdb	r4!, {s14}
 8009a06:	d1d7      	bne.n	80099b8 <llEvaluate.constprop.23+0x58>
 8009a08:	b005      	add	sp, #20
 8009a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a0c <iNemo_setOrientation.constprop.40>:
 8009a0c:	b4f0      	push	{r4, r5, r6, r7}
 8009a0e:	4973      	ldr	r1, [pc, #460]	; (8009bdc <iNemo_setOrientation.constprop.40+0x1d0>)
 8009a10:	4b73      	ldr	r3, [pc, #460]	; (8009be0 <iNemo_setOrientation.constprop.40+0x1d4>)
 8009a12:	7808      	ldrb	r0, [r1, #0]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	2f17      	cmp	r7, #23
 8009a1e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8009a22:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8009a26:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8009a2a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8009a2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009a32:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8009a36:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8009a3a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 8009a3e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8009a42:	790a      	ldrb	r2, [r1, #4]
 8009a44:	bf98      	it	ls
 8009a46:	3020      	addls	r0, #32
 8009a48:	f88d 0004 	strb.w	r0, [sp, #4]
 8009a4c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009a50:	2817      	cmp	r0, #23
 8009a52:	bf98      	it	ls
 8009a54:	3220      	addls	r2, #32
 8009a56:	f88d 2008 	strb.w	r2, [sp, #8]
 8009a5a:	7a0a      	ldrb	r2, [r1, #8]
 8009a5c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009a60:	2817      	cmp	r0, #23
 8009a62:	bf98      	it	ls
 8009a64:	3220      	addls	r2, #32
 8009a66:	f88d 200c 	strb.w	r2, [sp, #12]
 8009a6a:	784a      	ldrb	r2, [r1, #1]
 8009a6c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009a70:	2817      	cmp	r0, #23
 8009a72:	bf98      	it	ls
 8009a74:	3220      	addls	r2, #32
 8009a76:	f88d 2005 	strb.w	r2, [sp, #5]
 8009a7a:	794a      	ldrb	r2, [r1, #5]
 8009a7c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009a80:	2817      	cmp	r0, #23
 8009a82:	bf98      	it	ls
 8009a84:	3220      	addls	r2, #32
 8009a86:	f88d 2009 	strb.w	r2, [sp, #9]
 8009a8a:	7a4a      	ldrb	r2, [r1, #9]
 8009a8c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009a90:	2817      	cmp	r0, #23
 8009a92:	bf98      	it	ls
 8009a94:	3220      	addls	r2, #32
 8009a96:	f88d 200d 	strb.w	r2, [sp, #13]
 8009a9a:	788a      	ldrb	r2, [r1, #2]
 8009a9c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009aa0:	2817      	cmp	r0, #23
 8009aa2:	bf98      	it	ls
 8009aa4:	3220      	addls	r2, #32
 8009aa6:	f88d 2006 	strb.w	r2, [sp, #6]
 8009aaa:	798a      	ldrb	r2, [r1, #6]
 8009aac:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009ab0:	2817      	cmp	r0, #23
 8009ab2:	bf98      	it	ls
 8009ab4:	3220      	addls	r2, #32
 8009ab6:	f88d 200a 	strb.w	r2, [sp, #10]
 8009aba:	7a8a      	ldrb	r2, [r1, #10]
 8009abc:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8009ac0:	2917      	cmp	r1, #23
 8009ac2:	bf98      	it	ls
 8009ac4:	3220      	addls	r2, #32
 8009ac6:	f88d 200e 	strb.w	r2, [sp, #14]
 8009aca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ace:	3a64      	subs	r2, #100	; 0x64
 8009ad0:	2a13      	cmp	r2, #19
 8009ad2:	d80e      	bhi.n	8009af2 <iNemo_setOrientation.constprop.40+0xe6>
 8009ad4:	e8df f002 	tbb	[pc, r2]
 8009ad8:	0d0dba0a 	.word	0x0d0dba0a
 8009adc:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ae0:	0dbe0d0d 	.word	0x0dbe0d0d
 8009ae4:	c20d0d0d 	.word	0xc20d0d0d
 8009ae8:	ca0dc60d 	.word	0xca0dc60d
 8009aec:	22ff      	movs	r2, #255	; 0xff
 8009aee:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8009af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009af6:	3a64      	subs	r2, #100	; 0x64
 8009af8:	2a13      	cmp	r2, #19
 8009afa:	d80e      	bhi.n	8009b1a <iNemo_setOrientation.constprop.40+0x10e>
 8009afc:	e8df f002 	tbb	[pc, r2]
 8009b00:	0d0dba0a 	.word	0x0d0dba0a
 8009b04:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b08:	0dbe0d0d 	.word	0x0dbe0d0d
 8009b0c:	c20d0d0d 	.word	0xc20d0d0d
 8009b10:	ca0dc60d 	.word	0xca0dc60d
 8009b14:	22ff      	movs	r2, #255	; 0xff
 8009b16:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8009b1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b1e:	3a64      	subs	r2, #100	; 0x64
 8009b20:	2a13      	cmp	r2, #19
 8009b22:	d80e      	bhi.n	8009b42 <iNemo_setOrientation.constprop.40+0x136>
 8009b24:	e8df f002 	tbb	[pc, r2]
 8009b28:	0d0dba0a 	.word	0x0d0dba0a
 8009b2c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b30:	0dbe0d0d 	.word	0x0dbe0d0d
 8009b34:	c20d0d0d 	.word	0xc20d0d0d
 8009b38:	ca0dc60d 	.word	0xca0dc60d
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8009b42:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009b46:	3a64      	subs	r2, #100	; 0x64
 8009b48:	2a13      	cmp	r2, #19
 8009b4a:	d80e      	bhi.n	8009b6a <iNemo_setOrientation.constprop.40+0x15e>
 8009b4c:	e8df f002 	tbb	[pc, r2]
 8009b50:	0d0dba0a 	.word	0x0d0dba0a
 8009b54:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b58:	0dbe0d0d 	.word	0x0dbe0d0d
 8009b5c:	c20d0d0d 	.word	0xc20d0d0d
 8009b60:	ca0dc60d 	.word	0xca0dc60d
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8009b6a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8009b6e:	3a64      	subs	r2, #100	; 0x64
 8009b70:	2a13      	cmp	r2, #19
 8009b72:	d80e      	bhi.n	8009b92 <iNemo_setOrientation.constprop.40+0x186>
 8009b74:	e8df f002 	tbb	[pc, r2]
 8009b78:	0d0dba0a 	.word	0x0d0dba0a
 8009b7c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b80:	0dbe0d0d 	.word	0x0dbe0d0d
 8009b84:	c20d0d0d 	.word	0xc20d0d0d
 8009b88:	ca0dc60d 	.word	0xca0dc60d
 8009b8c:	22ff      	movs	r2, #255	; 0xff
 8009b8e:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8009b92:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009b96:	3a64      	subs	r2, #100	; 0x64
 8009b98:	2a13      	cmp	r2, #19
 8009b9a:	d80e      	bhi.n	8009bba <iNemo_setOrientation.constprop.40+0x1ae>
 8009b9c:	e8df f002 	tbb	[pc, r2]
 8009ba0:	0d0dba0a 	.word	0x0d0dba0a
 8009ba4:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ba8:	0dbe0d0d 	.word	0x0dbe0d0d
 8009bac:	c20d0d0d 	.word	0xc20d0d0d
 8009bb0:	ca0dc60d 	.word	0xca0dc60d
 8009bb4:	22ff      	movs	r2, #255	; 0xff
 8009bb6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8009bba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009bbe:	3a64      	subs	r2, #100	; 0x64
 8009bc0:	2a13      	cmp	r2, #19
 8009bc2:	d812      	bhi.n	8009bea <iNemo_setOrientation.constprop.40+0x1de>
 8009bc4:	e8df f002 	tbb	[pc, r2]
 8009bc8:	1111ba0e 	.word	0x1111ba0e
 8009bcc:	11111111 	.word	0x11111111
 8009bd0:	11be1111 	.word	0x11be1111
 8009bd4:	c2111111 	.word	0xc2111111
 8009bd8:	ca11c611 	.word	0xca11c611
 8009bdc:	20000000 	.word	0x20000000
 8009be0:	20001398 	.word	0x20001398
 8009be4:	22ff      	movs	r2, #255	; 0xff
 8009be6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8009bea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8009bee:	3a64      	subs	r2, #100	; 0x64
 8009bf0:	2a13      	cmp	r2, #19
 8009bf2:	d80e      	bhi.n	8009c12 <iNemo_setOrientation.constprop.40+0x206>
 8009bf4:	e8df f002 	tbb	[pc, r2]
 8009bf8:	0d0db60a 	.word	0x0d0db60a
 8009bfc:	0d0d0d0d 	.word	0x0d0d0d0d
 8009c00:	0dba0d0d 	.word	0x0dba0d0d
 8009c04:	be0d0d0d 	.word	0xbe0d0d0d
 8009c08:	c60dc20d 	.word	0xc60dc20d
 8009c0c:	22ff      	movs	r2, #255	; 0xff
 8009c0e:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8009c12:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009c16:	3a64      	subs	r2, #100	; 0x64
 8009c18:	2a13      	cmp	r2, #19
 8009c1a:	d80e      	bhi.n	8009c3a <iNemo_setOrientation.constprop.40+0x22e>
 8009c1c:	e8df f002 	tbb	[pc, r2]
 8009c20:	0d0db60a 	.word	0x0d0db60a
 8009c24:	0d0d0d0d 	.word	0x0d0d0d0d
 8009c28:	0dbc0d0d 	.word	0x0dbc0d0d
 8009c2c:	c20d0d0d 	.word	0xc20d0d0d
 8009c30:	100dc80d 	.word	0x100dc80d
 8009c34:	22ff      	movs	r2, #255	; 0xff
 8009c36:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8009c3a:	b004      	add	sp, #16
 8009c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8009c3e:	4770      	bx	lr
 8009c40:	22ff      	movs	r2, #255	; 0xff
 8009c42:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8009c46:	b004      	add	sp, #16
 8009c48:	bcf0      	pop	{r4, r5, r6, r7}
 8009c4a:	4770      	bx	lr
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8009c52:	e74e      	b.n	8009af2 <iNemo_setOrientation.constprop.40+0xe6>
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8009c5a:	e74a      	b.n	8009af2 <iNemo_setOrientation.constprop.40+0xe6>
 8009c5c:	22ff      	movs	r2, #255	; 0xff
 8009c5e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8009c62:	e746      	b.n	8009af2 <iNemo_setOrientation.constprop.40+0xe6>
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8009c6a:	e742      	b.n	8009af2 <iNemo_setOrientation.constprop.40+0xe6>
 8009c6c:	22ff      	movs	r2, #255	; 0xff
 8009c6e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8009c72:	e73e      	b.n	8009af2 <iNemo_setOrientation.constprop.40+0xe6>
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8009c7a:	e74e      	b.n	8009b1a <iNemo_setOrientation.constprop.40+0x10e>
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009c82:	e74a      	b.n	8009b1a <iNemo_setOrientation.constprop.40+0x10e>
 8009c84:	22ff      	movs	r2, #255	; 0xff
 8009c86:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009c8a:	e746      	b.n	8009b1a <iNemo_setOrientation.constprop.40+0x10e>
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8009c92:	e742      	b.n	8009b1a <iNemo_setOrientation.constprop.40+0x10e>
 8009c94:	22ff      	movs	r2, #255	; 0xff
 8009c96:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8009c9a:	e73e      	b.n	8009b1a <iNemo_setOrientation.constprop.40+0x10e>
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8009ca2:	e74e      	b.n	8009b42 <iNemo_setOrientation.constprop.40+0x136>
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009caa:	e74a      	b.n	8009b42 <iNemo_setOrientation.constprop.40+0x136>
 8009cac:	22ff      	movs	r2, #255	; 0xff
 8009cae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009cb2:	e746      	b.n	8009b42 <iNemo_setOrientation.constprop.40+0x136>
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8009cba:	e742      	b.n	8009b42 <iNemo_setOrientation.constprop.40+0x136>
 8009cbc:	22ff      	movs	r2, #255	; 0xff
 8009cbe:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8009cc2:	e73e      	b.n	8009b42 <iNemo_setOrientation.constprop.40+0x136>
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8009cca:	e74e      	b.n	8009b6a <iNemo_setOrientation.constprop.40+0x15e>
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8009cd2:	e74a      	b.n	8009b6a <iNemo_setOrientation.constprop.40+0x15e>
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8009cda:	e746      	b.n	8009b6a <iNemo_setOrientation.constprop.40+0x15e>
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8009ce2:	e742      	b.n	8009b6a <iNemo_setOrientation.constprop.40+0x15e>
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8009cea:	e73e      	b.n	8009b6a <iNemo_setOrientation.constprop.40+0x15e>
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8009cf2:	e74e      	b.n	8009b92 <iNemo_setOrientation.constprop.40+0x186>
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8009cfa:	e74a      	b.n	8009b92 <iNemo_setOrientation.constprop.40+0x186>
 8009cfc:	22ff      	movs	r2, #255	; 0xff
 8009cfe:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8009d02:	e746      	b.n	8009b92 <iNemo_setOrientation.constprop.40+0x186>
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8009d0a:	e742      	b.n	8009b92 <iNemo_setOrientation.constprop.40+0x186>
 8009d0c:	22ff      	movs	r2, #255	; 0xff
 8009d0e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8009d12:	e73e      	b.n	8009b92 <iNemo_setOrientation.constprop.40+0x186>
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8009d1a:	e74e      	b.n	8009bba <iNemo_setOrientation.constprop.40+0x1ae>
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8009d22:	e74a      	b.n	8009bba <iNemo_setOrientation.constprop.40+0x1ae>
 8009d24:	22ff      	movs	r2, #255	; 0xff
 8009d26:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8009d2a:	e746      	b.n	8009bba <iNemo_setOrientation.constprop.40+0x1ae>
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8009d32:	e742      	b.n	8009bba <iNemo_setOrientation.constprop.40+0x1ae>
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8009d3a:	e73e      	b.n	8009bba <iNemo_setOrientation.constprop.40+0x1ae>
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8009d42:	e752      	b.n	8009bea <iNemo_setOrientation.constprop.40+0x1de>
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8009d4a:	e74e      	b.n	8009bea <iNemo_setOrientation.constprop.40+0x1de>
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8009d52:	e74a      	b.n	8009bea <iNemo_setOrientation.constprop.40+0x1de>
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8009d5a:	e746      	b.n	8009bea <iNemo_setOrientation.constprop.40+0x1de>
 8009d5c:	22ff      	movs	r2, #255	; 0xff
 8009d5e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8009d62:	e742      	b.n	8009bea <iNemo_setOrientation.constprop.40+0x1de>
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8009d6a:	e752      	b.n	8009c12 <iNemo_setOrientation.constprop.40+0x206>
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8009d72:	e74e      	b.n	8009c12 <iNemo_setOrientation.constprop.40+0x206>
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8009d7a:	e74a      	b.n	8009c12 <iNemo_setOrientation.constprop.40+0x206>
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8009d82:	e746      	b.n	8009c12 <iNemo_setOrientation.constprop.40+0x206>
 8009d84:	22ff      	movs	r2, #255	; 0xff
 8009d86:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8009d8a:	e742      	b.n	8009c12 <iNemo_setOrientation.constprop.40+0x206>
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8009d92:	b004      	add	sp, #16
 8009d94:	bcf0      	pop	{r4, r5, r6, r7}
 8009d96:	4770      	bx	lr
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8009d9e:	b004      	add	sp, #16
 8009da0:	bcf0      	pop	{r4, r5, r6, r7}
 8009da2:	4770      	bx	lr
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8009daa:	b004      	add	sp, #16
 8009dac:	bcf0      	pop	{r4, r5, r6, r7}
 8009dae:	4770      	bx	lr
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8009db6:	b004      	add	sp, #16
 8009db8:	bcf0      	pop	{r4, r5, r6, r7}
 8009dba:	4770      	bx	lr

08009dbc <iNemo_setOrientation_6X.constprop.41>:
 8009dbc:	b4f0      	push	{r4, r5, r6, r7}
 8009dbe:	4973      	ldr	r1, [pc, #460]	; (8009f8c <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 8009dc0:	4b73      	ldr	r3, [pc, #460]	; (8009f90 <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 8009dc2:	7808      	ldrb	r0, [r1, #0]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8009dca:	b084      	sub	sp, #16
 8009dcc:	2f17      	cmp	r7, #23
 8009dce:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 8009dd2:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8009dd6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8009dda:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8009dde:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8009de2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8009de6:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8009dea:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 8009dee:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8009df2:	790a      	ldrb	r2, [r1, #4]
 8009df4:	bf98      	it	ls
 8009df6:	3020      	addls	r0, #32
 8009df8:	f88d 0004 	strb.w	r0, [sp, #4]
 8009dfc:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e00:	2817      	cmp	r0, #23
 8009e02:	bf98      	it	ls
 8009e04:	3220      	addls	r2, #32
 8009e06:	f88d 2008 	strb.w	r2, [sp, #8]
 8009e0a:	7a0a      	ldrb	r2, [r1, #8]
 8009e0c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e10:	2817      	cmp	r0, #23
 8009e12:	bf98      	it	ls
 8009e14:	3220      	addls	r2, #32
 8009e16:	f88d 200c 	strb.w	r2, [sp, #12]
 8009e1a:	784a      	ldrb	r2, [r1, #1]
 8009e1c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e20:	2817      	cmp	r0, #23
 8009e22:	bf98      	it	ls
 8009e24:	3220      	addls	r2, #32
 8009e26:	f88d 2005 	strb.w	r2, [sp, #5]
 8009e2a:	794a      	ldrb	r2, [r1, #5]
 8009e2c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e30:	2817      	cmp	r0, #23
 8009e32:	bf98      	it	ls
 8009e34:	3220      	addls	r2, #32
 8009e36:	f88d 2009 	strb.w	r2, [sp, #9]
 8009e3a:	7a4a      	ldrb	r2, [r1, #9]
 8009e3c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e40:	2817      	cmp	r0, #23
 8009e42:	bf98      	it	ls
 8009e44:	3220      	addls	r2, #32
 8009e46:	f88d 200d 	strb.w	r2, [sp, #13]
 8009e4a:	788a      	ldrb	r2, [r1, #2]
 8009e4c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e50:	2817      	cmp	r0, #23
 8009e52:	bf98      	it	ls
 8009e54:	3220      	addls	r2, #32
 8009e56:	f88d 2006 	strb.w	r2, [sp, #6]
 8009e5a:	798a      	ldrb	r2, [r1, #6]
 8009e5c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8009e60:	2817      	cmp	r0, #23
 8009e62:	bf98      	it	ls
 8009e64:	3220      	addls	r2, #32
 8009e66:	f88d 200a 	strb.w	r2, [sp, #10]
 8009e6a:	7a8a      	ldrb	r2, [r1, #10]
 8009e6c:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8009e70:	2917      	cmp	r1, #23
 8009e72:	bf98      	it	ls
 8009e74:	3220      	addls	r2, #32
 8009e76:	f88d 200e 	strb.w	r2, [sp, #14]
 8009e7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009e7e:	3a64      	subs	r2, #100	; 0x64
 8009e80:	2a13      	cmp	r2, #19
 8009e82:	d80e      	bhi.n	8009ea2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8009e84:	e8df f002 	tbb	[pc, r2]
 8009e88:	0d0dba0a 	.word	0x0d0dba0a
 8009e8c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e90:	0dbe0d0d 	.word	0x0dbe0d0d
 8009e94:	c20d0d0d 	.word	0xc20d0d0d
 8009e98:	ca0dc60d 	.word	0xca0dc60d
 8009e9c:	22ff      	movs	r2, #255	; 0xff
 8009e9e:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8009ea2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009ea6:	3a64      	subs	r2, #100	; 0x64
 8009ea8:	2a13      	cmp	r2, #19
 8009eaa:	d80e      	bhi.n	8009eca <iNemo_setOrientation_6X.constprop.41+0x10e>
 8009eac:	e8df f002 	tbb	[pc, r2]
 8009eb0:	0d0dba0a 	.word	0x0d0dba0a
 8009eb4:	0d0d0d0d 	.word	0x0d0d0d0d
 8009eb8:	0dbe0d0d 	.word	0x0dbe0d0d
 8009ebc:	c20d0d0d 	.word	0xc20d0d0d
 8009ec0:	ca0dc60d 	.word	0xca0dc60d
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8009eca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ece:	3a64      	subs	r2, #100	; 0x64
 8009ed0:	2a13      	cmp	r2, #19
 8009ed2:	d80e      	bhi.n	8009ef2 <iNemo_setOrientation_6X.constprop.41+0x136>
 8009ed4:	e8df f002 	tbb	[pc, r2]
 8009ed8:	0d0dba0a 	.word	0x0d0dba0a
 8009edc:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ee0:	0dbe0d0d 	.word	0x0dbe0d0d
 8009ee4:	c20d0d0d 	.word	0xc20d0d0d
 8009ee8:	ca0dc60d 	.word	0xca0dc60d
 8009eec:	22ff      	movs	r2, #255	; 0xff
 8009eee:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8009ef2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009ef6:	3a64      	subs	r2, #100	; 0x64
 8009ef8:	2a13      	cmp	r2, #19
 8009efa:	d80e      	bhi.n	8009f1a <iNemo_setOrientation_6X.constprop.41+0x15e>
 8009efc:	e8df f002 	tbb	[pc, r2]
 8009f00:	0d0dba0a 	.word	0x0d0dba0a
 8009f04:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f08:	0dbe0d0d 	.word	0x0dbe0d0d
 8009f0c:	c20d0d0d 	.word	0xc20d0d0d
 8009f10:	ca0dc60d 	.word	0xca0dc60d
 8009f14:	22ff      	movs	r2, #255	; 0xff
 8009f16:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8009f1a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8009f1e:	3a64      	subs	r2, #100	; 0x64
 8009f20:	2a13      	cmp	r2, #19
 8009f22:	d80e      	bhi.n	8009f42 <iNemo_setOrientation_6X.constprop.41+0x186>
 8009f24:	e8df f002 	tbb	[pc, r2]
 8009f28:	0d0dba0a 	.word	0x0d0dba0a
 8009f2c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f30:	0dbe0d0d 	.word	0x0dbe0d0d
 8009f34:	c20d0d0d 	.word	0xc20d0d0d
 8009f38:	ca0dc60d 	.word	0xca0dc60d
 8009f3c:	22ff      	movs	r2, #255	; 0xff
 8009f3e:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8009f42:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009f46:	3a64      	subs	r2, #100	; 0x64
 8009f48:	2a13      	cmp	r2, #19
 8009f4a:	d80e      	bhi.n	8009f6a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8009f4c:	e8df f002 	tbb	[pc, r2]
 8009f50:	0d0dba0a 	.word	0x0d0dba0a
 8009f54:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f58:	0dbe0d0d 	.word	0x0dbe0d0d
 8009f5c:	c20d0d0d 	.word	0xc20d0d0d
 8009f60:	ca0dc60d 	.word	0xca0dc60d
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8009f6a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009f6e:	3a64      	subs	r2, #100	; 0x64
 8009f70:	2a13      	cmp	r2, #19
 8009f72:	d812      	bhi.n	8009f9a <iNemo_setOrientation_6X.constprop.41+0x1de>
 8009f74:	e8df f002 	tbb	[pc, r2]
 8009f78:	1111ba0e 	.word	0x1111ba0e
 8009f7c:	11111111 	.word	0x11111111
 8009f80:	11be1111 	.word	0x11be1111
 8009f84:	c2111111 	.word	0xc2111111
 8009f88:	ca11c611 	.word	0xca11c611
 8009f8c:	20000000 	.word	0x20000000
 8009f90:	20001398 	.word	0x20001398
 8009f94:	22ff      	movs	r2, #255	; 0xff
 8009f96:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8009f9a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8009f9e:	3a64      	subs	r2, #100	; 0x64
 8009fa0:	2a13      	cmp	r2, #19
 8009fa2:	d80e      	bhi.n	8009fc2 <iNemo_setOrientation_6X.constprop.41+0x206>
 8009fa4:	e8df f002 	tbb	[pc, r2]
 8009fa8:	0d0db60a 	.word	0x0d0db60a
 8009fac:	0d0d0d0d 	.word	0x0d0d0d0d
 8009fb0:	0dba0d0d 	.word	0x0dba0d0d
 8009fb4:	be0d0d0d 	.word	0xbe0d0d0d
 8009fb8:	c60dc20d 	.word	0xc60dc20d
 8009fbc:	22ff      	movs	r2, #255	; 0xff
 8009fbe:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8009fc2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009fc6:	3a64      	subs	r2, #100	; 0x64
 8009fc8:	2a13      	cmp	r2, #19
 8009fca:	d80e      	bhi.n	8009fea <iNemo_setOrientation_6X.constprop.41+0x22e>
 8009fcc:	e8df f002 	tbb	[pc, r2]
 8009fd0:	0d0db60a 	.word	0x0d0db60a
 8009fd4:	0d0d0d0d 	.word	0x0d0d0d0d
 8009fd8:	0dbc0d0d 	.word	0x0dbc0d0d
 8009fdc:	c20d0d0d 	.word	0xc20d0d0d
 8009fe0:	100dc80d 	.word	0x100dc80d
 8009fe4:	22ff      	movs	r2, #255	; 0xff
 8009fe6:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8009fea:	b004      	add	sp, #16
 8009fec:	bcf0      	pop	{r4, r5, r6, r7}
 8009fee:	4770      	bx	lr
 8009ff0:	22ff      	movs	r2, #255	; 0xff
 8009ff2:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8009ff6:	b004      	add	sp, #16
 8009ff8:	bcf0      	pop	{r4, r5, r6, r7}
 8009ffa:	4770      	bx	lr
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800a002:	e74e      	b.n	8009ea2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800a004:	2201      	movs	r2, #1
 800a006:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 800a00a:	e74a      	b.n	8009ea2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800a00c:	22ff      	movs	r2, #255	; 0xff
 800a00e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 800a012:	e746      	b.n	8009ea2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 800a01a:	e742      	b.n	8009ea2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800a01c:	22ff      	movs	r2, #255	; 0xff
 800a01e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800a022:	e73e      	b.n	8009ea2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800a024:	2201      	movs	r2, #1
 800a026:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800a02a:	e74e      	b.n	8009eca <iNemo_setOrientation_6X.constprop.41+0x10e>
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 800a032:	e74a      	b.n	8009eca <iNemo_setOrientation_6X.constprop.41+0x10e>
 800a034:	22ff      	movs	r2, #255	; 0xff
 800a036:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 800a03a:	e746      	b.n	8009eca <iNemo_setOrientation_6X.constprop.41+0x10e>
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 800a042:	e742      	b.n	8009eca <iNemo_setOrientation_6X.constprop.41+0x10e>
 800a044:	22ff      	movs	r2, #255	; 0xff
 800a046:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800a04a:	e73e      	b.n	8009eca <iNemo_setOrientation_6X.constprop.41+0x10e>
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800a052:	e74e      	b.n	8009ef2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 800a05a:	e74a      	b.n	8009ef2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800a05c:	22ff      	movs	r2, #255	; 0xff
 800a05e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 800a062:	e746      	b.n	8009ef2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 800a06a:	e742      	b.n	8009ef2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800a06c:	22ff      	movs	r2, #255	; 0xff
 800a06e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800a072:	e73e      	b.n	8009ef2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 800a07a:	e74e      	b.n	8009f1a <iNemo_setOrientation_6X.constprop.41+0x15e>
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 800a082:	e74a      	b.n	8009f1a <iNemo_setOrientation_6X.constprop.41+0x15e>
 800a084:	22ff      	movs	r2, #255	; 0xff
 800a086:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 800a08a:	e746      	b.n	8009f1a <iNemo_setOrientation_6X.constprop.41+0x15e>
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 800a092:	e742      	b.n	8009f1a <iNemo_setOrientation_6X.constprop.41+0x15e>
 800a094:	22ff      	movs	r2, #255	; 0xff
 800a096:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 800a09a:	e73e      	b.n	8009f1a <iNemo_setOrientation_6X.constprop.41+0x15e>
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 800a0a2:	e74e      	b.n	8009f42 <iNemo_setOrientation_6X.constprop.41+0x186>
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800a0aa:	e74a      	b.n	8009f42 <iNemo_setOrientation_6X.constprop.41+0x186>
 800a0ac:	22ff      	movs	r2, #255	; 0xff
 800a0ae:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800a0b2:	e746      	b.n	8009f42 <iNemo_setOrientation_6X.constprop.41+0x186>
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 800a0ba:	e742      	b.n	8009f42 <iNemo_setOrientation_6X.constprop.41+0x186>
 800a0bc:	22ff      	movs	r2, #255	; 0xff
 800a0be:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 800a0c2:	e73e      	b.n	8009f42 <iNemo_setOrientation_6X.constprop.41+0x186>
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800a0ca:	e74e      	b.n	8009f6a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800a0d2:	e74a      	b.n	8009f6a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800a0d4:	22ff      	movs	r2, #255	; 0xff
 800a0d6:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800a0da:	e746      	b.n	8009f6a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 800a0e2:	e742      	b.n	8009f6a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800a0e4:	22ff      	movs	r2, #255	; 0xff
 800a0e6:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800a0ea:	e73e      	b.n	8009f6a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800a0f2:	e752      	b.n	8009f9a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 800a0fa:	e74e      	b.n	8009f9a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800a0fc:	22ff      	movs	r2, #255	; 0xff
 800a0fe:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 800a102:	e74a      	b.n	8009f9a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800a104:	2201      	movs	r2, #1
 800a106:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 800a10a:	e746      	b.n	8009f9a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800a10c:	22ff      	movs	r2, #255	; 0xff
 800a10e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800a112:	e742      	b.n	8009f9a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 800a11a:	e752      	b.n	8009fc2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800a122:	e74e      	b.n	8009fc2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800a124:	22ff      	movs	r2, #255	; 0xff
 800a126:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800a12a:	e74a      	b.n	8009fc2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800a132:	e746      	b.n	8009fc2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 800a13a:	e742      	b.n	8009fc2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 800a142:	b004      	add	sp, #16
 800a144:	bcf0      	pop	{r4, r5, r6, r7}
 800a146:	4770      	bx	lr
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 800a14e:	b004      	add	sp, #16
 800a150:	bcf0      	pop	{r4, r5, r6, r7}
 800a152:	4770      	bx	lr
 800a154:	22ff      	movs	r2, #255	; 0xff
 800a156:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 800a15a:	b004      	add	sp, #16
 800a15c:	bcf0      	pop	{r4, r5, r6, r7}
 800a15e:	4770      	bx	lr
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 800a166:	b004      	add	sp, #16
 800a168:	bcf0      	pop	{r4, r5, r6, r7}
 800a16a:	4770      	bx	lr

0800a16c <getMagStats.constprop.26>:
 800a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	2400      	movs	r4, #0
 800a172:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800a34c <getMagStats.constprop.26+0x1e0>
 800a176:	601c      	str	r4, [r3, #0]
 800a178:	6014      	str	r4, [r2, #0]
 800a17a:	f898 e500 	ldrb.w	lr, [r8, #1280]	; 0x500
 800a17e:	f898 c501 	ldrb.w	ip, [r8, #1281]	; 0x501
 800a182:	f998 4502 	ldrsb.w	r4, [r8, #1282]	; 0x502
 800a186:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a18a:	45e6      	cmp	lr, ip
 800a18c:	b083      	sub	sp, #12
 800a18e:	f104 0401 	add.w	r4, r4, #1
 800a192:	ee87 4a80 	vdiv.f32	s8, s15, s0
 800a196:	f000 80c7 	beq.w	800a328 <getMagStats.constprop.26+0x1bc>
 800a19a:	eba4 040e 	sub.w	r4, r4, lr
 800a19e:	fb94 f9fc 	sdiv	r9, r4, ip
 800a1a2:	fb0c 4419 	mls	r4, ip, r9, r4
 800a1a6:	2c00      	cmp	r4, #0
 800a1a8:	fa0f f984 	sxth.w	r9, r4
 800a1ac:	bfbc      	itt	lt
 800a1ae:	4464      	addlt	r4, ip
 800a1b0:	fa0f f984 	sxthlt.w	r9, r4
 800a1b4:	eddf 3a62 	vldr	s7, [pc, #392]	; 800a340 <getMagStats.constprop.26+0x1d4>
 800a1b8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800a1bc:	ee64 3a23 	vmul.f32	s7, s8, s7
 800a1c0:	ee24 4a27 	vmul.f32	s8, s8, s15
 800a1c4:	f1be 0f00 	cmp.w	lr, #0
 800a1c8:	f000 80b5 	beq.w	800a336 <getMagStats.constprop.26+0x1ca>
 800a1cc:	2700      	movs	r7, #0
 800a1ce:	f8b0 b000 	ldrh.w	fp, [r0]
 800a1d2:	f8b0 a002 	ldrh.w	sl, [r0, #2]
 800a1d6:	8880      	ldrh	r0, [r0, #4]
 800a1d8:	9001      	str	r0, [sp, #4]
 800a1da:	eddf 5a5a 	vldr	s11, [pc, #360]	; 800a344 <getMagStats.constprop.26+0x1d8>
 800a1de:	9700      	str	r7, [sp, #0]
 800a1e0:	e001      	b.n	800a1e6 <getMagStats.constprop.26+0x7a>
 800a1e2:	edd2 5a00 	vldr	s11, [r2]
 800a1e6:	9801      	ldr	r0, [sp, #4]
 800a1e8:	edd1 4a00 	vldr	s9, [r1]
 800a1ec:	ed91 6a04 	vldr	s12, [r1, #16]
 800a1f0:	edd1 6a08 	vldr	s13, [r1, #32]
 800a1f4:	eb09 0507 	add.w	r5, r9, r7
 800a1f8:	fb95 f4fc 	sdiv	r4, r5, ip
 800a1fc:	fb0c 5414 	mls	r4, ip, r4, r5
 800a200:	b2e4      	uxtb	r4, r4
 800a202:	3404      	adds	r4, #4
 800a204:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 800a208:	3701      	adds	r7, #1
 800a20a:	f8b4 6502 	ldrh.w	r6, [r4, #1282]	; 0x502
 800a20e:	f8b4 5504 	ldrh.w	r5, [r4, #1284]	; 0x504
 800a212:	f8b4 4506 	ldrh.w	r4, [r4, #1286]	; 0x506
 800a216:	eba6 060b 	sub.w	r6, r6, fp
 800a21a:	b236      	sxth	r6, r6
 800a21c:	ee07 6a90 	vmov	s15, r6
 800a220:	eba5 050a 	sub.w	r5, r5, sl
 800a224:	b22d      	sxth	r5, r5
 800a226:	1a24      	subs	r4, r4, r0
 800a228:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800a22c:	ee07 5a90 	vmov	s15, r5
 800a230:	b224      	sxth	r4, r4
 800a232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a236:	ee07 4a90 	vmov	s15, r4
 800a23a:	ee25 5a24 	vmul.f32	s10, s10, s9
 800a23e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a242:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a24a:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 800a24e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a256:	ee16 0a90 	vmov	r0, s13
 800a25a:	ee17 4a10 	vmov	r4, s14
 800a25e:	b205      	sxth	r5, r0
 800a260:	ee17 0a90 	vmov	r0, s15
 800a264:	fb14 f404 	smulbb	r4, r4, r4
 800a268:	fb05 4505 	mla	r5, r5, r5, r4
 800a26c:	b204      	sxth	r4, r0
 800a26e:	fb04 5404 	mla	r4, r4, r4, r5
 800a272:	ee07 4a90 	vmov	s15, r4
 800a276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a27a:	9800      	ldr	r0, [sp, #0]
 800a27c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800a280:	1c46      	adds	r6, r0, #1
 800a282:	b2fd      	uxtb	r5, r7
 800a284:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a288:	ee17 0a10 	vmov	r0, s14
 800a28c:	b200      	sxth	r0, r0
 800a28e:	ee07 0a90 	vmov	s15, r0
 800a292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a296:	ee37 7ae3 	vsub.f32	s14, s15, s7
 800a29a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a29e:	eeb0 7ac7 	vabs.f32	s14, s14
 800a2a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a2a6:	edc2 7a00 	vstr	s15, [r2]
 800a2aa:	ee17 0a10 	vmov	r0, s14
 800a2ae:	b204      	sxth	r4, r0
 800a2b0:	ee07 4a10 	vmov	s14, r4
 800a2b4:	fb04 f004 	mul.w	r0, r4, r4
 800a2b8:	ee07 0a90 	vmov	s15, r0
 800a2bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2c4:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800a2c8:	ed93 7a00 	vldr	s14, [r3]
 800a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d0:	bf48      	it	mi
 800a2d2:	b2f0      	uxtbmi	r0, r6
 800a2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2d8:	bf48      	it	mi
 800a2da:	9000      	strmi	r0, [sp, #0]
 800a2dc:	45ae      	cmp	lr, r5
 800a2de:	edc3 7a00 	vstr	s15, [r3]
 800a2e2:	f63f af7e 	bhi.w	800a1e2 <getMagStats.constprop.26+0x76>
 800a2e6:	9800      	ldr	r0, [sp, #0]
 800a2e8:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a348 <getMagStats.constprop.26+0x1dc>
 800a2ec:	ee07 ea10 	vmov	s14, lr
 800a2f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2f4:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a2f8:	eef1 7ac6 	vsqrt.f32	s15, s12
 800a2fc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a300:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a308:	bfb8      	it	lt
 800a30a:	eef0 7a66 	vmovlt.f32	s15, s13
 800a30e:	edc3 7a00 	vstr	s15, [r3]
 800a312:	edd2 7a00 	vldr	s15, [r2]
 800a316:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a31a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800a31e:	edc2 7a00 	vstr	s15, [r2]
 800a322:	b003      	add	sp, #12
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	fb94 f9fe 	sdiv	r9, r4, lr
 800a32c:	fb0e 4919 	mls	r9, lr, r9, r4
 800a330:	fa0f f989 	sxth.w	r9, r9
 800a334:	e73e      	b.n	800a1b4 <getMagStats.constprop.26+0x48>
 800a336:	edd3 7a00 	vldr	s15, [r3]
 800a33a:	4670      	mov	r0, lr
 800a33c:	e7d4      	b.n	800a2e8 <getMagStats.constprop.26+0x17c>
 800a33e:	bf00      	nop
 800a340:	423c0000 	.word	0x423c0000
 800a344:	00000000 	.word	0x00000000
 800a348:	3f59999a 	.word	0x3f59999a
 800a34c:	20001398 	.word	0x20001398

0800a350 <MEMS_updateMagBufferIndex.constprop.24>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	4e98      	ldr	r6, [pc, #608]	; (800a5b8 <MEMS_updateMagBufferIndex.constprop.24+0x268>)
 800a356:	ed2d 8b02 	vpush	{d8}
 800a35a:	f896 9500 	ldrb.w	r9, [r6, #1280]	; 0x500
 800a35e:	f896 8501 	ldrb.w	r8, [r6, #1281]	; 0x501
 800a362:	f996 1502 	ldrsb.w	r1, [r6, #1282]	; 0x502
 800a366:	2300      	movs	r3, #0
 800a368:	45c1      	cmp	r9, r8
 800a36a:	b08f      	sub	sp, #60	; 0x3c
 800a36c:	f101 0101 	add.w	r1, r1, #1
 800a370:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 800a374:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 800a378:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 800a37c:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 800a380:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 800a384:	f8c6 3518 	str.w	r3, [r6, #1304]	; 0x518
 800a388:	f000 810b 	beq.w	800a5a2 <MEMS_updateMagBufferIndex.constprop.24+0x252>
 800a38c:	eba1 0109 	sub.w	r1, r1, r9
 800a390:	fb91 f3f8 	sdiv	r3, r1, r8
 800a394:	fb08 1113 	mls	r1, r8, r3, r1
 800a398:	b20b      	sxth	r3, r1
 800a39a:	2900      	cmp	r1, #0
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	f2c0 80fc 	blt.w	800a59a <MEMS_updateMagBufferIndex.constprop.24+0x24a>
 800a3a2:	f1b9 0f00 	cmp.w	r9, #0
 800a3a6:	d107      	bne.n	800a3b8 <MEMS_updateMagBufferIndex.constprop.24+0x68>
 800a3a8:	23ff      	movs	r3, #255	; 0xff
 800a3aa:	f886 3502 	strb.w	r3, [r6, #1282]	; 0x502
 800a3ae:	b00f      	add	sp, #60	; 0x3c
 800a3b0:	ecbd 8b02 	vpop	{d8}
 800a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a3be:	f8cd 9018 	str.w	r9, [sp, #24]
 800a3c2:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800a3c6:	9509      	str	r5, [sp, #36]	; 0x24
 800a3c8:	46aa      	mov	sl, r5
 800a3ca:	950d      	str	r5, [sp, #52]	; 0x34
 800a3cc:	9507      	str	r5, [sp, #28]
 800a3ce:	950a      	str	r5, [sp, #40]	; 0x28
 800a3d0:	9502      	str	r5, [sp, #8]
 800a3d2:	950b      	str	r5, [sp, #44]	; 0x2c
 800a3d4:	9503      	str	r5, [sp, #12]
 800a3d6:	950c      	str	r5, [sp, #48]	; 0x30
 800a3d8:	9504      	str	r5, [sp, #16]
 800a3da:	9508      	str	r5, [sp, #32]
 800a3dc:	9505      	str	r5, [sp, #20]
 800a3de:	2701      	movs	r7, #1
 800a3e0:	4681      	mov	r9, r0
 800a3e2:	e02b      	b.n	800a43c <MEMS_updateMagBufferIndex.constprop.24+0xec>
 800a3e4:	9b05      	ldr	r3, [sp, #20]
 800a3e6:	3c20      	subs	r4, #32
 800a3e8:	fa07 f404 	lsl.w	r4, r7, r4
 800a3ec:	ea24 0403 	bic.w	r4, r4, r3
 800a3f0:	4063      	eors	r3, r4
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	f1bb 0f1f 	cmp.w	fp, #31
 800a3f8:	f04f 0301 	mov.w	r3, #1
 800a3fc:	9308      	str	r3, [sp, #32]
 800a3fe:	f240 8091 	bls.w	800a524 <MEMS_updateMagBufferIndex.constprop.24+0x1d4>
 800a402:	9a03      	ldr	r2, [sp, #12]
 800a404:	f1ab 0320 	sub.w	r3, fp, #32
 800a408:	fa07 f303 	lsl.w	r3, r7, r3
 800a40c:	ea23 0302 	bic.w	r3, r3, r2
 800a410:	4053      	eors	r3, r2
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	291f      	cmp	r1, #31
 800a416:	f04f 0301 	mov.w	r3, #1
 800a41a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a41c:	f200 808f 	bhi.w	800a53e <MEMS_updateMagBufferIndex.constprop.24+0x1ee>
 800a420:	2301      	movs	r3, #1
 800a422:	3501      	adds	r5, #1
 800a424:	9a06      	ldr	r2, [sp, #24]
 800a426:	9309      	str	r3, [sp, #36]	; 0x24
 800a428:	fa07 f101 	lsl.w	r1, r7, r1
 800a42c:	b2eb      	uxtb	r3, r5
 800a42e:	ea21 010a 	bic.w	r1, r1, sl
 800a432:	429a      	cmp	r2, r3
 800a434:	ea8a 0a01 	eor.w	sl, sl, r1
 800a438:	f240 8091 	bls.w	800a55e <MEMS_updateMagBufferIndex.constprop.24+0x20e>
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	1959      	adds	r1, r3, r5
 800a440:	fb91 f3f8 	sdiv	r3, r1, r8
 800a444:	fb08 1313 	mls	r3, r8, r3, r1
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	f103 0b04 	add.w	fp, r3, #4
 800a44e:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 800a452:	f9b1 0502 	ldrsh.w	r0, [r1, #1282]	; 0x502
 800a456:	fb90 f1f9 	sdiv	r1, r0, r9
 800a45a:	fb09 0111 	mls	r1, r9, r1, r0
 800a45e:	2900      	cmp	r1, #0
 800a460:	bfb8      	it	lt
 800a462:	4449      	addlt	r1, r9
 800a464:	b20b      	sxth	r3, r1
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a46e:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a472:	ee17 0a90 	vmov	r0, s15
 800a476:	f00a f883 	bl	8014580 <roundf>
 800a47a:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 800a47e:	ee07 0a90 	vmov	s15, r0
 800a482:	f9b1 0504 	ldrsh.w	r0, [r1, #1284]	; 0x504
 800a486:	fb90 f1f9 	sdiv	r1, r0, r9
 800a48a:	fb09 0111 	mls	r1, r9, r1, r0
 800a48e:	2900      	cmp	r1, #0
 800a490:	bfb8      	it	lt
 800a492:	4449      	addlt	r1, r9
 800a494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a498:	b20b      	sxth	r3, r1
 800a49a:	edcd 7a00 	vstr	s15, [sp]
 800a49e:	ee07 3a90 	vmov	s15, r3
 800a4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4a6:	f89d 4000 	ldrb.w	r4, [sp]
 800a4aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a4ae:	ee17 0a90 	vmov	r0, s15
 800a4b2:	f00a f865 	bl	8014580 <roundf>
 800a4b6:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 800a4ba:	ee07 0a90 	vmov	s15, r0
 800a4be:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 800a4c2:	fb93 f1f9 	sdiv	r1, r3, r9
 800a4c6:	fb09 3111 	mls	r1, r9, r1, r3
 800a4ca:	2900      	cmp	r1, #0
 800a4cc:	bfb8      	it	lt
 800a4ce:	4449      	addlt	r1, r9
 800a4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4d4:	b20b      	sxth	r3, r1
 800a4d6:	edcd 7a00 	vstr	s15, [sp]
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4e2:	f89d b000 	ldrb.w	fp, [sp]
 800a4e6:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a4ea:	ee17 0a90 	vmov	r0, s15
 800a4ee:	f00a f847 	bl	8014580 <roundf>
 800a4f2:	ee07 0a90 	vmov	s15, r0
 800a4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fa:	2c1f      	cmp	r4, #31
 800a4fc:	edcd 7a00 	vstr	s15, [sp]
 800a500:	f89d 1000 	ldrb.w	r1, [sp]
 800a504:	f63f af6e 	bhi.w	800a3e4 <MEMS_updateMagBufferIndex.constprop.24+0x94>
 800a508:	9b04      	ldr	r3, [sp, #16]
 800a50a:	fa07 f404 	lsl.w	r4, r7, r4
 800a50e:	ea24 0403 	bic.w	r4, r4, r3
 800a512:	4063      	eors	r3, r4
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	f1bb 0f1f 	cmp.w	fp, #31
 800a51a:	f04f 0301 	mov.w	r3, #1
 800a51e:	930c      	str	r3, [sp, #48]	; 0x30
 800a520:	f63f af6f 	bhi.w	800a402 <MEMS_updateMagBufferIndex.constprop.24+0xb2>
 800a524:	9a02      	ldr	r2, [sp, #8]
 800a526:	fa07 f30b 	lsl.w	r3, r7, fp
 800a52a:	ea23 0302 	bic.w	r3, r3, r2
 800a52e:	4053      	eors	r3, r2
 800a530:	9302      	str	r3, [sp, #8]
 800a532:	291f      	cmp	r1, #31
 800a534:	f04f 0301 	mov.w	r3, #1
 800a538:	930a      	str	r3, [sp, #40]	; 0x28
 800a53a:	f67f af71 	bls.w	800a420 <MEMS_updateMagBufferIndex.constprop.24+0xd0>
 800a53e:	9b07      	ldr	r3, [sp, #28]
 800a540:	9a06      	ldr	r2, [sp, #24]
 800a542:	3920      	subs	r1, #32
 800a544:	fa07 f101 	lsl.w	r1, r7, r1
 800a548:	ea21 0103 	bic.w	r1, r1, r3
 800a54c:	404b      	eors	r3, r1
 800a54e:	9307      	str	r3, [sp, #28]
 800a550:	3501      	adds	r5, #1
 800a552:	2301      	movs	r3, #1
 800a554:	930d      	str	r3, [sp, #52]	; 0x34
 800a556:	b2eb      	uxtb	r3, r5
 800a558:	429a      	cmp	r2, r3
 800a55a:	f63f af6f 	bhi.w	800a43c <MEMS_updateMagBufferIndex.constprop.24+0xec>
 800a55e:	9b08      	ldr	r3, [sp, #32]
 800a560:	4652      	mov	r2, sl
 800a562:	bb2b      	cbnz	r3, 800a5b0 <MEMS_updateMagBufferIndex.constprop.24+0x260>
 800a564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a566:	b113      	cbz	r3, 800a56e <MEMS_updateMagBufferIndex.constprop.24+0x21e>
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 800a56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a570:	b113      	cbz	r3, 800a578 <MEMS_updateMagBufferIndex.constprop.24+0x228>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 800a578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57a:	b113      	cbz	r3, 800a582 <MEMS_updateMagBufferIndex.constprop.24+0x232>
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 800a582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a584:	b113      	cbz	r3, 800a58c <MEMS_updateMagBufferIndex.constprop.24+0x23c>
 800a586:	9b07      	ldr	r3, [sp, #28]
 800a588:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 800a58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f43f af0d 	beq.w	800a3ae <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 800a594:	f8c6 2518 	str.w	r2, [r6, #1304]	; 0x518
 800a598:	e709      	b.n	800a3ae <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 800a59a:	4441      	add	r1, r8
 800a59c:	b20b      	sxth	r3, r1
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	e6ff      	b.n	800a3a2 <MEMS_updateMagBufferIndex.constprop.24+0x52>
 800a5a2:	fb91 f3f9 	sdiv	r3, r1, r9
 800a5a6:	fb09 1113 	mls	r1, r9, r3, r1
 800a5aa:	b20b      	sxth	r3, r1
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	e6f8      	b.n	800a3a2 <MEMS_updateMagBufferIndex.constprop.24+0x52>
 800a5b0:	9b05      	ldr	r3, [sp, #20]
 800a5b2:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 800a5b6:	e7d5      	b.n	800a564 <MEMS_updateMagBufferIndex.constprop.24+0x214>
 800a5b8:	20001398 	.word	0x20001398
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <iNemo_quat2heading>:
 800a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	4ddc      	ldr	r5, [pc, #880]	; (800a938 <iNemo_quat2heading+0x378>)
 800a5c6:	ed2d 8b0a 	vpush	{d8-d12}
 800a5ca:	ed92 ba01 	vldr	s22, [r2, #4]
 800a5ce:	edd2 aa00 	vldr	s21, [r2]
 800a5d2:	ed92 aa02 	vldr	s20, [r2, #8]
 800a5d6:	edd0 ba01 	vldr	s23, [r0, #4]
 800a5da:	ed90 ca00 	vldr	s24, [r0]
 800a5de:	edd0 ca02 	vldr	s25, [r0, #8]
 800a5e2:	ed90 9a03 	vldr	s18, [r0, #12]
 800a5e6:	f8d5 4820 	ldr.w	r4, [r5, #2080]	; 0x820
 800a5ea:	468a      	mov	sl, r1
 800a5ec:	eeb0 8acb 	vabs.f32	s16, s22
 800a5f0:	eef0 8aea 	vabs.f32	s17, s21
 800a5f4:	eef0 9aca 	vabs.f32	s19, s20
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d145      	bne.n	800a688 <iNemo_quat2heading+0xc8>
 800a5fc:	ee18 0a10 	vmov	r0, s16
 800a600:	f7f5 ffba 	bl	8000578 <__aeabi_f2d>
 800a604:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	f140 80f6 	bpl.w	800a800 <iNemo_quat2heading+0x240>
 800a614:	eef4 8ae9 	vcmpe.f32	s17, s19
 800a618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61c:	f340 80f0 	ble.w	800a800 <iNemo_quat2heading+0x240>
 800a620:	ee18 0a90 	vmov	r0, s17
 800a624:	f7f5 ffa8 	bl	8000578 <__aeabi_f2d>
 800a628:	a3bf      	add	r3, pc, #764	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	4680      	mov	r8, r0
 800a630:	4689      	mov	r9, r1
 800a632:	4630      	mov	r0, r6
 800a634:	4639      	mov	r1, r7
 800a636:	f7f5 fff7 	bl	8000628 <__aeabi_dmul>
 800a63a:	eef5 aac0 	vcmpe.f32	s21, #0.0
 800a63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f340 820a 	ble.w	800aa62 <iNemo_quat2heading+0x4a2>
 800a64e:	f7f6 fa7b 	bl	8000b48 <__aeabi_dcmpgt>
 800a652:	b170      	cbz	r0, 800a672 <iNemo_quat2heading+0xb2>
 800a654:	ee19 0a90 	vmov	r0, s19
 800a658:	f7f5 ff8e 	bl	8000578 <__aeabi_f2d>
 800a65c:	a3b2      	add	r3, pc, #712	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7f5 ffe1 	bl	8000628 <__aeabi_dmul>
 800a666:	4642      	mov	r2, r8
 800a668:	464b      	mov	r3, r9
 800a66a:	f7f6 fa4f 	bl	8000b0c <__aeabi_dcmplt>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d148      	bne.n	800a704 <iNemo_quat2heading+0x144>
 800a672:	2c05      	cmp	r4, #5
 800a674:	f200 8224 	bhi.w	800aac0 <iNemo_quat2heading+0x500>
 800a678:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a67c:	00980120 	.word	0x00980120
 800a680:	017e0047 	.word	0x017e0047
 800a684:	01200047 	.word	0x01200047
 800a688:	ee18 0a90 	vmov	r0, s17
 800a68c:	f7f5 ff74 	bl	8000578 <__aeabi_f2d>
 800a690:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a698:	eef1 ca6c 	vneg.f32	s25, s25
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	dd4f      	ble.n	800a742 <iNemo_quat2heading+0x182>
 800a6a2:	eeb4 8ae9 	vcmpe.f32	s16, s19
 800a6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6aa:	dd4a      	ble.n	800a742 <iNemo_quat2heading+0x182>
 800a6ac:	ee18 0a10 	vmov	r0, s16
 800a6b0:	f7f5 ff62 	bl	8000578 <__aeabi_f2d>
 800a6b4:	a39c      	add	r3, pc, #624	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	4689      	mov	r9, r1
 800a6be:	4630      	mov	r0, r6
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	f7f5 ffb1 	bl	8000628 <__aeabi_dmul>
 800a6c6:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800a6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	f340 81dd 	ble.w	800aa94 <iNemo_quat2heading+0x4d4>
 800a6da:	f7f6 fa35 	bl	8000b48 <__aeabi_dcmpgt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f000 8119 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800a6e4:	ee19 0a90 	vmov	r0, s19
 800a6e8:	f7f5 ff46 	bl	8000578 <__aeabi_f2d>
 800a6ec:	a38e      	add	r3, pc, #568	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	f7f5 ff99 	bl	8000628 <__aeabi_dmul>
 800a6f6:	4642      	mov	r2, r8
 800a6f8:	464b      	mov	r3, r9
 800a6fa:	f7f6 fa07 	bl	8000b0c <__aeabi_dcmplt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f000 8109 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800a704:	2304      	movs	r3, #4
 800a706:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800a70a:	ed9a 0a00 	vldr	s0, [sl]
 800a70e:	eddf 7a8b 	vldr	s15, [pc, #556]	; 800a93c <iNemo_quat2heading+0x37c>
 800a712:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a716:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800a940 <iNemo_quat2heading+0x380>
 800a71a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	bfa8      	it	ge
 800a724:	ee30 0a67 	vsubge.f32	s0, s0, s15
 800a728:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a730:	d503      	bpl.n	800a73a <iNemo_quat2heading+0x17a>
 800a732:	eddf 7a83 	vldr	s15, [pc, #524]	; 800a940 <iNemo_quat2heading+0x380>
 800a736:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a73a:	ecbd 8b0a 	vpop	{d8-d12}
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	eef4 8ae9 	vcmpe.f32	s17, s19
 800a746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74a:	f340 80ba 	ble.w	800a8c2 <iNemo_quat2heading+0x302>
 800a74e:	ee18 0a10 	vmov	r0, s16
 800a752:	f7f5 ff11 	bl	8000578 <__aeabi_f2d>
 800a756:	a374      	add	r3, pc, #464	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 ff64 	bl	8000628 <__aeabi_dmul>
 800a760:	eef5 aac0 	vcmpe.f32	s21, #0.0
 800a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a768:	4632      	mov	r2, r6
 800a76a:	463b      	mov	r3, r7
 800a76c:	f340 8145 	ble.w	800a9fa <iNemo_quat2heading+0x43a>
 800a770:	f7f6 f9cc 	bl	8000b0c <__aeabi_dcmplt>
 800a774:	2800      	cmp	r0, #0
 800a776:	f000 80ce 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800a77a:	ee19 0a90 	vmov	r0, s19
 800a77e:	f7f5 fefb 	bl	8000578 <__aeabi_f2d>
 800a782:	a369      	add	r3, pc, #420	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	f7f5 ff4e 	bl	8000628 <__aeabi_dmul>
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	f7f6 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	f000 80be 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800a79a:	eef0 7a6b 	vmov.f32	s15, s23
 800a79e:	2301      	movs	r3, #1
 800a7a0:	eef0 ba4c 	vmov.f32	s23, s24
 800a7a4:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800a7a8:	eeb0 ca67 	vmov.f32	s24, s15
 800a7ac:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 800a7b0:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a7b4:	eeec 7aec 	vfms.f32	s15, s25, s25
 800a7b8:	eee9 7a09 	vfma.f32	s15, s18, s18
 800a7bc:	ee2c 9a89 	vmul.f32	s18, s25, s18
 800a7c0:	ee17 0a90 	vmov	r0, s15
 800a7c4:	eeab 9a8c 	vfma.f32	s18, s23, s24
 800a7c8:	f7f5 fed6 	bl	8000578 <__aeabi_f2d>
 800a7cc:	ee79 7a09 	vadd.f32	s15, s18, s18
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	ee17 0a90 	vmov	r0, s15
 800a7d8:	f7f5 fece 	bl	8000578 <__aeabi_f2d>
 800a7dc:	4622      	mov	r2, r4
 800a7de:	462b      	mov	r3, r5
 800a7e0:	f009 ffaa 	bl	8014738 <atan2>
 800a7e4:	a352      	add	r3, pc, #328	; (adr r3, 800a930 <iNemo_quat2heading+0x370>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 ff1d 	bl	8000628 <__aeabi_dmul>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4b54      	ldr	r3, [pc, #336]	; (800a944 <iNemo_quat2heading+0x384>)
 800a7f2:	f7f5 fd61 	bl	80002b8 <__aeabi_dsub>
 800a7f6:	f7f6 f9ef 	bl	8000bd8 <__aeabi_d2f>
 800a7fa:	ee00 0a10 	vmov	s0, r0
 800a7fe:	e78a      	b.n	800a716 <iNemo_quat2heading+0x156>
 800a800:	eeb4 8ae9 	vcmpe.f32	s16, s19
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	dd29      	ble.n	800a85e <iNemo_quat2heading+0x29e>
 800a80a:	ee18 0a90 	vmov	r0, s17
 800a80e:	f7f5 feb3 	bl	8000578 <__aeabi_f2d>
 800a812:	a345      	add	r3, pc, #276	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 ff06 	bl	8000628 <__aeabi_dmul>
 800a81c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800a820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f340 808e 	ble.w	800a948 <iNemo_quat2heading+0x388>
 800a82c:	f7f6 f96e 	bl	8000b0c <__aeabi_dcmplt>
 800a830:	2800      	cmp	r0, #0
 800a832:	f43f af1e 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800a836:	ee19 0a90 	vmov	r0, s19
 800a83a:	f7f5 fe9d 	bl	8000578 <__aeabi_f2d>
 800a83e:	a33a      	add	r3, pc, #232	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 fef0 	bl	8000628 <__aeabi_dmul>
 800a848:	4632      	mov	r2, r6
 800a84a:	463b      	mov	r3, r7
 800a84c:	f7f6 f95e 	bl	8000b0c <__aeabi_dcmplt>
 800a850:	2800      	cmp	r0, #0
 800a852:	f43f af0e 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800a856:	2301      	movs	r3, #1
 800a858:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800a85c:	e7a6      	b.n	800a7ac <iNemo_quat2heading+0x1ec>
 800a85e:	ee19 0a90 	vmov	r0, s19
 800a862:	f7f5 fe89 	bl	8000578 <__aeabi_f2d>
 800a866:	a330      	add	r3, pc, #192	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f5 fed8 	bl	8000628 <__aeabi_dmul>
 800a878:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4640      	mov	r0, r8
 800a886:	4649      	mov	r1, r9
 800a888:	f340 80d5 	ble.w	800aa36 <iNemo_quat2heading+0x476>
 800a88c:	f7f6 f95c 	bl	8000b48 <__aeabi_dcmpgt>
 800a890:	2800      	cmp	r0, #0
 800a892:	f43f aeee 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800a896:	ee18 0a90 	vmov	r0, s17
 800a89a:	f7f5 fe6d 	bl	8000578 <__aeabi_f2d>
 800a89e:	a322      	add	r3, pc, #136	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f5 fec0 	bl	8000628 <__aeabi_dmul>
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	f7f6 f92e 	bl	8000b0c <__aeabi_dcmplt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f43f aede 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800a8bc:	ed9a 0a00 	vldr	s0, [sl]
 800a8c0:	e729      	b.n	800a716 <iNemo_quat2heading+0x156>
 800a8c2:	a319      	add	r3, pc, #100	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f5 feac 	bl	8000628 <__aeabi_dmul>
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	ee19 0a90 	vmov	r0, s19
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	f7f5 fe4e 	bl	8000578 <__aeabi_f2d>
 800a8dc:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	460f      	mov	r7, r1
 800a8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	4632      	mov	r2, r6
 800a8ee:	463b      	mov	r3, r7
 800a8f0:	d56c      	bpl.n	800a9cc <iNemo_quat2heading+0x40c>
 800a8f2:	f7f6 f90b 	bl	8000b0c <__aeabi_dcmplt>
 800a8f6:	b170      	cbz	r0, 800a916 <iNemo_quat2heading+0x356>
 800a8f8:	ee18 0a10 	vmov	r0, s16
 800a8fc:	f7f5 fe3c 	bl	8000578 <__aeabi_f2d>
 800a900:	a309      	add	r3, pc, #36	; (adr r3, 800a928 <iNemo_quat2heading+0x368>)
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f7f5 fe8f 	bl	8000628 <__aeabi_dmul>
 800a90a:	4632      	mov	r2, r6
 800a90c:	463b      	mov	r3, r7
 800a90e:	f7f6 f8fd 	bl	8000b0c <__aeabi_dcmplt>
 800a912:	2800      	cmp	r0, #0
 800a914:	d1cf      	bne.n	800a8b6 <iNemo_quat2heading+0x2f6>
 800a916:	eef0 7a4c 	vmov.f32	s15, s24
 800a91a:	eeb0 ca6b 	vmov.f32	s24, s23
 800a91e:	eef0 ba67 	vmov.f32	s23, s15
 800a922:	e6a6      	b.n	800a672 <iNemo_quat2heading+0xb2>
 800a924:	f3af 8000 	nop.w
 800a928:	e0000000 	.word	0xe0000000
 800a92c:	3ff6b851 	.word	0x3ff6b851
 800a930:	20000000 	.word	0x20000000
 800a934:	404ca5dc 	.word	0x404ca5dc
 800a938:	20001398 	.word	0x20001398
 800a93c:	43340000 	.word	0x43340000
 800a940:	43b40000 	.word	0x43b40000
 800a944:	40568000 	.word	0x40568000
 800a948:	f7f6 f8e0 	bl	8000b0c <__aeabi_dcmplt>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f43f ae90 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800a952:	ee19 0a90 	vmov	r0, s19
 800a956:	f7f5 fe0f 	bl	8000578 <__aeabi_f2d>
 800a95a:	a35b      	add	r3, pc, #364	; (adr r3, 800aac8 <iNemo_quat2heading+0x508>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fe62 	bl	8000628 <__aeabi_dmul>
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	f7f6 f8d0 	bl	8000b0c <__aeabi_dcmplt>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f43f ae80 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800a972:	2303      	movs	r3, #3
 800a974:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800a978:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 800a97c:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a980:	eeec 7aec 	vfms.f32	s15, s25, s25
 800a984:	eee9 7a09 	vfma.f32	s15, s18, s18
 800a988:	ee2c 9a89 	vmul.f32	s18, s25, s18
 800a98c:	ee17 0a90 	vmov	r0, s15
 800a990:	eeab 9a8c 	vfma.f32	s18, s23, s24
 800a994:	f7f5 fdf0 	bl	8000578 <__aeabi_f2d>
 800a998:	ee79 7a09 	vadd.f32	s15, s18, s18
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	ee17 0a90 	vmov	r0, s15
 800a9a4:	f7f5 fde8 	bl	8000578 <__aeabi_f2d>
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	462b      	mov	r3, r5
 800a9ac:	f009 fec4 	bl	8014738 <atan2>
 800a9b0:	a349      	add	r3, pc, #292	; (adr r3, 800aad8 <iNemo_quat2heading+0x518>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 fe37 	bl	8000628 <__aeabi_dmul>
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4b44      	ldr	r3, [pc, #272]	; (800aad0 <iNemo_quat2heading+0x510>)
 800a9be:	f7f5 fc7d 	bl	80002bc <__adddf3>
 800a9c2:	f7f6 f909 	bl	8000bd8 <__aeabi_d2f>
 800a9c6:	ee00 0a10 	vmov	s0, r0
 800a9ca:	e6a4      	b.n	800a716 <iNemo_quat2heading+0x156>
 800a9cc:	f7f6 f89e 	bl	8000b0c <__aeabi_dcmplt>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d0a0      	beq.n	800a916 <iNemo_quat2heading+0x356>
 800a9d4:	ee18 0a10 	vmov	r0, s16
 800a9d8:	f7f5 fdce 	bl	8000578 <__aeabi_f2d>
 800a9dc:	a33a      	add	r3, pc, #232	; (adr r3, 800aac8 <iNemo_quat2heading+0x508>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fe21 	bl	8000628 <__aeabi_dmul>
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	463b      	mov	r3, r7
 800a9ea:	f7f6 f88f 	bl	8000b0c <__aeabi_dcmplt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d091      	beq.n	800a916 <iNemo_quat2heading+0x356>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800a9f8:	e687      	b.n	800a70a <iNemo_quat2heading+0x14a>
 800a9fa:	f7f6 f887 	bl	8000b0c <__aeabi_dcmplt>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d089      	beq.n	800a916 <iNemo_quat2heading+0x356>
 800aa02:	ee19 0a90 	vmov	r0, s19
 800aa06:	f7f5 fdb7 	bl	8000578 <__aeabi_f2d>
 800aa0a:	a32f      	add	r3, pc, #188	; (adr r3, 800aac8 <iNemo_quat2heading+0x508>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fe0a 	bl	8000628 <__aeabi_dmul>
 800aa14:	4632      	mov	r2, r6
 800aa16:	463b      	mov	r3, r7
 800aa18:	f7f6 f878 	bl	8000b0c <__aeabi_dcmplt>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f af7a 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800aa22:	eef0 7a6b 	vmov.f32	s15, s23
 800aa26:	2303      	movs	r3, #3
 800aa28:	eef0 ba4c 	vmov.f32	s23, s24
 800aa2c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800aa30:	eeb0 ca67 	vmov.f32	s24, s15
 800aa34:	e7a0      	b.n	800a978 <iNemo_quat2heading+0x3b8>
 800aa36:	f7f6 f887 	bl	8000b48 <__aeabi_dcmpgt>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f ae19 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800aa40:	ee18 0a90 	vmov	r0, s17
 800aa44:	f7f5 fd98 	bl	8000578 <__aeabi_f2d>
 800aa48:	a31f      	add	r3, pc, #124	; (adr r3, 800aac8 <iNemo_quat2heading+0x508>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fdeb 	bl	8000628 <__aeabi_dmul>
 800aa52:	4642      	mov	r2, r8
 800aa54:	464b      	mov	r3, r9
 800aa56:	f7f6 f859 	bl	8000b0c <__aeabi_dcmplt>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	f43f ae09 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800aa60:	e7c7      	b.n	800a9f2 <iNemo_quat2heading+0x432>
 800aa62:	f7f6 f871 	bl	8000b48 <__aeabi_dcmpgt>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f43f ae03 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800aa6c:	ee19 0a90 	vmov	r0, s19
 800aa70:	f7f5 fd82 	bl	8000578 <__aeabi_f2d>
 800aa74:	a314      	add	r3, pc, #80	; (adr r3, 800aac8 <iNemo_quat2heading+0x508>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fdd5 	bl	8000628 <__aeabi_dmul>
 800aa7e:	4642      	mov	r2, r8
 800aa80:	464b      	mov	r3, r9
 800aa82:	f7f6 f843 	bl	8000b0c <__aeabi_dcmplt>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f adf3 	beq.w	800a672 <iNemo_quat2heading+0xb2>
 800aa8c:	2305      	movs	r3, #5
 800aa8e:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 800aa92:	e713      	b.n	800a8bc <iNemo_quat2heading+0x2fc>
 800aa94:	f7f6 f858 	bl	8000b48 <__aeabi_dcmpgt>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	f43f af3c 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800aa9e:	ee19 0a90 	vmov	r0, s19
 800aaa2:	f7f5 fd69 	bl	8000578 <__aeabi_f2d>
 800aaa6:	a308      	add	r3, pc, #32	; (adr r3, 800aac8 <iNemo_quat2heading+0x508>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fdbc 	bl	8000628 <__aeabi_dmul>
 800aab0:	4642      	mov	r2, r8
 800aab2:	464b      	mov	r3, r9
 800aab4:	f7f6 f82a 	bl	8000b0c <__aeabi_dcmplt>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	f43f af2c 	beq.w	800a916 <iNemo_quat2heading+0x356>
 800aabe:	e7e5      	b.n	800aa8c <iNemo_quat2heading+0x4cc>
 800aac0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800aad4 <iNemo_quat2heading+0x514>
 800aac4:	e639      	b.n	800a73a <iNemo_quat2heading+0x17a>
 800aac6:	bf00      	nop
 800aac8:	e0000000 	.word	0xe0000000
 800aacc:	3ff6b851 	.word	0x3ff6b851
 800aad0:	40568000 	.word	0x40568000
 800aad4:	00000000 	.word	0x00000000
 800aad8:	20000000 	.word	0x20000000
 800aadc:	404ca5dc 	.word	0x404ca5dc

0800aae0 <output_update>:
 800aae0:	edd0 5a03 	vldr	s11, [r0, #12]
 800aae4:	ed90 7a02 	vldr	s14, [r0, #8]
 800aae8:	edd0 4a01 	vldr	s9, [r0, #4]
 800aaec:	edd0 3a00 	vldr	s7, [r0]
 800aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800aaf8:	eeb1 5a64 	vneg.f32	s10, s9
 800aafc:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ab00:	4682      	mov	sl, r0
 800ab02:	460f      	mov	r7, r1
 800ab04:	ee24 6a87 	vmul.f32	s12, s9, s14
 800ab08:	ee65 6ac5 	vnmul.f32	s13, s11, s10
 800ab0c:	ed2d 8b0a 	vpush	{d8-d12}
 800ab10:	eeb1 4a63 	vneg.f32	s8, s7
 800ab14:	eee3 6a87 	vfma.f32	s13, s7, s14
 800ab18:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800ab1c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ab1e:	ed8a 4a00 	vstr	s8, [sl]
 800ab22:	eee4 7a23 	vfma.f32	s15, s8, s7
 800ab26:	4614      	mov	r4, r2
 800ab28:	461d      	mov	r5, r3
 800ab2a:	eea4 6a25 	vfma.f32	s12, s8, s11
 800ab2e:	eeb1 7a47 	vneg.f32	s14, s14
 800ab32:	ed8a 7a02 	vstr	s14, [sl, #8]
 800ab36:	ee36 6a06 	vadd.f32	s12, s12, s12
 800ab3a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ab3e:	eee5 7a24 	vfma.f32	s15, s10, s9
 800ab42:	ed8a 5a01 	vstr	s10, [sl, #4]
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d141      	bne.n	800abce <output_update+0xee>
 800ab4a:	edc3 6a00 	vstr	s13, [r3]
 800ab4e:	edc3 7a02 	vstr	s15, [r3, #8]
 800ab52:	ed83 6a01 	vstr	s12, [r3, #4]
 800ab56:	ed9a 7a02 	vldr	s14, [sl, #8]
 800ab5a:	edda 6a03 	vldr	s13, [sl, #12]
 800ab5e:	edda 5a00 	vldr	s11, [sl]
 800ab62:	ed9a 6a01 	vldr	s12, [sl, #4]
 800ab66:	4bf2      	ldr	r3, [pc, #968]	; (800af30 <output_update+0x450>)
 800ab68:	ee67 7a26 	vmul.f32	s15, s14, s13
 800ab6c:	ee65 baa5 	vmul.f32	s23, s11, s11
 800ab70:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ab74:	ee26 aa06 	vmul.f32	s20, s12, s12
 800ab78:	ee67 9a07 	vmul.f32	s19, s14, s14
 800ab7c:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800ab80:	ee3b 7aca 	vsub.f32	s14, s23, s20
 800ab84:	edd3 aa00 	vldr	s21, [r3]
 800ab88:	ee26 9aa6 	vmul.f32	s18, s13, s13
 800ab8c:	ee37 7a69 	vsub.f32	s14, s14, s19
 800ab90:	eeb4 8a6a 	vcmp.f32	s16, s21
 800ab94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab98:	ee37 7a09 	vadd.f32	s14, s14, s18
 800ab9c:	d032      	beq.n	800ac04 <output_update+0x124>
 800ab9e:	edd3 7a01 	vldr	s15, [r3, #4]
 800aba2:	eeb4 8a67 	vcmp.f32	s16, s15
 800aba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abaa:	d02b      	beq.n	800ac04 <output_update+0x124>
 800abac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb4:	f040 81a4 	bne.w	800af00 <output_update+0x420>
 800abb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800abbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc0:	f340 81ef 	ble.w	800afa2 <output_update+0x4c2>
 800abc4:	ed9f badb 	vldr	s22, [pc, #876]	; 800af34 <output_update+0x454>
 800abc8:	ed9f 7adb 	vldr	s14, [pc, #876]	; 800af38 <output_update+0x458>
 800abcc:	e04c      	b.n	800ac68 <output_update+0x188>
 800abce:	2801      	cmp	r0, #1
 800abd0:	f000 8099 	beq.w	800ad06 <output_update+0x226>
 800abd4:	ecbd 8b0a 	vpop	{d8-d12}
 800abd8:	ed9f 6ae2 	vldr	s12, [pc, #904]	; 800af64 <output_update+0x484>
 800abdc:	edd2 6a00 	vldr	s13, [r2]
 800abe0:	ed92 7a01 	vldr	s14, [r2, #4]
 800abe4:	edd2 7a02 	vldr	s15, [r2, #8]
 800abe8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800abec:	ee27 7a06 	vmul.f32	s14, s14, s12
 800abf0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800abf4:	edc2 6a00 	vstr	s13, [r2]
 800abf8:	ed82 7a01 	vstr	s14, [r2, #4]
 800abfc:	edc2 7a02 	vstr	s15, [r2, #8]
 800ac00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac04:	eeb4 7a6a 	vcmp.f32	s14, s21
 800ac08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0c:	f040 811f 	bne.w	800ae4e <output_update+0x36e>
 800ac10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac14:	eddf 5ac9 	vldr	s11, [pc, #804]	; 800af3c <output_update+0x45c>
 800ac18:	ed9f 4ac9 	vldr	s8, [pc, #804]	; 800af40 <output_update+0x460>
 800ac1c:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 800af44 <output_update+0x464>
 800ac20:	eddf 4ac9 	vldr	s9, [pc, #804]	; 800af48 <output_update+0x468>
 800ac24:	ed9f bac9 	vldr	s22, [pc, #804]	; 800af4c <output_update+0x46c>
 800ac28:	ed9f 5ac9 	vldr	s10, [pc, #804]	; 800af50 <output_update+0x470>
 800ac2c:	eddf 6ac9 	vldr	s13, [pc, #804]	; 800af54 <output_update+0x474>
 800ac30:	eddf 7ac9 	vldr	s15, [pc, #804]	; 800af58 <output_update+0x478>
 800ac34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ac3c:	bfd8      	it	le
 800ac3e:	eef0 5a44 	vmovle.f32	s11, s8
 800ac42:	bfd8      	it	le
 800ac44:	eeb0 6a64 	vmovle.f32	s12, s9
 800ac48:	bfd8      	it	le
 800ac4a:	eeb0 ba45 	vmovle.f32	s22, s10
 800ac4e:	bfd4      	ite	le
 800ac50:	eeb0 7a67 	vmovle.f32	s14, s15
 800ac54:	eeb0 7a66 	vmovgt.f32	s14, s13
 800ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5c:	bfc8      	it	gt
 800ac5e:	eeb0 ba65 	vmovgt.f32	s22, s11
 800ac62:	bfc8      	it	gt
 800ac64:	eeb0 7a46 	vmovgt.f32	s14, s12
 800ac68:	ed84 7a00 	vstr	s14, [r4]
 800ac6c:	edda 7a01 	vldr	s15, [sl, #4]
 800ac70:	ed9a 7a03 	vldr	s14, [sl, #12]
 800ac74:	edda 6a02 	vldr	s13, [sl, #8]
 800ac78:	ed9a 6a00 	vldr	s12, [sl]
 800ac7c:	ee27 7a67 	vnmul.f32	s14, s14, s15
 800ac80:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ac84:	eea6 7a26 	vfma.f32	s14, s12, s13
 800ac88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8c:	ee17 0a90 	vmov	r0, s15
 800ac90:	f7f5 fc72 	bl	8000578 <__aeabi_f2d>
 800ac94:	f009 fcfc 	bl	8014690 <asin>
 800ac98:	f7f5 ff9e 	bl	8000bd8 <__aeabi_d2f>
 800ac9c:	6060      	str	r0, [r4, #4]
 800ac9e:	edda 7a03 	vldr	s15, [sl, #12]
 800aca2:	ed9a 8a00 	vldr	s16, [sl]
 800aca6:	edda 6a01 	vldr	s13, [sl, #4]
 800acaa:	ed9a 7a02 	vldr	s14, [sl, #8]
 800acae:	ee28 8a27 	vmul.f32	s16, s16, s15
 800acb2:	ee79 7a89 	vadd.f32	s15, s19, s18
 800acb6:	eea6 8a87 	vfma.f32	s16, s13, s14
 800acba:	ee77 7aeb 	vsub.f32	s15, s15, s23
 800acbe:	ee38 8a08 	vadd.f32	s16, s16, s16
 800acc2:	ee08 0a90 	vmov	s17, r0
 800acc6:	eeb4 8a6a 	vcmp.f32	s16, s21
 800acca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acce:	ee77 7aca 	vsub.f32	s15, s15, s20
 800acd2:	f000 80c6 	beq.w	800ae62 <output_update+0x382>
 800acd6:	4ba1      	ldr	r3, [pc, #644]	; (800af5c <output_update+0x47c>)
 800acd8:	ed93 7a00 	vldr	s14, [r3]
 800acdc:	eeb4 8a47 	vcmp.f32	s16, s14
 800ace0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace4:	f000 80bd 	beq.w	800ae62 <output_update+0x382>
 800ace8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf0:	f040 8140 	bne.w	800af74 <output_update+0x494>
 800acf4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800acf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfc:	f340 8157 	ble.w	800afae <output_update+0x4ce>
 800ad00:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800af34 <output_update+0x454>
 800ad04:	e0d6      	b.n	800aeb4 <output_update+0x3d4>
 800ad06:	eef1 7a67 	vneg.f32	s15, s15
 800ad0a:	ed83 6a00 	vstr	s12, [r3]
 800ad0e:	edc3 6a01 	vstr	s13, [r3, #4]
 800ad12:	edc3 7a02 	vstr	s15, [r3, #8]
 800ad16:	ed9a aa00 	vldr	s20, [sl]
 800ad1a:	edda 8a02 	vldr	s17, [sl, #8]
 800ad1e:	edda aa01 	vldr	s21, [sl, #4]
 800ad22:	ed9a 8a03 	vldr	s16, [sl, #12]
 800ad26:	ee2a 9a0a 	vmul.f32	s18, s20, s20
 800ad2a:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800ad2e:	ee39 9a09 	vadd.f32	s18, s18, s18
 800ad32:	eeb0 ca00 	vmov.f32	s24, #0	; 0x40000000  2.0
 800ad36:	eeb0 7a49 	vmov.f32	s14, s18
 800ad3a:	eea7 7a8c 	vfma.f32	s14, s15, s24
 800ad3e:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800ad42:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 800ad46:	eef1 8a68 	vneg.f32	s17, s17
 800ad4a:	ee17 0a90 	vmov	r0, s15
 800ad4e:	f7f5 fc13 	bl	8000578 <__aeabi_f2d>
 800ad52:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 800ad56:	4680      	mov	r8, r0
 800ad58:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ad62:	ee17 0a90 	vmov	r0, s15
 800ad66:	f7f5 fc07 	bl	8000578 <__aeabi_f2d>
 800ad6a:	4642      	mov	r2, r8
 800ad6c:	464b      	mov	r3, r9
 800ad6e:	f009 fce3 	bl	8014738 <atan2>
 800ad72:	f7f5 ff31 	bl	8000bd8 <__aeabi_d2f>
 800ad76:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 800ad7a:	ee0b 0a10 	vmov	s22, r0
 800ad7e:	eea7 9a8c 	vfma.f32	s18, s15, s24
 800ad82:	eef1 9a4b 	vneg.f32	s19, s22
 800ad86:	ee7b 7ac9 	vsub.f32	s15, s23, s18
 800ad8a:	edc4 9a00 	vstr	s19, [r4]
 800ad8e:	ee17 0a90 	vmov	r0, s15
 800ad92:	f7f5 fbf1 	bl	8000578 <__aeabi_f2d>
 800ad96:	ee6a 7a88 	vmul.f32	s15, s21, s16
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	eeea 7a28 	vfma.f32	s15, s20, s17
 800ada0:	4689      	mov	r9, r1
 800ada2:	ee28 8a4a 	vnmul.f32	s16, s16, s20
 800ada6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800adaa:	eea8 8aaa 	vfma.f32	s16, s17, s21
 800adae:	ee17 0a90 	vmov	r0, s15
 800adb2:	f7f5 fbe1 	bl	8000578 <__aeabi_f2d>
 800adb6:	4642      	mov	r2, r8
 800adb8:	464b      	mov	r3, r9
 800adba:	f009 fcbd 	bl	8014738 <atan2>
 800adbe:	f7f5 ff0b 	bl	8000bd8 <__aeabi_d2f>
 800adc2:	ee07 0a90 	vmov	s15, r0
 800adc6:	eeb1 9a67 	vneg.f32	s18, s15
 800adca:	ee78 7a08 	vadd.f32	s15, s16, s16
 800adce:	ed84 9a01 	vstr	s18, [r4, #4]
 800add2:	ee17 0a90 	vmov	r0, s15
 800add6:	f7f5 fbcf 	bl	8000578 <__aeabi_f2d>
 800adda:	f009 fc59 	bl	8014690 <asin>
 800adde:	f7f5 fefb 	bl	8000bd8 <__aeabi_d2f>
 800ade2:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800ade6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adea:	ee07 0a90 	vmov	s15, r0
 800adee:	60a0      	str	r0, [r4, #8]
 800adf0:	dd03      	ble.n	800adfa <output_update+0x31a>
 800adf2:	eddf 9a5b 	vldr	s19, [pc, #364]	; 800af60 <output_update+0x480>
 800adf6:	ee79 9acb 	vsub.f32	s19, s19, s22
 800adfa:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800af64 <output_update+0x484>
 800adfe:	ee69 9a87 	vmul.f32	s19, s19, s14
 800ae02:	ee29 9a07 	vmul.f32	s18, s18, s14
 800ae06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae0a:	edc4 9a00 	vstr	s19, [r4]
 800ae0e:	ed84 9a01 	vstr	s18, [r4, #4]
 800ae12:	edc4 7a02 	vstr	s15, [r4, #8]
 800ae16:	ed97 7a01 	vldr	s14, [r7, #4]
 800ae1a:	edd5 7a00 	vldr	s15, [r5]
 800ae1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae22:	ecbd 8b0a 	vpop	{d8-d12}
 800ae26:	edc6 7a00 	vstr	s15, [r6]
 800ae2a:	ed97 7a00 	vldr	s14, [r7]
 800ae2e:	edd5 7a01 	vldr	s15, [r5, #4]
 800ae32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae36:	edc6 7a01 	vstr	s15, [r6, #4]
 800ae3a:	edd5 7a02 	vldr	s15, [r5, #8]
 800ae3e:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae46:	edc6 7a02 	vstr	s15, [r6, #8]
 800ae4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4e:	4b43      	ldr	r3, [pc, #268]	; (800af5c <output_update+0x47c>)
 800ae50:	edd3 7a00 	vldr	s15, [r3]
 800ae54:	eeb4 7a67 	vcmp.f32	s14, s15
 800ae58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5c:	f47f aea6 	bne.w	800abac <output_update+0xcc>
 800ae60:	e6d6      	b.n	800ac10 <output_update+0x130>
 800ae62:	eef4 7a6a 	vcmp.f32	s15, s21
 800ae66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6a:	d008      	beq.n	800ae7e <output_update+0x39e>
 800ae6c:	4b3b      	ldr	r3, [pc, #236]	; (800af5c <output_update+0x47c>)
 800ae6e:	ed93 7a00 	vldr	s14, [r3]
 800ae72:	eef4 7a47 	vcmp.f32	s15, s14
 800ae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7a:	f47f af35 	bne.w	800ace8 <output_update+0x208>
 800ae7e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ae82:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800af3c <output_update+0x45c>
 800ae86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af40 <output_update+0x460>
 800ae8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800af4c <output_update+0x46c>
 800ae8e:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800af50 <output_update+0x470>
 800ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae96:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae9a:	bfd8      	it	le
 800ae9c:	eef0 6a65 	vmovle.f32	s13, s11
 800aea0:	bfd4      	ite	le
 800aea2:	eef0 7a46 	vmovle.f32	s15, s12
 800aea6:	eef0 7a47 	vmovgt.f32	s15, s14
 800aeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeae:	bfc8      	it	gt
 800aeb0:	eef0 7a66 	vmovgt.f32	s15, s13
 800aeb4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800af64 <output_update+0x484>
 800aeb8:	ed84 ba00 	vstr	s22, [r4]
 800aebc:	ee68 8a87 	vmul.f32	s17, s17, s14
 800aec0:	edc4 7a02 	vstr	s15, [r4, #8]
 800aec4:	edc4 8a01 	vstr	s17, [r4, #4]
 800aec8:	ed97 7a00 	vldr	s14, [r7]
 800aecc:	edd5 7a00 	vldr	s15, [r5]
 800aed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aed4:	ecbd 8b0a 	vpop	{d8-d12}
 800aed8:	edc6 7a00 	vstr	s15, [r6]
 800aedc:	ed97 7a01 	vldr	s14, [r7, #4]
 800aee0:	edd5 7a01 	vldr	s15, [r5, #4]
 800aee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aee8:	edc6 7a01 	vstr	s15, [r6, #4]
 800aeec:	edd5 7a02 	vldr	s15, [r5, #8]
 800aef0:	ed97 7a02 	vldr	s14, [r7, #8]
 800aef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aef8:	edc6 7a02 	vstr	s15, [r6, #8]
 800aefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af00:	ee17 0a10 	vmov	r0, s14
 800af04:	f7f5 fb38 	bl	8000578 <__aeabi_f2d>
 800af08:	4680      	mov	r8, r0
 800af0a:	4689      	mov	r9, r1
 800af0c:	ee18 0a10 	vmov	r0, s16
 800af10:	f7f5 fb32 	bl	8000578 <__aeabi_f2d>
 800af14:	4642      	mov	r2, r8
 800af16:	464b      	mov	r3, r9
 800af18:	f009 fc0e 	bl	8014738 <atan2>
 800af1c:	f7f5 fe5c 	bl	8000bd8 <__aeabi_d2f>
 800af20:	ed9f ba10 	vldr	s22, [pc, #64]	; 800af64 <output_update+0x484>
 800af24:	ee07 0a10 	vmov	s14, r0
 800af28:	ee27 ba0b 	vmul.f32	s22, s14, s22
 800af2c:	e69c      	b.n	800ac68 <output_update+0x188>
 800af2e:	bf00      	nop
 800af30:	200017a8 	.word	0x200017a8
 800af34:	42b40000 	.word	0x42b40000
 800af38:	3fc90fdb 	.word	0x3fc90fdb
 800af3c:	42340000 	.word	0x42340000
 800af40:	c2340000 	.word	0xc2340000
 800af44:	3f490fdb 	.word	0x3f490fdb
 800af48:	bf490fdb 	.word	0xbf490fdb
 800af4c:	43070000 	.word	0x43070000
 800af50:	c3070000 	.word	0xc3070000
 800af54:	4016cbe4 	.word	0x4016cbe4
 800af58:	c016cbe4 	.word	0xc016cbe4
 800af5c:	200017ac 	.word	0x200017ac
 800af60:	40c90e56 	.word	0x40c90e56
 800af64:	42652ee1 	.word	0x42652ee1
 800af68:	00000000 	.word	0x00000000
 800af6c:	bfc90fdb 	.word	0xbfc90fdb
 800af70:	c2b40000 	.word	0xc2b40000
 800af74:	ee17 0a90 	vmov	r0, s15
 800af78:	f7f5 fafe 	bl	8000578 <__aeabi_f2d>
 800af7c:	4680      	mov	r8, r0
 800af7e:	4689      	mov	r9, r1
 800af80:	ee18 0a10 	vmov	r0, s16
 800af84:	f7f5 faf8 	bl	8000578 <__aeabi_f2d>
 800af88:	4642      	mov	r2, r8
 800af8a:	464b      	mov	r3, r9
 800af8c:	f009 fbd4 	bl	8014738 <atan2>
 800af90:	f7f5 fe22 	bl	8000bd8 <__aeabi_d2f>
 800af94:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 800af64 <output_update+0x484>
 800af98:	ee07 0a10 	vmov	s14, r0
 800af9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa0:	e788      	b.n	800aeb4 <output_update+0x3d4>
 800afa2:	d408      	bmi.n	800afb6 <output_update+0x4d6>
 800afa4:	ed1f ba10 	vldr	s22, [pc, #-64]	; 800af68 <output_update+0x488>
 800afa8:	eeb0 7a4b 	vmov.f32	s14, s22
 800afac:	e65c      	b.n	800ac68 <output_update+0x188>
 800afae:	d407      	bmi.n	800afc0 <output_update+0x4e0>
 800afb0:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 800af68 <output_update+0x488>
 800afb4:	e77e      	b.n	800aeb4 <output_update+0x3d4>
 800afb6:	ed1f ba12 	vldr	s22, [pc, #-72]	; 800af70 <output_update+0x490>
 800afba:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 800af6c <output_update+0x48c>
 800afbe:	e653      	b.n	800ac68 <output_update+0x188>
 800afc0:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 800af70 <output_update+0x490>
 800afc4:	e776      	b.n	800aeb4 <output_update+0x3d4>
 800afc6:	bf00      	nop

0800afc8 <MEMS_runMagCal.constprop.14>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	ed2d 8b0c 	vpush	{d8-d13}
 800afd0:	f8df b408 	ldr.w	fp, [pc, #1032]	; 800b3dc <MEMS_runMagCal.constprop.14+0x414>
 800afd4:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800afd8:	2382      	movs	r3, #130	; 0x82
 800afda:	461a      	mov	r2, r3
 800afdc:	f50b 608c 	add.w	r0, fp, #1120	; 0x460
 800afe0:	ac56      	add	r4, sp, #344	; 0x158
 800afe2:	a917      	add	r1, sp, #92	; 0x5c
 800afe4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800afe8:	9419      	str	r4, [sp, #100]	; 0x64
 800afea:	f7fe f975 	bl	80092d8 <MEMS_getSensorData_I16>
 800afee:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 800aff2:	f9bb 2462 	ldrsh.w	r2, [fp, #1122]	; 0x462
 800aff6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aff8:	f100 39ff 	add.w	r9, r0, #4294967295
 800affc:	fb02 3209 	mla	r2, r2, r9, r3
 800b000:	9209      	str	r2, [sp, #36]	; 0x24
 800b002:	f8cb 24ac 	str.w	r2, [fp, #1196]	; 0x4ac
 800b006:	2800      	cmp	r0, #0
 800b008:	f000 8275 	beq.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800b00c:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 800b010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b014:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800b018:	fb01 f103 	mul.w	r1, r1, r3
 800b01c:	32a0      	adds	r2, #160	; 0xa0
 800b01e:	428a      	cmp	r2, r1
 800b020:	f080 826f 	bcs.w	800b502 <MEMS_runMagCal.constprop.14+0x53a>
 800b024:	2200      	movs	r2, #0
 800b026:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f040 8274 	bne.w	800b518 <MEMS_runMagCal.constprop.14+0x550>
 800b030:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 800b034:	2200      	movs	r2, #0
 800b036:	f8cb 3478 	str.w	r3, [fp, #1144]	; 0x478
 800b03a:	f8cb 2480 	str.w	r2, [fp, #1152]	; 0x480
 800b03e:	2300      	movs	r3, #0
 800b040:	22ff      	movs	r2, #255	; 0xff
 800b042:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 800b046:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 800b04a:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 800b04e:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 800b052:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 800b056:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 800b05a:	f88b 2502 	strb.w	r2, [fp, #1282]	; 0x502
 800b05e:	4bdb      	ldr	r3, [pc, #876]	; (800b3cc <MEMS_runMagCal.constprop.14+0x404>)
 800b060:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800b064:	4fda      	ldr	r7, [pc, #872]	; (800b3d0 <MEMS_runMagCal.constprop.14+0x408>)
 800b066:	eddf 7adb 	vldr	s15, [pc, #876]	; 800b3d4 <MEMS_runMagCal.constprop.14+0x40c>
 800b06a:	edd3 2a01 	vldr	s5, [r3, #4]
 800b06e:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 800b072:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
 800b076:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 800b07a:	ed93 4a1d 	vldr	s8, [r3, #116]	; 0x74
 800b07e:	edd3 3a27 	vldr	s7, [r3, #156]	; 0x9c
 800b082:	ed93 3a1e 	vldr	s6, [r3, #120]	; 0x78
 800b086:	9002      	str	r0, [sp, #8]
 800b088:	f04f 0c00 	mov.w	ip, #0
 800b08c:	fa1f f989 	uxth.w	r9, r9
 800b090:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800b094:	464d      	mov	r5, r9
 800b096:	e9cd cc04 	strd	ip, ip, [sp, #16]
 800b09a:	e9cd cc06 	strd	ip, ip, [sp, #24]
 800b09e:	f06f 2480 	mvn.w	r4, #2147516416	; 0x80008000
 800b0a2:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 800b0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0aa:	468e      	mov	lr, r1
 800b0ac:	2d03      	cmp	r5, #3
 800b0ae:	9446      	str	r4, [sp, #280]	; 0x118
 800b0b0:	9236      	str	r2, [sp, #216]	; 0xd8
 800b0b2:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 800b0b6:	f8cd a020 	str.w	sl, [sp, #32]
 800b0ba:	4653      	mov	r3, sl
 800b0bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b0c0:	eeb0 7a67 	vmov.f32	s14, s15
 800b0c4:	f8ad 111c 	strh.w	r1, [sp, #284]	; 0x11c
 800b0c8:	9101      	str	r1, [sp, #4]
 800b0ca:	4688      	mov	r8, r1
 800b0cc:	bf28      	it	cs
 800b0ce:	2503      	movcs	r5, #3
 800b0d0:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800b0d4:	9700      	str	r7, [sp, #0]
 800b0d6:	f8cd c00c 	str.w	ip, [sp, #12]
 800b0da:	4662      	mov	r2, ip
 800b0dc:	4666      	mov	r6, ip
 800b0de:	4664      	mov	r4, ip
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	46f1      	mov	r9, lr
 800b0e4:	46ba      	mov	sl, r7
 800b0e6:	7819      	ldrb	r1, [r3, #0]
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	d047      	beq.n	800b17c <MEMS_runMagCal.constprop.14+0x1b4>
 800b0ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b0f0:	4297      	cmp	r7, r2
 800b0f2:	f106 0601 	add.w	r6, r6, #1
 800b0f6:	bfbc      	itt	lt
 800b0f8:	4617      	movlt	r7, r2
 800b0fa:	f04f 0c01 	movlt.w	ip, #1
 800b0fe:	4596      	cmp	lr, r2
 800b100:	b276      	sxtb	r6, r6
 800b102:	dd02      	ble.n	800b10a <MEMS_runMagCal.constprop.14+0x142>
 800b104:	2101      	movs	r1, #1
 800b106:	4696      	mov	lr, r2
 800b108:	9104      	str	r1, [sp, #16]
 800b10a:	ee07 2a90 	vmov	s15, r2
 800b10e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b112:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b116:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b11a:	4290      	cmp	r0, r2
 800b11c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b120:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b124:	da02      	bge.n	800b12c <MEMS_runMagCal.constprop.14+0x164>
 800b126:	2101      	movs	r1, #1
 800b128:	4610      	mov	r0, r2
 800b12a:	9105      	str	r1, [sp, #20]
 800b12c:	4591      	cmp	r9, r2
 800b12e:	dd02      	ble.n	800b136 <MEMS_runMagCal.constprop.14+0x16e>
 800b130:	2101      	movs	r1, #1
 800b132:	4691      	mov	r9, r2
 800b134:	9106      	str	r1, [sp, #24]
 800b136:	ee06 2a90 	vmov	s13, r2
 800b13a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b13e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b142:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b146:	4552      	cmp	r2, sl
 800b148:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800b14c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800b150:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b154:	dd02      	ble.n	800b15c <MEMS_runMagCal.constprop.14+0x194>
 800b156:	2101      	movs	r1, #1
 800b158:	4692      	mov	sl, r2
 800b15a:	9107      	str	r1, [sp, #28]
 800b15c:	4542      	cmp	r2, r8
 800b15e:	da02      	bge.n	800b166 <MEMS_runMagCal.constprop.14+0x19e>
 800b160:	2101      	movs	r1, #1
 800b162:	4690      	mov	r8, r2
 800b164:	9103      	str	r1, [sp, #12]
 800b166:	ee07 2a90 	vmov	s15, r2
 800b16a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b16e:	2201      	movs	r2, #1
 800b170:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b174:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b178:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800b17c:	3401      	adds	r4, #1
 800b17e:	b2a4      	uxth	r4, r4
 800b180:	42ac      	cmp	r4, r5
 800b182:	f103 0308 	add.w	r3, r3, #8
 800b186:	d9ae      	bls.n	800b0e6 <MEMS_runMagCal.constprop.14+0x11e>
 800b188:	9000      	str	r0, [sp, #0]
 800b18a:	9802      	ldr	r0, [sp, #8]
 800b18c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b190:	42a0      	cmp	r0, r4
 800b192:	f8cd a008 	str.w	sl, [sp, #8]
 800b196:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800b19a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b19e:	f240 81bf 	bls.w	800b520 <MEMS_runMagCal.constprop.14+0x558>
 800b1a2:	eba9 0904 	sub.w	r9, r9, r4
 800b1a6:	fa14 f989 	uxtah	r9, r4, r9
 800b1aa:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 800b1ae:	f1aa 0a16 	sub.w	sl, sl, #22
 800b1b2:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800b1b6:	3c1e      	subs	r4, #30
 800b1b8:	f04f 0a00 	mov.w	sl, #0
 800b1bc:	f8cd c020 	str.w	ip, [sp, #32]
 800b1c0:	7fa3      	ldrb	r3, [r4, #30]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 8092 	beq.w	800b2ec <MEMS_runMagCal.constprop.14+0x324>
 800b1c8:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	42b9      	cmp	r1, r7
 800b1d0:	b276      	sxtb	r6, r6
 800b1d2:	dd02      	ble.n	800b1da <MEMS_runMagCal.constprop.14+0x212>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	460f      	mov	r7, r1
 800b1d8:	9308      	str	r3, [sp, #32]
 800b1da:	4571      	cmp	r1, lr
 800b1dc:	da02      	bge.n	800b1e4 <MEMS_runMagCal.constprop.14+0x21c>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	468e      	mov	lr, r1
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	ee07 1a90 	vmov	s15, r1
 800b1e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1ec:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800b1f0:	9b00      	ldr	r3, [sp, #0]
 800b1f2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b1fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b200:	dd02      	ble.n	800b208 <MEMS_runMagCal.constprop.14+0x240>
 800b202:	2301      	movs	r3, #1
 800b204:	9200      	str	r2, [sp, #0]
 800b206:	9305      	str	r3, [sp, #20]
 800b208:	9b01      	ldr	r3, [sp, #4]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	da02      	bge.n	800b214 <MEMS_runMagCal.constprop.14+0x24c>
 800b20e:	2301      	movs	r3, #1
 800b210:	9201      	str	r2, [sp, #4]
 800b212:	9306      	str	r3, [sp, #24]
 800b214:	ee06 2a90 	vmov	s13, r2
 800b218:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b21c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800b220:	9802      	ldr	r0, [sp, #8]
 800b222:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b226:	4283      	cmp	r3, r0
 800b228:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800b22c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800b230:	ee37 6a87 	vadd.f32	s12, s15, s14
 800b234:	dd02      	ble.n	800b23c <MEMS_runMagCal.constprop.14+0x274>
 800b236:	2001      	movs	r0, #1
 800b238:	9302      	str	r3, [sp, #8]
 800b23a:	9007      	str	r0, [sp, #28]
 800b23c:	4543      	cmp	r3, r8
 800b23e:	da02      	bge.n	800b246 <MEMS_runMagCal.constprop.14+0x27e>
 800b240:	2001      	movs	r0, #1
 800b242:	4698      	mov	r8, r3
 800b244:	9003      	str	r0, [sp, #12]
 800b246:	f9b4 c008 	ldrsh.w	ip, [r4, #8]
 800b24a:	f9b4 5000 	ldrsh.w	r5, [r4]
 800b24e:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 800b252:	1b49      	subs	r1, r1, r5
 800b254:	eba0 000c 	sub.w	r0, r0, ip
 800b258:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b25c:	ee07 0a90 	vmov	s15, r0
 800b260:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 800b264:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
 800b268:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800b26c:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 800b270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b274:	1b52      	subs	r2, r2, r5
 800b276:	eba1 010c 	sub.w	r1, r1, ip
 800b27a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800b27e:	eeb0 7ac7 	vabs.f32	s14, s14
 800b282:	ee07 1a90 	vmov	s15, r1
 800b286:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800b28a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b28e:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800b292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b296:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b29a:	eef0 7ae7 	vabs.f32	s15, s15
 800b29e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2a2:	1a80      	subs	r0, r0, r2
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	1a59      	subs	r1, r3, r1
 800b2aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b2ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b2b2:	ee07 0a90 	vmov	s15, r0
 800b2b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b2ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b2c2:	eef0 7ae7 	vabs.f32	s15, s15
 800b2c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2d2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b2d6:	eeb0 7a46 	vmov.f32	s14, s12
 800b2da:	ee17 3a90 	vmov	r3, s15
 800b2de:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800b2e2:	459a      	cmp	sl, r3
 800b2e4:	f04f 0201 	mov.w	r2, #1
 800b2e8:	bf38      	it	cc
 800b2ea:	469a      	movcc	sl, r3
 800b2ec:	3408      	adds	r4, #8
 800b2ee:	45a1      	cmp	r9, r4
 800b2f0:	f47f af66 	bne.w	800b1c0 <MEMS_runMagCal.constprop.14+0x1f8>
 800b2f4:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b2f8:	eddf 7a36 	vldr	s15, [pc, #216]	; 800b3d4 <MEMS_runMagCal.constprop.14+0x40c>
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	2a00      	cmp	r2, #0
 800b300:	bf08      	it	eq
 800b302:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 810d 	bne.w	800b526 <MEMS_runMagCal.constprop.14+0x55e>
 800b30c:	9b07      	ldr	r3, [sp, #28]
 800b30e:	b113      	cbz	r3, 800b316 <MEMS_runMagCal.constprop.14+0x34e>
 800b310:	9b02      	ldr	r3, [sp, #8]
 800b312:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	b113      	cbz	r3, 800b320 <MEMS_runMagCal.constprop.14+0x358>
 800b31a:	9b01      	ldr	r3, [sp, #4]
 800b31c:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 800b320:	9b05      	ldr	r3, [sp, #20]
 800b322:	b113      	cbz	r3, 800b32a <MEMS_runMagCal.constprop.14+0x362>
 800b324:	9b00      	ldr	r3, [sp, #0]
 800b326:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 800b32a:	9b04      	ldr	r3, [sp, #16]
 800b32c:	b10b      	cbz	r3, 800b332 <MEMS_runMagCal.constprop.14+0x36a>
 800b32e:	f8ad e118 	strh.w	lr, [sp, #280]	; 0x118
 800b332:	f1bc 0f00 	cmp.w	ip, #0
 800b336:	f041 81fb 	bne.w	800c730 <MEMS_runMagCal.constprop.14+0x1768>
 800b33a:	4f25      	ldr	r7, [pc, #148]	; (800b3d0 <MEMS_runMagCal.constprop.14+0x408>)
 800b33c:	2e00      	cmp	r6, #0
 800b33e:	f000 80f5 	beq.w	800b52c <MEMS_runMagCal.constprop.14+0x564>
 800b342:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
 800b346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b34a:	f280 81b1 	bge.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b34e:	f9bd 0118 	ldrsh.w	r0, [sp, #280]	; 0x118
 800b352:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 800b356:	f2c0 81ab 	blt.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b35a:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
 800b35e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b362:	f280 81a5 	bge.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b366:	f9bd 211a 	ldrsh.w	r2, [sp, #282]	; 0x11a
 800b36a:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 800b36e:	f2c0 819f 	blt.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b372:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 800b376:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b37a:	f280 8199 	bge.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b37e:	f9bd 411c 	ldrsh.w	r4, [sp, #284]	; 0x11c
 800b382:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 800b386:	f2c0 8193 	blt.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b38a:	ee07 6a90 	vmov	s15, r6
 800b38e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b396:	eec7 7a06 	vdiv.f32	s15, s14, s12
 800b39a:	1a9a      	subs	r2, r3, r2
 800b39c:	1b09      	subs	r1, r1, r4
 800b39e:	428a      	cmp	r2, r1
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	eba7 0700 	sub.w	r7, r7, r0
 800b3a6:	bfb8      	it	lt
 800b3a8:	460b      	movlt	r3, r1
 800b3aa:	42bb      	cmp	r3, r7
 800b3ac:	bfb8      	it	lt
 800b3ae:	463b      	movlt	r3, r7
 800b3b0:	ee86 6aa2 	vdiv.f32	s12, s13, s5
 800b3b4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800b3b8:	ee06 3a90 	vmov	s13, r3
 800b3bc:	eddf 7a06 	vldr	s15, [pc, #24]	; 800b3d8 <MEMS_runMagCal.constprop.14+0x410>
 800b3c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b3c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b3c8:	e010      	b.n	800b3ec <MEMS_runMagCal.constprop.14+0x424>
 800b3ca:	bf00      	nop
 800b3cc:	200017f8 	.word	0x200017f8
 800b3d0:	ffff8000 	.word	0xffff8000
 800b3d4:	00000000 	.word	0x00000000
 800b3d8:	43020000 	.word	0x43020000
 800b3dc:	20001398 	.word	0x20001398
 800b3e0:	447a0000 	.word	0x447a0000
 800b3e4:	42c80000 	.word	0x42c80000
 800b3e8:	477fff00 	.word	0x477fff00
 800b3ec:	ee22 7a87 	vmul.f32	s14, s5, s14
 800b3f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f8:	f100 815a 	bmi.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b3fc:	ee07 aa90 	vmov	s15, sl
 800b400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b404:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 800b3e0 <MEMS_runMagCal.constprop.14+0x418>
 800b408:	ee67 2aa2 	vmul.f32	s5, s15, s5
 800b40c:	eef4 2ae5 	vcmpe.f32	s5, s11
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	f300 814c 	bgt.w	800b6b0 <MEMS_runMagCal.constprop.14+0x6e8>
 800b418:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800b41c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b420:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b428:	f300 84ff 	bgt.w	800be2a <MEMS_runMagCal.constprop.14+0xe62>
 800b42c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800b430:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b434:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43c:	f340 84fb 	ble.w	800be36 <MEMS_runMagCal.constprop.14+0xe6e>
 800b440:	ee07 7a90 	vmov	s15, r7
 800b444:	ee36 6a06 	vadd.f32	s12, s12, s12
 800b448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b44c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b454:	f340 84ef 	ble.w	800be36 <MEMS_runMagCal.constprop.14+0xe6e>
 800b458:	ee07 2a90 	vmov	s15, r2
 800b45c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b460:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800b464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b468:	f140 84e5 	bpl.w	800be36 <MEMS_runMagCal.constprop.14+0xe6e>
 800b46c:	ee07 1a90 	vmov	s15, r1
 800b470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b474:	f04f 0900 	mov.w	r9, #0
 800b478:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800b47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b480:	bf4c      	ite	mi
 800b482:	f04f 0a01 	movmi.w	sl, #1
 800b486:	46ca      	movpl	sl, r9
 800b488:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 800b3e4 <MEMS_runMagCal.constprop.14+0x41c>
 800b48c:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 800b3e8 <MEMS_runMagCal.constprop.14+0x420>
 800b490:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 800b494:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b498:	2300      	movs	r3, #0
 800b49a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a2:	bf88      	it	hi
 800b4a4:	eeb0 7a67 	vmovhi.f32	s14, s15
 800b4a8:	2d01      	cmp	r5, #1
 800b4aa:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	d955      	bls.n	800b55e <MEMS_runMagCal.constprop.14+0x596>
 800b4b2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b4b6:	edcd 7a01 	vstr	s15, [sp, #4]
 800b4ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b4be:	3bc8      	subs	r3, #200	; 0xc8
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f644 422c 	movw	r2, #19500	; 0x4c2c
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d909      	bls.n	800b4de <MEMS_runMagCal.constprop.14+0x516>
 800b4ca:	2500      	movs	r5, #0
 800b4cc:	23ff      	movs	r3, #255	; 0xff
 800b4ce:	f88b 54cc 	strb.w	r5, [fp, #1228]	; 0x4cc
 800b4d2:	f88b 5500 	strb.w	r5, [fp, #1280]	; 0x500
 800b4d6:	f88b 54b4 	strb.w	r5, [fp, #1204]	; 0x4b4
 800b4da:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 800b4de:	9b00      	ldr	r3, [sp, #0]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d13c      	bne.n	800b55e <MEMS_runMagCal.constprop.14+0x596>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	23ff      	movs	r3, #255	; 0xff
 800b4e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ea:	f8cb 1480 	str.w	r1, [fp, #1152]	; 0x480
 800b4ee:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 800b4f2:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 800b4f6:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 800b4fa:	ecbd 8b0c 	vpop	{d8-d13}
 800b4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b502:	f8db 1504 	ldr.w	r1, [fp, #1284]	; 0x504
 800b506:	428a      	cmp	r2, r1
 800b508:	f4ff ad8c 	bcc.w	800b024 <MEMS_runMagCal.constprop.14+0x5c>
 800b50c:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 800b510:	2b00      	cmp	r3, #0
 800b512:	f47f ada4 	bne.w	800b05e <MEMS_runMagCal.constprop.14+0x96>
 800b516:	e592      	b.n	800b03e <MEMS_runMagCal.constprop.14+0x76>
 800b518:	2301      	movs	r3, #1
 800b51a:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 800b51e:	e589      	b.n	800b034 <MEMS_runMagCal.constprop.14+0x6c>
 800b520:	f04f 0a00 	mov.w	sl, #0
 800b524:	e6e8      	b.n	800b2f8 <MEMS_runMagCal.constprop.14+0x330>
 800b526:	f8ad 811c 	strh.w	r8, [sp, #284]	; 0x11c
 800b52a:	e6ef      	b.n	800b30c <MEMS_runMagCal.constprop.14+0x344>
 800b52c:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 800b3e4 <MEMS_runMagCal.constprop.14+0x41c>
 800b530:	ed5f 7a53 	vldr	s15, [pc, #-332]	; 800b3e8 <MEMS_runMagCal.constprop.14+0x420>
 800b534:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 800b538:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b53c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b544:	bf88      	it	hi
 800b546:	eeb0 7a67 	vmovhi.f32	s14, s15
 800b54a:	2d01      	cmp	r5, #1
 800b54c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800b550:	bf88      	it	hi
 800b552:	9600      	strhi	r6, [sp, #0]
 800b554:	f200 80c2 	bhi.w	800b6dc <MEMS_runMagCal.constprop.14+0x714>
 800b558:	46b1      	mov	r9, r6
 800b55a:	9600      	str	r6, [sp, #0]
 800b55c:	46b2      	mov	sl, r6
 800b55e:	f99b 3486 	ldrsb.w	r3, [fp, #1158]	; 0x486
 800b562:	f89b 7485 	ldrb.w	r7, [fp, #1157]	; 0x485
 800b566:	2b00      	cmp	r3, #0
 800b568:	f2c0 80c2 	blt.w	800b6f0 <MEMS_runMagCal.constprop.14+0x728>
 800b56c:	3301      	adds	r3, #1
 800b56e:	fb93 f4f7 	sdiv	r4, r3, r7
 800b572:	fb07 3314 	mls	r3, r7, r4, r3
 800b576:	b25c      	sxtb	r4, r3
 800b578:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 800b57c:	f89b 6484 	ldrb.w	r6, [fp, #1156]	; 0x484
 800b580:	3601      	adds	r6, #1
 800b582:	42be      	cmp	r6, r7
 800b584:	bfa8      	it	ge
 800b586:	463e      	movge	r6, r7
 800b588:	fa5f f886 	uxtb.w	r8, r6
 800b58c:	ee17 0a10 	vmov	r0, s14
 800b590:	f88b 8484 	strb.w	r8, [fp, #1156]	; 0x484
 800b594:	f008 fff4 	bl	8014580 <roundf>
 800b598:	ee07 0a90 	vmov	s15, r0
 800b59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a0:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 800b5a4:	ee17 0a90 	vmov	r0, s15
 800b5a8:	f8a3 0488 	strh.w	r0, [r3, #1160]	; 0x488
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d198      	bne.n	800b4e4 <MEMS_runMagCal.constprop.14+0x51c>
 800b5b2:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
 800b5b6:	b123      	cbz	r3, 800b5c2 <MEMS_runMagCal.constprop.14+0x5fa>
 800b5b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5ba:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800b5be:	4291      	cmp	r1, r2
 800b5c0:	d399      	bcc.n	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800b5c2:	f1b9 0f00 	cmp.w	r9, #0
 800b5c6:	d196      	bne.n	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800b5c8:	1eaa      	subs	r2, r5, #2
 800b5ca:	2a01      	cmp	r2, #1
 800b5cc:	f240 8363 	bls.w	800bc96 <MEMS_runMagCal.constprop.14+0xcce>
 800b5d0:	4be3      	ldr	r3, [pc, #908]	; (800b960 <MEMS_runMagCal.constprop.14+0x998>)
 800b5d2:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800b964 <MEMS_runMagCal.constprop.14+0x99c>
 800b5d6:	ed93 8a01 	vldr	s16, [r3, #4]
 800b5da:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 800b5de:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 800b5e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b5e4:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 800b5e8:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 800b5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5f0:	eec7 8a08 	vdiv.f32	s17, s14, s16
 800b5f4:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 800b5f8:	3c01      	subs	r4, #1
 800b5fa:	fb00 2404 	mla	r4, r0, r4, r2
 800b5fe:	3110      	adds	r1, #16
 800b600:	42a1      	cmp	r1, r4
 800b602:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 800b606:	ee28 9a89 	vmul.f32	s18, s17, s18
 800b60a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b60e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b612:	ee17 2a90 	vmov	r2, s15
 800b616:	fa1f f982 	uxth.w	r9, r2
 800b61a:	d27f      	bcs.n	800b71c <MEMS_runMagCal.constprop.14+0x754>
 800b61c:	f242 3228 	movw	r2, #9000	; 0x2328
 800b620:	4294      	cmp	r4, r2
 800b622:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 800b626:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 800b62a:	bf1a      	itte	ne
 800b62c:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 800b630:	3c28      	subne	r4, #40	; 0x28
 800b632:	2400      	moveq	r4, #0
 800b634:	42a8      	cmp	r0, r5
 800b636:	f102 0201 	add.w	r2, r2, #1
 800b63a:	f000 869f 	beq.w	800c37c <MEMS_runMagCal.constprop.14+0x13b4>
 800b63e:	1b52      	subs	r2, r2, r5
 800b640:	fb92 f1f0 	sdiv	r1, r2, r0
 800b644:	fb00 2211 	mls	r2, r0, r1, r2
 800b648:	2a00      	cmp	r2, #0
 800b64a:	b216      	sxth	r6, r2
 800b64c:	bfbc      	itt	lt
 800b64e:	1812      	addlt	r2, r2, r0
 800b650:	b216      	sxthlt	r6, r2
 800b652:	b22f      	sxth	r7, r5
 800b654:	2f00      	cmp	r7, #0
 800b656:	d05e      	beq.n	800b716 <MEMS_runMagCal.constprop.14+0x74e>
 800b658:	2200      	movs	r2, #0
 800b65a:	1b1b      	subs	r3, r3, r4
 800b65c:	b299      	uxth	r1, r3
 800b65e:	9201      	str	r2, [sp, #4]
 800b660:	4696      	mov	lr, r2
 800b662:	46ac      	mov	ip, r5
 800b664:	9402      	str	r4, [sp, #8]
 800b666:	e003      	b.n	800b670 <MEMS_runMagCal.constprop.14+0x6a8>
 800b668:	3201      	adds	r2, #1
 800b66a:	b213      	sxth	r3, r2
 800b66c:	429f      	cmp	r7, r3
 800b66e:	dd43      	ble.n	800b6f8 <MEMS_runMagCal.constprop.14+0x730>
 800b670:	eb06 0802 	add.w	r8, r6, r2
 800b674:	fb98 f3f0 	sdiv	r3, r8, r0
 800b678:	fb00 8313 	mls	r3, r0, r3, r8
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	3304      	adds	r3, #4
 800b680:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800b684:	f8b3 8500 	ldrh.w	r8, [r3, #1280]	; 0x500
 800b688:	4488      	add	r8, r1
 800b68a:	fa0f f888 	sxth.w	r8, r8
 800b68e:	f1b8 0f00 	cmp.w	r8, #0
 800b692:	f8a3 8500 	strh.w	r8, [r3, #1280]	; 0x500
 800b696:	dae7      	bge.n	800b668 <MEMS_runMagCal.constprop.14+0x6a0>
 800b698:	f10c 33ff 	add.w	r3, ip, #4294967295
 800b69c:	f1bc 0f00 	cmp.w	ip, #0
 800b6a0:	f000 82f6 	beq.w	800bc90 <MEMS_runMagCal.constprop.14+0xcc8>
 800b6a4:	2401      	movs	r4, #1
 800b6a6:	9401      	str	r4, [sp, #4]
 800b6a8:	fa5f fc83 	uxtb.w	ip, r3
 800b6ac:	46a6      	mov	lr, r4
 800b6ae:	e7db      	b.n	800b668 <MEMS_runMagCal.constprop.14+0x6a0>
 800b6b0:	eddf 6aad 	vldr	s13, [pc, #692]	; 800b968 <MEMS_runMagCal.constprop.14+0x9a0>
 800b6b4:	eddf 7aad 	vldr	s15, [pc, #692]	; 800b96c <MEMS_runMagCal.constprop.14+0x9a4>
 800b6b8:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 800b6bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b6c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c8:	bf88      	it	hi
 800b6ca:	eeb0 7a67 	vmovhi.f32	s14, s15
 800b6ce:	2d01      	cmp	r5, #1
 800b6d0:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800b6d4:	f67f af06 	bls.w	800b4e4 <MEMS_runMagCal.constprop.14+0x51c>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b6e0:	f04f 0a00 	mov.w	sl, #0
 800b6e4:	edcd 7a01 	vstr	s15, [sp, #4]
 800b6e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b6ec:	46d1      	mov	r9, sl
 800b6ee:	e6e6      	b.n	800b4be <MEMS_runMagCal.constprop.14+0x4f6>
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 800b6f6:	e741      	b.n	800b57c <MEMS_runMagCal.constprop.14+0x5b4>
 800b6f8:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 8735 	bne.w	800c56c <MEMS_runMagCal.constprop.14+0x15a4>
 800b702:	f1be 0f00 	cmp.w	lr, #0
 800b706:	d006      	beq.n	800b716 <MEMS_runMagCal.constprop.14+0x74e>
 800b708:	eeb0 0a49 	vmov.f32	s0, s18
 800b70c:	4648      	mov	r0, r9
 800b70e:	f7fe fe1f 	bl	800a350 <MEMS_updateMagBufferIndex.constprop.24>
 800b712:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 800b716:	f8cb 4504 	str.w	r4, [fp, #1284]	; 0x504
 800b71a:	4623      	mov	r3, r4
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	f000 82fa 	beq.w	800bd16 <MEMS_runMagCal.constprop.14+0xd4e>
 800b722:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 800b726:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b728:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800b72c:	f9b2 2520 	ldrsh.w	r2, [r2, #1312]	; 0x520
 800b730:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 800b734:	3208      	adds	r2, #8
 800b736:	4413      	add	r3, r2
 800b738:	4299      	cmp	r1, r3
 800b73a:	f200 81e7 	bhi.w	800bb0c <MEMS_runMagCal.constprop.14+0xb44>
 800b73e:	f1ba 0f00 	cmp.w	sl, #0
 800b742:	d104      	bne.n	800b74e <MEMS_runMagCal.constprop.14+0x786>
 800b744:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 800b748:	2b0a      	cmp	r3, #10
 800b74a:	f240 82e8 	bls.w	800bd1e <MEMS_runMagCal.constprop.14+0xd56>
 800b74e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 82e2 	beq.w	800bd1e <MEMS_runMagCal.constprop.14+0xd56>
 800b75a:	eddf 6a85 	vldr	s13, [pc, #532]	; 800b970 <MEMS_runMagCal.constprop.14+0x9a8>
 800b75e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800b974 <MEMS_runMagCal.constprop.14+0x9ac>
 800b762:	f8cd a018 	str.w	sl, [sp, #24]
 800b766:	ee29 aa09 	vmul.f32	s20, s18, s18
 800b76a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b76e:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 800b772:	2300      	movs	r3, #0
 800b774:	ee28 8a26 	vmul.f32	s16, s16, s13
 800b778:	ee2a aa07 	vmul.f32	s20, s20, s14
 800b77c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b780:	ee69 9a29 	vmul.f32	s19, s18, s19
 800b784:	9304      	str	r3, [sp, #16]
 800b786:	461a      	mov	r2, r3
 800b788:	461c      	mov	r4, r3
 800b78a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b78c:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 800b790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b794:	b2a4      	uxth	r4, r4
 800b796:	2900      	cmp	r1, #0
 800b798:	f000 8123 	beq.w	800b9e2 <MEMS_runMagCal.constprop.14+0xa1a>
 800b79c:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 800b7a0:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800b7a4:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 800b7a8:	ee07 5a90 	vmov	s15, r5
 800b7ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7b0:	eef0 7ae7 	vabs.f32	s15, s15
 800b7b4:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7bc:	d516      	bpl.n	800b7ec <MEMS_runMagCal.constprop.14+0x824>
 800b7be:	ee07 6a90 	vmov	s15, r6
 800b7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7c6:	eef0 7ae7 	vabs.f32	s15, s15
 800b7ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d2:	dd0b      	ble.n	800b7ec <MEMS_runMagCal.constprop.14+0x824>
 800b7d4:	ee07 7a90 	vmov	s15, r7
 800b7d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7dc:	eef0 7ae7 	vabs.f32	s15, s15
 800b7e0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e8:	f300 80fb 	bgt.w	800b9e2 <MEMS_runMagCal.constprop.14+0xa1a>
 800b7ec:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 800b7f0:	f1b8 0f00 	cmp.w	r8, #0
 800b7f4:	f000 819a 	beq.w	800bb2c <MEMS_runMagCal.constprop.14+0xb64>
 800b7f8:	f9bb 281a 	ldrsh.w	r2, [fp, #2074]	; 0x81a
 800b7fc:	f9bb 1818 	ldrsh.w	r1, [fp, #2072]	; 0x818
 800b800:	f9bb 381c 	ldrsh.w	r3, [fp, #2076]	; 0x81c
 800b804:	1b92      	subs	r2, r2, r6
 800b806:	fb02 f002 	mul.w	r0, r2, r2
 800b80a:	1b4a      	subs	r2, r1, r5
 800b80c:	fb02 0202 	mla	r2, r2, r2, r0
 800b810:	1bdb      	subs	r3, r3, r7
 800b812:	fb03 2303 	mla	r3, r3, r3, r2
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b81e:	eeb4 aae7 	vcmpe.f32	s20, s15
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	f300 80dc 	bgt.w	800b9e2 <MEMS_runMagCal.constprop.14+0xa1a>
 800b82a:	fb95 f3f9 	sdiv	r3, r5, r9
 800b82e:	fb09 5313 	mls	r3, r9, r3, r5
 800b832:	2b00      	cmp	r3, #0
 800b834:	bfb8      	it	lt
 800b836:	444b      	addlt	r3, r9
 800b838:	b21b      	sxth	r3, r3
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b842:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b846:	ee17 0a90 	vmov	r0, s15
 800b84a:	f008 fe99 	bl	8014580 <roundf>
 800b84e:	fb96 f3f9 	sdiv	r3, r6, r9
 800b852:	ee07 0a90 	vmov	s15, r0
 800b856:	fb09 6313 	mls	r3, r9, r3, r6
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bfb8      	it	lt
 800b85e:	444b      	addlt	r3, r9
 800b860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b864:	b21b      	sxth	r3, r3
 800b866:	edcd 7a02 	vstr	s15, [sp, #8]
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b872:	f89d a008 	ldrb.w	sl, [sp, #8]
 800b876:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b87a:	ee17 0a90 	vmov	r0, s15
 800b87e:	f008 fe7f 	bl	8014580 <roundf>
 800b882:	fb97 f3f9 	sdiv	r3, r7, r9
 800b886:	ee07 0a90 	vmov	s15, r0
 800b88a:	fb09 7313 	mls	r3, r9, r3, r7
 800b88e:	2b00      	cmp	r3, #0
 800b890:	bfb8      	it	lt
 800b892:	444b      	addlt	r3, r9
 800b894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b898:	b21b      	sxth	r3, r3
 800b89a:	edcd 7a02 	vstr	s15, [sp, #8]
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b8aa:	9202      	str	r2, [sp, #8]
 800b8ac:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b8b0:	ee17 0a90 	vmov	r0, s15
 800b8b4:	f008 fe64 	bl	8014580 <roundf>
 800b8b8:	ee07 0a90 	vmov	s15, r0
 800b8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c0:	f1ba 0f1f 	cmp.w	sl, #31
 800b8c4:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8c8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800b8cc:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 800b8d0:	f8db 350c 	ldr.w	r3, [fp, #1292]	; 0x50c
 800b8d4:	9103      	str	r1, [sp, #12]
 800b8d6:	f240 81cb 	bls.w	800bc70 <MEMS_runMagCal.constprop.14+0xca8>
 800b8da:	f1aa 0320 	sub.w	r3, sl, #32
 800b8de:	2101      	movs	r1, #1
 800b8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	9802      	ldr	r0, [sp, #8]
 800b8e8:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 800b8ec:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 800b8f0:	281f      	cmp	r0, #31
 800b8f2:	f240 81c6 	bls.w	800bc82 <MEMS_runMagCal.constprop.14+0xcba>
 800b8f6:	f1a0 0220 	sub.w	r2, r0, #32
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	fa00 f202 	lsl.w	r2, r0, r2
 800b900:	ea02 0e01 	and.w	lr, r2, r1
 800b904:	9a03      	ldr	r2, [sp, #12]
 800b906:	f8db 151c 	ldr.w	r1, [fp, #1308]	; 0x51c
 800b90a:	f8db 0518 	ldr.w	r0, [fp, #1304]	; 0x518
 800b90e:	2a1f      	cmp	r2, #31
 800b910:	f240 81b3 	bls.w	800bc7a <MEMS_runMagCal.constprop.14+0xcb2>
 800b914:	f1a2 0020 	sub.w	r0, r2, #32
 800b918:	2201      	movs	r2, #1
 800b91a:	fa02 f000 	lsl.w	r0, r2, r0
 800b91e:	4001      	ands	r1, r0
 800b920:	2900      	cmp	r1, #0
 800b922:	f040 8199 	bne.w	800bc58 <MEMS_runMagCal.constprop.14+0xc90>
 800b926:	f99b 1502 	ldrsb.w	r1, [fp, #1282]	; 0x502
 800b92a:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 800b92e:	1c4a      	adds	r2, r1, #1
 800b930:	9205      	str	r2, [sp, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 820b 	beq.w	800bd4e <MEMS_runMagCal.constprop.14+0xd86>
 800b938:	45e0      	cmp	r8, ip
 800b93a:	9b05      	ldr	r3, [sp, #20]
 800b93c:	f000 84f9 	beq.w	800c332 <MEMS_runMagCal.constprop.14+0x136a>
 800b940:	eba3 0208 	sub.w	r2, r3, r8
 800b944:	fb92 f3fc 	sdiv	r3, r2, ip
 800b948:	fb0c 2313 	mls	r3, ip, r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	fa0f fe83 	sxth.w	lr, r3
 800b952:	bfbc      	itt	lt
 800b954:	4463      	addlt	r3, ip
 800b956:	fa0f fe83 	sxthlt.w	lr, r3
 800b95a:	2200      	movs	r2, #0
 800b95c:	e011      	b.n	800b982 <MEMS_runMagCal.constprop.14+0x9ba>
 800b95e:	bf00      	nop
 800b960:	200017f8 	.word	0x200017f8
 800b964:	427c0000 	.word	0x427c0000
 800b968:	42c80000 	.word	0x42c80000
 800b96c:	477fff00 	.word	0x477fff00
 800b970:	3eaaaaab 	.word	0x3eaaaaab
 800b974:	3f666666 	.word	0x3f666666
 800b978:	3a83126f 	.word	0x3a83126f
 800b97c:	4598      	cmp	r8, r3
 800b97e:	f240 81ea 	bls.w	800bd56 <MEMS_runMagCal.constprop.14+0xd8e>
 800b982:	eb0e 0102 	add.w	r1, lr, r2
 800b986:	fb91 f3fc 	sdiv	r3, r1, ip
 800b98a:	fb0c 1313 	mls	r3, ip, r3, r1
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	3304      	adds	r3, #4
 800b992:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800b996:	3201      	adds	r2, #1
 800b998:	f9b3 0502 	ldrsh.w	r0, [r3, #1282]	; 0x502
 800b99c:	f9b3 1504 	ldrsh.w	r1, [r3, #1284]	; 0x504
 800b9a0:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 800b9a4:	1a28      	subs	r0, r5, r0
 800b9a6:	1a71      	subs	r1, r6, r1
 800b9a8:	ee06 0a10 	vmov	s12, r0
 800b9ac:	ee07 1a10 	vmov	s14, r1
 800b9b0:	1afb      	subs	r3, r7, r3
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800b9ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b9be:	eeb0 6ac6 	vabs.f32	s12, s12
 800b9c2:	eeb0 7ac7 	vabs.f32	s14, s14
 800b9c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9ca:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b9ce:	eef0 7ae6 	vabs.f32	s15, s13
 800b9d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9d6:	b2d3      	uxtb	r3, r2
 800b9d8:	eef4 9ae7 	vcmpe.f32	s19, s15
 800b9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e0:	ddcc      	ble.n	800b97c <MEMS_runMagCal.constprop.14+0x9b4>
 800b9e2:	3401      	adds	r4, #1
 800b9e4:	9b01      	ldr	r3, [sp, #4]
 800b9e6:	b224      	sxth	r4, r4
 800b9e8:	429c      	cmp	r4, r3
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	f6ff aecd 	blt.w	800b78a <MEMS_runMagCal.constprop.14+0x7c2>
 800b9f0:	f8dd a018 	ldr.w	sl, [sp, #24]
 800b9f4:	9a04      	ldr	r2, [sp, #16]
 800b9f6:	f89b 3474 	ldrb.w	r3, [fp, #1140]	; 0x474
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	f43f ad78 	beq.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800ba06:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	2b19      	cmp	r3, #25
 800ba0e:	f67f ad72 	bls.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800ba12:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 800ba16:	9302      	str	r3, [sp, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 8482 	beq.w	800c322 <MEMS_runMagCal.constprop.14+0x135a>
 800ba1e:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 847d 	beq.w	800c322 <MEMS_runMagCal.constprop.14+0x135a>
 800ba28:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ba2c:	ed5f 6a2e 	vldr	s13, [pc, #-184]	; 800b978 <MEMS_runMagCal.constprop.14+0x9b0>
 800ba30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba34:	ee07 3a90 	vmov	s15, r3
 800ba38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ba40:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800ba44:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4c:	f200 8469 	bhi.w	800c322 <MEMS_runMagCal.constprop.14+0x135a>
 800ba50:	f1ba 0f00 	cmp.w	sl, #0
 800ba54:	f43f ad4f 	beq.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800ba58:	eddd 7a02 	vldr	s15, [sp, #8]
 800ba5c:	ed5f 6a3a 	vldr	s13, [pc, #-232]	; 800b978 <MEMS_runMagCal.constprop.14+0x9b0>
 800ba60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba64:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ba68:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800ba6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba74:	bf4c      	ite	mi
 800ba76:	2301      	movmi	r3, #1
 800ba78:	2300      	movpl	r3, #0
 800ba7a:	9303      	str	r3, [sp, #12]
 800ba7c:	49e2      	ldr	r1, [pc, #904]	; (800be08 <MEMS_runMagCal.constprop.14+0xe40>)
 800ba7e:	f8db 9508 	ldr.w	r9, [fp, #1288]	; 0x508
 800ba82:	edd1 8a01 	vldr	s17, [r1, #4]
 800ba86:	f8db 850c 	ldr.w	r8, [fp, #1292]	; 0x50c
 800ba8a:	f8db e514 	ldr.w	lr, [fp, #1300]	; 0x514
 800ba8e:	f8db c518 	ldr.w	ip, [fp, #1304]	; 0x518
 800ba92:	f8db 7510 	ldr.w	r7, [fp, #1296]	; 0x510
 800ba96:	f8db 651c 	ldr.w	r6, [fp, #1308]	; 0x51c
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	9229      	str	r2, [sp, #164]	; 0xa4
 800ba9e:	4614      	mov	r4, r2
 800baa0:	4610      	mov	r0, r2
 800baa2:	4611      	mov	r1, r2
 800baa4:	e9cd 222a 	strd	r2, r2, [sp, #168]	; 0xa8
 800baa8:	e9cd 222c 	strd	r2, r2, [sp, #176]	; 0xb0
 800baac:	2501      	movs	r5, #1
 800baae:	e019      	b.n	800bae4 <MEMS_runMagCal.constprop.14+0xb1c>
 800bab0:	f1a1 0320 	sub.w	r3, r1, #32
 800bab4:	fa05 f303 	lsl.w	r3, r5, r3
 800bab8:	ea19 0f03 	tst.w	r9, r3
 800babc:	ea07 0a03 	and.w	sl, r7, r3
 800bac0:	d030      	beq.n	800bb24 <MEMS_runMagCal.constprop.14+0xb5c>
 800bac2:	3001      	adds	r0, #1
 800bac4:	b2c0      	uxtb	r0, r0
 800bac6:	f1ba 0f00 	cmp.w	sl, #0
 800baca:	d001      	beq.n	800bad0 <MEMS_runMagCal.constprop.14+0xb08>
 800bacc:	3401      	adds	r4, #1
 800bace:	b2e4      	uxtb	r4, r4
 800bad0:	4033      	ands	r3, r6
 800bad2:	3101      	adds	r1, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bf0c      	ite	eq
 800bad8:	4613      	moveq	r3, r2
 800bada:	1c53      	addne	r3, r2, #1
 800badc:	2940      	cmp	r1, #64	; 0x40
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	f000 81ae 	beq.w	800be40 <MEMS_runMagCal.constprop.14+0xe78>
 800bae4:	291f      	cmp	r1, #31
 800bae6:	d8e3      	bhi.n	800bab0 <MEMS_runMagCal.constprop.14+0xae8>
 800bae8:	fa05 f301 	lsl.w	r3, r5, r1
 800baec:	ea08 0a03 	and.w	sl, r8, r3
 800baf0:	f1ba 0f00 	cmp.w	sl, #0
 800baf4:	bf18      	it	ne
 800baf6:	3001      	addne	r0, #1
 800baf8:	ea1e 0f03 	tst.w	lr, r3
 800bafc:	bf18      	it	ne
 800bafe:	3401      	addne	r4, #1
 800bb00:	b2c0      	uxtb	r0, r0
 800bb02:	bf18      	it	ne
 800bb04:	b2e4      	uxtbne	r4, r4
 800bb06:	ea0c 0303 	and.w	r3, ip, r3
 800bb0a:	e7e2      	b.n	800bad2 <MEMS_runMagCal.constprop.14+0xb0a>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	23ff      	movs	r3, #255	; 0xff
 800bb10:	eeb0 0a49 	vmov.f32	s0, s18
 800bb14:	4648      	mov	r0, r9
 800bb16:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 800bb1a:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 800bb1e:	f7fe fc17 	bl	800a350 <MEMS_updateMagBufferIndex.constprop.24>
 800bb22:	e60c      	b.n	800b73e <MEMS_runMagCal.constprop.14+0x776>
 800bb24:	f1ba 0f00 	cmp.w	sl, #0
 800bb28:	d1d0      	bne.n	800bacc <MEMS_runMagCal.constprop.14+0xb04>
 800bb2a:	e7d1      	b.n	800bad0 <MEMS_runMagCal.constprop.14+0xb08>
 800bb2c:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 800bb30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb32:	fb95 f1f9 	sdiv	r1, r5, r9
 800bb36:	fb02 3200 	mla	r2, r2, r0, r3
 800bb3a:	fb09 5311 	mls	r3, r9, r1, r5
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bfb8      	it	lt
 800bb42:	444b      	addlt	r3, r9
 800bb44:	b21b      	sxth	r3, r3
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb4e:	f04f 0c01 	mov.w	ip, #1
 800bb52:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bb56:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 800bb5a:	ee17 0a90 	vmov	r0, s15
 800bb5e:	f8cb 2504 	str.w	r2, [fp, #1284]	; 0x504
 800bb62:	f8ab 5522 	strh.w	r5, [fp, #1314]	; 0x522
 800bb66:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 800bb6a:	f8ab 6524 	strh.w	r6, [fp, #1316]	; 0x524
 800bb6e:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 800bb72:	f8ab 7526 	strh.w	r7, [fp, #1318]	; 0x526
 800bb76:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 800bb7a:	f88b 8502 	strb.w	r8, [fp, #1282]	; 0x502
 800bb7e:	f8ab 8520 	strh.w	r8, [fp, #1312]	; 0x520
 800bb82:	f008 fcfd 	bl	8014580 <roundf>
 800bb86:	fb96 f3f9 	sdiv	r3, r6, r9
 800bb8a:	ee07 0a90 	vmov	s15, r0
 800bb8e:	fb09 6613 	mls	r6, r9, r3, r6
 800bb92:	2e00      	cmp	r6, #0
 800bb94:	bfb8      	it	lt
 800bb96:	444e      	addlt	r6, r9
 800bb98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb9c:	b233      	sxth	r3, r6
 800bb9e:	edcd 7a02 	vstr	s15, [sp, #8]
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbaa:	f89d 5008 	ldrb.w	r5, [sp, #8]
 800bbae:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bbb2:	ee17 0a90 	vmov	r0, s15
 800bbb6:	f008 fce3 	bl	8014580 <roundf>
 800bbba:	fb97 f3f9 	sdiv	r3, r7, r9
 800bbbe:	ee07 0a90 	vmov	s15, r0
 800bbc2:	fb09 7713 	mls	r7, r9, r3, r7
 800bbc6:	2f00      	cmp	r7, #0
 800bbc8:	bfb8      	it	lt
 800bbca:	444f      	addlt	r7, r9
 800bbcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbd0:	b23b      	sxth	r3, r7
 800bbd2:	edcd 7a02 	vstr	s15, [sp, #8]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbde:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800bbe2:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bbe6:	ee17 0a90 	vmov	r0, s15
 800bbea:	f008 fcc9 	bl	8014580 <roundf>
 800bbee:	ee07 0a90 	vmov	s15, r0
 800bbf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf6:	2d1f      	cmp	r5, #31
 800bbf8:	edcd 7a02 	vstr	s15, [sp, #8]
 800bbfc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bc00:	f240 809b 	bls.w	800bd3a <MEMS_runMagCal.constprop.14+0xd72>
 800bc04:	f8db 1508 	ldr.w	r1, [fp, #1288]	; 0x508
 800bc08:	f1a5 0220 	sub.w	r2, r5, #32
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	fa00 f202 	lsl.w	r2, r0, r2
 800bc12:	ea22 0201 	bic.w	r2, r2, r1
 800bc16:	404a      	eors	r2, r1
 800bc18:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
 800bc1c:	2e1f      	cmp	r6, #31
 800bc1e:	f240 8082 	bls.w	800bd26 <MEMS_runMagCal.constprop.14+0xd5e>
 800bc22:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 800bc26:	f1a6 0220 	sub.w	r2, r6, #32
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	fa00 f202 	lsl.w	r2, r0, r2
 800bc30:	ea22 0201 	bic.w	r2, r2, r1
 800bc34:	404a      	eors	r2, r1
 800bc36:	f8cb 2510 	str.w	r2, [fp, #1296]	; 0x510
 800bc3a:	2b1f      	cmp	r3, #31
 800bc3c:	f200 80e8 	bhi.w	800be10 <MEMS_runMagCal.constprop.14+0xe48>
 800bc40:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 800bc44:	2101      	movs	r1, #1
 800bc46:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4a:	ea23 0302 	bic.w	r3, r3, r2
 800bc4e:	4053      	eors	r3, r2
 800bc50:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 800bc54:	9104      	str	r1, [sp, #16]
 800bc56:	e6c4      	b.n	800b9e2 <MEMS_runMagCal.constprop.14+0xa1a>
 800bc58:	b11b      	cbz	r3, 800bc62 <MEMS_runMagCal.constprop.14+0xc9a>
 800bc5a:	f1be 0f00 	cmp.w	lr, #0
 800bc5e:	f47f aec0 	bne.w	800b9e2 <MEMS_runMagCal.constprop.14+0xa1a>
 800bc62:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 800bc66:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	e663      	b.n	800b938 <MEMS_runMagCal.constprop.14+0x970>
 800bc70:	2201      	movs	r2, #1
 800bc72:	fa02 f20a 	lsl.w	r2, r2, sl
 800bc76:	4013      	ands	r3, r2
 800bc78:	e635      	b.n	800b8e6 <MEMS_runMagCal.constprop.14+0x91e>
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	4091      	lsls	r1, r2
 800bc7e:	4001      	ands	r1, r0
 800bc80:	e64e      	b.n	800b920 <MEMS_runMagCal.constprop.14+0x958>
 800bc82:	4601      	mov	r1, r0
 800bc84:	2001      	movs	r0, #1
 800bc86:	fa00 f101 	lsl.w	r1, r0, r1
 800bc8a:	ea02 0e01 	and.w	lr, r2, r1
 800bc8e:	e639      	b.n	800b904 <MEMS_runMagCal.constprop.14+0x93c>
 800bc90:	f04f 0e01 	mov.w	lr, #1
 800bc94:	e4e8      	b.n	800b668 <MEMS_runMagCal.constprop.14+0x6a0>
 800bc96:	45b8      	cmp	r8, r7
 800bc98:	f000 8377 	beq.w	800c38a <MEMS_runMagCal.constprop.14+0x13c2>
 800bc9c:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 800bca0:	2d03      	cmp	r5, #3
 800bca2:	f47f ac95 	bne.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 800bcae:	eddf 6a57 	vldr	s13, [pc, #348]	; 800be0c <MEMS_runMagCal.constprop.14+0xe44>
 800bcb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb6:	ee07 3a10 	vmov	s14, r3
 800bcba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcbe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bcc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcca:	f77f ac81 	ble.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	f43f ac7e 	beq.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800bcd4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800bcd8:	320a      	adds	r2, #10
 800bcda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcde:	ee07 2a90 	vmov	s15, r2
 800bce2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf2:	f77f ac6d 	ble.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800bcf6:	f89b 3475 	ldrb.w	r3, [fp, #1141]	; 0x475
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f47f ac68 	bne.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800bd00:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f43f abf6 	beq.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800bd0a:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 800bd0e:	2bff      	cmp	r3, #255	; 0xff
 800bd10:	f47f abf1 	bne.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800bd14:	e45c      	b.n	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800bd16:	f1ba 0f00 	cmp.w	sl, #0
 800bd1a:	f47f ad18 	bne.w	800b74e <MEMS_runMagCal.constprop.14+0x786>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	461a      	mov	r2, r3
 800bd24:	e667      	b.n	800b9f6 <MEMS_runMagCal.constprop.14+0xa2e>
 800bd26:	f8db 1514 	ldr.w	r1, [fp, #1300]	; 0x514
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	40b2      	lsls	r2, r6
 800bd2e:	ea22 0201 	bic.w	r2, r2, r1
 800bd32:	404a      	eors	r2, r1
 800bd34:	f8cb 2514 	str.w	r2, [fp, #1300]	; 0x514
 800bd38:	e77f      	b.n	800bc3a <MEMS_runMagCal.constprop.14+0xc72>
 800bd3a:	f8db 150c 	ldr.w	r1, [fp, #1292]	; 0x50c
 800bd3e:	2201      	movs	r2, #1
 800bd40:	40aa      	lsls	r2, r5
 800bd42:	ea22 0201 	bic.w	r2, r2, r1
 800bd46:	404a      	eors	r2, r1
 800bd48:	f8cb 250c 	str.w	r2, [fp, #1292]	; 0x50c
 800bd4c:	e766      	b.n	800bc1c <MEMS_runMagCal.constprop.14+0xc54>
 800bd4e:	f1be 0f00 	cmp.w	lr, #0
 800bd52:	f47f adf1 	bne.w	800b938 <MEMS_runMagCal.constprop.14+0x970>
 800bd56:	9b05      	ldr	r3, [sp, #20]
 800bd58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd5a:	fb93 f1fc 	sdiv	r1, r3, ip
 800bd5e:	f108 0801 	add.w	r8, r8, #1
 800bd62:	fb0c 3111 	mls	r1, ip, r1, r3
 800bd66:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 800bd6a:	f8bb 0462 	ldrh.w	r0, [fp, #1122]	; 0x462
 800bd6e:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 800bd72:	45e0      	cmp	r8, ip
 800bd74:	b249      	sxtb	r1, r1
 800bd76:	bfa8      	it	ge
 800bd78:	46e0      	movge	r8, ip
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	1d0a      	adds	r2, r1, #4
 800bd7e:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800bd82:	fa5f f888 	uxtb.w	r8, r8
 800bd86:	fb10 3304 	smlabb	r3, r0, r4, r3
 800bd8a:	45e0      	cmp	r8, ip
 800bd8c:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 800bd90:	f88b 8500 	strb.w	r8, [fp, #1280]	; 0x500
 800bd94:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 800bd98:	f88b 1502 	strb.w	r1, [fp, #1282]	; 0x502
 800bd9c:	f8a2 5502 	strh.w	r5, [r2, #1282]	; 0x502
 800bda0:	f8a2 6504 	strh.w	r6, [r2, #1284]	; 0x504
 800bda4:	f8a2 7506 	strh.w	r7, [r2, #1286]	; 0x506
 800bda8:	f8a2 3500 	strh.w	r3, [r2, #1280]	; 0x500
 800bdac:	f000 836c 	beq.w	800c488 <MEMS_runMagCal.constprop.14+0x14c0>
 800bdb0:	f1ba 0f1f 	cmp.w	sl, #31
 800bdb4:	f240 82d0 	bls.w	800c358 <MEMS_runMagCal.constprop.14+0x1390>
 800bdb8:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 800bdbc:	f1aa 0320 	sub.w	r3, sl, #32
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc6:	ea23 0302 	bic.w	r3, r3, r2
 800bdca:	4053      	eors	r3, r2
 800bdcc:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 800bdd0:	9b02      	ldr	r3, [sp, #8]
 800bdd2:	2b1f      	cmp	r3, #31
 800bdd4:	f240 82b5 	bls.w	800c342 <MEMS_runMagCal.constprop.14+0x137a>
 800bdd8:	f8db 2510 	ldr.w	r2, [fp, #1296]	; 0x510
 800bddc:	3b20      	subs	r3, #32
 800bdde:	2101      	movs	r1, #1
 800bde0:	fa01 f303 	lsl.w	r3, r1, r3
 800bde4:	ea23 0302 	bic.w	r3, r3, r2
 800bde8:	4053      	eors	r3, r2
 800bdea:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	2b1f      	cmp	r3, #31
 800bdf2:	f200 82bc 	bhi.w	800c36e <MEMS_runMagCal.constprop.14+0x13a6>
 800bdf6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800bdfa:	9301      	str	r3, [sp, #4]
 800bdfc:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	2101      	movs	r1, #1
 800be04:	e71f      	b.n	800bc46 <MEMS_runMagCal.constprop.14+0xc7e>
 800be06:	bf00      	nop
 800be08:	200017f8 	.word	0x200017f8
 800be0c:	3a83126f 	.word	0x3a83126f
 800be10:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 800be14:	3b20      	subs	r3, #32
 800be16:	2101      	movs	r1, #1
 800be18:	fa01 f303 	lsl.w	r3, r1, r3
 800be1c:	ea23 0302 	bic.w	r3, r3, r2
 800be20:	4053      	eors	r3, r2
 800be22:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 800be26:	9104      	str	r1, [sp, #16]
 800be28:	e5db      	b.n	800b9e2 <MEMS_runMagCal.constprop.14+0xa1a>
 800be2a:	f04f 0a00 	mov.w	sl, #0
 800be2e:	f04f 0901 	mov.w	r9, #1
 800be32:	f7ff bb29 	b.w	800b488 <MEMS_runMagCal.constprop.14+0x4c0>
 800be36:	f04f 0a00 	mov.w	sl, #0
 800be3a:	46d1      	mov	r9, sl
 800be3c:	f7ff bb24 	b.w	800b488 <MEMS_runMagCal.constprop.14+0x4c0>
 800be40:	2805      	cmp	r0, #5
 800be42:	f240 8269 	bls.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800be46:	2c05      	cmp	r4, #5
 800be48:	f240 8266 	bls.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800be4c:	2a05      	cmp	r2, #5
 800be4e:	f240 8263 	bls.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800be52:	f89b 6501 	ldrb.w	r6, [fp, #1281]	; 0x501
 800be56:	9a01      	ldr	r2, [sp, #4]
 800be58:	f99b a502 	ldrsb.w	sl, [fp, #1282]	; 0x502
 800be5c:	42b2      	cmp	r2, r6
 800be5e:	f10a 0301 	add.w	r3, sl, #1
 800be62:	f000 8367 	beq.w	800c534 <MEMS_runMagCal.constprop.14+0x156c>
 800be66:	1a9a      	subs	r2, r3, r2
 800be68:	fb92 f3f6 	sdiv	r3, r2, r6
 800be6c:	fb06 2313 	mls	r3, r6, r3, r2
 800be70:	2b00      	cmp	r3, #0
 800be72:	b219      	sxth	r1, r3
 800be74:	bfbc      	itt	lt
 800be76:	199b      	addlt	r3, r3, r6
 800be78:	b219      	sxthlt	r1, r3
 800be7a:	f101 0315 	add.w	r3, r1, #21
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	eb0b 0203 	add.w	r2, fp, r3
 800be84:	489b      	ldr	r0, [pc, #620]	; (800c0f4 <MEMS_runMagCal.constprop.14+0x112c>)
 800be86:	f9b2 547e 	ldrsh.w	r5, [r2, #1150]	; 0x47e
 800be8a:	f9b2 c47a 	ldrsh.w	ip, [r2, #1146]	; 0x47a
 800be8e:	f9b2 747c 	ldrsh.w	r7, [r2, #1148]	; 0x47c
 800be92:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 800be96:	2200      	movs	r2, #0
 800be98:	4403      	add	r3, r0
 800be9a:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800be9e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800bea2:	9311      	str	r3, [sp, #68]	; 0x44
 800bea4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bea6:	46e0      	mov	r8, ip
 800bea8:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
 800beac:	46a9      	mov	r9, r5
 800beae:	46be      	mov	lr, r7
 800beb0:	920a      	str	r2, [sp, #40]	; 0x28
 800beb2:	9208      	str	r2, [sp, #32]
 800beb4:	920b      	str	r2, [sp, #44]	; 0x2c
 800beb6:	9205      	str	r2, [sp, #20]
 800beb8:	9104      	str	r1, [sp, #16]
 800beba:	9b04      	ldr	r3, [sp, #16]
 800bebc:	1898      	adds	r0, r3, r2
 800bebe:	fb90 f3f6 	sdiv	r3, r0, r6
 800bec2:	fb06 0313 	mls	r3, r6, r3, r0
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	3315      	adds	r3, #21
 800beca:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 800bece:	f9b0 447a 	ldrsh.w	r4, [r0, #1146]	; 0x47a
 800bed2:	4564      	cmp	r4, ip
 800bed4:	dd02      	ble.n	800bedc <MEMS_runMagCal.constprop.14+0xf14>
 800bed6:	2001      	movs	r0, #1
 800bed8:	46a4      	mov	ip, r4
 800beda:	900b      	str	r0, [sp, #44]	; 0x2c
 800bedc:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 800bee0:	f9b0 047c 	ldrsh.w	r0, [r0, #1148]	; 0x47c
 800bee4:	42b8      	cmp	r0, r7
 800bee6:	dd02      	ble.n	800beee <MEMS_runMagCal.constprop.14+0xf26>
 800bee8:	2101      	movs	r1, #1
 800beea:	4607      	mov	r7, r0
 800beec:	910a      	str	r1, [sp, #40]	; 0x28
 800beee:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800bef2:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 800bef6:	42ab      	cmp	r3, r5
 800bef8:	dd02      	ble.n	800bf00 <MEMS_runMagCal.constprop.14+0xf38>
 800befa:	2101      	movs	r1, #1
 800befc:	461d      	mov	r5, r3
 800befe:	9108      	str	r1, [sp, #32]
 800bf00:	4544      	cmp	r4, r8
 800bf02:	da02      	bge.n	800bf0a <MEMS_runMagCal.constprop.14+0xf42>
 800bf04:	2101      	movs	r1, #1
 800bf06:	46a0      	mov	r8, r4
 800bf08:	9107      	str	r1, [sp, #28]
 800bf0a:	4570      	cmp	r0, lr
 800bf0c:	da02      	bge.n	800bf14 <MEMS_runMagCal.constprop.14+0xf4c>
 800bf0e:	2101      	movs	r1, #1
 800bf10:	4686      	mov	lr, r0
 800bf12:	9106      	str	r1, [sp, #24]
 800bf14:	454b      	cmp	r3, r9
 800bf16:	da02      	bge.n	800bf1e <MEMS_runMagCal.constprop.14+0xf56>
 800bf18:	4699      	mov	r9, r3
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	3201      	adds	r2, #1
 800bf20:	9801      	ldr	r0, [sp, #4]
 800bf22:	b2d3      	uxtb	r3, r2
 800bf24:	4298      	cmp	r0, r3
 800bf26:	d8c8      	bhi.n	800beba <MEMS_runMagCal.constprop.14+0xef2>
 800bf28:	9b06      	ldr	r3, [sp, #24]
 800bf2a:	9904      	ldr	r1, [sp, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f040 8324 	bne.w	800c57a <MEMS_runMagCal.constprop.14+0x15b2>
 800bf32:	9b07      	ldr	r3, [sp, #28]
 800bf34:	b10b      	cbz	r3, 800bf3a <MEMS_runMagCal.constprop.14+0xf72>
 800bf36:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 800bf3a:	9b05      	ldr	r3, [sp, #20]
 800bf3c:	b10b      	cbz	r3, 800bf42 <MEMS_runMagCal.constprop.14+0xf7a>
 800bf3e:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
 800bf42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf44:	b10b      	cbz	r3, 800bf4a <MEMS_runMagCal.constprop.14+0xf82>
 800bf46:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
 800bf4a:	9b08      	ldr	r3, [sp, #32]
 800bf4c:	b10b      	cbz	r3, 800bf52 <MEMS_runMagCal.constprop.14+0xf8a>
 800bf4e:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 800bf52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf54:	b10b      	cbz	r3, 800bf5a <MEMS_runMagCal.constprop.14+0xf92>
 800bf56:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 800bf5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf5e:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 800bf62:	f8bd 5046 	ldrh.w	r5, [sp, #70]	; 0x46
 800bf66:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 800bf6a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800bf6e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800bf72:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
 800bf76:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800bf7a:	1a28      	subs	r0, r5, r0
 800bf7c:	f89b 54b4 	ldrb.w	r5, [fp, #1204]	; 0x4b4
 800bf80:	1aba      	subs	r2, r7, r2
 800bf82:	1ae3      	subs	r3, r4, r3
 800bf84:	b212      	sxth	r2, r2
 800bf86:	ed9f 5a5c 	vldr	s10, [pc, #368]	; 800c0f8 <MEMS_runMagCal.constprop.14+0x1130>
 800bf8a:	b200      	sxth	r0, r0
 800bf8c:	ee29 5a05 	vmul.f32	s10, s18, s10
 800bf90:	b21b      	sxth	r3, r3
 800bf92:	2d00      	cmp	r5, #0
 800bf94:	f040 82b5 	bne.w	800c502 <MEMS_runMagCal.constprop.14+0x153a>
 800bf98:	f89b 44cc 	ldrb.w	r4, [fp, #1228]	; 0x4cc
 800bf9c:	fab4 f484 	clz	r4, r4
 800bfa0:	0964      	lsrs	r4, r4, #5
 800bfa2:	9404      	str	r4, [sp, #16]
 800bfa4:	ee07 2a10 	vmov	s14, r2
 800bfa8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800bfac:	ee65 7a27 	vmul.f32	s15, s10, s15
 800bfb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bfb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfbc:	f300 8285 	bgt.w	800c4ca <MEMS_runMagCal.constprop.14+0x1502>
 800bfc0:	ee06 0a90 	vmov	s13, r0
 800bfc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bfc8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd0:	f100 827b 	bmi.w	800c4ca <MEMS_runMagCal.constprop.14+0x1502>
 800bfd4:	ee06 3a10 	vmov	s12, r3
 800bfd8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800bfdc:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe4:	f100 8271 	bmi.w	800c4ca <MEMS_runMagCal.constprop.14+0x1502>
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	461c      	mov	r4, r3
 800bfec:	bfa8      	it	ge
 800bfee:	4614      	movge	r4, r2
 800bff0:	b224      	sxth	r4, r4
 800bff2:	4284      	cmp	r4, r0
 800bff4:	bfa8      	it	ge
 800bff6:	4604      	movge	r4, r0
 800bff8:	4290      	cmp	r0, r2
 800bffa:	4605      	mov	r5, r0
 800bffc:	bfb8      	it	lt
 800bffe:	4615      	movlt	r5, r2
 800c000:	429c      	cmp	r4, r3
 800c002:	bfa8      	it	ge
 800c004:	461c      	movge	r4, r3
 800c006:	429d      	cmp	r5, r3
 800c008:	bfb8      	it	lt
 800c00a:	461d      	movlt	r5, r3
 800c00c:	fa0f fa85 	sxth.w	sl, r5
 800c010:	b224      	sxth	r4, r4
 800c012:	4592      	cmp	sl, r2
 800c014:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 800c018:	f340 8276 	ble.w	800c508 <MEMS_runMagCal.constprop.14+0x1540>
 800c01c:	4294      	cmp	r4, r2
 800c01e:	f280 8273 	bge.w	800c508 <MEMS_runMagCal.constprop.14+0x1540>
 800c022:	2501      	movs	r5, #1
 800c024:	4582      	cmp	sl, r0
 800c026:	f300 8299 	bgt.w	800c55c <MEMS_runMagCal.constprop.14+0x1594>
 800c02a:	4553      	cmp	r3, sl
 800c02c:	f280 8291 	bge.w	800c552 <MEMS_runMagCal.constprop.14+0x158a>
 800c030:	42a3      	cmp	r3, r4
 800c032:	f340 828e 	ble.w	800c552 <MEMS_runMagCal.constprop.14+0x158a>
 800c036:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800c03a:	9b04      	ldr	r3, [sp, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f000 8142 	beq.w	800c2c6 <MEMS_runMagCal.constprop.14+0x12fe>
 800c042:	eeb4 5ac7 	vcmpe.f32	s10, s14
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	dc0c      	bgt.n	800c066 <MEMS_runMagCal.constprop.14+0x109e>
 800c04c:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800c050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c054:	dc07      	bgt.n	800c066 <MEMS_runMagCal.constprop.14+0x109e>
 800c056:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	bfcc      	ite	gt
 800c060:	2301      	movgt	r3, #1
 800c062:	2300      	movle	r3, #0
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c0fc <MEMS_runMagCal.constprop.14+0x1134>
 800c06a:	ee05 aa90 	vmov	s11, sl
 800c06e:	ee65 7a27 	vmul.f32	s15, s10, s15
 800c072:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c076:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07e:	db1e      	blt.n	800c0be <MEMS_runMagCal.constprop.14+0x10f6>
 800c080:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800c084:	ee05 3a90 	vmov	s11, r3
 800c088:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 800c08c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c090:	ee65 7a27 	vmul.f32	s15, s10, s15
 800c094:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09c:	db0f      	blt.n	800c0be <MEMS_runMagCal.constprop.14+0x10f6>
 800c09e:	ebba 0f44 	cmp.w	sl, r4, lsl #1
 800c0a2:	da0c      	bge.n	800c0be <MEMS_runMagCal.constprop.14+0x10f6>
 800c0a4:	ee07 4a90 	vmov	s15, r4
 800c0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0ac:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 800c0b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c0b4:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800c0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0bc:	d422      	bmi.n	800c104 <MEMS_runMagCal.constprop.14+0x113c>
 800c0be:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 800c0c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0c6:	eeb4 5ac7 	vcmpe.f32	s10, s14
 800c0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ce:	f300 8123 	bgt.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800c0d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c0d6:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800c0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0de:	f300 811b 	bgt.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800c0e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0e6:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800c0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ee:	f300 8113 	bgt.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800c0f2:	e007      	b.n	800c104 <MEMS_runMagCal.constprop.14+0x113c>
 800c0f4:	200017f8 	.word	0x200017f8
 800c0f8:	42340000 	.word	0x42340000
 800c0fc:	3faccccd 	.word	0x3faccccd
 800c100:	00000000 	.word	0x00000000
 800c104:	fa4f f981 	sxtb.w	r9, r1
 800c108:	2700      	movs	r7, #0
 800c10a:	f109 0301 	add.w	r3, r9, #1
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	46b8      	mov	r8, r7
 800c112:	463b      	mov	r3, r7
 800c114:	f04f 0e01 	mov.w	lr, #1
 800c118:	9a02      	ldr	r2, [sp, #8]
 800c11a:	eb09 0103 	add.w	r1, r9, r3
 800c11e:	441a      	add	r2, r3
 800c120:	fb91 f3f6 	sdiv	r3, r1, r6
 800c124:	fb06 1313 	mls	r3, r6, r3, r1
 800c128:	b25c      	sxtb	r4, r3
 800c12a:	2c00      	cmp	r4, #0
 800c12c:	bfb8      	it	lt
 800c12e:	199b      	addlt	r3, r3, r6
 800c130:	fb92 f1f6 	sdiv	r1, r2, r6
 800c134:	fb06 2111 	mls	r1, r6, r1, r2
 800c138:	bfb8      	it	lt
 800c13a:	b25c      	sxtblt	r4, r3
 800c13c:	b249      	sxtb	r1, r1
 800c13e:	3104      	adds	r1, #4
 800c140:	3404      	adds	r4, #4
 800c142:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 800c146:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 800c14a:	f9b2 0502 	ldrsh.w	r0, [r2, #1282]	; 0x502
 800c14e:	f9b3 3502 	ldrsh.w	r3, [r3, #1282]	; 0x502
 800c152:	1a1a      	subs	r2, r3, r0
 800c154:	2a00      	cmp	r2, #0
 800c156:	b29b      	uxth	r3, r3
 800c158:	b280      	uxth	r0, r0
 800c15a:	bfb4      	ite	lt
 800c15c:	1ac3      	sublt	r3, r0, r3
 800c15e:	1a1b      	subge	r3, r3, r0
 800c160:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 800c164:	b218      	sxth	r0, r3
 800c166:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 800c16a:	f9b2 2504 	ldrsh.w	r2, [r2, #1284]	; 0x504
 800c16e:	f9b3 3504 	ldrsh.w	r3, [r3, #1284]	; 0x504
 800c172:	1a9d      	subs	r5, r3, r2
 800c174:	2d00      	cmp	r5, #0
 800c176:	b29b      	uxth	r3, r3
 800c178:	b292      	uxth	r2, r2
 800c17a:	bfb4      	ite	lt
 800c17c:	1ad3      	sublt	r3, r2, r3
 800c17e:	1a9b      	subge	r3, r3, r2
 800c180:	eb0b 05c1 	add.w	r5, fp, r1, lsl #3
 800c184:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 800c188:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800c18c:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800c190:	f9b5 5506 	ldrsh.w	r5, [r5, #1286]	; 0x506
 800c194:	f9b2 2506 	ldrsh.w	r2, [r2, #1286]	; 0x506
 800c198:	f8b1 1500 	ldrh.w	r1, [r1, #1280]	; 0x500
 800c19c:	f8b4 4500 	ldrh.w	r4, [r4, #1280]	; 0x500
 800c1a0:	eba5 0c02 	sub.w	ip, r5, r2
 800c1a4:	1b09      	subs	r1, r1, r4
 800c1a6:	b292      	uxth	r2, r2
 800c1a8:	f1bc 0f00 	cmp.w	ip, #0
 800c1ac:	b2ad      	uxth	r5, r5
 800c1ae:	b209      	sxth	r1, r1
 800c1b0:	bfb4      	ite	lt
 800c1b2:	1b52      	sublt	r2, r2, r5
 800c1b4:	1aaa      	subge	r2, r5, r2
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	b21b      	sxth	r3, r3
 800c1ba:	b212      	sxth	r2, r2
 800c1bc:	dd1e      	ble.n	800c1fc <MEMS_runMagCal.constprop.14+0x1234>
 800c1be:	4403      	add	r3, r0
 800c1c0:	441a      	add	r2, r3
 800c1c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c1c6:	fb03 f202 	mul.w	r2, r3, r2
 800c1ca:	ee07 2a90 	vmov	s15, r2
 800c1ce:	ee07 1a10 	vmov	s14, r1
 800c1d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1da:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c1de:	f108 0801 	add.w	r8, r8, #1
 800c1e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c1e6:	fa5f f888 	uxtb.w	r8, r8
 800c1ea:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c1ee:	ee17 3a90 	vmov	r3, s15
 800c1f2:	b21b      	sxth	r3, r3
 800c1f4:	2b96      	cmp	r3, #150	; 0x96
 800c1f6:	bfc4      	itt	gt
 800c1f8:	3701      	addgt	r7, #1
 800c1fa:	b2ff      	uxtbgt	r7, r7
 800c1fc:	4673      	mov	r3, lr
 800c1fe:	9901      	ldr	r1, [sp, #4]
 800c200:	f10e 0e01 	add.w	lr, lr, #1
 800c204:	fa5f f28e 	uxtb.w	r2, lr
 800c208:	4291      	cmp	r1, r2
 800c20a:	d885      	bhi.n	800c118 <MEMS_runMagCal.constprop.14+0x1150>
 800c20c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800c210:	4547      	cmp	r7, r8
 800c212:	f340 8081 	ble.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	b92b      	cbnz	r3, 800c226 <MEMS_runMagCal.constprop.14+0x125e>
 800c21a:	f89b 34cc 	ldrb.w	r3, [fp, #1228]	; 0x4cc
 800c21e:	3b02      	subs	r3, #2
 800c220:	2b01      	cmp	r3, #1
 800c222:	f240 81ad 	bls.w	800c580 <MEMS_runMagCal.constprop.14+0x15b8>
 800c226:	2220      	movs	r2, #32
 800c228:	2100      	movs	r1, #0
 800c22a:	a82e      	add	r0, sp, #184	; 0xb8
 800c22c:	f007 fcd7 	bl	8013bde <memset>
 800c230:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 800c234:	f89b 2501 	ldrb.w	r2, [fp, #1281]	; 0x501
 800c238:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 800c23c:	2100      	movs	r1, #0
 800c23e:	4590      	cmp	r8, r2
 800c240:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
 800c244:	911c      	str	r1, [sp, #112]	; 0x70
 800c246:	f103 0301 	add.w	r3, r3, #1
 800c24a:	f000 824f 	beq.w	800c6ec <MEMS_runMagCal.constprop.14+0x1724>
 800c24e:	eba3 0308 	sub.w	r3, r3, r8
 800c252:	fb93 f1f2 	sdiv	r1, r3, r2
 800c256:	fb02 3311 	mls	r3, r2, r1, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	b219      	sxth	r1, r3
 800c25e:	bfbc      	itt	lt
 800c260:	189b      	addlt	r3, r3, r2
 800c262:	b219      	sxthlt	r1, r3
 800c264:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 800c100 <MEMS_runMagCal.constprop.14+0x1138>
 800c268:	2000      	movs	r0, #0
 800c26a:	eeb0 7a67 	vmov.f32	s14, s15
 800c26e:	eef0 6a67 	vmov.f32	s13, s15
 800c272:	4604      	mov	r4, r0
 800c274:	b2c3      	uxtb	r3, r0
 800c276:	4598      	cmp	r8, r3
 800c278:	eb01 0500 	add.w	r5, r1, r0
 800c27c:	f240 81d4 	bls.w	800c628 <MEMS_runMagCal.constprop.14+0x1660>
 800c280:	fb95 f3f2 	sdiv	r3, r5, r2
 800c284:	fb02 5313 	mls	r3, r2, r3, r5
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	3304      	adds	r3, #4
 800c28c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800c290:	3001      	adds	r0, #1
 800c292:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 800c296:	ee05 4a10 	vmov	s10, r4
 800c29a:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 800c29e:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 800c2a2:	ee05 4a90 	vmov	s11, r4
 800c2a6:	ee06 3a10 	vmov	s12, r3
 800c2aa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800c2ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c2b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c2b6:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c2ba:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c2be:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c2c2:	2401      	movs	r4, #1
 800c2c4:	e7d6      	b.n	800c274 <MEMS_runMagCal.constprop.14+0x12ac>
 800c2c6:	4bcb      	ldr	r3, [pc, #812]	; (800c5f4 <MEMS_runMagCal.constprop.14+0x162c>)
 800c2c8:	ed9f 4ad0 	vldr	s8, [pc, #832]	; 800c60c <MEMS_runMagCal.constprop.14+0x1644>
 800c2cc:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 800c2d0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800c2d4:	edd3 5a27 	vldr	s11, [r3, #156]	; 0x9c
 800c2d8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c2dc:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 800c2e0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c2e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c2e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c2ec:	eef4 7ae4 	vcmpe.f32	s15, s9
 800c2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f4:	bf88      	it	hi
 800c2f6:	eef0 7a64 	vmovhi.f32	s15, s9
 800c2fa:	eef4 7ae5 	vcmpe.f32	s15, s11
 800c2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c302:	bfb8      	it	lt
 800c304:	eef0 7a65 	vmovlt.f32	s15, s11
 800c308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c30c:	eeb4 5ac7 	vcmpe.f32	s10, s14
 800c310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c314:	f77f aedd 	ble.w	800c0d2 <MEMS_runMagCal.constprop.14+0x110a>
 800c318:	2300      	movs	r3, #0
 800c31a:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 800c31e:	f7ff b8ea 	b.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800c322:	f1ba 0f00 	cmp.w	sl, #0
 800c326:	f040 80b5 	bne.w	800c494 <MEMS_runMagCal.constprop.14+0x14cc>
 800c32a:	2300      	movs	r3, #0
 800c32c:	9303      	str	r3, [sp, #12]
 800c32e:	f7ff bba5 	b.w	800ba7c <MEMS_runMagCal.constprop.14+0xab4>
 800c332:	fb93 fef8 	sdiv	lr, r3, r8
 800c336:	fb08 3e1e 	mls	lr, r8, lr, r3
 800c33a:	fa0f fe8e 	sxth.w	lr, lr
 800c33e:	f7ff bb0c 	b.w	800b95a <MEMS_runMagCal.constprop.14+0x992>
 800c342:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 800c346:	2101      	movs	r1, #1
 800c348:	fa01 f303 	lsl.w	r3, r1, r3
 800c34c:	ea23 0302 	bic.w	r3, r3, r2
 800c350:	4053      	eors	r3, r2
 800c352:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 800c356:	e54a      	b.n	800bdee <MEMS_runMagCal.constprop.14+0xe26>
 800c358:	f8db 250c 	ldr.w	r2, [fp, #1292]	; 0x50c
 800c35c:	2301      	movs	r3, #1
 800c35e:	fa03 f30a 	lsl.w	r3, r3, sl
 800c362:	ea23 0302 	bic.w	r3, r3, r2
 800c366:	4053      	eors	r3, r2
 800c368:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 800c36c:	e530      	b.n	800bdd0 <MEMS_runMagCal.constprop.14+0xe08>
 800c36e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 800c372:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 800c376:	9101      	str	r1, [sp, #4]
 800c378:	3b20      	subs	r3, #32
 800c37a:	e54c      	b.n	800be16 <MEMS_runMagCal.constprop.14+0xe4e>
 800c37c:	fb92 f6f5 	sdiv	r6, r2, r5
 800c380:	fb05 2216 	mls	r2, r5, r6, r2
 800c384:	b216      	sxth	r6, r2
 800c386:	f7ff b964 	b.w	800b652 <MEMS_runMagCal.constprop.14+0x68a>
 800c38a:	eddf 6aa2 	vldr	s13, [pc, #648]	; 800c614 <MEMS_runMagCal.constprop.14+0x164c>
 800c38e:	3401      	adds	r4, #1
 800c390:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 800c394:	fb94 fef7 	sdiv	lr, r4, r7
 800c398:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 800c39c:	fb07 441e 	mls	r4, r7, lr, r4
 800c3a0:	edc9 6a00 	vstr	s13, [r9]
 800c3a4:	2f00      	cmp	r7, #0
 800c3a6:	f000 80cb 	beq.w	800c540 <MEMS_runMagCal.constprop.14+0x1578>
 800c3aa:	fa1f fe84 	uxth.w	lr, r4
 800c3ae:	1e79      	subs	r1, r7, #1
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	1c72      	adds	r2, r6, #1
 800c3b4:	fa12 f881 	uxtah	r8, r2, r1
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	eeb0 6a66 	vmov.f32	s12, s13
 800c3be:	ebae 0e06 	sub.w	lr, lr, r6
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	f241 2c5c 	movw	ip, #4700	; 0x125c
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	428e      	cmp	r6, r1
 800c3ce:	eb0e 0201 	add.w	r2, lr, r1
 800c3d2:	dc21      	bgt.n	800c418 <MEMS_runMagCal.constprop.14+0x1450>
 800c3d4:	fb92 f0f7 	sdiv	r0, r2, r7
 800c3d8:	fb07 2210 	mls	r2, r7, r0, r2
 800c3dc:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f8b2 0488 	ldrh.w	r0, [r2, #1160]	; 0x488
 800c3e6:	f5a0 5292 	sub.w	r2, r0, #4672	; 0x1240
 800c3ea:	4560      	cmp	r0, ip
 800c3ec:	f1a2 021c 	sub.w	r2, r2, #28
 800c3f0:	bf98      	it	ls
 800c3f2:	ebac 0200 	subls.w	r2, ip, r0
 800c3f6:	b292      	uxth	r2, r2
 800c3f8:	fb02 f202 	mul.w	r2, r2, r2
 800c3fc:	ee07 2a90 	vmov	s15, r2
 800c400:	ee07 0a10 	vmov	s14, r0
 800c404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c40c:	441c      	add	r4, r3
 800c40e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c412:	ee36 6a07 	vadd.f32	s12, s12, s14
 800c416:	b2a4      	uxth	r4, r4
 800c418:	3101      	adds	r1, #1
 800c41a:	4588      	cmp	r8, r1
 800c41c:	d1d6      	bne.n	800c3cc <MEMS_runMagCal.constprop.14+0x1404>
 800c41e:	461a      	mov	r2, r3
 800c420:	9b01      	ldr	r3, [sp, #4]
 800c422:	2a00      	cmp	r2, #0
 800c424:	f040 815d 	bne.w	800c6e2 <MEMS_runMagCal.constprop.14+0x171a>
 800c428:	ed99 7a00 	vldr	s14, [r9]
 800c42c:	b1ac      	cbz	r4, 800c45a <MEMS_runMagCal.constprop.14+0x1492>
 800c42e:	ee07 4a90 	vmov	s15, r4
 800c432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c436:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 800c43a:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 800c5f8 <MEMS_runMagCal.constprop.14+0x1630>
 800c43e:	eec7 5a27 	vdiv.f32	s11, s14, s15
 800c442:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800c446:	eeb1 7ae5 	vsqrt.f32	s14, s11
 800c44a:	ee66 7a86 	vmul.f32	s15, s13, s12
 800c44e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c452:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800c456:	ed89 7a00 	vstr	s14, [r9]
 800c45a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800c45e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c466:	dd1b      	ble.n	800c4a0 <MEMS_runMagCal.constprop.14+0x14d8>
 800c468:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800c46c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c470:	2302      	movs	r3, #2
 800c472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c476:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 800c47a:	f77f a8a9 	ble.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800c47e:	2301      	movs	r3, #1
 800c480:	f88b 3475 	strb.w	r3, [fp, #1141]	; 0x475
 800c484:	f7ff b8a4 	b.w	800b5d0 <MEMS_runMagCal.constprop.14+0x608>
 800c488:	eeb0 0a49 	vmov.f32	s0, s18
 800c48c:	4648      	mov	r0, r9
 800c48e:	f7fd ff5f 	bl	800a350 <MEMS_updateMagBufferIndex.constprop.24>
 800c492:	e48d      	b.n	800bdb0 <MEMS_runMagCal.constprop.14+0xde8>
 800c494:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800c498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c49c:	f7ff badc 	b.w	800ba58 <MEMS_runMagCal.constprop.14+0xa90>
 800c4a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c4a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ac:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 800c4b0:	d42d      	bmi.n	800c50e <MEMS_runMagCal.constprop.14+0x1546>
 800c4b2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800c4b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4be:	bfc4      	itt	gt
 800c4c0:	2101      	movgt	r1, #1
 800c4c2:	f88b 1475 	strbgt.w	r1, [fp, #1141]	; 0x475
 800c4c6:	f7ff bbeb 	b.w	800bca0 <MEMS_runMagCal.constprop.14+0xcd8>
 800c4ca:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
 800c4ce:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
 800c4d2:	f9b3 3520 	ldrsh.w	r3, [r3, #1312]	; 0x520
 800c4d6:	f8db 1480 	ldr.w	r1, [fp, #1152]	; 0x480
 800c4da:	4413      	add	r3, r2
 800c4dc:	4299      	cmp	r1, r3
 800c4de:	f4bf af1b 	bcs.w	800c318 <MEMS_runMagCal.constprop.14+0x1350>
 800c4e2:	9902      	ldr	r1, [sp, #8]
 800c4e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4e8:	fb03 f301 	mul.w	r3, r3, r1
 800c4ec:	3364      	adds	r3, #100	; 0x64
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	bf38      	it	cc
 800c4f2:	4613      	movcc	r3, r2
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8cb 3480 	str.w	r3, [fp, #1152]	; 0x480
 800c4fa:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 800c4fe:	f7fe bffa 	b.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800c502:	2400      	movs	r4, #0
 800c504:	9404      	str	r4, [sp, #16]
 800c506:	e54d      	b.n	800bfa4 <MEMS_runMagCal.constprop.14+0xfdc>
 800c508:	4622      	mov	r2, r4
 800c50a:	2500      	movs	r5, #0
 800c50c:	e58a      	b.n	800c024 <MEMS_runMagCal.constprop.14+0x105c>
 800c50e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800c512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c516:	2003      	movs	r0, #3
 800c518:	2100      	movs	r1, #0
 800c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51e:	f88b 04cc 	strb.w	r0, [fp, #1228]	; 0x4cc
 800c522:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 800c526:	f77f abbe 	ble.w	800bca6 <MEMS_runMagCal.constprop.14+0xcde>
 800c52a:	2101      	movs	r1, #1
 800c52c:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 800c530:	f7ff bbb9 	b.w	800bca6 <MEMS_runMagCal.constprop.14+0xcde>
 800c534:	fb93 f1f2 	sdiv	r1, r3, r2
 800c538:	fb02 3311 	mls	r3, r2, r1, r3
 800c53c:	b219      	sxth	r1, r3
 800c53e:	e49c      	b.n	800be7a <MEMS_runMagCal.constprop.14+0xeb2>
 800c540:	2203      	movs	r2, #3
 800c542:	f88b 24cc 	strb.w	r2, [fp, #1228]	; 0x4cc
 800c546:	f88b 8475 	strb.w	r8, [fp, #1141]	; 0x475
 800c54a:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 800c54e:	f7ff bbaa 	b.w	800bca6 <MEMS_runMagCal.constprop.14+0xcde>
 800c552:	4613      	mov	r3, r2
 800c554:	2d00      	cmp	r5, #0
 800c556:	f43f ad70 	beq.w	800c03a <MEMS_runMagCal.constprop.14+0x1072>
 800c55a:	e56c      	b.n	800c036 <MEMS_runMagCal.constprop.14+0x106e>
 800c55c:	4284      	cmp	r4, r0
 800c55e:	f6bf ad64 	bge.w	800c02a <MEMS_runMagCal.constprop.14+0x1062>
 800c562:	4553      	cmp	r3, sl
 800c564:	da07      	bge.n	800c576 <MEMS_runMagCal.constprop.14+0x15ae>
 800c566:	4602      	mov	r2, r0
 800c568:	2501      	movs	r5, #1
 800c56a:	e561      	b.n	800c030 <MEMS_runMagCal.constprop.14+0x1068>
 800c56c:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 800c570:	4665      	mov	r5, ip
 800c572:	f7ff b8c6 	b.w	800b702 <MEMS_runMagCal.constprop.14+0x73a>
 800c576:	4603      	mov	r3, r0
 800c578:	e55d      	b.n	800c036 <MEMS_runMagCal.constprop.14+0x106e>
 800c57a:	f8ad e04e 	strh.w	lr, [sp, #78]	; 0x4e
 800c57e:	e4d8      	b.n	800bf32 <MEMS_runMagCal.constprop.14+0xf6a>
 800c580:	4e1e      	ldr	r6, [pc, #120]	; (800c5fc <MEMS_runMagCal.constprop.14+0x1634>)
 800c582:	9c03      	ldr	r4, [sp, #12]
 800c584:	ad15      	add	r5, sp, #84	; 0x54
 800c586:	f856 0b04 	ldr.w	r0, [r6], #4
 800c58a:	f007 fff9 	bl	8014580 <roundf>
 800c58e:	ee07 0a90 	vmov	s15, r0
 800c592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c596:	ee17 0a90 	vmov	r0, s15
 800c59a:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 800c59e:	3401      	adds	r4, #1
 800c5a0:	2c03      	cmp	r4, #3
 800c5a2:	d1f0      	bne.n	800c586 <MEMS_runMagCal.constprop.14+0x15be>
 800c5a4:	ab0f      	add	r3, sp, #60	; 0x3c
 800c5a6:	aa10      	add	r2, sp, #64	; 0x40
 800c5a8:	eeb0 0a68 	vmov.f32	s0, s17
 800c5ac:	4914      	ldr	r1, [pc, #80]	; (800c600 <MEMS_runMagCal.constprop.14+0x1638>)
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7fd fddc 	bl	800a16c <getMagStats.constprop.26>
 800c5b4:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 800c5b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c604 <MEMS_runMagCal.constprop.14+0x163c>
 800c5bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c4:	d511      	bpl.n	800c5ea <MEMS_runMagCal.constprop.14+0x1622>
 800c5c6:	b980      	cbnz	r0, 800c5ea <MEMS_runMagCal.constprop.14+0x1622>
 800c5c8:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 8093 	beq.w	800c6f8 <MEMS_runMagCal.constprop.14+0x1730>
 800c5d2:	f89b 34bd 	ldrb.w	r3, [fp, #1213]	; 0x4bd
 800c5d6:	ee07 3a90 	vmov	s15, r3
 800c5da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5de:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800c5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e6:	f300 8087 	bgt.w	800c6f8 <MEMS_runMagCal.constprop.14+0x1730>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	602b      	str	r3, [r5, #0]
 800c5ee:	80ab      	strh	r3, [r5, #4]
 800c5f0:	e619      	b.n	800c226 <MEMS_runMagCal.constprop.14+0x125e>
 800c5f2:	bf00      	nop
 800c5f4:	200017f8 	.word	0x200017f8
 800c5f8:	3c23d70a 	.word	0x3c23d70a
 800c5fc:	20001868 	.word	0x20001868
 800c600:	20001874 	.word	0x20001874
 800c604:	3ff4cccd 	.word	0x3ff4cccd
 800c608:	358637bd 	.word	0x358637bd
 800c60c:	3eaaaaab 	.word	0x3eaaaaab
 800c610:	3e2aaaab 	.word	0x3e2aaaab
 800c614:	00000000 	.word	0x00000000
 800c618:	40060a92 	.word	0x40060a92
 800c61c:	42960000 	.word	0x42960000
 800c620:	3a83126f 	.word	0x3a83126f
 800c624:	430d0000 	.word	0x430d0000
 800c628:	b12c      	cbz	r4, 800c636 <MEMS_runMagCal.constprop.14+0x166e>
 800c62a:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 800c62e:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 800c632:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 800c636:	ee07 8a90 	vmov	s15, r8
 800c63a:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 800c63e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c642:	eec7 9a8b 	vdiv.f32	s19, s15, s22
 800c646:	2000      	movs	r0, #0
 800c648:	4604      	mov	r4, r0
 800c64a:	eddd aa1a 	vldr	s21, [sp, #104]	; 0x68
 800c64e:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
 800c652:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 800c656:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800c614 <MEMS_runMagCal.constprop.14+0x164c>
 800c65a:	ee69 aaaa 	vmul.f32	s21, s19, s21
 800c65e:	ee29 aa8a 	vmul.f32	s20, s19, s20
 800c662:	ee69 9a87 	vmul.f32	s19, s19, s14
 800c666:	eef0 5a67 	vmov.f32	s11, s15
 800c66a:	eeb0 5a67 	vmov.f32	s10, s15
 800c66e:	eef0 4a67 	vmov.f32	s9, s15
 800c672:	eeb0 4a67 	vmov.f32	s8, s15
 800c676:	eef0 3a67 	vmov.f32	s7, s15
 800c67a:	b2c3      	uxtb	r3, r0
 800c67c:	4598      	cmp	r8, r3
 800c67e:	eb01 0500 	add.w	r5, r1, r0
 800c682:	d959      	bls.n	800c738 <MEMS_runMagCal.constprop.14+0x1770>
 800c684:	fb95 f3f2 	sdiv	r3, r5, r2
 800c688:	fb02 5313 	mls	r3, r2, r3, r5
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	3304      	adds	r3, #4
 800c690:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800c694:	3001      	adds	r0, #1
 800c696:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 800c69a:	ee06 4a10 	vmov	s12, r4
 800c69e:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 800c6a2:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 800c6a6:	ee06 4a90 	vmov	s13, r4
 800c6aa:	ee07 3a10 	vmov	s14, r3
 800c6ae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c6b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c6b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6ba:	ee36 6a6a 	vsub.f32	s12, s12, s21
 800c6be:	ee76 6aca 	vsub.f32	s13, s13, s20
 800c6c2:	ee37 7a69 	vsub.f32	s14, s14, s19
 800c6c6:	eea6 4a06 	vfma.f32	s8, s12, s12
 800c6ca:	2401      	movs	r4, #1
 800c6cc:	eee6 4a26 	vfma.f32	s9, s12, s13
 800c6d0:	eee6 3aa6 	vfma.f32	s7, s13, s13
 800c6d4:	eea6 5a07 	vfma.f32	s10, s12, s14
 800c6d8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c6dc:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c6e0:	e7cb      	b.n	800c67a <MEMS_runMagCal.constprop.14+0x16b2>
 800c6e2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 800c6e6:	edc9 6a00 	vstr	s13, [r9]
 800c6ea:	e69d      	b.n	800c428 <MEMS_runMagCal.constprop.14+0x1460>
 800c6ec:	fb93 f1f8 	sdiv	r1, r3, r8
 800c6f0:	fb08 3311 	mls	r3, r8, r1, r3
 800c6f4:	b219      	sxth	r1, r3
 800c6f6:	e5b5      	b.n	800c264 <MEMS_runMagCal.constprop.14+0x129c>
 800c6f8:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800c6fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c700:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 800c620 <MEMS_runMagCal.constprop.14+0x1658>
 800c704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c708:	2303      	movs	r3, #3
 800c70a:	ee17 0a90 	vmov	r0, s15
 800c70e:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 800c712:	f007 ff35 	bl	8014580 <roundf>
 800c716:	ee07 0a90 	vmov	s15, r0
 800c71a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c71e:	2300      	movs	r3, #0
 800c720:	ee17 0a90 	vmov	r0, s15
 800c724:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 800c728:	f8cb 0478 	str.w	r0, [fp, #1144]	; 0x478
 800c72c:	f7fe bee3 	b.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800c730:	f8ad 70d8 	strh.w	r7, [sp, #216]	; 0xd8
 800c734:	f7fe be02 	b.w	800b33c <MEMS_runMagCal.constprop.14+0x374>
 800c738:	b15c      	cbz	r4, 800c752 <MEMS_runMagCal.constprop.14+0x178a>
 800c73a:	edcd 3a31 	vstr	s7, [sp, #196]	; 0xc4
 800c73e:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 800c742:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 800c746:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800c74a:	edcd 5a32 	vstr	s11, [sp, #200]	; 0xc8
 800c74e:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 800c752:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c756:	eddd 5a2f 	vldr	s11, [sp, #188]	; 0xbc
 800c75a:	ed9d 6a32 	vldr	s12, [sp, #200]	; 0xc8
 800c75e:	ed1f 5a56 	vldr	s10, [pc, #-344]	; 800c608 <MEMS_runMagCal.constprop.14+0x1640>
 800c762:	eddd ba2e 	vldr	s23, [sp, #184]	; 0xb8
 800c766:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 800c76a:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800c76e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c772:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800c776:	eee6 6a06 	vfma.f32	s13, s12, s12
 800c77a:	eef4 6ac5 	vcmpe.f32	s13, s10
 800c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c782:	f100 80be 	bmi.w	800c902 <MEMS_runMagCal.constprop.14+0x193a>
 800c786:	ee3b daa7 	vadd.f32	s26, s23, s15
 800c78a:	ed1f 6a60 	vldr	s12, [pc, #-384]	; 800c60c <MEMS_runMagCal.constprop.14+0x1644>
 800c78e:	ed5f 5a60 	vldr	s11, [pc, #-384]	; 800c610 <MEMS_runMagCal.constprop.14+0x1648>
 800c792:	ee3d da07 	vadd.f32	s26, s26, s14
 800c796:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c79a:	ee2d da06 	vmul.f32	s26, s26, s12
 800c79e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c7a2:	ee77 7acd 	vsub.f32	s15, s15, s26
 800c7a6:	ee7b bacd 	vsub.f32	s23, s23, s26
 800c7aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7ae:	ee37 7a4d 	vsub.f32	s14, s14, s26
 800c7b2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800c7b6:	f04f 0900 	mov.w	r9, #0
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f04f 0e02 	mov.w	lr, #2
 800c7c0:	eee6 7a85 	vfma.f32	s15, s13, s10
 800c7c4:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c7c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c7cc:	eeb1 cae7 	vsqrt.f32	s24, s15
 800c7d0:	ee86 7a0c 	vdiv.f32	s14, s12, s24
 800c7d4:	1c4c      	adds	r4, r1, #1
 800c7d6:	fb01 f304 	mul.w	r3, r1, r4
 800c7da:	fb93 f3fe 	sdiv	r3, r3, lr
 800c7de:	eba9 0303 	sub.w	r3, r9, r3
 800c7e2:	b2c8      	uxtb	r0, r1
 800c7e4:	aa46      	add	r2, sp, #280	; 0x118
 800c7e6:	b2dd      	uxtb	r5, r3
 800c7e8:	230c      	movs	r3, #12
 800c7ea:	fb03 2101 	mla	r1, r3, r1, r2
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	9001      	str	r0, [sp, #4]
 800c7f4:	fa5f fc82 	uxtb.w	ip, r2
 800c7f8:	9801      	ldr	r0, [sp, #4]
 800c7fa:	eb05 030c 	add.w	r3, r5, ip
 800c7fe:	4560      	cmp	r0, ip
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f102 0701 	add.w	r7, r2, #1
 800c806:	a82e      	add	r0, sp, #184	; 0xb8
 800c808:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c80c:	fb02 fc07 	mul.w	ip, r2, r7
 800c810:	f200 80db 	bhi.w	800c9ca <MEMS_runMagCal.constprop.14+0x1a02>
 800c814:	edd0 7a00 	vldr	s15, [r0]
 800c818:	f000 80cf 	beq.w	800c9ba <MEMS_runMagCal.constprop.14+0x19f2>
 800c81c:	aa2e      	add	r2, sp, #184	; 0xb8
 800c81e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c822:	edd3 7a00 	vldr	s15, [r3]
 800c826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c82a:	edc1 7a00 	vstr	s15, [r1]
 800c82e:	3603      	adds	r6, #3
 800c830:	2f03      	cmp	r7, #3
 800c832:	b2f6      	uxtb	r6, r6
 800c834:	f101 0104 	add.w	r1, r1, #4
 800c838:	463a      	mov	r2, r7
 800c83a:	d1db      	bne.n	800c7f4 <MEMS_runMagCal.constprop.14+0x182c>
 800c83c:	f109 0903 	add.w	r9, r9, #3
 800c840:	2c03      	cmp	r4, #3
 800c842:	fa5f f989 	uxtb.w	r9, r9
 800c846:	4621      	mov	r1, r4
 800c848:	d1c4      	bne.n	800c7d4 <MEMS_runMagCal.constprop.14+0x180c>
 800c84a:	eddd 4a4e 	vldr	s9, [sp, #312]	; 0x138
 800c84e:	ed9d 6a49 	vldr	s12, [sp, #292]	; 0x124
 800c852:	ed9d 4a4b 	vldr	s8, [sp, #300]	; 0x12c
 800c856:	eddd 5a4d 	vldr	s11, [sp, #308]	; 0x134
 800c85a:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 800c85e:	ed9d 5a4a 	vldr	s10, [sp, #296]	; 0x128
 800c862:	eddd 3a47 	vldr	s7, [sp, #284]	; 0x11c
 800c866:	ee66 7a64 	vnmul.f32	s15, s12, s9
 800c86a:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 800c86e:	eee4 7a07 	vfma.f32	s15, s8, s14
 800c872:	eee5 6a24 	vfma.f32	s13, s10, s9
 800c876:	ee27 7a45 	vnmul.f32	s14, s14, s10
 800c87a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c87e:	eddd 4a46 	vldr	s9, [sp, #280]	; 0x118
 800c882:	ed9d 5a48 	vldr	s10, [sp, #288]	; 0x120
 800c886:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c88a:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c88e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c892:	eee5 7a07 	vfma.f32	s15, s10, s14
 800c896:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c89a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c89e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a6:	f240 8172 	bls.w	800cb8e <MEMS_runMagCal.constprop.14+0x1bc6>
 800c8aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b6:	f2c0 815f 	blt.w	800cb78 <MEMS_runMagCal.constprop.14+0x1bb0>
 800c8ba:	ed5f caaa 	vldr	s25, [pc, #-680]	; 800c614 <MEMS_runMagCal.constprop.14+0x164c>
 800c8be:	ee1c 0a90 	vmov	r0, s25
 800c8c2:	f007 fe25 	bl	8014510 <cosf>
 800c8c6:	ed5f 7aac 	vldr	s15, [pc, #-688]	; 800c618 <MEMS_runMagCal.constprop.14+0x1650>
 800c8ca:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800c8ce:	ee07 0a10 	vmov	s14, r0
 800c8d2:	ee3c ca0c 	vadd.f32	s24, s24, s24
 800c8d6:	ee17 0a90 	vmov	r0, s15
 800c8da:	eef0 ba4d 	vmov.f32	s23, s26
 800c8de:	eee7 ba0c 	vfma.f32	s23, s14, s24
 800c8e2:	f007 fe15 	bl	8014510 <cosf>
 800c8e6:	ee06 0a90 	vmov	s13, r0
 800c8ea:	eeb0 7a4d 	vmov.f32	s14, s26
 800c8ee:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c8f2:	eea6 7a8c 	vfma.f32	s14, s13, s24
 800c8f6:	eef0 6a6b 	vmov.f32	s13, s23
 800c8fa:	eedd 6a27 	vfnms.f32	s13, s26, s15
 800c8fe:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c902:	ee77 6a27 	vadd.f32	s13, s14, s15
 800c906:	eef0 7ae7 	vabs.f32	s15, s15
 800c90a:	ee76 6aab 	vadd.f32	s13, s13, s23
 800c90e:	eef0 baeb 	vabs.f32	s23, s23
 800c912:	eec6 5a8b 	vdiv.f32	s11, s13, s22
 800c916:	eef4 7aeb 	vcmpe.f32	s15, s23
 800c91a:	eeb1 6ae5 	vsqrt.f32	s12, s11
 800c91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c922:	eeb0 7ac7 	vabs.f32	s14, s14
 800c926:	bf8c      	ite	hi
 800c928:	eef0 6a6b 	vmovhi.f32	s13, s23
 800c92c:	eef0 6a67 	vmovls.f32	s13, s15
 800c930:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c938:	eef4 7aeb 	vcmpe.f32	s15, s23
 800c93c:	bf88      	it	hi
 800c93e:	eef0 6a47 	vmovhi.f32	s13, s14
 800c942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c946:	bfb8      	it	lt
 800c948:	eef0 7a6b 	vmovlt.f32	s15, s23
 800c94c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c950:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 800c954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c958:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800c95c:	bfa8      	it	ge
 800c95e:	eef0 7a47 	vmovge.f32	s15, s14
 800c962:	eef4 7ae5 	vcmpe.f32	s15, s11
 800c966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96a:	ee28 7a86 	vmul.f32	s14, s17, s12
 800c96e:	dc19      	bgt.n	800c9a4 <MEMS_runMagCal.constprop.14+0x19dc>
 800c970:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 800c974:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c978:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c980:	dd02      	ble.n	800c988 <MEMS_runMagCal.constprop.14+0x19c0>
 800c982:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 800c986:	d90d      	bls.n	800c9a4 <MEMS_runMagCal.constprop.14+0x19dc>
 800c988:	ed5f 7adc 	vldr	s15, [pc, #-880]	; 800c61c <MEMS_runMagCal.constprop.14+0x1654>
 800c98c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c994:	dc06      	bgt.n	800c9a4 <MEMS_runMagCal.constprop.14+0x19dc>
 800c996:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800c99a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	d517      	bpl.n	800c9d4 <MEMS_runMagCal.constprop.14+0x1a0c>
 800c9a4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800c9a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c9ac:	ed5f 7ae4 	vldr	s15, [pc, #-912]	; 800c620 <MEMS_runMagCal.constprop.14+0x1658>
 800c9b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b4:	ee17 0a90 	vmov	r0, s15
 800c9b8:	e6ab      	b.n	800c712 <MEMS_runMagCal.constprop.14+0x174a>
 800c9ba:	ee77 7acd 	vsub.f32	s15, s15, s26
 800c9be:	1c57      	adds	r7, r2, #1
 800c9c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9c4:	edc1 7a00 	vstr	s15, [r1]
 800c9c8:	e731      	b.n	800c82e <MEMS_runMagCal.constprop.14+0x1866>
 800c9ca:	fb9c f3fe 	sdiv	r3, ip, lr
 800c9ce:	1af3      	subs	r3, r6, r3
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	e723      	b.n	800c81c <MEMS_runMagCal.constprop.14+0x1854>
 800c9d4:	ed1f 7aed 	vldr	s14, [pc, #-948]	; 800c624 <MEMS_runMagCal.constprop.14+0x165c>
 800c9d8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
 800c9e2:	9335      	str	r3, [sp, #212]	; 0xd4
 800c9e4:	ee07 aa10 	vmov	s14, sl
 800c9e8:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 800c9ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f4:	d409      	bmi.n	800ca0a <MEMS_runMagCal.constprop.14+0x1a42>
 800c9f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9fa:	ee17 3a90 	vmov	r3, s15
 800c9fe:	fa0f fa83 	sxth.w	sl, r3
 800ca02:	ee07 aa90 	vmov	s15, sl
 800ca06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800ca0a:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800cd44 <MEMS_runMagCal.constprop.14+0x1d7c>
 800ca0e:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ca12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ca16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1a:	dc09      	bgt.n	800ca30 <MEMS_runMagCal.constprop.14+0x1a68>
 800ca1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca20:	ee17 3a90 	vmov	r3, s15
 800ca24:	fa0f fa83 	sxth.w	sl, r3
 800ca28:	ee07 aa90 	vmov	s15, sl
 800ca2c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800ca30:	eddf 7ac5 	vldr	s15, [pc, #788]	; 800cd48 <MEMS_runMagCal.constprop.14+0x1d80>
 800ca34:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800cd4c <MEMS_runMagCal.constprop.14+0x1d84>
 800ca38:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ca3c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ca40:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	f340 850a 	ble.w	800d460 <MEMS_runMagCal.constprop.14+0x2498>
 800ca4c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ca50:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ca54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca58:	f140 8502 	bpl.w	800d460 <MEMS_runMagCal.constprop.14+0x2498>
 800ca5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca60:	ee48 7a27 	vmla.f32	s15, s16, s15
 800ca64:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800cd44 <MEMS_runMagCal.constprop.14+0x1d7c>
 800ca68:	ed9f bab9 	vldr	s22, [pc, #740]	; 800cd50 <MEMS_runMagCal.constprop.14+0x1d88>
 800ca6c:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 800cd54 <MEMS_runMagCal.constprop.14+0x1d8c>
 800ca70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca74:	ee68 aaaa 	vmul.f32	s21, s17, s21
 800ca78:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ca7c:	ee68 9aa9 	vmul.f32	s19, s17, s19
 800ca80:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 800ca84:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 800ca88:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 800ca8c:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 800ca90:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 800ca94:	2400      	movs	r4, #0
 800ca96:	4621      	mov	r1, r4
 800ca98:	2240      	movs	r2, #64	; 0x40
 800ca9a:	a836      	add	r0, sp, #216	; 0xd8
 800ca9c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 800caa0:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 800caa4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 800caa8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 800caac:	f007 f897 	bl	8013bde <memset>
 800cab0:	4621      	mov	r1, r4
 800cab2:	2240      	movs	r2, #64	; 0x40
 800cab4:	a846      	add	r0, sp, #280	; 0x118
 800cab6:	f007 f892 	bl	8013bde <memset>
 800caba:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800cabe:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800cd58 <MEMS_runMagCal.constprop.14+0x1d90>
 800cac2:	eef4 4ae7 	vcmpe.f32	s9, s15
 800cac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caca:	f100 80a6 	bmi.w	800cc1a <MEMS_runMagCal.constprop.14+0x1c52>
 800cace:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 800cad2:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 800cad6:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 800cada:	4284      	cmp	r4, r0
 800cadc:	f103 0301 	add.w	r3, r3, #1
 800cae0:	f000 84b7 	beq.w	800d452 <MEMS_runMagCal.constprop.14+0x248a>
 800cae4:	1b1b      	subs	r3, r3, r4
 800cae6:	fb93 f2f0 	sdiv	r2, r3, r0
 800caea:	fb00 3312 	mls	r3, r0, r2, r3
 800caee:	2b00      	cmp	r3, #0
 800caf0:	b219      	sxth	r1, r3
 800caf2:	bfbc      	itt	lt
 800caf4:	181b      	addlt	r3, r3, r0
 800caf6:	b219      	sxthlt	r1, r3
 800caf8:	f8df 928c 	ldr.w	r9, [pc, #652]	; 800cd88 <MEMS_runMagCal.constprop.14+0x1dc0>
 800cafc:	2500      	movs	r5, #0
 800cafe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800cb02:	af29      	add	r7, sp, #164	; 0xa4
 800cb04:	2614      	movs	r6, #20
 800cb06:	b2eb      	uxtb	r3, r5
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	d976      	bls.n	800cbfa <MEMS_runMagCal.constprop.14+0x1c32>
 800cb0c:	194a      	adds	r2, r1, r5
 800cb0e:	fb92 f3f0 	sdiv	r3, r2, r0
 800cb12:	fb00 2313 	mls	r3, r0, r3, r2
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	3304      	adds	r3, #4
 800cb1a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800cb1e:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 800cb22:	f9b3 2504 	ldrsh.w	r2, [r3, #1284]	; 0x504
 800cb26:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 800cb2a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800cb2e:	ee05 2a10 	vmov	s10, r2
 800cb32:	f9b3 2502 	ldrsh.w	r2, [r3, #1282]	; 0x502
 800cb36:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 800cb3a:	ee07 2a10 	vmov	s14, r2
 800cb3e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800cb42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb46:	eed8 6a85 	vfnms.f32	s13, s17, s10
 800cb4a:	ee98 6a87 	vfnms.f32	s12, s17, s14
 800cb4e:	ee05 3a90 	vmov	s11, r3
 800cb52:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cb56:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cb5a:	eea6 7a06 	vfma.f32	s14, s12, s12
 800cb5e:	eed8 7aa5 	vfnms.f32	s15, s17, s11
 800cb62:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800cb66:	eeb4 7acb 	vcmpe.f32	s14, s22
 800cb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6e:	eef1 5ac7 	vsqrt.f32	s11, s14
 800cb72:	d50f      	bpl.n	800cb94 <MEMS_runMagCal.constprop.14+0x1bcc>
 800cb74:	3501      	adds	r5, #1
 800cb76:	e7c6      	b.n	800cb06 <MEMS_runMagCal.constprop.14+0x1b3e>
 800cb78:	ee17 0a90 	vmov	r0, s15
 800cb7c:	f007 fe32 	bl	80147e4 <acosf>
 800cb80:	eddf ca76 	vldr	s25, [pc, #472]	; 800cd5c <MEMS_runMagCal.constprop.14+0x1d94>
 800cb84:	ee07 0a90 	vmov	s15, r0
 800cb88:	ee67 caac 	vmul.f32	s25, s15, s25
 800cb8c:	e697      	b.n	800c8be <MEMS_runMagCal.constprop.14+0x18f6>
 800cb8e:	eddf ca74 	vldr	s25, [pc, #464]	; 800cd60 <MEMS_runMagCal.constprop.14+0x1d98>
 800cb92:	e694      	b.n	800c8be <MEMS_runMagCal.constprop.14+0x18f6>
 800cb94:	ee84 7a25 	vdiv.f32	s14, s8, s11
 800cb98:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800cb9c:	aa25      	add	r2, sp, #148	; 0x94
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 800cba4:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800cba8:	ee27 6a46 	vnmul.f32	s12, s14, s12
 800cbac:	ee67 6a66 	vnmul.f32	s13, s14, s13
 800cbb0:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800cbb4:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 800cbb8:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 800cbbc:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
 800cbc0:	eddc 7a00 	vldr	s15, [ip]
 800cbc4:	ed92 7a00 	vldr	s14, [r2]
 800cbc8:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cbcc:	f10d 0ed8 	add.w	lr, sp, #216	; 0xd8
 800cbd0:	fb06 e803 	mla	r8, r6, r3, lr
 800cbd4:	4696      	mov	lr, r2
 800cbd6:	ecec 7a01 	vstmia	ip!, {s15}
 800cbda:	edd8 7a00 	vldr	s15, [r8]
 800cbde:	ecfe 6a01 	vldmia	lr!, {s13}
 800cbe2:	eee7 7a26 	vfma.f32	s15, s14, s13
 800cbe6:	4577      	cmp	r7, lr
 800cbe8:	ece8 7a01 	vstmia	r8!, {s15}
 800cbec:	d1f5      	bne.n	800cbda <MEMS_runMagCal.constprop.14+0x1c12>
 800cbee:	3301      	adds	r3, #1
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	f102 0204 	add.w	r2, r2, #4
 800cbf6:	d1e3      	bne.n	800cbc0 <MEMS_runMagCal.constprop.14+0x1bf8>
 800cbf8:	e7bc      	b.n	800cb74 <MEMS_runMagCal.constprop.14+0x1bac>
 800cbfa:	aa37      	add	r2, sp, #220	; 0xdc
 800cbfc:	2103      	movs	r1, #3
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f102 000c 	add.w	r0, r2, #12
 800cc04:	428b      	cmp	r3, r1
 800cc06:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 800cc0a:	f000 842d 	beq.w	800d468 <MEMS_runMagCal.constprop.14+0x24a0>
 800cc0e:	6825      	ldr	r5, [r4, #0]
 800cc10:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 800cc14:	3301      	adds	r3, #1
 800cc16:	6025      	str	r5, [r4, #0]
 800cc18:	e7f4      	b.n	800cc04 <MEMS_runMagCal.constprop.14+0x1c3c>
 800cc1a:	eddf 9a52 	vldr	s19, [pc, #328]	; 800cd64 <MEMS_runMagCal.constprop.14+0x1d9c>
 800cc1e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800cd68 <MEMS_runMagCal.constprop.14+0x1da0>
 800cc22:	eeb0 7a69 	vmov.f32	s14, s19
 800cc26:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800cc2a:	eddd 6a31 	vldr	s13, [sp, #196]	; 0xc4
 800cc2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd44 <MEMS_runMagCal.constprop.14+0x1d7c>
 800cc32:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	ee85 8aa6 	vdiv.f32	s16, s11, s13
 800cc3e:	dc0e      	bgt.n	800cc5e <MEMS_runMagCal.constprop.14+0x1c96>
 800cc40:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800cd6c <MEMS_runMagCal.constprop.14+0x1da4>
 800cc44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4c:	dc07      	bgt.n	800cc5e <MEMS_runMagCal.constprop.14+0x1c96>
 800cc4e:	eddf 7a42 	vldr	s15, [pc, #264]	; 800cd58 <MEMS_runMagCal.constprop.14+0x1d90>
 800cc52:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5a:	f200 809f 	bhi.w	800cd9c <MEMS_runMagCal.constprop.14+0x1dd4>
 800cc5e:	4b44      	ldr	r3, [pc, #272]	; (800cd70 <MEMS_runMagCal.constprop.14+0x1da8>)
 800cc60:	ed9f 8a41 	vldr	s16, [pc, #260]	; 800cd68 <MEMS_runMagCal.constprop.14+0x1da0>
 800cc64:	9325      	str	r3, [sp, #148]	; 0x94
 800cc66:	9334      	str	r3, [sp, #208]	; 0xd0
 800cc68:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800cd44 <MEMS_runMagCal.constprop.14+0x1d7c>
 800cc6c:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 800cc70:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 800cc74:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 800cc78:	eddd aa2f 	vldr	s21, [sp, #188]	; 0xbc
 800cc7c:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
 800cc80:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 800cc84:	eec5 7a25 	vdiv.f32	s15, s10, s11
 800cc88:	2300      	movs	r3, #0
 800cc8a:	9347      	str	r3, [sp, #284]	; 0x11c
 800cc8c:	9348      	str	r3, [sp, #288]	; 0x120
 800cc8e:	9349      	str	r3, [sp, #292]	; 0x124
 800cc90:	934b      	str	r3, [sp, #300]	; 0x12c
 800cc92:	934c      	str	r3, [sp, #304]	; 0x130
 800cc94:	934d      	str	r3, [sp, #308]	; 0x134
 800cc96:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	ee29 6a06 	vmul.f32	s12, s18, s12
 800cca2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800cca6:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 800ccaa:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 800ccae:	ee69 aa2a 	vmul.f32	s21, s18, s21
 800ccb2:	ee29 aa0a 	vmul.f32	s20, s18, s20
 800ccb6:	d441      	bmi.n	800cd3c <MEMS_runMagCal.constprop.14+0x1d74>
 800ccb8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ccbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc0:	d43c      	bmi.n	800cd3c <MEMS_runMagCal.constprop.14+0x1d74>
 800ccc2:	eec6 5a87 	vdiv.f32	s11, s13, s14
 800ccc6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800ccca:	ee79 9ae5 	vsub.f32	s19, s19, s11
 800ccce:	eddf 6a29 	vldr	s13, [pc, #164]	; 800cd74 <MEMS_runMagCal.constprop.14+0x1dac>
 800ccd2:	eddf 5a29 	vldr	s11, [pc, #164]	; 800cd78 <MEMS_runMagCal.constprop.14+0x1db0>
 800ccd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccda:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ccde:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cce2:	eef4 7ae5 	vcmpe.f32	s15, s11
 800cce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccea:	eef0 6ae6 	vabs.f32	s13, s13
 800ccee:	eeb0 7ac7 	vabs.f32	s14, s14
 800ccf2:	dd06      	ble.n	800cd02 <MEMS_runMagCal.constprop.14+0x1d3a>
 800ccf4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cd7c <MEMS_runMagCal.constprop.14+0x1db4>
 800ccf8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ccfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd00:	d47d      	bmi.n	800cdfe <MEMS_runMagCal.constprop.14+0x1e36>
 800cd02:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cd80 <MEMS_runMagCal.constprop.14+0x1db8>
 800cd06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0e:	db76      	blt.n	800cdfe <MEMS_runMagCal.constprop.14+0x1e36>
 800cd10:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800cd84 <MEMS_runMagCal.constprop.14+0x1dbc>
 800cd14:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 800cd18:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cd1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cd20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd24:	ee87 0a28 	vdiv.f32	s0, s14, s17
 800cd28:	ee17 2a90 	vmov	r2, s15
 800cd2c:	b290      	uxth	r0, r2
 800cd2e:	b113      	cbz	r3, 800cd36 <MEMS_runMagCal.constprop.14+0x1d6e>
 800cd30:	3b01      	subs	r3, #1
 800cd32:	f88b 3500 	strb.w	r3, [fp, #1280]	; 0x500
 800cd36:	f7fd fb0b 	bl	800a350 <MEMS_updateMagBufferIndex.constprop.24>
 800cd3a:	e633      	b.n	800c9a4 <MEMS_runMagCal.constprop.14+0x19dc>
 800cd3c:	eddf 9a09 	vldr	s19, [pc, #36]	; 800cd64 <MEMS_runMagCal.constprop.14+0x1d9c>
 800cd40:	e7c5      	b.n	800ccce <MEMS_runMagCal.constprop.14+0x1d06>
 800cd42:	bf00      	nop
 800cd44:	423c0000 	.word	0x423c0000
 800cd48:	3c2e4c41 	.word	0x3c2e4c41
 800cd4c:	3e4ccccd 	.word	0x3e4ccccd
 800cd50:	2b8cbccc 	.word	0x2b8cbccc
 800cd54:	358637bd 	.word	0x358637bd
 800cd58:	3dcccccd 	.word	0x3dcccccd
 800cd5c:	3eaaaaab 	.word	0x3eaaaaab
 800cd60:	3f860a92 	.word	0x3f860a92
 800cd64:	00000000 	.word	0x00000000
 800cd68:	41f00001 	.word	0x41f00001
 800cd6c:	400ccccd 	.word	0x400ccccd
 800cd70:	423c0000 	.word	0x423c0000
 800cd74:	3f8ccccd 	.word	0x3f8ccccd
 800cd78:	3ee66666 	.word	0x3ee66666
 800cd7c:	3f266666 	.word	0x3f266666
 800cd80:	3eb33333 	.word	0x3eb33333
 800cd84:	433d0000 	.word	0x433d0000
 800cd88:	bf800000 	.word	0xbf800000
 800cd8c:	3f19999a 	.word	0x3f19999a
 800cd90:	3a83126f 	.word	0x3a83126f
 800cd94:	3c23d70a 	.word	0x3c23d70a
 800cd98:	447a0000 	.word	0x447a0000
 800cd9c:	2224      	movs	r2, #36	; 0x24
 800cd9e:	2100      	movs	r1, #0
 800cda0:	a846      	add	r0, sp, #280	; 0x118
 800cda2:	f006 ff1c 	bl	8013bde <memset>
 800cda6:	ad2e      	add	r5, sp, #184	; 0xb8
 800cda8:	2400      	movs	r4, #0
 800cdaa:	ecf5 7a01 	vldmia	r5!, {s15}
 800cdae:	ee69 7a27 	vmul.f32	s15, s18, s15
 800cdb2:	ee17 0a90 	vmov	r0, s15
 800cdb6:	f007 fbe3 	bl	8014580 <roundf>
 800cdba:	ee07 0a90 	vmov	s15, r0
 800cdbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdc2:	aa36      	add	r2, sp, #216	; 0xd8
 800cdc4:	ee17 0a90 	vmov	r0, s15
 800cdc8:	ab46      	add	r3, sp, #280	; 0x118
 800cdca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800cdce:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
 800cdd2:	3401      	adds	r4, #1
 800cdd4:	2c03      	cmp	r4, #3
 800cdd6:	ed83 8a00 	vstr	s16, [r3]
 800cdda:	d1e6      	bne.n	800cdaa <MEMS_runMagCal.constprop.14+0x1de2>
 800cddc:	ab25      	add	r3, sp, #148	; 0x94
 800cdde:	aa34      	add	r2, sp, #208	; 0xd0
 800cde0:	eeb0 0a68 	vmov.f32	s0, s17
 800cde4:	a946      	add	r1, sp, #280	; 0x118
 800cde6:	a836      	add	r0, sp, #216	; 0xd8
 800cde8:	f7fd f9c0 	bl	800a16c <getMagStats.constprop.26>
 800cdec:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 800cdf0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cdf4:	ee28 8a29 	vmul.f32	s16, s16, s19
 800cdf8:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 800cdfc:	e734      	b.n	800cc68 <MEMS_runMagCal.constprop.14+0x1ca0>
 800cdfe:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 800cd8c <MEMS_runMagCal.constprop.14+0x1dc4>
 800ce02:	eef4 9ae7 	vcmpe.f32	s19, s15
 800ce06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0a:	d481      	bmi.n	800cd10 <MEMS_runMagCal.constprop.14+0x1d48>
 800ce0c:	ee16 0a10 	vmov	r0, s12
 800ce10:	f007 fbb6 	bl	8014580 <roundf>
 800ce14:	ee07 0a90 	vmov	s15, r0
 800ce18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce1c:	ad15      	add	r5, sp, #84	; 0x54
 800ce1e:	ee17 3a90 	vmov	r3, s15
 800ce22:	ee1a 0a90 	vmov	r0, s21
 800ce26:	802b      	strh	r3, [r5, #0]
 800ce28:	f007 fbaa 	bl	8014580 <roundf>
 800ce2c:	ee07 0a90 	vmov	s15, r0
 800ce30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce34:	ee1a 0a10 	vmov	r0, s20
 800ce38:	ee17 3a90 	vmov	r3, s15
 800ce3c:	806b      	strh	r3, [r5, #2]
 800ce3e:	f007 fb9f 	bl	8014580 <roundf>
 800ce42:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ce46:	ee06 0a90 	vmov	s13, r0
 800ce4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce4e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800ce52:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 800cd90 <MEMS_runMagCal.constprop.14+0x1dc8>
 800ce56:	ee16 3a90 	vmov	r3, s13
 800ce5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce5e:	80ab      	strh	r3, [r5, #4]
 800ce60:	ee17 0a90 	vmov	r0, s15
 800ce64:	f007 fb8c 	bl	8014580 <roundf>
 800ce68:	ee07 0a90 	vmov	s15, r0
 800ce6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce70:	ab0f      	add	r3, sp, #60	; 0x3c
 800ce72:	ee17 4a90 	vmov	r4, s15
 800ce76:	eeb0 0a68 	vmov.f32	s0, s17
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	aa10      	add	r2, sp, #64	; 0x40
 800ce7e:	a946      	add	r1, sp, #280	; 0x118
 800ce80:	f8cb 4478 	str.w	r4, [fp, #1144]	; 0x478
 800ce84:	f7fd f972 	bl	800a16c <getMagStats.constprop.26>
 800ce88:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 800ce8c:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 800cd94 <MEMS_runMagCal.constprop.14+0x1dcc>
 800ce90:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	ee07 0a10 	vmov	s14, r0
 800ce9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cea6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ceaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ceae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb2:	f300 82cb 	bgt.w	800d44c <MEMS_runMagCal.constprop.14+0x2484>
 800ceb6:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 800ceba:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800cebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec6:	f340 82be 	ble.w	800d446 <MEMS_runMagCal.constprop.14+0x247e>
 800ceca:	f89b 84b4 	ldrb.w	r8, [fp, #1204]	; 0x4b4
 800cece:	fab8 f888 	clz	r8, r8
 800ced2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800ced6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800ceda:	f8db 7478 	ldr.w	r7, [fp, #1144]	; 0x478
 800cede:	9729      	str	r7, [sp, #164]	; 0xa4
 800cee0:	ee69 7a27 	vmul.f32	s15, s18, s15
 800cee4:	eec7 7aa9 	vdiv.f32	s15, s15, s19
 800cee8:	ee17 0a90 	vmov	r0, s15
 800ceec:	f007 fb48 	bl	8014580 <roundf>
 800cef0:	ee07 0a90 	vmov	s15, r0
 800cef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef8:	ee17 3a90 	vmov	r3, s15
 800cefc:	ee69 7a08 	vmul.f32	s15, s18, s16
 800cf00:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 800cf04:	ee17 0a90 	vmov	r0, s15
 800cf08:	f007 fb3a 	bl	8014580 <roundf>
 800cf0c:	ee07 0a90 	vmov	s15, r0
 800cf10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf14:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 800cd98 <MEMS_runMagCal.constprop.14+0x1dd0>
 800cf18:	ee17 0a90 	vmov	r0, s15
 800cf1c:	f10d 02ae 	add.w	r2, sp, #174	; 0xae
 800cf20:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 800cf24:	2300      	movs	r3, #0
 800cf26:	a946      	add	r1, sp, #280	; 0x118
 800cf28:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800cf2c:	edd1 7a00 	vldr	s15, [r1]
 800cf30:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 800cf34:	f822 1c04 	strh.w	r1, [r2, #-4]
 800cf38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	ee17 1a90 	vmov	r1, s15
 800cf48:	f822 1f02 	strh.w	r1, [r2, #2]!
 800cf4c:	d1eb      	bne.n	800cf26 <MEMS_runMagCal.constprop.14+0x1f5e>
 800cf4e:	9b04      	ldr	r3, [sp, #16]
 800cf50:	b113      	cbz	r3, 800cf58 <MEMS_runMagCal.constprop.14+0x1f90>
 800cf52:	23ff      	movs	r3, #255	; 0xff
 800cf54:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 800cf58:	2600      	movs	r6, #0
 800cf5a:	f88b 6474 	strb.w	r6, [fp, #1140]	; 0x474
 800cf5e:	f1b8 0f00 	cmp.w	r8, #0
 800cf62:	f43e aac8 	beq.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800cf66:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 800cf6a:	f88b 6475 	strb.w	r6, [fp, #1141]	; 0x475
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f040 80f0 	bne.w	800d154 <MEMS_runMagCal.constprop.14+0x218c>
 800cf74:	4d72      	ldr	r5, [pc, #456]	; (800d140 <MEMS_runMagCal.constprop.14+0x2178>)
 800cf76:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 800cf7a:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 800cf7e:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 800cf82:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800cf86:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 800d14c <MEMS_runMagCal.constprop.14+0x2184>
 800cf8a:	f8cb 747c 	str.w	r7, [fp, #1148]	; 0x47c
 800cf8e:	ed1e 0a15 	vldr	s0, [lr, #-84]	; 0xffffffac
 800cf92:	f8bd a0b0 	ldrh.w	sl, [sp, #176]	; 0xb0
 800cf96:	f8bd c0b2 	ldrh.w	ip, [sp, #178]	; 0xb2
 800cf9a:	eddf 7a6d 	vldr	s15, [pc, #436]	; 800d150 <MEMS_runMagCal.constprop.14+0x2188>
 800cf9e:	f8d8 8000 	ldr.w	r8, [r8]
 800cfa2:	f1ae 0758 	sub.w	r7, lr, #88	; 0x58
 800cfa6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cfaa:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 800cfae:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800cfb2:	f8ce 8000 	str.w	r8, [lr]
 800cfb6:	ee03 3a90 	vmov	s7, r3
 800cfba:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800cfbe:	f89b 0485 	ldrb.w	r0, [fp, #1157]	; 0x485
 800cfc2:	ee04 3a10 	vmov	s8, r3
 800cfc6:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 800cfca:	ee04 3a90 	vmov	s9, r3
 800cfce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cfd2:	fb03 f10a 	mul.w	r1, r3, sl
 800cfd6:	ee05 1a10 	vmov	s10, r1
 800cfda:	fb03 f10c 	mul.w	r1, r3, ip
 800cfde:	fb03 f302 	mul.w	r3, r3, r2
 800cfe2:	ee05 1a90 	vmov	s11, r1
 800cfe6:	ee06 3a10 	vmov	s12, r3
 800cfea:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800cfee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cff2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800cff6:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cffa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800cffe:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d002:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 800d006:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800d00a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800d00e:	2301      	movs	r3, #1
 800d010:	2100      	movs	r1, #0
 800d012:	22ff      	movs	r2, #255	; 0xff
 800d014:	ed87 5a1f 	vstr	s10, [r7, #124]	; 0x7c
 800d018:	edc7 5a23 	vstr	s11, [r7, #140]	; 0x8c
 800d01c:	ed87 6a27 	vstr	s12, [r7, #156]	; 0x9c
 800d020:	edc7 3a1c 	vstr	s7, [r7, #112]	; 0x70
 800d024:	ed87 4a1d 	vstr	s8, [r7, #116]	; 0x74
 800d028:	edc7 4a1e 	vstr	s9, [r7, #120]	; 0x78
 800d02c:	f88b 34b4 	strb.w	r3, [fp, #1204]	; 0x4b4
 800d030:	f88b 34cd 	strb.w	r3, [fp, #1229]	; 0x4cd
 800d034:	f88b 1484 	strb.w	r1, [fp, #1156]	; 0x484
 800d038:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 800d03c:	2c00      	cmp	r4, #0
 800d03e:	d04e      	beq.n	800d0de <MEMS_runMagCal.constprop.14+0x2116>
 800d040:	ed9f 3a40 	vldr	s6, [pc, #256]	; 800d144 <MEMS_runMagCal.constprop.14+0x217c>
 800d044:	f89b 7501 	ldrb.w	r7, [fp, #1281]	; 0x501
 800d048:	ee20 3a03 	vmul.f32	s6, s0, s6
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295
 800d050:	468c      	mov	ip, r1
 800d052:	fb9c f3f7 	sdiv	r3, ip, r7
 800d056:	fb07 c313 	mls	r3, r7, r3, ip
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	3315      	adds	r3, #21
 800d05e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800d062:	f102 0c01 	add.w	ip, r2, #1
 800d066:	f9b3 247c 	ldrsh.w	r2, [r3, #1148]	; 0x47c
 800d06a:	ee07 2a90 	vmov	s15, r2
 800d06e:	f9b3 247a 	ldrsh.w	r2, [r3, #1146]	; 0x47a
 800d072:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 800d076:	ee06 2a90 	vmov	s13, r2
 800d07a:	fb9c f2f0 	sdiv	r2, ip, r0
 800d07e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d082:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d086:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d08a:	ee07 3a10 	vmov	s14, r3
 800d08e:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800d092:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d096:	ee66 6a85 	vmul.f32	s13, s13, s10
 800d09a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d09e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0a2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800d0a6:	fb00 c212 	mls	r2, r0, r2, ip
 800d0aa:	b252      	sxtb	r2, r2
 800d0ac:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d0b0:	3101      	adds	r1, #1
 800d0b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d0b6:	b209      	sxth	r1, r1
 800d0b8:	eee7 7a07 	vfma.f32	s15, s14, s14
 800d0bc:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 800d0c0:	42a1      	cmp	r1, r4
 800d0c2:	468c      	mov	ip, r1
 800d0c4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800d0c8:	ee67 7a03 	vmul.f32	s15, s14, s6
 800d0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0d0:	ee17 ea90 	vmov	lr, s15
 800d0d4:	f8a3 e488 	strh.w	lr, [r3, #1160]	; 0x488
 800d0d8:	dbbb      	blt.n	800d052 <MEMS_runMagCal.constprop.14+0x208a>
 800d0da:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 800d0de:	4284      	cmp	r4, r0
 800d0e0:	bf28      	it	cs
 800d0e2:	4604      	movcs	r4, r0
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	aa0d      	add	r2, sp, #52	; 0x34
 800d0ec:	f88b 4484 	strb.w	r4, [fp, #1156]	; 0x484
 800d0f0:	f7fd f83c 	bl	800a16c <getMagStats.constprop.26>
 800d0f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d148 <MEMS_runMagCal.constprop.14+0x2180>
 800d0f8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800d0fc:	edd9 6a00 	vldr	s13, [r9]
 800d100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d104:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800d108:	eef0 7ae7 	vabs.f32	s15, s15
 800d10c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d114:	f140 8175 	bpl.w	800d402 <MEMS_runMagCal.constprop.14+0x243a>
 800d118:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d120:	f140 816f 	bpl.w	800d402 <MEMS_runMagCal.constprop.14+0x243a>
 800d124:	2303      	movs	r3, #3
 800d126:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 800d12a:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 800d12e:	2ac8      	cmp	r2, #200	; 0xc8
 800d130:	f67e a9e1 	bls.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800d134:	2302      	movs	r3, #2
 800d136:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 800d13a:	f7fe b9dc 	b.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800d13e:	bf00      	nop
 800d140:	20001874 	.word	0x20001874
 800d144:	42c80000 	.word	0x42c80000
 800d148:	423c0000 	.word	0x423c0000
 800d14c:	20001850 	.word	0x20001850
 800d150:	358637bd 	.word	0x358637bd
 800d154:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 800d158:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 800d15c:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 800d160:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 800d150 <MEMS_runMagCal.constprop.14+0x2188>
 800d164:	4dd2      	ldr	r5, [pc, #840]	; (800d4b0 <MEMS_runMagCal.constprop.14+0x24e8>)
 800d166:	9647      	str	r6, [sp, #284]	; 0x11c
 800d168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d16c:	fb03 f101 	mul.w	r1, r3, r1
 800d170:	fb03 f202 	mul.w	r2, r3, r2
 800d174:	fb03 f300 	mul.w	r3, r3, r0
 800d178:	ee06 1a90 	vmov	s13, r1
 800d17c:	ee07 2a10 	vmov	s14, r2
 800d180:	ee07 3a90 	vmov	s15, r3
 800d184:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d18c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d190:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d194:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d198:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d19c:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 800d1a0:	9648      	str	r6, [sp, #288]	; 0x120
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	ab36      	add	r3, sp, #216	; 0xd8
 800d1a6:	aa0d      	add	r2, sp, #52	; 0x34
 800d1a8:	9649      	str	r6, [sp, #292]	; 0x124
 800d1aa:	964b      	str	r6, [sp, #300]	; 0x12c
 800d1ac:	964c      	str	r6, [sp, #304]	; 0x130
 800d1ae:	964d      	str	r6, [sp, #308]	; 0x134
 800d1b0:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 800d1b4:	f1a5 001e 	sub.w	r0, r5, #30
 800d1b8:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 800d1bc:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 800d1c0:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 800d1c4:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 800d1c8:	f7fc ffd0 	bl	800a16c <getMagStats.constprop.26>
 800d1cc:	a946      	add	r1, sp, #280	; 0x118
 800d1ce:	464b      	mov	r3, r9
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	aa0d      	add	r2, sp, #52	; 0x34
 800d1d4:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 800d1d8:	f7fc ffc8 	bl	800a16c <getMagStats.constprop.26>
 800d1dc:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800d4b4 <MEMS_runMagCal.constprop.14+0x24ec>
 800d1e0:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800d1e4:	ed99 7a00 	vldr	s14, [r9]
 800d1e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d1ec:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d1f0:	eef0 7ae7 	vabs.f32	s15, s15
 800d1f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fc:	f140 8110 	bpl.w	800d420 <MEMS_runMagCal.constprop.14+0x2458>
 800d200:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d208:	f140 810a 	bpl.w	800d420 <MEMS_runMagCal.constprop.14+0x2458>
 800d20c:	2303      	movs	r3, #3
 800d20e:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 800d212:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d21a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d222:	f57e a968 	bpl.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800d226:	f89b 24cc 	ldrb.w	r2, [fp, #1228]	; 0x4cc
 800d22a:	429a      	cmp	r2, r3
 800d22c:	f63e a963 	bhi.w	800b4f6 <MEMS_runMagCal.constprop.14+0x52e>
 800d230:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800d234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d238:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d240:	d40e      	bmi.n	800d260 <MEMS_runMagCal.constprop.14+0x2298>
 800d242:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800d246:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24e:	f140 80d4 	bpl.w	800d3fa <MEMS_runMagCal.constprop.14+0x2432>
 800d252:	f89b 24bc 	ldrb.w	r2, [fp, #1212]	; 0x4bc
 800d256:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 800d25a:	429a      	cmp	r2, r3
 800d25c:	f080 80cd 	bcs.w	800d3fa <MEMS_runMagCal.constprop.14+0x2432>
 800d260:	4b95      	ldr	r3, [pc, #596]	; (800d4b8 <MEMS_runMagCal.constprop.14+0x24f0>)
 800d262:	f9bb 14c0 	ldrsh.w	r1, [fp, #1216]	; 0x4c0
 800d266:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 800d26a:	f9bb 04be 	ldrsh.w	r0, [fp, #1214]	; 0x4be
 800d26e:	f9bd e0aa 	ldrsh.w	lr, [sp, #170]	; 0xaa
 800d272:	edd3 5a01 	vldr	s11, [r3, #4]
 800d276:	f9bb 24c2 	ldrsh.w	r2, [fp, #1218]	; 0x4c2
 800d27a:	f9bd 40ae 	ldrsh.w	r4, [sp, #174]	; 0xae
 800d27e:	1bcb      	subs	r3, r1, r7
 800d280:	eba0 0c0e 	sub.w	ip, r0, lr
 800d284:	2b00      	cmp	r3, #0
 800d286:	bfb8      	it	lt
 800d288:	425b      	neglt	r3, r3
 800d28a:	f1bc 0f00 	cmp.w	ip, #0
 800d28e:	bfb8      	it	lt
 800d290:	f1cc 0c00 	rsblt	ip, ip, #0
 800d294:	4563      	cmp	r3, ip
 800d296:	bfb8      	it	lt
 800d298:	4663      	movlt	r3, ip
 800d29a:	eba2 0c04 	sub.w	ip, r2, r4
 800d29e:	f1bc 0f00 	cmp.w	ip, #0
 800d2a2:	b21b      	sxth	r3, r3
 800d2a4:	bfb8      	it	lt
 800d2a6:	f1cc 0c00 	rsblt	ip, ip, #0
 800d2aa:	4563      	cmp	r3, ip
 800d2ac:	bfb8      	it	lt
 800d2ae:	4663      	movlt	r3, ip
 800d2b0:	b21b      	sxth	r3, r3
 800d2b2:	ee07 3a90 	vmov	s15, r3
 800d2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2ba:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800d2be:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d2c2:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ca:	f140 8096 	bpl.w	800d3fa <MEMS_runMagCal.constprop.14+0x2432>
 800d2ce:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d2d2:	f8bb 34c4 	ldrh.w	r3, [fp, #1220]	; 0x4c4
 800d2d6:	eec6 3a87 	vdiv.f32	s7, s13, s14
 800d2da:	ee04 3a90 	vmov	s9, r3
 800d2de:	f8bb 34c6 	ldrh.w	r3, [fp, #1222]	; 0x4c6
 800d2e2:	ee05 3a10 	vmov	s10, r3
 800d2e6:	f8bb 34c8 	ldrh.w	r3, [fp, #1224]	; 0x4c8
 800d2ea:	ee07 0a90 	vmov	s15, r0
 800d2ee:	ee05 3a90 	vmov	s11, r3
 800d2f2:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 800d2f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d2fa:	ee36 4a63 	vsub.f32	s8, s12, s7
 800d2fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d302:	ee06 3a10 	vmov	s12, r3
 800d306:	ee03 ea10 	vmov	s6, lr
 800d30a:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 800d30e:	ee07 1a90 	vmov	s15, r1
 800d312:	ee00 3a90 	vmov	s1, r3
 800d316:	ee66 6a84 	vmul.f32	s13, s13, s8
 800d31a:	eeb8 2ac3 	vcvt.f32.s32	s4, s6
 800d31e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800d322:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 800d326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d32a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d32e:	ee03 7a10 	vmov	s6, r7
 800d332:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800d336:	eee3 6a82 	vfma.f32	s13, s7, s4
 800d33a:	ee07 2a90 	vmov	s15, r2
 800d33e:	ee01 3a10 	vmov	s2, r3
 800d342:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d346:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 800d34a:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 800d34e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800d352:	eee3 4aa0 	vfma.f32	s9, s7, s1
 800d356:	ee01 3a90 	vmov	s3, r3
 800d35a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d35e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 800d362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d366:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d36a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d36e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800d372:	ee03 4a10 	vmov	s6, r4
 800d376:	eea3 7aa2 	vfma.f32	s14, s7, s5
 800d37a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800d37e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d382:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d386:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d38a:	ee16 2a90 	vmov	r2, s13
 800d38e:	ee04 3a10 	vmov	s8, r3
 800d392:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800d396:	eea3 5a81 	vfma.f32	s10, s7, s2
 800d39a:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
 800d39e:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 800d3a2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800d3a6:	ee14 2a90 	vmov	r2, s9
 800d3aa:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800d3ae:	eee3 7a83 	vfma.f32	s15, s7, s6
 800d3b2:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
 800d3b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800d3ba:	eee3 5aa1 	vfma.f32	s11, s7, s3
 800d3be:	ee17 2a10 	vmov	r2, s14
 800d3c2:	eea3 6a84 	vfma.f32	s12, s7, s8
 800d3c6:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 800d3ca:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 800d3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3d2:	ee15 2a10 	vmov	r2, s10
 800d3d6:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 800d3da:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800d3de:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 800d3e2:	ee17 2a90 	vmov	r2, s15
 800d3e6:	ee16 3a10 	vmov	r3, s12
 800d3ea:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800d3ee:	ee15 2a90 	vmov	r2, s11
 800d3f2:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 800d3f6:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 800d3fa:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800d3fc:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 800d400:	e5bd      	b.n	800cf7e <MEMS_runMagCal.constprop.14+0x1fb6>
 800d402:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800d406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	d516      	bpl.n	800d43e <MEMS_runMagCal.constprop.14+0x2476>
 800d410:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d418:	bf4c      	ite	mi
 800d41a:	2302      	movmi	r3, #2
 800d41c:	2301      	movpl	r3, #1
 800d41e:	e682      	b.n	800d126 <MEMS_runMagCal.constprop.14+0x215e>
 800d420:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800d424:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42c:	d509      	bpl.n	800d442 <MEMS_runMagCal.constprop.14+0x247a>
 800d42e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d436:	bf4c      	ite	mi
 800d438:	2302      	movmi	r3, #2
 800d43a:	2301      	movpl	r3, #1
 800d43c:	e6e7      	b.n	800d20e <MEMS_runMagCal.constprop.14+0x2246>
 800d43e:	2301      	movs	r3, #1
 800d440:	e671      	b.n	800d126 <MEMS_runMagCal.constprop.14+0x215e>
 800d442:	2301      	movs	r3, #1
 800d444:	e6e3      	b.n	800d20e <MEMS_runMagCal.constprop.14+0x2246>
 800d446:	f04f 0801 	mov.w	r8, #1
 800d44a:	e544      	b.n	800ced6 <MEMS_runMagCal.constprop.14+0x1f0e>
 800d44c:	f04f 0800 	mov.w	r8, #0
 800d450:	e541      	b.n	800ced6 <MEMS_runMagCal.constprop.14+0x1f0e>
 800d452:	fb93 f1f4 	sdiv	r1, r3, r4
 800d456:	fb04 3311 	mls	r3, r4, r1, r3
 800d45a:	b219      	sxth	r1, r3
 800d45c:	f7ff bb4c 	b.w	800caf8 <MEMS_runMagCal.constprop.14+0x1b30>
 800d460:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d464:	f7ff bafe 	b.w	800ca64 <MEMS_runMagCal.constprop.14+0x1a9c>
 800d468:	3214      	adds	r2, #20
 800d46a:	1e59      	subs	r1, r3, #1
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f47f abc6 	bne.w	800cbfe <MEMS_runMagCal.constprop.14+0x1c36>
 800d472:	2240      	movs	r2, #64	; 0x40
 800d474:	2100      	movs	r1, #0
 800d476:	a846      	add	r0, sp, #280	; 0x118
 800d478:	f006 fbb1 	bl	8013bde <memset>
 800d47c:	a946      	add	r1, sp, #280	; 0x118
 800d47e:	2200      	movs	r2, #0
 800d480:	f04f 0e14 	mov.w	lr, #20
 800d484:	ac36      	add	r4, sp, #216	; 0xd8
 800d486:	b256      	sxtb	r6, r2
 800d488:	2000      	movs	r0, #0
 800d48a:	eb01 0986 	add.w	r9, r1, r6, lsl #2
 800d48e:	4603      	mov	r3, r0
 800d490:	eb04 1802 	add.w	r8, r4, r2, lsl #4
 800d494:	fb0e 4c02 	mla	ip, lr, r2, r4
 800d498:	ac46      	add	r4, sp, #280	; 0x118
 800d49a:	eb04 1503 	add.w	r5, r4, r3, lsl #4
 800d49e:	b2c4      	uxtb	r4, r0
 800d4a0:	462f      	mov	r7, r5
 800d4a2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d4a6:	468a      	mov	sl, r1
 800d4a8:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d4c0 <MEMS_runMagCal.constprop.14+0x24f8>
 800d4ac:	e014      	b.n	800d4d8 <MEMS_runMagCal.constprop.14+0x2510>
 800d4ae:	bf00      	nop
 800d4b0:	20001874 	.word	0x20001874
 800d4b4:	423c0000 	.word	0x423c0000
 800d4b8:	200017f8 	.word	0x200017f8
 800d4bc:	3dcccccd 	.word	0x3dcccccd
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	3e99999a 	.word	0x3e99999a
 800d4c8:	3f666666 	.word	0x3f666666
 800d4cc:	ecfa 6a01 	vldmia	sl!, {s13}
 800d4d0:	ecb7 7a01 	vldmia	r7!, {s14}
 800d4d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d4d8:	45a2      	cmp	sl, r4
 800d4da:	d1f7      	bne.n	800d4cc <MEMS_runMagCal.constprop.14+0x2504>
 800d4dc:	429e      	cmp	r6, r3
 800d4de:	f000 80b5 	beq.w	800d64c <MEMS_runMagCal.constprop.14+0x2684>
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	441d      	add	r5, r3
 800d4e6:	edd5 6a00 	vldr	s13, [r5]
 800d4ea:	eeb0 7ae6 	vabs.f32	s14, s13
 800d4ee:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f6:	f53f ab90 	bmi.w	800cc1a <MEMS_runMagCal.constprop.14+0x1c52>
 800d4fa:	eb08 0403 	add.w	r4, r8, r3
 800d4fe:	ed94 7a00 	vldr	s14, [r4]
 800d502:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d506:	440b      	add	r3, r1
 800d508:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d50c:	ed83 7a00 	vstr	s14, [r3]
 800d510:	3001      	adds	r0, #1
 800d512:	b243      	sxtb	r3, r0
 800d514:	42b3      	cmp	r3, r6
 800d516:	ddbf      	ble.n	800d498 <MEMS_runMagCal.constprop.14+0x24d0>
 800d518:	3201      	adds	r2, #1
 800d51a:	2a04      	cmp	r2, #4
 800d51c:	f101 0110 	add.w	r1, r1, #16
 800d520:	d1b0      	bne.n	800d484 <MEMS_runMagCal.constprop.14+0x24bc>
 800d522:	aa21      	add	r2, sp, #132	; 0x84
 800d524:	a91d      	add	r1, sp, #116	; 0x74
 800d526:	a846      	add	r0, sp, #280	; 0x118
 800d528:	f7fc fa1a 	bl	8009960 <llEvaluate.constprop.23>
 800d52c:	ed5f 9a1d 	vldr	s19, [pc, #-116]	; 800d4bc <MEMS_runMagCal.constprop.14+0x24f4>
 800d530:	ad21      	add	r5, sp, #132	; 0x84
 800d532:	ae25      	add	r6, sp, #148	; 0x94
 800d534:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800d538:	2400      	movs	r4, #0
 800d53a:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800d53e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 800d542:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 800d546:	aa21      	add	r2, sp, #132	; 0x84
 800d548:	a925      	add	r1, sp, #148	; 0x94
 800d54a:	a846      	add	r0, sp, #280	; 0x118
 800d54c:	f845 7b04 	str.w	r7, [r5], #4
 800d550:	f7fc fa06 	bl	8009960 <llEvaluate.constprop.23>
 800d554:	ecb6 7a01 	vldmia	r6!, {s14}
 800d558:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d560:	f340 8083 	ble.w	800d66a <MEMS_runMagCal.constprop.14+0x26a2>
 800d564:	eef1 7ac7 	vsqrt.f32	s15, s14
 800d568:	eef4 9ae7 	vcmpe.f32	s19, s15
 800d56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d570:	bfb8      	it	lt
 800d572:	eef0 9a67 	vmovlt.f32	s19, s15
 800d576:	45a8      	cmp	r8, r5
 800d578:	d1e1      	bne.n	800d53e <MEMS_runMagCal.constprop.14+0x2576>
 800d57a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800d57e:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800d582:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800d586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d58a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d592:	d501      	bpl.n	800d598 <MEMS_runMagCal.constprop.14+0x25d0>
 800d594:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800d598:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 800d59c:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 800d5a0:	ed1f 2a39 	vldr	s4, [pc, #-228]	; 800d4c0 <MEMS_runMagCal.constprop.14+0x24f8>
 800d5a4:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 800d5a8:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 800d5ac:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 800d5b0:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 800d5b4:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800d5b8:	ed9d 3a31 	vldr	s6, [sp, #196]	; 0xc4
 800d5bc:	ed5f 2a3f 	vldr	s5, [pc, #-252]	; 800d4c4 <MEMS_runMagCal.constprop.14+0x24fc>
 800d5c0:	eeb0 7ac4 	vabs.f32	s14, s8
 800d5c4:	eef0 7ac5 	vabs.f32	s15, s10
 800d5c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d0:	bfa8      	it	ge
 800d5d2:	eef0 7a47 	vmovge.f32	s15, s14
 800d5d6:	eef4 7ac2 	vcmpe.f32	s15, s4
 800d5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5de:	eeb0 7ac6 	vabs.f32	s14, s12
 800d5e2:	bfb8      	it	lt
 800d5e4:	eef0 7a42 	vmovlt.f32	s15, s4
 800d5e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f0:	bfa8      	it	ge
 800d5f2:	eef0 7a47 	vmovge.f32	s15, s14
 800d5f6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d5fa:	ee33 4a84 	vadd.f32	s8, s7, s8
 800d5fe:	ee34 5a85 	vadd.f32	s10, s9, s10
 800d602:	ee73 5a26 	vadd.f32	s11, s6, s13
 800d606:	eef4 7ae2 	vcmpe.f32	s15, s5
 800d60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60e:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 800d612:	ed8d 5a2f 	vstr	s10, [sp, #188]	; 0xbc
 800d616:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 800d61a:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800d61e:	eeb0 7ae6 	vabs.f32	s14, s13
 800d622:	d50a      	bpl.n	800d63a <MEMS_runMagCal.constprop.14+0x2672>
 800d624:	ed5f 6a58 	vldr	s13, [pc, #-352]	; 800d4c8 <MEMS_runMagCal.constprop.14+0x2500>
 800d628:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d630:	d503      	bpl.n	800d63a <MEMS_runMagCal.constprop.14+0x2672>
 800d632:	9b00      	ldr	r3, [sp, #0]
 800d634:	2b01      	cmp	r3, #1
 800d636:	f63f aaf6 	bhi.w	800cc26 <MEMS_runMagCal.constprop.14+0x1c5e>
 800d63a:	9b00      	ldr	r3, [sp, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b05      	cmp	r3, #5
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	f47f aa26 	bne.w	800ca94 <MEMS_runMagCal.constprop.14+0x1acc>
 800d648:	f7ff baed 	b.w	800cc26 <MEMS_runMagCal.constprop.14+0x1c5e>
 800d64c:	ed9c 7a00 	vldr	s14, [ip]
 800d650:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d658:	f57f aadf 	bpl.w	800cc1a <MEMS_runMagCal.constprop.14+0x1c52>
 800d65c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d660:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800d664:	ed89 7a00 	vstr	s14, [r9]
 800d668:	e752      	b.n	800d510 <MEMS_runMagCal.constprop.14+0x2548>
 800d66a:	eef2 9a04 	vmov.f32	s19, #36	; 0x41200000  10.0
 800d66e:	e782      	b.n	800d576 <MEMS_runMagCal.constprop.14+0x25ae>

0800d670 <m_kalman_3gyro.isra.6.constprop.36>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	ed2d 8b10 	vpush	{d8-d15}
 800d678:	4ccb      	ldr	r4, [pc, #812]	; (800d9a8 <m_kalman_3gyro.isra.6.constprop.36+0x338>)
 800d67a:	f2ad 6d34 	subw	sp, sp, #1588	; 0x634
 800d67e:	468e      	mov	lr, r1
 800d680:	4690      	mov	r8, r2
 800d682:	9001      	str	r0, [sp, #4]
 800d684:	9127      	str	r1, [sp, #156]	; 0x9c
 800d686:	920b      	str	r2, [sp, #44]	; 0x2c
 800d688:	9308      	str	r3, [sp, #32]
 800d68a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d68c:	aeb6      	add	r6, sp, #728	; 0x2d8
 800d68e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d692:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d696:	f89d 56a0 	ldrb.w	r5, [sp, #1696]	; 0x6a0
 800d69a:	9528      	str	r5, [sp, #160]	; 0xa0
 800d69c:	f89d 56a4 	ldrb.w	r5, [sp, #1700]	; 0x6a4
 800d6a0:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 800d6a4:	950c      	str	r5, [sp, #48]	; 0x30
 800d6a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d6a8:	4625      	mov	r5, r4
 800d6aa:	afc3      	add	r7, sp, #780	; 0x30c
 800d6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6b0:	6033      	str	r3, [r6, #0]
 800d6b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d6ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6bc:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 800d6c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d6c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6c6:	aed0      	add	r6, sp, #832	; 0x340
 800d6c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d6ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d6d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d6d6:	682a      	ldr	r2, [r5, #0]
 800d6d8:	f8dc 3000 	ldr.w	r3, [ip]
 800d6dc:	603a      	str	r2, [r7, #0]
 800d6de:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 800d6e2:	6033      	str	r3, [r6, #0]
 800d6e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6e6:	addd      	add	r5, sp, #884	; 0x374
 800d6e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6f0:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 800d6f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d6f8:	683f      	ldr	r7, [r7, #0]
 800d6fa:	602f      	str	r7, [r5, #0]
 800d6fc:	ad98      	add	r5, sp, #608	; 0x260
 800d6fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d700:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d704:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d708:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 800d70c:	e885 0003 	stmia.w	r5, {r0, r1}
 800d710:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d712:	ada2      	add	r5, sp, #648	; 0x288
 800d714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d716:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d71a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d71e:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 800d722:	e885 0003 	stmia.w	r5, {r0, r1}
 800d726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d728:	adac      	add	r5, sp, #688	; 0x2b0
 800d72a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d72c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d72e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d730:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d734:	f504 768c 	add.w	r6, r4, #280	; 0x118
 800d738:	e885 0003 	stmia.w	r5, {r0, r1}
 800d73c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d73e:	ad5d      	add	r5, sp, #372	; 0x174
 800d740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d742:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d746:	f8dd 66d4 	ldr.w	r6, [sp, #1748]	; 0x6d4
 800d74a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d74e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 800d752:	2500      	movs	r5, #0
 800d754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d756:	7035      	strb	r5, [r6, #0]
 800d758:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 800d75c:	edcd 1a02 	vstr	s3, [sp, #8]
 800d760:	7035      	strb	r5, [r6, #0]
 800d762:	f8dd 66dc 	ldr.w	r6, [sp, #1756]	; 0x6dc
 800d766:	7035      	strb	r5, [r6, #0]
 800d768:	edde da01 	vldr	s27, [lr, #4]
 800d76c:	edde 8a00 	vldr	s17, [lr]
 800d770:	ed9e 8a02 	vldr	s16, [lr, #8]
 800d774:	ee6d 7aad 	vmul.f32	s15, s27, s27
 800d778:	ad64      	add	r5, sp, #400	; 0x190
 800d77a:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800d77e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d780:	eee8 7a08 	vfma.f32	s15, s16, s16
 800d784:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d788:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d78c:	ee17 0a90 	vmov	r0, s15
 800d790:	eeb0 ea40 	vmov.f32	s28, s0
 800d794:	eef0 ea60 	vmov.f32	s29, s1
 800d798:	eeb0 fa41 	vmov.f32	s30, s2
 800d79c:	eef0 fa42 	vmov.f32	s31, s4
 800d7a0:	f7f2 feea 	bl	8000578 <__aeabi_f2d>
 800d7a4:	f006 ffca 	bl	801473c <sqrt>
 800d7a8:	f7f3 fa16 	bl	8000bd8 <__aeabi_d2f>
 800d7ac:	edd8 aa01 	vldr	s21, [r8, #4]
 800d7b0:	ed98 ba00 	vldr	s22, [r8]
 800d7b4:	ed98 aa02 	vldr	s20, [r8, #8]
 800d7b8:	4b7c      	ldr	r3, [pc, #496]	; (800d9ac <m_kalman_3gyro.isra.6.constprop.36+0x33c>)
 800d7ba:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 800d7be:	ee09 0a90 	vmov	s19, r0
 800d7c2:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 800d7c6:	6018      	str	r0, [r3, #0]
 800d7c8:	f50a 7317 	add.w	r3, sl, #604	; 0x25c
 800d7cc:	930a      	str	r3, [sp, #40]	; 0x28
 800d7ce:	eeea 7a0a 	vfma.f32	s15, s20, s20
 800d7d2:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 800d7d6:	ee17 0a90 	vmov	r0, s15
 800d7da:	f7f2 fecd 	bl	8000578 <__aeabi_f2d>
 800d7de:	f006 ffad 	bl	801473c <sqrt>
 800d7e2:	f7f3 f9f9 	bl	8000bd8 <__aeabi_d2f>
 800d7e6:	ee09 0a10 	vmov	s18, r0
 800d7ea:	ee8c caa9 	vdiv.f32	s24, s25, s19
 800d7ee:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d7f2:	ab5a      	add	r3, sp, #360	; 0x168
 800d7f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d7f8:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 800d7fc:	9319      	str	r3, [sp, #100]	; 0x64
 800d7fe:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 800d802:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d806:	eecc 7a89 	vdiv.f32	s15, s25, s18
 800d80a:	ee6c ba2d 	vmul.f32	s23, s24, s27
 800d80e:	ee67 aaaa 	vmul.f32	s21, s15, s21
 800d812:	ee68 9a8c 	vmul.f32	s19, s17, s24
 800d816:	ee27 ba8b 	vmul.f32	s22, s15, s22
 800d81a:	ee2c ca08 	vmul.f32	s24, s24, s16
 800d81e:	ee2a aa27 	vmul.f32	s20, s20, s15
 800d822:	ee2a daab 	vmul.f32	s26, s21, s23
 800d826:	edcd 8a57 	vstr	s17, [sp, #348]	; 0x15c
 800d82a:	ed8d 8a59 	vstr	s16, [sp, #356]	; 0x164
 800d82e:	edcd da58 	vstr	s27, [sp, #352]	; 0x160
 800d832:	edcd 9a3e 	vstr	s19, [sp, #248]	; 0xf8
 800d836:	edcd ba3f 	vstr	s23, [sp, #252]	; 0xfc
 800d83a:	ed8d ba41 	vstr	s22, [sp, #260]	; 0x104
 800d83e:	edcd aa42 	vstr	s21, [sp, #264]	; 0x108
 800d842:	ed8d ca40 	vstr	s24, [sp, #256]	; 0x100
 800d846:	ed8d aa43 	vstr	s20, [sp, #268]	; 0x10c
 800d84a:	f7f3 f9c5 	bl	8000bd8 <__aeabi_d2f>
 800d84e:	eeab da29 	vfma.f32	s26, s22, s19
 800d852:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 800d856:	ee08 0a90 	vmov	s17, r0
 800d85a:	ed9f 8a55 	vldr	s16, [pc, #340]	; 800d9b0 <m_kalman_3gyro.isra.6.constprop.36+0x340>
 800d85e:	eeac da0a 	vfma.f32	s26, s24, s20
 800d862:	ee28 8a88 	vmul.f32	s16, s17, s16
 800d866:	2c00      	cmp	r4, #0
 800d868:	f000 85be 	beq.w	800e3e8 <m_kalman_3gyro.isra.6.constprop.36+0xd78>
 800d86c:	ab47      	add	r3, sp, #284	; 0x11c
 800d86e:	9309      	str	r3, [sp, #36]	; 0x24
 800d870:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 800d874:	9312      	str	r3, [sp, #72]	; 0x48
 800d876:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 800d87a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d87c:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 800d880:	9314      	str	r3, [sp, #80]	; 0x50
 800d882:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 800d886:	9315      	str	r3, [sp, #84]	; 0x54
 800d888:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 800d88c:	9316      	str	r3, [sp, #88]	; 0x58
 800d88e:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 800d892:	931b      	str	r3, [sp, #108]	; 0x6c
 800d894:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 800d898:	931c      	str	r3, [sp, #112]	; 0x70
 800d89a:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 800d89e:	931d      	str	r3, [sp, #116]	; 0x74
 800d8a0:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 800d8a4:	931e      	str	r3, [sp, #120]	; 0x78
 800d8a6:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 800d8aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800d8ac:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 800d8b0:	9310      	str	r3, [sp, #64]	; 0x40
 800d8b2:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 800d8b6:	931f      	str	r3, [sp, #124]	; 0x7c
 800d8b8:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 800d8bc:	9311      	str	r3, [sp, #68]	; 0x44
 800d8be:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 800d8c2:	930d      	str	r3, [sp, #52]	; 0x34
 800d8c4:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 800d8c8:	930e      	str	r3, [sp, #56]	; 0x38
 800d8ca:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 800d8ce:	9318      	str	r3, [sp, #96]	; 0x60
 800d8d0:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 800d8d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8d6:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 800d8da:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 800d8de:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 800d8e2:	9335      	str	r3, [sp, #212]	; 0xd4
 800d8e4:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 800d8e8:	eddf 4a32 	vldr	s9, [pc, #200]	; 800d9b4 <m_kalman_3gyro.isra.6.constprop.36+0x344>
 800d8ec:	edd3 6a00 	vldr	s13, [r3]
 800d8f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8f2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800d9b8 <m_kalman_3gyro.isra.6.constprop.36+0x348>
 800d8f6:	edd3 7a00 	vldr	s15, [r3]
 800d8fa:	eddf 5a30 	vldr	s11, [pc, #192]	; 800d9bc <m_kalman_3gyro.isra.6.constprop.36+0x34c>
 800d8fe:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800d9c0 <m_kalman_3gyro.isra.6.constprop.36+0x350>
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800d908:	f20a 45cc 	addw	r5, sl, #1228	; 0x4cc
 800d90c:	eee7 6a85 	vfma.f32	s13, s15, s10
 800d910:	f50a 649e 	add.w	r4, sl, #1264	; 0x4f0
 800d914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d916:	ed95 7a00 	vldr	s14, [r5]
 800d91a:	edd4 7a00 	vldr	s15, [r4]
 800d91e:	eee7 6a25 	vfma.f32	s13, s14, s11
 800d922:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 800d926:	f50a 6691 	add.w	r6, sl, #1160	; 0x488
 800d92a:	ed94 3b00 	vldr	d3, [r4]
 800d92e:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d932:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d934:	ed8a 3b0e 	vstr	d3, [sl, #56]	; 0x38
 800d938:	ed84 8a00 	vstr	s16, [r4]
 800d93c:	edca 6af8 	vstr	s13, [sl, #992]	; 0x3e0
 800d940:	edd6 7a00 	vldr	s15, [r6]
 800d944:	f20a 4764 	addw	r7, sl, #1124	; 0x464
 800d948:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d94c:	edd7 3a00 	vldr	s7, [r7]
 800d950:	973a      	str	r7, [sp, #232]	; 0xe8
 800d952:	eee3 7a85 	vfma.f32	s15, s7, s10
 800d956:	f50a 659a 	add.w	r5, sl, #1232	; 0x4d0
 800d95a:	f20a 4cf4 	addw	ip, sl, #1268	; 0x4f4
 800d95e:	ed95 4a00 	vldr	s8, [r5]
 800d962:	ed9c 7a00 	vldr	s14, [ip]
 800d966:	eee4 7a25 	vfma.f32	s15, s8, s11
 800d96a:	f20a 458c 	addw	r5, sl, #1164	; 0x48c
 800d96e:	f50a 678d 	add.w	r7, sl, #1128	; 0x468
 800d972:	f20a 44d4 	addw	r4, sl, #1236	; 0x4d4
 800d976:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d97a:	9401      	str	r4, [sp, #4]
 800d97c:	f20a 446c 	addw	r4, sl, #1132	; 0x46c
 800d980:	942b      	str	r4, [sp, #172]	; 0xac
 800d982:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 800d986:	ed95 7a00 	vldr	s14, [r5]
 800d98a:	edd7 3a00 	vldr	s7, [r7]
 800d98e:	973b      	str	r7, [sp, #236]	; 0xec
 800d990:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d994:	f50a 648e 	add.w	r4, sl, #1136	; 0x470
 800d998:	eea3 7a85 	vfma.f32	s14, s7, s10
 800d99c:	942c      	str	r4, [sp, #176]	; 0xb0
 800d99e:	9c01      	ldr	r4, [sp, #4]
 800d9a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d9a2:	ed94 4a00 	vldr	s8, [r4]
 800d9a6:	e00d      	b.n	800d9c4 <m_kalman_3gyro.isra.6.constprop.36+0x354>
 800d9a8:	080160f0 	.word	0x080160f0
 800d9ac:	20001bbc 	.word	0x20001bbc
 800d9b0:	3ca3d70a 	.word	0x3ca3d70a
 800d9b4:	bdcccccd 	.word	0xbdcccccd
 800d9b8:	be4ccccd 	.word	0xbe4ccccd
 800d9bc:	3dcccccd 	.word	0x3dcccccd
 800d9c0:	3e4ccccd 	.word	0x3e4ccccd
 800d9c4:	eea4 7a25 	vfma.f32	s14, s8, s11
 800d9c8:	f50a 669f 	add.w	r6, sl, #1272	; 0x4f8
 800d9cc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800d9d0:	ed96 4a00 	vldr	s8, [r6]
 800d9d4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800d9d6:	eea4 7a06 	vfma.f32	s14, s8, s12
 800d9da:	f50a 6c92 	add.w	ip, sl, #1168	; 0x490
 800d9de:	f50a 6e9b 	add.w	lr, sl, #1240	; 0x4d8
 800d9e2:	f20a 4b94 	addw	fp, sl, #1172	; 0x494
 800d9e6:	ed8a 7afa 	vstr	s14, [sl, #1000]	; 0x3e8
 800d9ea:	ed9c 4a00 	vldr	s8, [ip]
 800d9ee:	edd5 3a00 	vldr	s7, [r5]
 800d9f2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800d9f6:	f50a 658f 	add.w	r5, sl, #1144	; 0x478
 800d9fa:	eea3 4a85 	vfma.f32	s8, s7, s10
 800d9fe:	9520      	str	r5, [sp, #128]	; 0x80
 800da00:	f20a 45fc 	addw	r5, sl, #1276	; 0x4fc
 800da04:	edde 3a00 	vldr	s7, [lr]
 800da08:	eea3 4aa5 	vfma.f32	s8, s7, s11
 800da0c:	f20a 44dc 	addw	r4, sl, #1244	; 0x4dc
 800da10:	f50a 62a0 	add.w	r2, sl, #1280	; 0x500
 800da14:	edd5 3a00 	vldr	s7, [r5]
 800da18:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800da1a:	eea3 4a86 	vfma.f32	s8, s7, s12
 800da1e:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 800da22:	f20a 4674 	addw	r6, sl, #1140	; 0x474
 800da26:	f20a 4ce4 	addw	ip, sl, #1252	; 0x4e4
 800da2a:	ed8a 4afb 	vstr	s8, [sl, #1004]	; 0x3ec
 800da2e:	ed9b 4a00 	vldr	s8, [fp]
 800da32:	edd5 3a00 	vldr	s7, [r5]
 800da36:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 800da3a:	ee24 4a24 	vmul.f32	s8, s8, s9
 800da3e:	f50a 6ca1 	add.w	ip, sl, #1288	; 0x508
 800da42:	eea3 4a85 	vfma.f32	s8, s7, s10
 800da46:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
 800da4a:	f50a 6c94 	add.w	ip, sl, #1184	; 0x4a0
 800da4e:	edd4 3a00 	vldr	s7, [r4]
 800da52:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 800da56:	eea3 4aa5 	vfma.f32	s8, s7, s11
 800da5a:	f20a 4c7c 	addw	ip, sl, #1148	; 0x47c
 800da5e:	f50a 619c 	add.w	r1, sl, #1248	; 0x4e0
 800da62:	edd2 3a00 	vldr	s7, [r2]
 800da66:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 800da6a:	eea3 4a86 	vfma.f32	s8, s7, s12
 800da6e:	f50a 6c9d 	add.w	ip, sl, #1256	; 0x4e8
 800da72:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800da76:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800da7a:	ed8a 4afc 	vstr	s8, [sl, #1008]	; 0x3f0
 800da7e:	edd3 7a00 	vldr	s15, [r3]
 800da82:	ed96 4a00 	vldr	s8, [r6]
 800da86:	963c      	str	r6, [sp, #240]	; 0xf0
 800da88:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800da8c:	eee6 3aa6 	vfma.f32	s7, s13, s13
 800da90:	f20a 5c0c 	addw	ip, sl, #1292	; 0x50c
 800da94:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 800da98:	eee4 7a05 	vfma.f32	s15, s8, s10
 800da9c:	f20a 4ca4 	addw	ip, sl, #1188	; 0x4a4
 800daa0:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 800daa4:	eef0 6a63 	vmov.f32	s13, s7
 800daa8:	edd1 3a00 	vldr	s7, [r1]
 800daac:	f50a 6c90 	add.w	ip, sl, #1152	; 0x480
 800dab0:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800dab4:	f20a 479c 	addw	r7, sl, #1180	; 0x49c
 800dab8:	f20a 5004 	addw	r0, sl, #1284	; 0x504
 800dabc:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 800dac0:	f50a 64a2 	add.w	r4, sl, #1296	; 0x510
 800dac4:	f20a 4cec 	addw	ip, sl, #1260	; 0x4ec
 800dac8:	f50a 760e 	add.w	r6, sl, #568	; 0x238
 800dacc:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 800dad0:	973d      	str	r7, [sp, #244]	; 0xf4
 800dad2:	9434      	str	r4, [sp, #208]	; 0xd0
 800dad4:	962a      	str	r6, [sp, #168]	; 0xa8
 800dad6:	ed90 4a00 	vldr	s8, [r0]
 800dada:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800dadc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800dade:	eee4 7a06 	vfma.f32	s15, s8, s12
 800dae2:	f50a 6480 	add.w	r4, sl, #1024	; 0x400
 800dae6:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 800daea:	eee7 6a07 	vfma.f32	s13, s14, s14
 800daee:	9129      	str	r1, [sp, #164]	; 0xa4
 800daf0:	edca 7afd 	vstr	s15, [sl, #1012]	; 0x3f4
 800daf4:	edd7 7a00 	vldr	s15, [r7]
 800daf8:	ed95 4a00 	vldr	s8, [r5]
 800dafc:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 800dafe:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800db02:	ee16 0a90 	vmov	r0, s13
 800db06:	eee4 7a05 	vfma.f32	s15, s8, s10
 800db0a:	edd5 6a00 	vldr	s13, [r5]
 800db0e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 800db10:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800db14:	ed95 7a00 	vldr	s14, [r5]
 800db18:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 800db1a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800db1e:	edca 7afe 	vstr	s15, [sl, #1016]	; 0x3f8
 800db22:	edd5 7a00 	vldr	s15, [r5]
 800db26:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800db28:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800db2c:	ed95 4a00 	vldr	s8, [r5]
 800db30:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 800db32:	eee4 7a05 	vfma.f32	s15, s8, s10
 800db36:	edd5 6a00 	vldr	s13, [r5]
 800db3a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800db3c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800db40:	ed95 7a00 	vldr	s14, [r5]
 800db44:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800db46:	eee7 7a06 	vfma.f32	s15, s14, s12
 800db4a:	edca 7aff 	vstr	s15, [sl, #1020]	; 0x3fc
 800db4e:	ed95 8a00 	vldr	s16, [r5]
 800db52:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800db54:	ed9c 7a00 	vldr	s14, [ip]
 800db58:	edd5 6a00 	vldr	s13, [r5]
 800db5c:	edd3 7a00 	vldr	s15, [r3]
 800db60:	ee28 8a24 	vmul.f32	s16, s16, s9
 800db64:	eea6 8a85 	vfma.f32	s16, s13, s10
 800db68:	eea7 8a25 	vfma.f32	s16, s14, s11
 800db6c:	eea7 8a86 	vfma.f32	s16, s15, s12
 800db70:	ed84 8a00 	vstr	s16, [r4]
 800db74:	f7f2 fd00 	bl	8000578 <__aeabi_f2d>
 800db78:	f006 fde0 	bl	801473c <sqrt>
 800db7c:	f7f3 f82c 	bl	8000bd8 <__aeabi_d2f>
 800db80:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 800db84:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 800db88:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 800db8c:	49a1      	ldr	r1, [pc, #644]	; (800de14 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 800db8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db92:	ee0d 0a90 	vmov	s27, r0
 800db96:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800db9a:	6008      	str	r0, [r1, #0]
 800db9c:	eee7 7a07 	vfma.f32	s15, s14, s14
 800dba0:	ee17 0a90 	vmov	r0, s15
 800dba4:	f7f2 fce8 	bl	8000578 <__aeabi_f2d>
 800dba8:	f006 fdc8 	bl	801473c <sqrt>
 800dbac:	f7f3 f814 	bl	8000bd8 <__aeabi_d2f>
 800dbb0:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 800dbb4:	ed9a 7afe 	vldr	s14, [sl, #1016]	; 0x3f8
 800dbb8:	4b96      	ldr	r3, [pc, #600]	; (800de14 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 800dbba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dbbe:	f843 0f04 	str.w	r0, [r3, #4]!
 800dbc2:	eee7 7a07 	vfma.f32	s15, s14, s14
 800dbc6:	9339      	str	r3, [sp, #228]	; 0xe4
 800dbc8:	ee0c 0a90 	vmov	s25, r0
 800dbcc:	eee8 7a08 	vfma.f32	s15, s16, s16
 800dbd0:	ee17 0a90 	vmov	r0, s15
 800dbd4:	f7f2 fcd0 	bl	8000578 <__aeabi_f2d>
 800dbd8:	f006 fdb0 	bl	801473c <sqrt>
 800dbdc:	f7f2 fffc 	bl	8000bd8 <__aeabi_d2f>
 800dbe0:	ee6b 7a4c 	vnmul.f32	s15, s22, s24
 800dbe4:	ee2a 7a6b 	vnmul.f32	s14, s20, s23
 800dbe8:	eee9 7a8a 	vfma.f32	s15, s19, s20
 800dbec:	4b89      	ldr	r3, [pc, #548]	; (800de14 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 800dbee:	eeac 7a2a 	vfma.f32	s14, s24, s21
 800dbf2:	f843 0f08 	str.w	r0, [r3, #8]!
 800dbf6:	ee6a 9ae9 	vnmul.f32	s19, s21, s19
 800dbfa:	eeb0 ca47 	vmov.f32	s24, s14
 800dbfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dc02:	eeeb 9a8b 	vfma.f32	s19, s23, s22
 800dc06:	931a      	str	r3, [sp, #104]	; 0x68
 800dc08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc0a:	edcd 7a01 	vstr	s15, [sp, #4]
 800dc0e:	eeac 7a0c 	vfma.f32	s14, s24, s24
 800dc12:	ee08 0a10 	vmov	s16, r0
 800dc16:	eea9 7aa9 	vfma.f32	s14, s19, s19
 800dc1a:	edc3 da00 	vstr	s27, [r3]
 800dc1e:	ee17 0a10 	vmov	r0, s14
 800dc22:	edc8 ca00 	vstr	s25, [r8]
 800dc26:	ed89 8a00 	vstr	s16, [r9]
 800dc2a:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 800dc2e:	edca aa93 	vstr	s21, [sl, #588]	; 0x24c
 800dc32:	ed8a aa96 	vstr	s20, [sl, #600]	; 0x258
 800dc36:	f7f2 fc9f 	bl	8000578 <__aeabi_f2d>
 800dc3a:	f006 fd7f 	bl	801473c <sqrt>
 800dc3e:	f7f2 ffcb 	bl	8000bd8 <__aeabi_d2f>
 800dc42:	ee07 0a90 	vmov	s15, r0
 800dc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc4e:	ab7d      	add	r3, sp, #500	; 0x1f4
 800dc50:	461a      	mov	r2, r3
 800dc52:	4631      	mov	r1, r6
 800dc54:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800dc56:	eddd 7a01 	vldr	s15, [sp, #4]
 800dc5a:	ee69 9a87 	vmul.f32	s19, s19, s14
 800dc5e:	ee67 ba87 	vmul.f32	s23, s15, s14
 800dc62:	ee2c ca07 	vmul.f32	s24, s24, s14
 800dc66:	ee6a 6ae9 	vnmul.f32	s13, s21, s19
 800dc6a:	ee2a 7a4c 	vnmul.f32	s14, s20, s24
 800dc6e:	ee6b 7a6b 	vnmul.f32	s15, s22, s23
 800dc72:	eeeb 6a8a 	vfma.f32	s13, s23, s20
 800dc76:	eea9 7a8b 	vfma.f32	s14, s19, s22
 800dc7a:	eeec 7a2a 	vfma.f32	s15, s24, s21
 800dc7e:	edca 6a8e 	vstr	s13, [sl, #568]	; 0x238
 800dc82:	ed8a 7a91 	vstr	s14, [sl, #580]	; 0x244
 800dc86:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 800dc8a:	ed8a ca8f 	vstr	s24, [sl, #572]	; 0x23c
 800dc8e:	edca ba92 	vstr	s23, [sl, #584]	; 0x248
 800dc92:	edca 9a95 	vstr	s19, [sl, #596]	; 0x254
 800dc96:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800dc9a:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 800dc9e:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 800dca2:	f7fb f805 	bl	8008cb0 <m_mldivide>
 800dca6:	a87d      	add	r0, sp, #500	; 0x1f4
 800dca8:	a94b      	add	r1, sp, #300	; 0x12c
 800dcaa:	f7fb fb7f 	bl	80093ac <m_dcm2q_eml>
 800dcae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dcb0:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 800dcb4:	4653      	mov	r3, sl
 800dcb6:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 800dcba:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 800dcbe:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 800dcc2:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800dcc6:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 800dcca:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 800dcce:	3b0c      	subs	r3, #12
 800dcd0:	4298      	cmp	r0, r3
 800dcd2:	d1f0      	bne.n	800dcb6 <m_kalman_3gyro.isra.6.constprop.36+0x646>
 800dcd4:	ed9d 7a02 	vldr	s14, [sp, #8]
 800dcd8:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 800dcdc:	eddf 5a4e 	vldr	s11, [pc, #312]	; 800de18 <m_kalman_3gyro.isra.6.constprop.36+0x7a8>
 800dce0:	9738      	str	r7, [sp, #224]	; 0xe0
 800dce2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dce6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800dcea:	ac44      	add	r4, sp, #272	; 0x110
 800dcec:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 800dcf0:	f107 050c 	add.w	r5, r7, #12
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 800dcfa:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 800dcfe:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800dd02:	ee37 7a07 	vadd.f32	s14, s14, s14
 800dd06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd0a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dd0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800dd12:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dd16:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800de1c <m_kalman_3gyro.isra.6.constprop.36+0x7ac>
 800dd1a:	edca 6a97 	vstr	s13, [sl, #604]	; 0x25c
 800dd1e:	ed8a 7a98 	vstr	s14, [sl, #608]	; 0x260
 800dd22:	edca 7a99 	vstr	s15, [sl, #612]	; 0x264
 800dd26:	edd0 6a00 	vldr	s13, [r0]
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	eef0 7a66 	vmov.f32	s15, s13
 800dd30:	330c      	adds	r3, #12
 800dd32:	ed93 7a00 	vldr	s14, [r3]
 800dd36:	428b      	cmp	r3, r1
 800dd38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd3c:	d1f8      	bne.n	800dd30 <m_kalman_3gyro.isra.6.constprop.36+0x6c0>
 800dd3e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800dd42:	4602      	mov	r2, r0
 800dd44:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800dd48:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800dd4c:	320c      	adds	r2, #12
 800dd4e:	edd2 7a00 	vldr	s15, [r2]
 800dd52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd56:	4293      	cmp	r3, r2
 800dd58:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800dd5c:	d1f6      	bne.n	800dd4c <m_kalman_3gyro.isra.6.constprop.36+0x6dc>
 800dd5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dd62:	3004      	adds	r0, #4
 800dd64:	42a8      	cmp	r0, r5
 800dd66:	ece4 6a01 	vstmia	r4!, {s13}
 800dd6a:	f101 0104 	add.w	r1, r1, #4
 800dd6e:	d1da      	bne.n	800dd26 <m_kalman_3gyro.isra.6.constprop.36+0x6b6>
 800dd70:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dd72:	970a      	str	r7, [sp, #40]	; 0x28
 800dd74:	f7f2 fc00 	bl	8000578 <__aeabi_f2d>
 800dd78:	f006 fce0 	bl	801473c <sqrt>
 800dd7c:	f7f2 ff2c 	bl	8000bd8 <__aeabi_d2f>
 800dd80:	ee06 0a90 	vmov	s13, r0
 800dd84:	9845      	ldr	r0, [sp, #276]	; 0x114
 800dd86:	edcd 6a44 	vstr	s13, [sp, #272]	; 0x110
 800dd8a:	edcd 6a02 	vstr	s13, [sp, #8]
 800dd8e:	f7f2 fbf3 	bl	8000578 <__aeabi_f2d>
 800dd92:	f006 fcd3 	bl	801473c <sqrt>
 800dd96:	f7f2 ff1f 	bl	8000bd8 <__aeabi_d2f>
 800dd9a:	ee07 0a90 	vmov	s15, r0
 800dd9e:	9846      	ldr	r0, [sp, #280]	; 0x118
 800dda0:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 800dda4:	edcd 7a01 	vstr	s15, [sp, #4]
 800dda8:	f7f2 fbe6 	bl	8000578 <__aeabi_f2d>
 800ddac:	f006 fcc6 	bl	801473c <sqrt>
 800ddb0:	f7f2 ff12 	bl	8000bd8 <__aeabi_d2f>
 800ddb4:	eddd 7a01 	vldr	s15, [sp, #4]
 800ddb8:	eddd 6a02 	vldr	s13, [sp, #8]
 800ddbc:	9046      	str	r0, [sp, #280]	; 0x118
 800ddbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ddc2:	ee07 0a10 	vmov	s14, r0
 800ddc6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ddca:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 800ddce:	9326      	str	r3, [sp, #152]	; 0x98
 800ddd0:	f20d 48ec 	addw	r8, sp, #1260	; 0x4ec
 800ddd4:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ddd8:	f50d 7b6a 	add.w	fp, sp, #936	; 0x3a8
 800dddc:	ee17 0a90 	vmov	r0, s15
 800dde0:	f7f2 fbca 	bl	8000578 <__aeabi_f2d>
 800dde4:	f006 fcaa 	bl	801473c <sqrt>
 800dde8:	f7f2 fef6 	bl	8000bd8 <__aeabi_d2f>
 800ddec:	4b0c      	ldr	r3, [pc, #48]	; (800de20 <m_kalman_3gyro.isra.6.constprop.36+0x7b0>)
 800ddee:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 800ddf2:	ecf3 7a01 	vldmia	r3!, {s15}
 800ddf6:	f8cd a6e0 	str.w	sl, [sp, #1760]	; 0x6e0
 800ddfa:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800ddfe:	edd3 7a00 	vldr	s15, [r3]
 800de02:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
 800de06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de08:	4640      	mov	r0, r8
 800de0a:	f20d 31a7 	addw	r1, sp, #935	; 0x3a7
 800de0e:	2301      	movs	r3, #1
 800de10:	e00c      	b.n	800de2c <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 800de12:	bf00      	nop
 800de14:	20001bc0 	.word	0x20001bc0
 800de18:	3d088889 	.word	0x3d088889
 800de1c:	3d0d3dcb 	.word	0x3d0d3dcb
 800de20:	200017a8 	.word	0x200017a8
 800de24:	3f333333 	.word	0x3f333333
 800de28:	3f4ccccd 	.word	0x3f4ccccd
 800de2c:	f801 3f01 	strb.w	r3, [r1, #1]!
 800de30:	3301      	adds	r3, #1
 800de32:	f852 4b0c 	ldr.w	r4, [r2], #12
 800de36:	f840 4b04 	str.w	r4, [r0], #4
 800de3a:	2b1f      	cmp	r3, #31
 800de3c:	d1f6      	bne.n	800de2c <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 800de3e:	221e      	movs	r2, #30
 800de40:	2101      	movs	r1, #1
 800de42:	a88f      	add	r0, sp, #572	; 0x23c
 800de44:	f005 fecb 	bl	8013bde <memset>
 800de48:	ed98 7a00 	vldr	s14, [r8]
 800de4c:	edd8 7a01 	vldr	s15, [r8, #4]
 800de50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de54:	ed98 7a02 	vldr	s14, [r8, #8]
 800de58:	edd8 7a03 	vldr	s15, [r8, #12]
 800de5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de60:	bf88      	it	hi
 800de62:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800de66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de6a:	ed98 7a04 	vldr	s14, [r8, #16]
 800de6e:	edd8 7a05 	vldr	s15, [r8, #20]
 800de72:	bf88      	it	hi
 800de74:	f8ab 3000 	strhhi.w	r3, [fp]
 800de78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7c:	bf88      	it	hi
 800de7e:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800de82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de86:	ed98 7a06 	vldr	s14, [r8, #24]
 800de8a:	edd8 7a07 	vldr	s15, [r8, #28]
 800de8e:	bf88      	it	hi
 800de90:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 800de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de98:	bf88      	it	hi
 800de9a:	f240 5306 	movwhi	r3, #1286	; 0x506
 800de9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dea2:	ed98 7a08 	vldr	s14, [r8, #32]
 800dea6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 800deaa:	bf88      	it	hi
 800deac:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 800deb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb4:	bf88      	it	hi
 800deb6:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800deba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800debe:	ed98 7a0a 	vldr	s14, [r8, #40]	; 0x28
 800dec2:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 800dec6:	bf88      	it	hi
 800dec8:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 800decc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded0:	bf88      	it	hi
 800ded2:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800ded6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800deda:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 800dede:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 800dee2:	bf88      	it	hi
 800dee4:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	bf88      	it	hi
 800deee:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800def2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800def6:	ed98 7a0e 	vldr	s14, [r8, #56]	; 0x38
 800defa:	edd8 7a0f 	vldr	s15, [r8, #60]	; 0x3c
 800defe:	bf88      	it	hi
 800df00:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 800df04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df08:	bf88      	it	hi
 800df0a:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800df0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df12:	ed98 7a10 	vldr	s14, [r8, #64]	; 0x40
 800df16:	edd8 7a11 	vldr	s15, [r8, #68]	; 0x44
 800df1a:	bf88      	it	hi
 800df1c:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 800df20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df24:	bf88      	it	hi
 800df26:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800df2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df2e:	ed98 7a12 	vldr	s14, [r8, #72]	; 0x48
 800df32:	edd8 7a13 	vldr	s15, [r8, #76]	; 0x4c
 800df36:	bf88      	it	hi
 800df38:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 800df3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df40:	bf88      	it	hi
 800df42:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800df46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df4a:	ed98 7a14 	vldr	s14, [r8, #80]	; 0x50
 800df4e:	edd8 7a15 	vldr	s15, [r8, #84]	; 0x54
 800df52:	bf88      	it	hi
 800df54:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 800df58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df5c:	bf88      	it	hi
 800df5e:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800df62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df66:	bf88      	it	hi
 800df68:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 800df6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df70:	bf84      	itt	hi
 800df72:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800df76:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 800df7a:	ed98 7a16 	vldr	s14, [r8, #88]	; 0x58
 800df7e:	edd8 7a17 	vldr	s15, [r8, #92]	; 0x5c
 800df82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df86:	ed98 7a18 	vldr	s14, [r8, #96]	; 0x60
 800df8a:	edd8 7a19 	vldr	s15, [r8, #100]	; 0x64
 800df8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df92:	bf88      	it	hi
 800df94:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800df98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df9c:	ed98 7a1a 	vldr	s14, [r8, #104]	; 0x68
 800dfa0:	edd8 7a1b 	vldr	s15, [r8, #108]	; 0x6c
 800dfa4:	bf88      	it	hi
 800dfa6:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 800dfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfae:	bf88      	it	hi
 800dfb0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800dfb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dfb8:	ed98 7a1c 	vldr	s14, [r8, #112]	; 0x70
 800dfbc:	edd8 7a1d 	vldr	s15, [r8, #116]	; 0x74
 800dfc0:	bf88      	it	hi
 800dfc2:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 800dfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfca:	bf88      	it	hi
 800dfcc:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800dfd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dfd4:	bf88      	it	hi
 800dfd6:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 800dfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfde:	bf84      	itt	hi
 800dfe0:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800dfe4:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 800dfe8:	2304      	movs	r3, #4
 800dfea:	9306      	str	r3, [sp, #24]
 800dfec:	2302      	movs	r3, #2
 800dfee:	9302      	str	r3, [sp, #8]
 800dff0:	9b02      	ldr	r3, [sp, #8]
 800dff2:	f103 0901 	add.w	r9, r3, #1
 800dff6:	f1b9 0f1f 	cmp.w	r9, #31
 800dffa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	d055      	beq.n	800e0ae <m_kalman_3gyro.isra.6.constprop.36+0xa3e>
 800e002:	2301      	movs	r3, #1
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	9b01      	ldr	r3, [sp, #4]
 800e008:	9a04      	ldr	r2, [sp, #16]
 800e00a:	18d7      	adds	r7, r2, r3
 800e00c:	2f1f      	cmp	r7, #31
 800e00e:	bfa8      	it	ge
 800e010:	271f      	movge	r7, #31
 800e012:	eba7 0a03 	sub.w	sl, r7, r3
 800e016:	f1ba 0f00 	cmp.w	sl, #0
 800e01a:	dd40      	ble.n	800e09e <m_kalman_3gyro.isra.6.constprop.36+0xa2e>
 800e01c:	461d      	mov	r5, r3
 800e01e:	464e      	mov	r6, r9
 800e020:	2401      	movs	r4, #1
 800e022:	e008      	b.n	800e036 <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 800e024:	3601      	adds	r6, #1
 800e026:	ab8f      	add	r3, sp, #572	; 0x23c
 800e028:	42be      	cmp	r6, r7
 800e02a:	541a      	strb	r2, [r3, r0]
 800e02c:	f000 81a6 	beq.w	800e37c <m_kalman_3gyro.isra.6.constprop.36+0xd0c>
 800e030:	3401      	adds	r4, #1
 800e032:	45a2      	cmp	sl, r4
 800e034:	db2c      	blt.n	800e090 <m_kalman_3gyro.isra.6.constprop.36+0xa20>
 800e036:	f105 3cff 	add.w	ip, r5, #4294967295
 800e03a:	1e71      	subs	r1, r6, #1
 800e03c:	f91b 300c 	ldrsb.w	r3, [fp, ip]
 800e040:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 800e044:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 800e048:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 800e04c:	ed50 7a01 	vldr	s15, [r0, #-4]
 800e050:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800e054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05c:	f104 30ff 	add.w	r0, r4, #4294967295
 800e060:	d8e0      	bhi.n	800e024 <m_kalman_3gyro.isra.6.constprop.36+0x9b4>
 800e062:	3501      	adds	r5, #1
 800e064:	aa8f      	add	r2, sp, #572	; 0x23c
 800e066:	45a9      	cmp	r9, r5
 800e068:	5413      	strb	r3, [r2, r0]
 800e06a:	d1e1      	bne.n	800e030 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 800e06c:	ab8f      	add	r3, sp, #572	; 0x23c
 800e06e:	42be      	cmp	r6, r7
 800e070:	eba7 0206 	sub.w	r2, r7, r6
 800e074:	eb03 0004 	add.w	r0, r3, r4
 800e078:	4459      	add	r1, fp
 800e07a:	f280 818e 	bge.w	800e39a <m_kalman_3gyro.isra.6.constprop.36+0xd2a>
 800e07e:	443c      	add	r4, r7
 800e080:	1ba4      	subs	r4, r4, r6
 800e082:	3401      	adds	r4, #1
 800e084:	f005 fda0 	bl	8013bc8 <memcpy>
 800e088:	45a2      	cmp	sl, r4
 800e08a:	464d      	mov	r5, r9
 800e08c:	463e      	mov	r6, r7
 800e08e:	dad2      	bge.n	800e036 <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 800e090:	9b01      	ldr	r3, [sp, #4]
 800e092:	1e58      	subs	r0, r3, #1
 800e094:	4458      	add	r0, fp
 800e096:	4652      	mov	r2, sl
 800e098:	a98f      	add	r1, sp, #572	; 0x23c
 800e09a:	f005 fd95 	bl	8013bc8 <memcpy>
 800e09e:	9b02      	ldr	r3, [sp, #8]
 800e0a0:	9701      	str	r7, [sp, #4]
 800e0a2:	eb03 0907 	add.w	r9, r3, r7
 800e0a6:	f1b9 0f1e 	cmp.w	r9, #30
 800e0aa:	ddac      	ble.n	800e006 <m_kalman_3gyro.isra.6.constprop.36+0x996>
 800e0ac:	9b04      	ldr	r3, [sp, #16]
 800e0ae:	9302      	str	r3, [sp, #8]
 800e0b0:	9b06      	ldr	r3, [sp, #24]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	9306      	str	r3, [sp, #24]
 800e0b6:	d19b      	bne.n	800dff0 <m_kalman_3gyro.isra.6.constprop.36+0x980>
 800e0b8:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 800e0bc:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 800e0c0:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800e0c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800e0c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 800e0cc:	ed13 7a01 	vldr	s14, [r3, #-4]
 800e0d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e0dc:	bf4c      	ite	mi
 800e0de:	2201      	movmi	r2, #1
 800e0e0:	2200      	movpl	r2, #0
 800e0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e6:	bf4c      	ite	mi
 800e0e8:	2301      	movmi	r3, #1
 800e0ea:	2300      	movpl	r3, #0
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	f000 8156 	beq.w	800e39e <m_kalman_3gyro.isra.6.constprop.36+0xd2e>
 800e0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e0fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e102:	3204      	adds	r2, #4
 800e104:	920a      	str	r2, [sp, #40]	; 0x28
 800e106:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e108:	ece3 7a01 	vstmia	r3!, {s15}
 800e10c:	4293      	cmp	r3, r2
 800e10e:	9326      	str	r3, [sp, #152]	; 0x98
 800e110:	f47f ae79 	bne.w	800de06 <m_kalman_3gyro.isra.6.constprop.36+0x796>
 800e114:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 800e118:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 800e11c:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 800e120:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 800e124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e128:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e12c:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e130:	ee17 0a90 	vmov	r0, s15
 800e134:	f7f2 fa20 	bl	8000578 <__aeabi_f2d>
 800e138:	f006 fb00 	bl	801473c <sqrt>
 800e13c:	f7f2 fd4c 	bl	8000bd8 <__aeabi_d2f>
 800e140:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e144:	ee2e 6a07 	vmul.f32	s12, s28, s14
 800e148:	ee6e 6a87 	vmul.f32	s13, s29, s14
 800e14c:	eecd 7a86 	vdiv.f32	s15, s27, s12
 800e150:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e152:	9002      	str	r0, [sp, #8]
 800e154:	ee8c 6aa6 	vdiv.f32	s12, s25, s13
 800e158:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e15c:	edc3 7a00 	vstr	s15, [r3]
 800e160:	eec8 6a07 	vdiv.f32	s13, s16, s14
 800e164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e166:	ed1f 7ad1 	vldr	s14, [pc, #-836]	; 800de24 <m_kalman_3gyro.isra.6.constprop.36+0x7b4>
 800e16a:	ed83 6a00 	vstr	s12, [r3]
 800e16e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e172:	ee28 8a07 	vmul.f32	s16, s16, s14
 800e176:	ee05 0a90 	vmov	s11, r0
 800e17a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e182:	eeac 8a87 	vfma.f32	s16, s25, s14
 800e186:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e188:	ee25 7a87 	vmul.f32	s14, s11, s14
 800e18c:	edc3 6a00 	vstr	s13, [r3]
 800e190:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e196:	ed1f 6adc 	vldr	s12, [pc, #-880]	; 800de28 <m_kalman_3gyro.isra.6.constprop.36+0x7b8>
 800e19a:	ed83 7a00 	vstr	s14, [r3]
 800e19e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800e1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1a8:	ee28 8a06 	vmul.f32	s16, s16, s12
 800e1ac:	edc3 7a00 	vstr	s15, [r3]
 800e1b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1b2:	ed83 8a00 	vstr	s16, [r3]
 800e1b6:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f000 829e 	beq.w	800e6fc <m_kalman_3gyro.isra.6.constprop.36+0x108c>
 800e1c0:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	f50a 630c 	add.w	r3, sl, #2240	; 0x8c0
 800e1ca:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 800e1d4:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 800e1d8:	461c      	mov	r4, r3
 800e1da:	ed99 7a00 	vldr	s14, [r9]
 800e1de:	9b04      	ldr	r3, [sp, #16]
 800e1e0:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 800e1e4:	ed83 7a00 	vstr	s14, [r3]
 800e1e8:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 800e1ec:	f7f2 fcf4 	bl	8000bd8 <__aeabi_d2f>
 800e1f0:	ed94 6a00 	vldr	s12, [r4]
 800e1f4:	9004      	str	r0, [sp, #16]
 800e1f6:	ed89 6a00 	vstr	s12, [r9]
 800e1fa:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 800e1fe:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800e202:	f7f2 fce9 	bl	8000bd8 <__aeabi_d2f>
 800e206:	edd7 7a00 	vldr	s15, [r7]
 800e20a:	9001      	str	r0, [sp, #4]
 800e20c:	edc4 7a00 	vstr	s15, [r4]
 800e210:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 800e214:	edcd 7a06 	vstr	s15, [sp, #24]
 800e218:	f7f2 fcde 	bl	8000bd8 <__aeabi_d2f>
 800e21c:	eddd 7a06 	vldr	s15, [sp, #24]
 800e220:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 800e224:	edd6 6a00 	vldr	s13, [r6]
 800e228:	ee07 0a10 	vmov	s14, r0
 800e22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e230:	ed9d 7a01 	vldr	s14, [sp, #4]
 800e234:	edc7 6a00 	vstr	s13, [r7]
 800e238:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e23c:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800e240:	edcd 6a06 	vstr	s13, [sp, #24]
 800e244:	edcd 7a01 	vstr	s15, [sp, #4]
 800e248:	f7f2 fcc6 	bl	8000bd8 <__aeabi_d2f>
 800e24c:	eddd 7a01 	vldr	s15, [sp, #4]
 800e250:	eddd 6a06 	vldr	s13, [sp, #24]
 800e254:	ee07 0a10 	vmov	s14, r0
 800e258:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e25c:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 800e260:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 800e264:	eddd 6a04 	vldr	s13, [sp, #16]
 800e268:	ed86 8a00 	vstr	s16, [r6]
 800e26c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e270:	edcd 7a01 	vstr	s15, [sp, #4]
 800e274:	f7f2 fcb0 	bl	8000bd8 <__aeabi_d2f>
 800e278:	eddd 7a01 	vldr	s15, [sp, #4]
 800e27c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e27e:	ee07 0a10 	vmov	s14, r0
 800e282:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e286:	2200      	movs	r2, #0
 800e288:	2300      	movs	r3, #0
 800e28a:	edc1 7a00 	vstr	s15, [r1]
 800e28e:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 800e292:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e296:	eeb0 8a67 	vmov.f32	s16, s15
 800e29a:	f7f2 fc41 	bl	8000b20 <__aeabi_dcmple>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	f040 834a 	bne.w	800e938 <m_kalman_3gyro.isra.6.constprop.36+0x12c8>
 800e2a4:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	4b4e      	ldr	r3, [pc, #312]	; (800e3e4 <m_kalman_3gyro.isra.6.constprop.36+0xd74>)
 800e2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b0:	f7f2 fc22 	bl	8000af8 <__aeabi_dcmpeq>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	f000 8284 	beq.w	800e7c2 <m_kalman_3gyro.isra.6.constprop.36+0x1152>
 800e2ba:	eddd 7ab6 	vldr	s15, [sp, #728]	; 0x2d8
 800e2be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c6:	f302 83c0 	bgt.w	8010a4a <m_kalman_3gyro.isra.6.constprop.36+0x33da>
 800e2ca:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 800e2ce:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 800e2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2d4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2dc:	edc3 7a00 	vstr	s15, [r3]
 800e2e0:	f142 83bf 	bpl.w	8010a62 <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 800e2e4:	ed9d 7adc 	vldr	s14, [sp, #880]	; 0x370
 800e2e8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f0:	f340 831a 	ble.w	800e928 <m_kalman_3gyro.isra.6.constprop.36+0x12b8>
 800e2f4:	200d      	movs	r0, #13
 800e2f6:	2402      	movs	r4, #2
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800e2fe:	180b      	adds	r3, r1, r0
 800e300:	085b      	lsrs	r3, r3, #1
 800e302:	199a      	adds	r2, r3, r6
 800e304:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 800e308:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800e30c:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 800e310:	e00e      	b.n	800e330 <m_kalman_3gyro.isra.6.constprop.36+0xcc0>
 800e312:	18ca      	adds	r2, r1, r3
 800e314:	4618      	mov	r0, r3
 800e316:	429c      	cmp	r4, r3
 800e318:	ea4f 0352 	mov.w	r3, r2, lsr #1
 800e31c:	eb03 0206 	add.w	r2, r3, r6
 800e320:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 800e324:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800e328:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 800e32c:	f083 810b 	bcs.w	8011546 <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 800e330:	ed95 7a00 	vldr	s14, [r5]
 800e334:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	dbe9      	blt.n	800e312 <m_kalman_3gyro.isra.6.constprop.36+0xca2>
 800e33e:	1c5c      	adds	r4, r3, #1
 800e340:	42a0      	cmp	r0, r4
 800e342:	4619      	mov	r1, r3
 800e344:	d8db      	bhi.n	800e2fe <m_kalman_3gyro.isra.6.constprop.36+0xc8e>
 800e346:	0092      	lsls	r2, r2, #2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	a9d0      	add	r1, sp, #832	; 0x340
 800e34c:	1888      	adds	r0, r1, r2
 800e34e:	4419      	add	r1, r3
 800e350:	edd0 6a00 	vldr	s13, [r0]
 800e354:	ed91 7a00 	vldr	s14, [r1]
 800e358:	ee78 5a66 	vsub.f32	s11, s16, s13
 800e35c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e360:	a9dd      	add	r1, sp, #884	; 0x374
 800e362:	ee85 6a87 	vdiv.f32	s12, s11, s14
 800e366:	440a      	add	r2, r1
 800e368:	440b      	add	r3, r1
 800e36a:	ed92 7a00 	vldr	s14, [r2]
 800e36e:	edd3 6a00 	vldr	s13, [r3]
 800e372:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e376:	eea6 7a26 	vfma.f32	s14, s12, s13
 800e37a:	e2d7      	b.n	800e92c <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 800e37c:	45a9      	cmp	r9, r5
 800e37e:	eba9 0205 	sub.w	r2, r9, r5
 800e382:	eb03 0004 	add.w	r0, r3, r4
 800e386:	eb0b 010c 	add.w	r1, fp, ip
 800e38a:	f77f ae51 	ble.w	800e030 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 800e38e:	444c      	add	r4, r9
 800e390:	1b64      	subs	r4, r4, r5
 800e392:	f005 fc19 	bl	8013bc8 <memcpy>
 800e396:	464d      	mov	r5, r9
 800e398:	e64a      	b.n	800e030 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 800e39a:	464d      	mov	r5, r9
 800e39c:	e648      	b.n	800e030 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 800e39e:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 800e3a2:	eef4 7a66 	vcmp.f32	s15, s13
 800e3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3aa:	f43f aea2 	beq.w	800e0f2 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 800e3ae:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800e3b2:	eef4 7a46 	vcmp.f32	s15, s12
 800e3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ba:	f43f ae9a 	beq.w	800e0f2 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 800e3be:	eeb4 7a66 	vcmp.f32	s14, s13
 800e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c6:	f43f ae94 	beq.w	800e0f2 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 800e3ca:	eeb4 7a46 	vcmp.f32	s14, s12
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	f43f ae8e 	beq.w	800e0f2 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 800e3d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e3de:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e3e2:	e68c      	b.n	800e0fe <m_kalman_3gyro.isra.6.constprop.36+0xa8e>
 800e3e4:	3ff00000 	.word	0x3ff00000
 800e3e8:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 800e3ec:	ed90 7b00 	vldr	d7, [r0]
 800e3f0:	ae47      	add	r6, sp, #284	; 0x11c
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3f8:	2500      	movs	r5, #0
 800e3fa:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 800e3fe:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 800e402:	f88a 18cd 	strb.w	r1, [sl, #2253]	; 0x8cd
 800e406:	f8aa 2030 	strh.w	r2, [sl, #48]	; 0x30
 800e40a:	4621      	mov	r1, r4
 800e40c:	e9ca 4412 	strd	r4, r4, [sl, #72]	; 0x48
 800e410:	e9ca 4415 	strd	r4, r4, [sl, #84]	; 0x54
 800e414:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 800e418:	2230      	movs	r2, #48	; 0x30
 800e41a:	edca ca18 	vstr	s25, [sl, #96]	; 0x60
 800e41e:	edca ca14 	vstr	s25, [sl, #80]	; 0x50
 800e422:	edca ca10 	vstr	s25, [sl, #64]	; 0x40
 800e426:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 800e42a:	6035      	str	r5, [r6, #0]
 800e42c:	6075      	str	r5, [r6, #4]
 800e42e:	60b5      	str	r5, [r6, #8]
 800e430:	60f5      	str	r5, [r6, #12]
 800e432:	9609      	str	r6, [sp, #36]	; 0x24
 800e434:	f005 fbd3 	bl	8013bde <memset>
 800e438:	4bae      	ldr	r3, [pc, #696]	; (800e6f4 <m_kalman_3gyro.isra.6.constprop.36+0x1084>)
 800e43a:	f8ca 5094 	str.w	r5, [sl, #148]	; 0x94
 800e43e:	4621      	mov	r1, r4
 800e440:	f8ca 5098 	str.w	r5, [sl, #152]	; 0x98
 800e444:	f8ca 509c 	str.w	r5, [sl, #156]	; 0x9c
 800e448:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 800e44c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e450:	edca ca2c 	vstr	s25, [sl, #176]	; 0xb0
 800e454:	edca ca2d 	vstr	s25, [sl, #180]	; 0xb4
 800e458:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 800e45c:	f005 fbbf 	bl	8013bde <memset>
 800e460:	2400      	movs	r4, #0
 800e462:	4ba5      	ldr	r3, [pc, #660]	; (800e6f8 <m_kalman_3gyro.isra.6.constprop.36+0x1088>)
 800e464:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 800e468:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800e46c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 800e470:	4621      	mov	r1, r4
 800e472:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 800e476:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 800e47a:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 800e47e:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 800e482:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 800e486:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 800e48a:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 800e48e:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 800e492:	f8ca 01fc 	str.w	r0, [sl, #508]	; 0x1fc
 800e496:	f8ca 0200 	str.w	r0, [sl, #512]	; 0x200
 800e49a:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
 800e49e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e4a2:	f8ca 4218 	str.w	r4, [sl, #536]	; 0x218
 800e4a6:	f8ca 421c 	str.w	r4, [sl, #540]	; 0x21c
 800e4aa:	f8ca 4220 	str.w	r4, [sl, #544]	; 0x220
 800e4ae:	f8ca 4228 	str.w	r4, [sl, #552]	; 0x228
 800e4b2:	f8ca 422c 	str.w	r4, [sl, #556]	; 0x22c
 800e4b6:	f8ca 4230 	str.w	r4, [sl, #560]	; 0x230
 800e4ba:	f8ca 423c 	str.w	r4, [sl, #572]	; 0x23c
 800e4be:	f8ca b234 	str.w	fp, [sl, #564]	; 0x234
 800e4c2:	f8ca b224 	str.w	fp, [sl, #548]	; 0x224
 800e4c6:	f8ca b214 	str.w	fp, [sl, #532]	; 0x214
 800e4ca:	f8ca 4240 	str.w	r4, [sl, #576]	; 0x240
 800e4ce:	f8ca 4244 	str.w	r4, [sl, #580]	; 0x244
 800e4d2:	f8ca 424c 	str.w	r4, [sl, #588]	; 0x24c
 800e4d6:	f8ca 4250 	str.w	r4, [sl, #592]	; 0x250
 800e4da:	f8ca 4254 	str.w	r4, [sl, #596]	; 0x254
 800e4de:	f8ca b258 	str.w	fp, [sl, #600]	; 0x258
 800e4e2:	f8ca b248 	str.w	fp, [sl, #584]	; 0x248
 800e4e6:	f8ca b238 	str.w	fp, [sl, #568]	; 0x238
 800e4ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4ec:	f005 fb77 	bl	8013bde <memset>
 800e4f0:	f20a 4e24 	addw	lr, sl, #1060	; 0x424
 800e4f4:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
 800e4f8:	f50a 6e85 	add.w	lr, sl, #1064	; 0x428
 800e4fc:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 800e500:	f20a 4e2c 	addw	lr, sl, #1068	; 0x42c
 800e504:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800e508:	f50a 6e86 	add.w	lr, sl, #1072	; 0x430
 800e50c:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800e510:	f20a 4e34 	addw	lr, sl, #1076	; 0x434
 800e514:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800e518:	f50a 6e87 	add.w	lr, sl, #1080	; 0x438
 800e51c:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 800e520:	f20a 4e3c 	addw	lr, sl, #1084	; 0x43c
 800e524:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 800e528:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800e52c:	f50a 6e88 	add.w	lr, sl, #1088	; 0x440
 800e530:	9312      	str	r3, [sp, #72]	; 0x48
 800e532:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 800e536:	f20a 4e44 	addw	lr, sl, #1092	; 0x444
 800e53a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e53c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800e540:	f20a 4004 	addw	r0, sl, #1028	; 0x404
 800e544:	f50a 6582 	add.w	r5, sl, #1040	; 0x410
 800e548:	f50a 6e89 	add.w	lr, sl, #1096	; 0x448
 800e54c:	2600      	movs	r6, #0
 800e54e:	9013      	str	r0, [sp, #76]	; 0x4c
 800e550:	9514      	str	r5, [sp, #80]	; 0x50
 800e552:	f20a 4014 	addw	r0, sl, #1044	; 0x414
 800e556:	f50a 6583 	add.w	r5, sl, #1048	; 0x418
 800e55a:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 800e55e:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800e562:	f20a 4e4c 	addw	lr, sl, #1100	; 0x44c
 800e566:	f8ca 43d4 	str.w	r4, [sl, #980]	; 0x3d4
 800e56a:	f8ca 63c4 	str.w	r6, [sl, #964]	; 0x3c4
 800e56e:	f8ca 63c8 	str.w	r6, [sl, #968]	; 0x3c8
 800e572:	f8ca 63cc 	str.w	r6, [sl, #972]	; 0x3cc
 800e576:	f8ca 63d0 	str.w	r6, [sl, #976]	; 0x3d0
 800e57a:	9015      	str	r0, [sp, #84]	; 0x54
 800e57c:	607c      	str	r4, [r7, #4]
 800e57e:	60bc      	str	r4, [r7, #8]
 800e580:	9516      	str	r5, [sp, #88]	; 0x58
 800e582:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800e586:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800e58a:	f8ca 43e0 	str.w	r4, [sl, #992]	; 0x3e0
 800e58e:	f8ca 43e4 	str.w	r4, [sl, #996]	; 0x3e4
 800e592:	f8ca 43e8 	str.w	r4, [sl, #1000]	; 0x3e8
 800e596:	f8ca 43ec 	str.w	r4, [sl, #1004]	; 0x3ec
 800e59a:	f8ca 43f0 	str.w	r4, [sl, #1008]	; 0x3f0
 800e59e:	f8ca 43f4 	str.w	r4, [sl, #1012]	; 0x3f4
 800e5a2:	f8ca 43f8 	str.w	r4, [sl, #1016]	; 0x3f8
 800e5a6:	f8ca 43fc 	str.w	r4, [sl, #1020]	; 0x3fc
 800e5aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e5ac:	f8ca 4400 	str.w	r4, [sl, #1024]	; 0x400
 800e5b0:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 800e5b4:	601e      	str	r6, [r3, #0]
 800e5b6:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 800e5ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5bc:	f8c8 6000 	str.w	r6, [r8]
 800e5c0:	f8c9 6000 	str.w	r6, [r9]
 800e5c4:	601e      	str	r6, [r3, #0]
 800e5c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5c8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800e5ca:	601e      	str	r6, [r3, #0]
 800e5cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5ce:	601e      	str	r6, [r3, #0]
 800e5d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5d2:	f50a 6084 	add.w	r0, sl, #1056	; 0x420
 800e5d6:	601e      	str	r6, [r3, #0]
 800e5d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e5da:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800e5de:	f8c0 c000 	str.w	ip, [r0]
 800e5e2:	601e      	str	r6, [r3, #0]
 800e5e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e5e6:	603e      	str	r6, [r7, #0]
 800e5e8:	601e      	str	r6, [r3, #0]
 800e5ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e5ee:	601e      	str	r6, [r3, #0]
 800e5f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5f2:	603e      	str	r6, [r7, #0]
 800e5f4:	601e      	str	r6, [r3, #0]
 800e5f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e5fa:	f8c3 b000 	str.w	fp, [r3]
 800e5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e600:	ed87 8a00 	vstr	s16, [r7]
 800e604:	601e      	str	r6, [r3, #0]
 800e606:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e608:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800e60a:	f8c3 b000 	str.w	fp, [r3]
 800e60e:	2532      	movs	r5, #50	; 0x32
 800e610:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e612:	603e      	str	r6, [r7, #0]
 800e614:	f8ca 4450 	str.w	r4, [sl, #1104]	; 0x450
 800e618:	f8ca 4454 	str.w	r4, [sl, #1108]	; 0x454
 800e61c:	f8ca 445c 	str.w	r4, [sl, #1116]	; 0x45c
 800e620:	f8ca 5458 	str.w	r5, [sl, #1112]	; 0x458
 800e624:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e628:	ab74      	add	r3, sp, #464	; 0x1d0
 800e62a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e630:	f8d3 b000 	ldr.w	fp, [r3]
 800e634:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800e638:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800e63c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e63e:	ac77      	add	r4, sp, #476	; 0x1dc
 800e640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e644:	9a08      	ldr	r2, [sp, #32]
 800e646:	ca07      	ldmia	r2, {r0, r1, r2}
 800e648:	ac7a      	add	r4, sp, #488	; 0x1e8
 800e64a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e64e:	68de      	ldr	r6, [r3, #12]
 800e650:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e652:	691d      	ldr	r5, [r3, #16]
 800e654:	695c      	ldr	r4, [r3, #20]
 800e656:	6998      	ldr	r0, [r3, #24]
 800e658:	69d9      	ldr	r1, [r3, #28]
 800e65a:	6a1a      	ldr	r2, [r3, #32]
 800e65c:	f8cd 9010 	str.w	r9, [sp, #16]
 800e660:	463b      	mov	r3, r7
 800e662:	46c1      	mov	r9, r8
 800e664:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 800e668:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800e66c:	9735      	str	r7, [sp, #212]	; 0xd4
 800e66e:	f8c3 b000 	str.w	fp, [r3]
 800e672:	f8c3 e004 	str.w	lr, [r3, #4]
 800e676:	f8c3 c008 	str.w	ip, [r3, #8]
 800e67a:	60de      	str	r6, [r3, #12]
 800e67c:	611d      	str	r5, [r3, #16]
 800e67e:	615c      	str	r4, [r3, #20]
 800e680:	6198      	str	r0, [r3, #24]
 800e682:	61d9      	str	r1, [r3, #28]
 800e684:	621a      	str	r2, [r3, #32]
 800e686:	3324      	adds	r3, #36	; 0x24
 800e688:	42bb      	cmp	r3, r7
 800e68a:	d1f0      	bne.n	800e66e <m_kalman_3gyro.isra.6.constprop.36+0xffe>
 800e68c:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 800e690:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	ed9d ca40 	vldr	s24, [sp, #256]	; 0x100
 800e69a:	eddd ba3f 	vldr	s23, [sp, #252]	; 0xfc
 800e69e:	eddd 9a3e 	vldr	s19, [sp, #248]	; 0xf8
 800e6a2:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 800e6a6:	eddd aa42 	vldr	s21, [sp, #264]	; 0x108
 800e6aa:	ed9d aa43 	vldr	s20, [sp, #268]	; 0x10c
 800e6ae:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 800e6b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e6b6:	601a      	str	r2, [r3, #0]
 800e6b8:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 800e6c2:	46c8      	mov	r8, r9
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 800e6ca:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800e6ce:	6898      	ldr	r0, [r3, #8]
 800e6d0:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	6010      	str	r0, [r2, #0]
 800e6d8:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 800e6dc:	f8ca 38a6 	str.w	r3, [sl, #2214]	; 0x8a6
 800e6e0:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 800e6e4:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 800e6e8:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 800e6ec:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 800e6f0:	f7ff b8f8 	b.w	800d8e4 <m_kalman_3gyro.isra.6.constprop.36+0x274>
 800e6f4:	3f666666 	.word	0x3f666666
 800e6f8:	40a00000 	.word	0x40a00000
 800e6fc:	ed9a 7b02 	vldr	d7, [sl, #8]
 800e700:	f50a 620c 	add.w	r2, sl, #2240	; 0x8c0
 800e704:	4614      	mov	r4, r2
 800e706:	2301      	movs	r3, #1
 800e708:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 800e70c:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 800e710:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800e714:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 800e718:	9201      	str	r2, [sp, #4]
 800e71a:	ed86 8a00 	vstr	s16, [r6]
 800e71e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 800e722:	ed87 8a00 	vstr	s16, [r7]
 800e726:	ed84 8a00 	vstr	s16, [r4]
 800e72a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e72e:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 800e732:	f7f1 fdc3 	bl	80002bc <__adddf3>
 800e736:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 800e73a:	461c      	mov	r4, r3
 800e73c:	9304      	str	r3, [sp, #16]
 800e73e:	ed89 8a00 	vstr	s16, [r9]
 800e742:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 800e746:	f7f1 fdb9 	bl	80002bc <__adddf3>
 800e74a:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 800e74e:	ed84 8a00 	vstr	s16, [r4]
 800e752:	f7f1 fdb3 	bl	80002bc <__adddf3>
 800e756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e75a:	f7f1 fdaf 	bl	80002bc <__adddf3>
 800e75e:	4602      	mov	r2, r0
 800e760:	460b      	mov	r3, r1
 800e762:	2000      	movs	r0, #0
 800e764:	4973      	ldr	r1, [pc, #460]	; (800e934 <m_kalman_3gyro.isra.6.constprop.36+0x12c4>)
 800e766:	f7f2 f889 	bl	800087c <__aeabi_ddiv>
 800e76a:	4604      	mov	r4, r0
 800e76c:	460d      	mov	r5, r1
 800e76e:	4602      	mov	r2, r0
 800e770:	460b      	mov	r3, r1
 800e772:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 800e776:	f7f1 ff57 	bl	8000628 <__aeabi_dmul>
 800e77a:	4622      	mov	r2, r4
 800e77c:	462b      	mov	r3, r5
 800e77e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e782:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800e786:	f7f1 ff4f 	bl	8000628 <__aeabi_dmul>
 800e78a:	4622      	mov	r2, r4
 800e78c:	462b      	mov	r3, r5
 800e78e:	e9ca 0104 	strd	r0, r1, [sl, #16]
 800e792:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 800e796:	f7f1 ff47 	bl	8000628 <__aeabi_dmul>
 800e79a:	4622      	mov	r2, r4
 800e79c:	462b      	mov	r3, r5
 800e79e:	e9ca 0106 	strd	r0, r1, [sl, #24]
 800e7a2:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 800e7a6:	f7f1 ff3f 	bl	8000628 <__aeabi_dmul>
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	e9ca 0108 	strd	r0, r1, [sl, #32]
 800e7b0:	462b      	mov	r3, r5
 800e7b2:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 800e7b6:	f7f1 ff37 	bl	8000628 <__aeabi_dmul>
 800e7ba:	9c01      	ldr	r4, [sp, #4]
 800e7bc:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 800e7c0:	e50b      	b.n	800e1da <m_kalman_3gyro.isra.6.constprop.36+0xb6a>
 800e7c2:	eddd 5ad1 	vldr	s11, [sp, #836]	; 0x344
 800e7c6:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 800e7ca:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 800e7ce:	eddd 4ab9 	vldr	s9, [sp, #740]	; 0x2e4
 800e7d2:	ed9d 5ad3 	vldr	s10, [sp, #844]	; 0x34c
 800e7d6:	eddd 6ab6 	vldr	s13, [sp, #728]	; 0x2d8
 800e7da:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 800e7de:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 800e7e2:	ee65 5aa8 	vmul.f32	s11, s11, s17
 800e7e6:	ee26 6a28 	vmul.f32	s12, s12, s17
 800e7ea:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e7ee:	edcd 5ad1 	vstr	s11, [sp, #836]	; 0x344
 800e7f2:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 800e7f6:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 800e7fa:	ed9d 6ad4 	vldr	s12, [sp, #848]	; 0x350
 800e7fe:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 800e802:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 800e806:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800e80a:	ee25 5a28 	vmul.f32	s10, s10, s17
 800e80e:	ee65 5aa8 	vmul.f32	s11, s11, s17
 800e812:	ee26 6a28 	vmul.f32	s12, s12, s17
 800e816:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e81a:	edcd 4ab9 	vstr	s9, [sp, #740]	; 0x2e4
 800e81e:	ed8d 5ad3 	vstr	s10, [sp, #844]	; 0x34c
 800e822:	eddd 4ad5 	vldr	s9, [sp, #852]	; 0x354
 800e826:	ed9d 5abc 	vldr	s10, [sp, #752]	; 0x2f0
 800e82a:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 800e82e:	ed8d 6ad4 	vstr	s12, [sp, #848]	; 0x350
 800e832:	eddd 5ad6 	vldr	s11, [sp, #856]	; 0x358
 800e836:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 800e83a:	edcd 7abb 	vstr	s15, [sp, #748]	; 0x2ec
 800e83e:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 800e842:	ee68 6aa6 	vmul.f32	s13, s17, s13
 800e846:	ee24 4a28 	vmul.f32	s8, s8, s17
 800e84a:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800e84e:	ee25 5a28 	vmul.f32	s10, s10, s17
 800e852:	ee65 5aa8 	vmul.f32	s11, s11, s17
 800e856:	ee26 6a28 	vmul.f32	s12, s12, s17
 800e85a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e85e:	ee28 7a87 	vmul.f32	s14, s17, s14
 800e862:	edcd 4ad5 	vstr	s9, [sp, #852]	; 0x354
 800e866:	ed8d 5abc 	vstr	s10, [sp, #752]	; 0x2f0
 800e86a:	edcd 5ad6 	vstr	s11, [sp, #856]	; 0x358
 800e86e:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 800e872:	edcd 7ad7 	vstr	s15, [sp, #860]	; 0x35c
 800e876:	edcd 6ab6 	vstr	s13, [sp, #728]	; 0x2d8
 800e87a:	ed8d 7ad0 	vstr	s14, [sp, #832]	; 0x340
 800e87e:	ed8d 4ab7 	vstr	s8, [sp, #732]	; 0x2dc
 800e882:	ed9d 4abe 	vldr	s8, [sp, #760]	; 0x2f8
 800e886:	eddd 5ad8 	vldr	s11, [sp, #864]	; 0x360
 800e88a:	ed9d 6abf 	vldr	s12, [sp, #764]	; 0x2fc
 800e88e:	eddd 7ad9 	vldr	s15, [sp, #868]	; 0x364
 800e892:	eddd 4ac0 	vldr	s9, [sp, #768]	; 0x300
 800e896:	ed9d 5ada 	vldr	s10, [sp, #872]	; 0x368
 800e89a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 800e89e:	ee26 6a28 	vmul.f32	s12, s12, s17
 800e8a2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e8a6:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800e8aa:	edcd 5ad8 	vstr	s11, [sp, #864]	; 0x360
 800e8ae:	ed8d 6abf 	vstr	s12, [sp, #764]	; 0x2fc
 800e8b2:	eddd 5ac1 	vldr	s11, [sp, #772]	; 0x304
 800e8b6:	ed9d 6adb 	vldr	s12, [sp, #876]	; 0x36c
 800e8ba:	edcd 7ad9 	vstr	s15, [sp, #868]	; 0x364
 800e8be:	edcd 4ac0 	vstr	s9, [sp, #768]	; 0x300
 800e8c2:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 800e8c6:	eddd 4adc 	vldr	s9, [sp, #880]	; 0x370
 800e8ca:	ee24 4a28 	vmul.f32	s8, s8, s17
 800e8ce:	ee25 5a28 	vmul.f32	s10, s10, s17
 800e8d2:	ee65 5aa8 	vmul.f32	s11, s11, s17
 800e8d6:	ee26 6a28 	vmul.f32	s12, s12, s17
 800e8da:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800e8de:	eeb4 8ae6 	vcmpe.f32	s16, s13
 800e8e2:	ee68 8aa4 	vmul.f32	s17, s17, s9
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	ed8d 4abe 	vstr	s8, [sp, #760]	; 0x2f8
 800e8ee:	ed8d 5ada 	vstr	s10, [sp, #872]	; 0x368
 800e8f2:	edcd 5ac1 	vstr	s11, [sp, #772]	; 0x304
 800e8f6:	ed8d 6adb 	vstr	s12, [sp, #876]	; 0x36c
 800e8fa:	edcd 7ac2 	vstr	s15, [sp, #776]	; 0x308
 800e8fe:	edcd 8adc 	vstr	s17, [sp, #880]	; 0x370
 800e902:	f302 8098 	bgt.w	8010a36 <m_kalman_3gyro.isra.6.constprop.36+0x33c6>
 800e906:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 800e90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e90c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e914:	edc3 7a00 	vstr	s15, [r3]
 800e918:	f342 80a3 	ble.w	8010a62 <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 800e91c:	eef4 8ac8 	vcmpe.f32	s17, s16
 800e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e924:	f302 8471 	bgt.w	801120a <m_kalman_3gyro.isra.6.constprop.36+0x3b9a>
 800e928:	ed9d 7ae9 	vldr	s14, [sp, #932]	; 0x3a4
 800e92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e92e:	ed83 7a00 	vstr	s14, [r3]
 800e932:	e009      	b.n	800e948 <m_kalman_3gyro.isra.6.constprop.36+0x12d8>
 800e934:	3ff00000 	.word	0x3ff00000
 800e938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e93a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e93e:	edc3 7a00 	vstr	s15, [r3]
 800e942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e944:	edc3 7a00 	vstr	s15, [r3]
 800e948:	4bd1      	ldr	r3, [pc, #836]	; (800ec90 <m_kalman_3gyro.isra.6.constprop.36+0x1620>)
 800e94a:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 800e94e:	edd3 8a00 	vldr	s17, [r3]
 800e952:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e954:	f8df 934c 	ldr.w	r9, [pc, #844]	; 800eca4 <m_kalman_3gyro.isra.6.constprop.36+0x1634>
 800e958:	edc3 7a00 	vstr	s15, [r3]
 800e95c:	ee78 7ac7 	vsub.f32	s15, s17, s14
 800e960:	eef0 7ae7 	vabs.f32	s15, s15
 800e964:	ee17 0a90 	vmov	r0, s15
 800e968:	f7f1 fe06 	bl	8000578 <__aeabi_f2d>
 800e96c:	f005 fd50 	bl	8014410 <floor>
 800e970:	f7f2 f90a 	bl	8000b88 <__aeabi_d2iz>
 800e974:	f8dd 36d4 	ldr.w	r3, [sp, #1748]	; 0x6d4
 800e978:	7018      	strb	r0, [r3, #0]
 800e97a:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 800e97e:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 800e982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e984:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e988:	ee7d 7a67 	vsub.f32	s15, s26, s15
 800e98c:	eeb0 7ac7 	vabs.f32	s14, s14
 800e990:	eef0 7ae7 	vabs.f32	s15, s15
 800e994:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e998:	ed89 7a00 	vstr	s14, [r9]
 800e99c:	edc3 7a00 	vstr	s15, [r3]
 800e9a0:	ee17 0a90 	vmov	r0, s15
 800e9a4:	edcd 7a01 	vstr	s15, [sp, #4]
 800e9a8:	f7f1 fde6 	bl	8000578 <__aeabi_f2d>
 800e9ac:	a3b6      	add	r3, pc, #728	; (adr r3, 800ec88 <m_kalman_3gyro.isra.6.constprop.36+0x1618>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f2 f8c9 	bl	8000b48 <__aeabi_dcmpgt>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f001 82ae 	beq.w	800ff18 <m_kalman_3gyro.isra.6.constprop.36+0x28a8>
 800e9bc:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800ec94 <m_kalman_3gyro.isra.6.constprop.36+0x1624>
 800e9c0:	eddd 7a01 	vldr	s15, [sp, #4]
 800e9c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e9cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9d0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e9d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9dc:	f301 86af 	bgt.w	801073e <m_kalman_3gyro.isra.6.constprop.36+0x30ce>
 800e9e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9e8:	ee17 0a90 	vmov	r0, s15
 800e9ec:	f7f1 fdc4 	bl	8000578 <__aeabi_f2d>
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	460d      	mov	r5, r1
 800e9f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e9f8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800e9fc:	eef0 7ae7 	vabs.f32	s15, s15
 800ea00:	ee17 0a90 	vmov	r0, s15
 800ea04:	f7f1 fdb8 	bl	8000578 <__aeabi_f2d>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4ba3      	ldr	r3, [pc, #652]	; (800ec98 <m_kalman_3gyro.isra.6.constprop.36+0x1628>)
 800ea0c:	f7f1 fc54 	bl	80002b8 <__aeabi_dsub>
 800ea10:	4622      	mov	r2, r4
 800ea12:	462b      	mov	r3, r5
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	f7f2 f88c 	bl	8000b34 <__aeabi_dcmpge>
 800ea1c:	b908      	cbnz	r0, 800ea22 <m_kalman_3gyro.isra.6.constprop.36+0x13b2>
 800ea1e:	4626      	mov	r6, r4
 800ea20:	462f      	mov	r7, r5
 800ea22:	4630      	mov	r0, r6
 800ea24:	4639      	mov	r1, r7
 800ea26:	f7f2 f8d7 	bl	8000bd8 <__aeabi_d2f>
 800ea2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea2c:	6018      	str	r0, [r3, #0]
 800ea2e:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 800ea32:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800ea36:	9001      	str	r0, [sp, #4]
 800ea38:	b17b      	cbz	r3, 800ea5a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 800ea3a:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 800ea3e:	b963      	cbnz	r3, 800ea5a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 800ea40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ea46:	ee6f 7aa7 	vmul.f32	s15, s31, s15
 800ea4a:	ed93 7a00 	vldr	s14, [r3]
 800ea4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea56:	f101 879b 	bmi.w	8010990 <m_kalman_3gyro.isra.6.constprop.36+0x3320>
 800ea5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5c:	edd3 7a00 	vldr	s15, [r3]
 800ea60:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea68:	f04f 0400 	mov.w	r4, #0
 800ea6c:	d10f      	bne.n	800ea8e <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 800ea6e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea72:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	d107      	bne.n	800ea8e <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 800ea7e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ea82:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8a:	f001 872a 	beq.w	80108e2 <m_kalman_3gyro.isra.6.constprop.36+0x3272>
 800ea8e:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 800ea92:	2200      	movs	r2, #0
 800ea94:	2300      	movs	r3, #0
 800ea96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea9a:	f7f2 f82d 	bl	8000af8 <__aeabi_dcmpeq>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d144      	bne.n	800eb2c <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 800eaa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eaa4:	ee7f faaf 	vadd.f32	s31, s31, s31
 800eaa8:	edd3 7a00 	vldr	s15, [r3]
 800eaac:	eef4 7aef 	vcmpe.f32	s15, s31
 800eab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab4:	d53a      	bpl.n	800eb2c <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 800eab6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800eaba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eabc:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 800eac0:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 800eac4:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 800eac8:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 800eacc:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 800ead0:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 800ead4:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 800ead8:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 800eadc:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 800eae0:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 800eae4:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 800eae8:	9801      	ldr	r0, [sp, #4]
 800eaea:	f7fa fc5f 	bl	80093ac <m_dcm2q_eml>
 800eaee:	f8dd 16dc 	ldr.w	r1, [sp, #1756]	; 0x6dc
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	700a      	strb	r2, [r1, #0]
 800eaf8:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 800eafc:	edca 8a2d 	vstr	s17, [sl, #180]	; 0xb4
 800eb00:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 800eb04:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 800eb08:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 800eb0c:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 800eb10:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 800eb14:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 800eb18:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 800eb1c:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 800eb20:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 800eb24:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 800eb28:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
 800eb32:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 800eb36:	f8ca 309c 	str.w	r3, [sl, #156]	; 0x9c
 800eb3a:	9901      	ldr	r1, [sp, #4]
 800eb3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb3e:	f7fa fab5 	bl	80090ac <m_q2dcm_eml>
 800eb42:	edda 9a2b 	vldr	s19, [sl, #172]	; 0xac
 800eb46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb4a:	eee9 7ae9 	vfms.f32	s15, s19, s19
 800eb4e:	ee17 0a90 	vmov	r0, s15
 800eb52:	f7f1 fd11 	bl	8000578 <__aeabi_f2d>
 800eb56:	f005 fdf1 	bl	801473c <sqrt>
 800eb5a:	f7f2 f83d 	bl	8000bd8 <__aeabi_d2f>
 800eb5e:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 800eb62:	edda 7a10 	vldr	s15, [sl, #64]	; 0x40
 800eb66:	edda 5a15 	vldr	s11, [sl, #84]	; 0x54
 800eb6a:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 800eb6e:	edda 4a13 	vldr	s9, [sl, #76]	; 0x4c
 800eb72:	ed9a 5a16 	vldr	s10, [sl, #88]	; 0x58
 800eb76:	eddd 3a57 	vldr	s7, [sp, #348]	; 0x15c
 800eb7a:	ed9d 4a58 	vldr	s8, [sp, #352]	; 0x160
 800eb7e:	ed8a da22 	vstr	s26, [sl, #136]	; 0x88
 800eb82:	ee06 0a10 	vmov	s12, r0
 800eb86:	ee29 7a83 	vmul.f32	s14, s19, s6
 800eb8a:	ee69 6aa5 	vmul.f32	s13, s19, s11
 800eb8e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800eb92:	ee69 7aa2 	vmul.f32	s15, s19, s5
 800eb96:	eee6 6a24 	vfma.f32	s13, s12, s9
 800eb9a:	eee6 7a05 	vfma.f32	s15, s12, s10
 800eb9e:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800eba2:	ed9d 5a5b 	vldr	s10, [sp, #364]	; 0x16c
 800eba6:	eddd 4a59 	vldr	s9, [sp, #356]	; 0x164
 800ebaa:	ed8a 7a82 	vstr	s14, [sl, #520]	; 0x208
 800ebae:	ee35 5a65 	vsub.f32	s10, s10, s11
 800ebb2:	ed9d 6a5a 	vldr	s12, [sp, #360]	; 0x168
 800ebb6:	eddd 5a5c 	vldr	s11, [sp, #368]	; 0x170
 800ebba:	edca 3a19 	vstr	s7, [sl, #100]	; 0x64
 800ebbe:	ed9a 7a2c 	vldr	s14, [sl, #176]	; 0xb0
 800ebc2:	eddf 3a36 	vldr	s7, [pc, #216]	; 800ec9c <m_kalman_3gyro.isra.6.constprop.36+0x162c>
 800ebc6:	ed8a 9a23 	vstr	s18, [sl, #140]	; 0x8c
 800ebca:	ee34 4a66 	vsub.f32	s8, s8, s13
 800ebce:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800ebd2:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800ebd6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ebda:	eeb4 7ae3 	vcmpe.f32	s14, s7
 800ebde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe2:	edca 8a24 	vstr	s17, [sl, #144]	; 0x90
 800ebe6:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 800ebea:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 800ebee:	edca 7a84 	vstr	s15, [sl, #528]	; 0x210
 800ebf2:	edca 4a1b 	vstr	s9, [sl, #108]	; 0x6c
 800ebf6:	ed8a 5a1d 	vstr	s10, [sl, #116]	; 0x74
 800ebfa:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 800ebfe:	ed8a 6a1c 	vstr	s12, [sl, #112]	; 0x70
 800ec02:	f141 8147 	bpl.w	800fe94 <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 800ec06:	eddf 7a26 	vldr	s15, [pc, #152]	; 800eca0 <m_kalman_3gyro.isra.6.constprop.36+0x1630>
 800ec0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec12:	f341 813f 	ble.w	800fe94 <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 800ec16:	ee79 7a47 	vsub.f32	s15, s18, s14
 800ec1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec1c:	eef0 7ae7 	vabs.f32	s15, s15
 800ec20:	edc3 7a00 	vstr	s15, [r3]
 800ec24:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800ec28:	ed9d 7a98 	vldr	s14, [sp, #608]	; 0x260
 800ec2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec36:	edc3 7a00 	vstr	s15, [r3]
 800ec3a:	f341 8167 	ble.w	800ff0c <m_kalman_3gyro.isra.6.constprop.36+0x289c>
 800ec3e:	ed9d 7aa1 	vldr	s14, [sp, #644]	; 0x284
 800ec42:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4a:	f102 813d 	bmi.w	8010ec8 <m_kalman_3gyro.isra.6.constprop.36+0x3858>
 800ec4e:	eddd 8aab 	vldr	s17, [sp, #684]	; 0x2ac
 800ec52:	ed9d 9ab5 	vldr	s18, [sp, #724]	; 0x2d4
 800ec56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec58:	ed9d 7a5d 	vldr	s14, [sp, #372]	; 0x174
 800ec5c:	edd3 7a00 	vldr	s15, [r3]
 800ec60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	f341 856d 	ble.w	8010746 <m_kalman_3gyro.isra.6.constprop.36+0x30d6>
 800ec6c:	ed9d 7a63 	vldr	s14, [sp, #396]	; 0x18c
 800ec70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec78:	f142 8150 	bpl.w	8010f1c <m_kalman_3gyro.isra.6.constprop.36+0x38ac>
 800ec7c:	2007      	movs	r0, #7
 800ec7e:	2402      	movs	r4, #2
 800ec80:	2101      	movs	r1, #1
 800ec82:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 800ec86:	e021      	b.n	800eccc <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 800ec88:	9999999a 	.word	0x9999999a
 800ec8c:	3fb99999 	.word	0x3fb99999
 800ec90:	20001bbc 	.word	0x20001bbc
 800ec94:	3dcccccd 	.word	0x3dcccccd
 800ec98:	3fe00000 	.word	0x3fe00000
 800ec9c:	3f99999a 	.word	0x3f99999a
 800eca0:	3f4ccccd 	.word	0x3f4ccccd
 800eca4:	20001bcc 	.word	0x20001bcc
 800eca8:	00000000 	.word	0x00000000
 800ecac:	3d088889 	.word	0x3d088889
 800ecb0:	42480000 	.word	0x42480000
 800ecb4:	3c23d70a 	.word	0x3c23d70a
 800ecb8:	ed93 7a00 	vldr	s14, [r3]
 800ecbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	bfb8      	it	lt
 800ecc6:	4610      	movlt	r0, r2
 800ecc8:	f282 80fa 	bge.w	8010ec0 <m_kalman_3gyro.isra.6.constprop.36+0x3850>
 800eccc:	1842      	adds	r2, r0, r1
 800ecce:	0852      	lsrs	r2, r2, #1
 800ecd0:	1953      	adds	r3, r2, r5
 800ecd2:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 800ecd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ecda:	42a0      	cmp	r0, r4
 800ecdc:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800ece0:	d8ea      	bhi.n	800ecb8 <m_kalman_3gyro.isra.6.constprop.36+0x1648>
 800ece2:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800ece6:	3b01      	subs	r3, #1
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	0089      	lsls	r1, r1, #2
 800ecec:	aa5d      	add	r2, sp, #372	; 0x174
 800ecee:	18d0      	adds	r0, r2, r3
 800ecf0:	440a      	add	r2, r1
 800ecf2:	edd0 6a00 	vldr	s13, [r0]
 800ecf6:	ed92 7a00 	vldr	s14, [r2]
 800ecfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ecfe:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ed02:	aa64      	add	r2, sp, #400	; 0x190
 800ed04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ed08:	4413      	add	r3, r2
 800ed0a:	4411      	add	r1, r2
 800ed0c:	edd3 9a00 	vldr	s19, [r3]
 800ed10:	edd1 7a00 	vldr	s15, [r1]
 800ed14:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800ed18:	eee6 9aa7 	vfma.f32	s19, s13, s15
 800ed1c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ed1e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800ed20:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 800eca8 <m_kalman_3gyro.isra.6.constprop.36+0x1638>
 800ed24:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800ed26:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 800ed2a:	462e      	mov	r6, r5
 800ed2c:	eef0 6a67 	vmov.f32	s13, s15
 800ed30:	eeb0 6a67 	vmov.f32	s12, s15
 800ed34:	eef0 5a67 	vmov.f32	s11, s15
 800ed38:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 800ed3c:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 800ed40:	ed95 7a06 	vldr	s14, [r5, #24]
 800ed44:	edd3 7a00 	vldr	s15, [r3]
 800ed48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed4c:	3524      	adds	r5, #36	; 0x24
 800ed4e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ed52:	330c      	adds	r3, #12
 800ed54:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 800ed58:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ed5c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ed60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed64:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ed68:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 800ed6c:	ed15 7a01 	vldr	s14, [r5, #-4]
 800ed70:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ed74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed78:	42aa      	cmp	r2, r5
 800ed7a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ed7e:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 800ed82:	d1dd      	bne.n	800ed40 <m_kalman_3gyro.isra.6.constprop.36+0x16d0>
 800ed84:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 800ecac <m_kalman_3gyro.isra.6.constprop.36+0x163c>
 800ed88:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ed8a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ed8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ed92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ed96:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 800ed9a:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 800ed9e:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 800eda2:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	6859      	ldr	r1, [r3, #4]
 800edaa:	625a      	str	r2, [r3, #36]	; 0x24
 800edac:	689a      	ldr	r2, [r3, #8]
 800edae:	6299      	str	r1, [r3, #40]	; 0x28
 800edb0:	62da      	str	r2, [r3, #44]	; 0x2c
 800edb2:	68d9      	ldr	r1, [r3, #12]
 800edb4:	691a      	ldr	r2, [r3, #16]
 800edb6:	6319      	str	r1, [r3, #48]	; 0x30
 800edb8:	635a      	str	r2, [r3, #52]	; 0x34
 800edba:	6959      	ldr	r1, [r3, #20]
 800edbc:	699a      	ldr	r2, [r3, #24]
 800edbe:	6399      	str	r1, [r3, #56]	; 0x38
 800edc0:	63da      	str	r2, [r3, #60]	; 0x3c
 800edc2:	69d9      	ldr	r1, [r3, #28]
 800edc4:	6a1a      	ldr	r2, [r3, #32]
 800edc6:	6419      	str	r1, [r3, #64]	; 0x40
 800edc8:	645a      	str	r2, [r3, #68]	; 0x44
 800edca:	3b24      	subs	r3, #36	; 0x24
 800edcc:	4298      	cmp	r0, r3
 800edce:	d1ea      	bne.n	800eda6 <m_kalman_3gyro.isra.6.constprop.36+0x1736>
 800edd0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800edd2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800edd4:	6813      	ldr	r3, [r2, #0]
 800edd6:	600b      	str	r3, [r1, #0]
 800edd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edda:	982b      	ldr	r0, [sp, #172]	; 0xac
 800eddc:	680b      	ldr	r3, [r1, #0]
 800edde:	6003      	str	r3, [r0, #0]
 800ede0:	9808      	ldr	r0, [sp, #32]
 800ede2:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800ede4:	6803      	ldr	r3, [r0, #0]
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800edea:	6853      	ldr	r3, [r2, #4]
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800edf0:	684b      	ldr	r3, [r1, #4]
 800edf2:	6023      	str	r3, [r4, #0]
 800edf4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800edf6:	6843      	ldr	r3, [r0, #4]
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	6893      	ldr	r3, [r2, #8]
 800edfc:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800ee02:	688b      	ldr	r3, [r1, #8]
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ee08:	6883      	ldr	r3, [r0, #8]
 800ee0a:	6013      	str	r3, [r2, #0]
 800ee0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	f001 808c 	beq.w	800ff2c <m_kalman_3gyro.isra.6.constprop.36+0x28bc>
 800ee14:	eeb4 eaed 	vcmpe.f32	s28, s27
 800ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1c:	f301 815e 	bgt.w	80100dc <m_kalman_3gyro.isra.6.constprop.36+0x2a6c>
 800ee20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f041 8634 	bne.w	8010a90 <m_kalman_3gyro.isra.6.constprop.36+0x3420>
 800ee28:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 800ee2c:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 800ee30:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 800ee34:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 800ee38:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
 800ee3c:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 800ee40:	2300      	movs	r3, #0
 800ee42:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 800ee46:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 800ee4a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 800ee4e:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 800ee52:	2a00      	cmp	r2, #0
 800ee54:	f001 8050 	beq.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 800ee58:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 800ee5c:	ac86      	add	r4, sp, #536	; 0x218
 800ee5e:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 800ecb0 <m_kalman_3gyro.isra.6.constprop.36+0x1640>
 800ee62:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800ee66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6a:	f2c1 801e 	blt.w	800feaa <m_kalman_3gyro.isra.6.constprop.36+0x283a>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 800ee74:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 800ee78:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 800ee7c:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800ee80:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ee82:	ed93 5a08 	vldr	s10, [r3, #32]
 800ee86:	edd3 3a06 	vldr	s7, [r3, #24]
 800ee8a:	ed93 4a07 	vldr	s8, [r3, #28]
 800ee8e:	edd3 4a00 	vldr	s9, [r3]
 800ee92:	edd3 5a01 	vldr	s11, [r3, #4]
 800ee96:	ed93 2a02 	vldr	s4, [r3, #8]
 800ee9a:	edd3 6a03 	vldr	s13, [r3, #12]
 800ee9e:	ed93 7a04 	vldr	s14, [r3, #16]
 800eea2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800eea6:	edd3 2a05 	vldr	s5, [r3, #20]
 800eeaa:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800eeae:	ed1f 3a7f 	vldr	s6, [pc, #-508]	; 800ecb4 <m_kalman_3gyro.isra.6.constprop.36+0x1644>
 800eeb2:	ee24 4a09 	vmul.f32	s8, s8, s18
 800eeb6:	ee63 3a89 	vmul.f32	s7, s7, s18
 800eeba:	ee25 9a09 	vmul.f32	s18, s10, s18
 800eebe:	ed83 4a07 	vstr	s8, [r3, #28]
 800eec2:	edc3 3a06 	vstr	s7, [r3, #24]
 800eec6:	ed83 9a08 	vstr	s18, [r3, #32]
 800eeca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eecc:	ed91 6a00 	vldr	s12, [r1]
 800eed0:	ed93 4a00 	vldr	s8, [r3]
 800eed4:	ee24 4a06 	vmul.f32	s8, s8, s12
 800eed8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800eedc:	ee64 4a84 	vmul.f32	s9, s9, s8
 800eee0:	ee38 5a85 	vadd.f32	s10, s17, s10
 800eee4:	edc2 4a00 	vstr	s9, [r2]
 800eee8:	edd3 4a00 	vldr	s9, [r3]
 800eeec:	ed91 6a00 	vldr	s12, [r1]
 800eef0:	ee64 4a86 	vmul.f32	s9, s9, s12
 800eef4:	460a      	mov	r2, r1
 800eef6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800eefa:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 800eefe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800ef02:	edc1 5a01 	vstr	s11, [r1, #4]
 800ef06:	edd3 5a00 	vldr	s11, [r3]
 800ef0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef0c:	eec6 4a05 	vdiv.f32	s9, s12, s10
 800ef10:	ed92 6a00 	vldr	s12, [r2]
 800ef14:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ef18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ef1c:	ee22 6a06 	vmul.f32	s12, s4, s12
 800ef20:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800ef24:	ed81 6a02 	vstr	s12, [r1, #8]
 800ef28:	ed93 6a00 	vldr	s12, [r3]
 800ef2c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ef30:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ef34:	edc1 6a03 	vstr	s13, [r1, #12]
 800ef38:	edd3 6a00 	vldr	s13, [r3]
 800ef3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	ed81 7a04 	vstr	s14, [r1, #16]
 800ef48:	ed93 7a00 	vldr	s14, [r3]
 800ef4c:	edc1 7a09 	vstr	s15, [r1, #36]	; 0x24
 800ef50:	ee62 7a87 	vmul.f32	s15, s5, s14
 800ef54:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800ef58:	edc1 7a05 	vstr	s15, [r1, #20]
 800ef5c:	edd3 7a06 	vldr	s15, [r3, #24]
 800ef60:	bfb8      	it	lt
 800ef62:	eef0 4a43 	vmovlt.f32	s9, s6
 800ef66:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ef6a:	edc3 7a06 	vstr	s15, [r3, #24]
 800ef6e:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800ef72:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800ef76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ef7a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800ef7e:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 800ef82:	edd3 7a07 	vldr	s15, [r3, #28]
 800ef86:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ef8a:	edc3 7a07 	vstr	s15, [r3, #28]
 800ef8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ef90:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800ef94:	ed93 7a00 	vldr	s14, [r3]
 800ef98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ef9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef9e:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
 800efa2:	b3cb      	cbz	r3, 800f018 <m_kalman_3gyro.isra.6.constprop.36+0x19a8>
 800efa4:	edd1 7a03 	vldr	s15, [r1, #12]
 800efa8:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800efac:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800efb0:	edc1 7a03 	vstr	s15, [r1, #12]
 800efb4:	edd3 7a00 	vldr	s15, [r3]
 800efb8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800efbc:	edc3 7a00 	vstr	s15, [r3]
 800efc0:	edd1 7a04 	vldr	s15, [r1, #16]
 800efc4:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800efc8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800efcc:	edc1 7a04 	vstr	s15, [r1, #16]
 800efd0:	edd3 7a01 	vldr	s15, [r3, #4]
 800efd4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800efd8:	edc3 7a01 	vstr	s15, [r3, #4]
 800efdc:	edd1 7a05 	vldr	s15, [r1, #20]
 800efe0:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800efe4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800efe8:	edc1 7a05 	vstr	s15, [r1, #20]
 800efec:	edd3 7a02 	vldr	s15, [r3, #8]
 800eff0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800eff4:	edc3 7a02 	vstr	s15, [r3, #8]
 800eff8:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800effc:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800f000:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f004:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800f008:	edc1 8a0a 	vstr	s17, [r1, #40]	; 0x28
 800f00c:	edd3 7a07 	vldr	s15, [r3, #28]
 800f010:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800f014:	edc3 7a07 	vstr	s15, [r3, #28]
 800f018:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 800f01c:	ed9a 3a2e 	vldr	s6, [sl, #184]	; 0xb8
 800f020:	edd3 2a00 	vldr	s5, [r3]
 800f024:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
 800f028:	edda 3a38 	vldr	s7, [sl, #224]	; 0xe0
 800f02c:	ed9a 4a42 	vldr	s8, [sl, #264]	; 0x108
 800f030:	edda 4a4c 	vldr	s9, [sl, #304]	; 0x130
 800f034:	ed9a 5a56 	vldr	s10, [sl, #344]	; 0x158
 800f038:	edda 5a60 	vldr	s11, [sl, #384]	; 0x180
 800f03c:	ed9a 6a6a 	vldr	s12, [sl, #424]	; 0x1a8
 800f040:	edda 6a74 	vldr	s13, [sl, #464]	; 0x1d0
 800f044:	ed9d 2a59 	vldr	s4, [sp, #356]	; 0x164
 800f048:	eddd 7a58 	vldr	s15, [sp, #352]	; 0x160
 800f04c:	ed9a 7a7e 	vldr	s14, [sl, #504]	; 0x1f8
 800f050:	edc4 7a06 	vstr	s15, [r4, #24]
 800f054:	eea2 3aa2 	vfma.f32	s6, s5, s5
 800f058:	2300      	movs	r3, #0
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	eef1 2a42 	vneg.f32	s5, s4
 800f060:	ed8a 3a2e 	vstr	s6, [sl, #184]	; 0xb8
 800f064:	ed92 3a01 	vldr	s6, [r2, #4]
 800f068:	edc4 2a03 	vstr	s5, [r4, #12]
 800f06c:	eee3 3a03 	vfma.f32	s7, s6, s6
 800f070:	eef1 7a67 	vneg.f32	s15, s15
 800f074:	edca 3a38 	vstr	s7, [sl, #224]	; 0xe0
 800f078:	edd2 3a02 	vldr	s7, [r2, #8]
 800f07c:	eea3 4aa3 	vfma.f32	s8, s7, s7
 800f080:	ed8a 4a42 	vstr	s8, [sl, #264]	; 0x108
 800f084:	ed92 4a03 	vldr	s8, [r2, #12]
 800f088:	eee4 4a04 	vfma.f32	s9, s8, s8
 800f08c:	edca 4a4c 	vstr	s9, [sl, #304]	; 0x130
 800f090:	edd2 4a04 	vldr	s9, [r2, #16]
 800f094:	eea4 5aa4 	vfma.f32	s10, s9, s9
 800f098:	ed8a 5a56 	vstr	s10, [sl, #344]	; 0x158
 800f09c:	ed92 5a05 	vldr	s10, [r2, #20]
 800f0a0:	eee5 5a05 	vfma.f32	s11, s10, s10
 800f0a4:	edca 5a60 	vstr	s11, [sl, #384]	; 0x180
 800f0a8:	edd2 5a06 	vldr	s11, [r2, #24]
 800f0ac:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800f0b0:	ed8a 6a6a 	vstr	s12, [sl, #424]	; 0x1a8
 800f0b4:	ed92 6a07 	vldr	s12, [r2, #28]
 800f0b8:	eee6 6a06 	vfma.f32	s13, s12, s12
 800f0bc:	edca 6a74 	vstr	s13, [sl, #464]	; 0x1d0
 800f0c0:	edd2 6a08 	vldr	s13, [r2, #32]
 800f0c4:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 800f0c8:	eddd 5a57 	vldr	s11, [sp, #348]	; 0x15c
 800f0cc:	ed9d 6a5c 	vldr	s12, [sp, #368]	; 0x170
 800f0d0:	edc4 7a02 	vstr	s15, [r4, #8]
 800f0d4:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800f0d8:	6123      	str	r3, [r4, #16]
 800f0da:	6223      	str	r3, [r4, #32]
 800f0dc:	eddd 6a5b 	vldr	s13, [sp, #364]	; 0x16c
 800f0e0:	ed8a 7a7e 	vstr	s14, [sl, #504]	; 0x1f8
 800f0e4:	7812      	ldrb	r2, [r2, #0]
 800f0e6:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 800f0ea:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 800f0ee:	ed9d 7a5a 	vldr	s14, [sp, #360]	; 0x168
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 800f0f8:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 800f0fc:	938f      	str	r3, [sp, #572]	; 0x23c
 800f0fe:	7812      	ldrb	r2, [r2, #0]
 800f100:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 800f104:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 800f108:	9393      	str	r3, [sp, #588]	; 0x24c
 800f10a:	7852      	ldrb	r2, [r2, #1]
 800f10c:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 800f110:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 800f114:	9397      	str	r3, [sp, #604]	; 0x25c
 800f116:	7852      	ldrb	r2, [r2, #1]
 800f118:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 800f11c:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 800f120:	ed84 2a01 	vstr	s4, [r4, #4]
 800f124:	7852      	ldrb	r2, [r2, #1]
 800f126:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 800f12a:	eeb1 4a65 	vneg.f32	s8, s11
 800f12e:	edc4 5a05 	vstr	s11, [r4, #20]
 800f132:	ed84 4a07 	vstr	s8, [r4, #28]
 800f136:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f138:	ed8d 6a90 	vstr	s12, [sp, #576]	; 0x240
 800f13c:	eef1 4a46 	vneg.f32	s9, s12
 800f140:	eeb1 5a66 	vneg.f32	s10, s13
 800f144:	eef1 7a47 	vneg.f32	s15, s14
 800f148:	edcd 4a92 	vstr	s9, [sp, #584]	; 0x248
 800f14c:	edcd 6a95 	vstr	s13, [sp, #596]	; 0x254
 800f150:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 800f154:	ed8d 7a94 	vstr	s14, [sp, #592]	; 0x250
 800f158:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 800f15c:	b1ab      	cbz	r3, 800f18a <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 800f15e:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800f162:	785b      	ldrb	r3, [r3, #1]
 800f164:	b18b      	cbz	r3, 800f18a <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 800f166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f168:	ed93 7a00 	vldr	s14, [r3]
 800f16c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f178:	bfd4      	ite	le
 800f17a:	2301      	movle	r3, #1
 800f17c:	2300      	movgt	r3, #0
 800f17e:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 800f182:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 800f186:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 800f18a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f18c:	edd3 7a00 	vldr	s15, [r3]
 800f190:	eef4 7ac8 	vcmpe.f32	s15, s16
 800f194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f198:	f2c0 86b1 	blt.w	800fefe <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 800f19c:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 800f1a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f7f1 fcce 	bl	8000b48 <__aeabi_dcmpgt>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	f000 86a6 	beq.w	800fefe <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 800f1b8:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 800f1bc:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 800f1c0:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 800f1c4:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 800f1c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f1cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1d4:	dc06      	bgt.n	800f1e4 <m_kalman_3gyro.isra.6.constprop.36+0x1b74>
 800f1d6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f33c <m_kalman_3gyro.isra.6.constprop.36+0x1ccc>
 800f1da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e2:	d508      	bpl.n	800f1f6 <m_kalman_3gyro.isra.6.constprop.36+0x1b86>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 800f1ea:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 800f1ee:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 800f1f2:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 800f1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1fe:	eef0 7ae7 	vabs.f32	s15, s15
 800f202:	ee17 0a90 	vmov	r0, s15
 800f206:	f7f1 f9b7 	bl	8000578 <__aeabi_f2d>
 800f20a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800f20e:	4606      	mov	r6, r0
 800f210:	6818      	ldr	r0, [r3, #0]
 800f212:	460f      	mov	r7, r1
 800f214:	f7f1 f9b0 	bl	8000578 <__aeabi_f2d>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	4630      	mov	r0, r6
 800f21e:	4639      	mov	r1, r7
 800f220:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f224:	f7f1 fc86 	bl	8000b34 <__aeabi_dcmpge>
 800f228:	b908      	cbnz	r0, 800f22e <m_kalman_3gyro.isra.6.constprop.36+0x1bbe>
 800f22a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 fcd1 	bl	8000bd8 <__aeabi_d2f>
 800f236:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800f23a:	6018      	str	r0, [r3, #0]
 800f23c:	6058      	str	r0, [r3, #4]
 800f23e:	6098      	str	r0, [r3, #8]
 800f240:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 800f244:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f250:	f300 8613 	bgt.w	800fe7a <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 800f254:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800f340 <m_kalman_3gyro.isra.6.constprop.36+0x1cd0>
 800f258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f260:	f100 860b 	bmi.w	800fe7a <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 800f264:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f268:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800f26c:	eef0 7ac8 	vabs.f32	s15, s16
 800f270:	ee17 0a90 	vmov	r0, s15
 800f274:	f7f1 f980 	bl	8000578 <__aeabi_f2d>
 800f278:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800f27c:	4606      	mov	r6, r0
 800f27e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f280:	460f      	mov	r7, r1
 800f282:	f7f1 f979 	bl	8000578 <__aeabi_f2d>
 800f286:	4602      	mov	r2, r0
 800f288:	460b      	mov	r3, r1
 800f28a:	4630      	mov	r0, r6
 800f28c:	4639      	mov	r1, r7
 800f28e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f292:	f7f1 fc4f 	bl	8000b34 <__aeabi_dcmpge>
 800f296:	2800      	cmp	r0, #0
 800f298:	f001 831f 	beq.w	80108da <m_kalman_3gyro.isra.6.constprop.36+0x326a>
 800f29c:	4630      	mov	r0, r6
 800f29e:	4639      	mov	r1, r7
 800f2a0:	f7f1 fc9a 	bl	8000bd8 <__aeabi_d2f>
 800f2a4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800f2a8:	ed93 7a03 	vldr	s14, [r3, #12]
 800f2ac:	6298      	str	r0, [r3, #40]	; 0x28
 800f2ae:	ee68 7a08 	vmul.f32	s15, s16, s16
 800f2b2:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f2b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2be:	f301 82f2 	bgt.w	80108a6 <m_kalman_3gyro.isra.6.constprop.36+0x3236>
 800f2c2:	ed99 7a00 	vldr	s14, [r9]
 800f2c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f2ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	f341 8211 	ble.w	80106f8 <m_kalman_3gyro.isra.6.constprop.36+0x3088>
 800f2d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800f2e0:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 800f2e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2e8:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 800f2ec:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 800f2f0:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800f2f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f2f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f2fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f300:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800f304:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f308:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 800f30c:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 800f310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f314:	bfc4      	itt	gt
 800f316:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 800f31a:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 800f31e:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 800f322:	2b0e      	cmp	r3, #14
 800f324:	d802      	bhi.n	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 800f326:	3305      	adds	r3, #5
 800f328:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 800f32c:	4623      	mov	r3, r4
 800f32e:	af8f      	add	r7, sp, #572	; 0x23c
 800f330:	f04f 0900 	mov.w	r9, #0
 800f334:	ed9f 8a03 	vldr	s16, [pc, #12]	; 800f344 <m_kalman_3gyro.isra.6.constprop.36+0x1cd4>
 800f338:	e027      	b.n	800f38a <m_kalman_3gyro.isra.6.constprop.36+0x1d1a>
 800f33a:	bf00      	nop
 800f33c:	3e4ccccd 	.word	0x3e4ccccd
 800f340:	3ecccccd 	.word	0x3ecccccd
 800f344:	00000000 	.word	0x00000000
 800f348:	ed57 6a03 	vldr	s13, [r7, #-12]
 800f34c:	ed97 7a00 	vldr	s14, [r7]
 800f350:	edd7 7a03 	vldr	s15, [r7, #12]
 800f354:	eb0a 0009 	add.w	r0, sl, r9
 800f358:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f35c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f360:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f364:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800f368:	edcd 6a7d 	vstr	s13, [sp, #500]	; 0x1f4
 800f36c:	ed8d 7a7e 	vstr	s14, [sp, #504]	; 0x1f8
 800f370:	edcd 7a7f 	vstr	s15, [sp, #508]	; 0x1fc
 800f374:	bb7a      	cbnz	r2, 800f3d6 <m_kalman_3gyro.isra.6.constprop.36+0x1d66>
 800f376:	f109 0901 	add.w	r9, r9, #1
 800f37a:	f1b9 0f0c 	cmp.w	r9, #12
 800f37e:	f103 0304 	add.w	r3, r3, #4
 800f382:	f107 0704 	add.w	r7, r7, #4
 800f386:	f000 84c3 	beq.w	800fd10 <m_kalman_3gyro.isra.6.constprop.36+0x26a0>
 800f38a:	f1b9 0f02 	cmp.w	r9, #2
 800f38e:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 800f392:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 800f396:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 800f39a:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 800f39e:	ed8d 8a81 	vstr	s16, [sp, #516]	; 0x204
 800f3a2:	ed8d 8a82 	vstr	s16, [sp, #520]	; 0x208
 800f3a6:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
 800f3aa:	ed8d 8a84 	vstr	s16, [sp, #528]	; 0x210
 800f3ae:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
 800f3b2:	f340 8413 	ble.w	800fbdc <m_kalman_3gyro.isra.6.constprop.36+0x256c>
 800f3b6:	f1b9 0f05 	cmp.w	r9, #5
 800f3ba:	ddc5      	ble.n	800f348 <m_kalman_3gyro.isra.6.constprop.36+0x1cd8>
 800f3bc:	aa7d      	add	r2, sp, #500	; 0x1f4
 800f3be:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800f3c2:	eb0a 0009 	add.w	r0, sl, r9
 800f3c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f3ca:	f842 1c0c 	str.w	r1, [r2, #-12]
 800f3ce:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800f3d2:	2a00      	cmp	r2, #0
 800f3d4:	d0cf      	beq.n	800f376 <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 800f3d6:	ad74      	add	r5, sp, #464	; 0x1d0
 800f3d8:	f10a 02b8 	add.w	r2, sl, #184	; 0xb8
 800f3dc:	ed9d da7d 	vldr	s26, [sp, #500]	; 0x1f4
 800f3e0:	eddd da7e 	vldr	s27, [sp, #504]	; 0x1f8
 800f3e4:	ed9d ea7f 	vldr	s28, [sp, #508]	; 0x1fc
 800f3e8:	eddd ea80 	vldr	s29, [sp, #512]	; 0x200
 800f3ec:	ed9d fa81 	vldr	s30, [sp, #516]	; 0x204
 800f3f0:	eddd fa82 	vldr	s31, [sp, #520]	; 0x208
 800f3f4:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 800f3f8:	ed9d 6a84 	vldr	s12, [sp, #528]	; 0x210
 800f3fc:	eddd 5a85 	vldr	s11, [sp, #532]	; 0x214
 800f400:	9204      	str	r2, [sp, #16]
 800f402:	ed85 8a00 	vstr	s16, [r5]
 800f406:	4616      	mov	r6, r2
 800f408:	ed85 8a01 	vstr	s16, [r5, #4]
 800f40c:	ed85 8a02 	vstr	s16, [r5, #8]
 800f410:	ed85 8a03 	vstr	s16, [r5, #12]
 800f414:	ed85 8a04 	vstr	s16, [r5, #16]
 800f418:	ed85 8a05 	vstr	s16, [r5, #20]
 800f41c:	ed85 8a06 	vstr	s16, [r5, #24]
 800f420:	ed85 8a07 	vstr	s16, [r5, #28]
 800f424:	ed85 8a08 	vstr	s16, [r5, #32]
 800f428:	4629      	mov	r1, r5
 800f42a:	f10a 04dc 	add.w	r4, sl, #220	; 0xdc
 800f42e:	ecb2 7a01 	vldmia	r2!, {s14}
 800f432:	ecf1 7a01 	vldmia	r1!, {s15}
 800f436:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43e:	d006      	beq.n	800f44e <m_kalman_3gyro.isra.6.constprop.36+0x1dde>
 800f440:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f448:	bf18      	it	ne
 800f44a:	eeed 7a07 	vfmane.f32	s15, s26, s14
 800f44e:	ed92 7a08 	vldr	s14, [r2, #32]
 800f452:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45a:	d006      	beq.n	800f46a <m_kalman_3gyro.isra.6.constprop.36+0x1dfa>
 800f45c:	eef5 da40 	vcmp.f32	s27, #0.0
 800f460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f464:	bf18      	it	ne
 800f466:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f46a:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 800f46e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	d006      	beq.n	800f486 <m_kalman_3gyro.isra.6.constprop.36+0x1e16>
 800f478:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f480:	bf18      	it	ne
 800f482:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f486:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 800f48a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f492:	d006      	beq.n	800f4a2 <m_kalman_3gyro.isra.6.constprop.36+0x1e32>
 800f494:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49c:	bf18      	it	ne
 800f49e:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f4a2:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 800f4a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	d006      	beq.n	800f4be <m_kalman_3gyro.isra.6.constprop.36+0x1e4e>
 800f4b0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b8:	bf18      	it	ne
 800f4ba:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f4be:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 800f4c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ca:	d006      	beq.n	800f4da <m_kalman_3gyro.isra.6.constprop.36+0x1e6a>
 800f4cc:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d4:	bf18      	it	ne
 800f4d6:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f4da:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 800f4de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e6:	d006      	beq.n	800f4f6 <m_kalman_3gyro.isra.6.constprop.36+0x1e86>
 800f4e8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f0:	bf18      	it	ne
 800f4f2:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f4f6:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 800f4fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f502:	d006      	beq.n	800f512 <m_kalman_3gyro.isra.6.constprop.36+0x1ea2>
 800f504:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50c:	bf18      	it	ne
 800f50e:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f512:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 800f516:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	d006      	beq.n	800f52e <m_kalman_3gyro.isra.6.constprop.36+0x1ebe>
 800f520:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f528:	bf18      	it	ne
 800f52a:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f52e:	4294      	cmp	r4, r2
 800f530:	ed41 7a01 	vstr	s15, [r1, #-4]
 800f534:	f47f af7b 	bne.w	800f42e <m_kalman_3gyro.isra.6.constprop.36+0x1dbe>
 800f538:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f540:	ed95 ca00 	vldr	s24, [r5]
 800f544:	f000 83af 	beq.w	800fca6 <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 800f548:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f550:	f000 83a9 	beq.w	800fca6 <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 800f554:	ee6c 7a0d 	vmul.f32	s15, s24, s26
 800f558:	eef5 da40 	vcmp.f32	s27, #0.0
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	ed95 9a01 	vldr	s18, [r5, #4]
 800f564:	d006      	beq.n	800f574 <m_kalman_3gyro.isra.6.constprop.36+0x1f04>
 800f566:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56e:	bf18      	it	ne
 800f570:	eee9 7a2d 	vfmane.f32	s15, s18, s27
 800f574:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57c:	edd5 ba02 	vldr	s23, [r5, #8]
 800f580:	d006      	beq.n	800f590 <m_kalman_3gyro.isra.6.constprop.36+0x1f20>
 800f582:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58a:	bf18      	it	ne
 800f58c:	eeee 7a2b 	vfmane.f32	s15, s28, s23
 800f590:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	edd5 ca03 	vldr	s25, [r5, #12]
 800f59c:	d006      	beq.n	800f5ac <m_kalman_3gyro.isra.6.constprop.36+0x1f3c>
 800f59e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a6:	bf18      	it	ne
 800f5a8:	eeee 7aac 	vfmane.f32	s15, s29, s25
 800f5ac:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b4:	ed95 ba04 	vldr	s22, [r5, #16]
 800f5b8:	d006      	beq.n	800f5c8 <m_kalman_3gyro.isra.6.constprop.36+0x1f58>
 800f5ba:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c2:	bf18      	it	ne
 800f5c4:	eeef 7a0b 	vfmane.f32	s15, s30, s22
 800f5c8:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d0:	ed95 aa05 	vldr	s20, [r5, #20]
 800f5d4:	d006      	beq.n	800f5e4 <m_kalman_3gyro.isra.6.constprop.36+0x1f74>
 800f5d6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5de:	bf18      	it	ne
 800f5e0:	eeef 7a8a 	vfmane.f32	s15, s31, s20
 800f5e4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ec:	edd5 aa06 	vldr	s21, [r5, #24]
 800f5f0:	d006      	beq.n	800f600 <m_kalman_3gyro.isra.6.constprop.36+0x1f90>
 800f5f2:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fa:	bf18      	it	ne
 800f5fc:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 800f600:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f608:	edd5 9a07 	vldr	s19, [r5, #28]
 800f60c:	d006      	beq.n	800f61c <m_kalman_3gyro.isra.6.constprop.36+0x1fac>
 800f60e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f616:	bf18      	it	ne
 800f618:	eee9 7a86 	vfmane.f32	s15, s19, s12
 800f61c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f624:	edd5 8a08 	vldr	s17, [r5, #32]
 800f628:	d006      	beq.n	800f638 <m_kalman_3gyro.isra.6.constprop.36+0x1fc8>
 800f62a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f632:	bf18      	it	ne
 800f634:	eee8 7aa5 	vfmane.f32	s15, s17, s11
 800f638:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800f63c:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800f640:	ed92 7a00 	vldr	s14, [r2]
 800f644:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f648:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 800f64c:	1882      	adds	r2, r0, r2
 800f64e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f652:	ee85 7a27 	vdiv.f32	s14, s10, s15
 800f656:	f1b9 0f05 	cmp.w	r9, #5
 800f65a:	9202      	str	r2, [sp, #8]
 800f65c:	ee27 ca0c 	vmul.f32	s24, s14, s24
 800f660:	ee29 9a07 	vmul.f32	s18, s18, s14
 800f664:	ee67 ba2b 	vmul.f32	s23, s14, s23
 800f668:	ee67 ca2c 	vmul.f32	s25, s14, s25
 800f66c:	ee27 ba0b 	vmul.f32	s22, s14, s22
 800f670:	ee27 aa0a 	vmul.f32	s20, s14, s20
 800f674:	ee67 aa2a 	vmul.f32	s21, s14, s21
 800f678:	ee69 9a87 	vmul.f32	s19, s19, s14
 800f67c:	ee68 8a87 	vmul.f32	s17, s17, s14
 800f680:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 800f684:	ed8d 9a6c 	vstr	s18, [sp, #432]	; 0x1b0
 800f688:	edcd ba6d 	vstr	s23, [sp, #436]	; 0x1b4
 800f68c:	edcd ca6e 	vstr	s25, [sp, #440]	; 0x1b8
 800f690:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800f694:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 800f698:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800f69c:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800f6a0:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 800f6a4:	f340 8087 	ble.w	800f7b6 <m_kalman_3gyro.isra.6.constprop.36+0x2146>
 800f6a8:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b0:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 800f6b4:	f000 83cd 	beq.w	800fe52 <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 800f6b8:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 800f6bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c4:	f000 83c5 	beq.w	800fe52 <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 800f6c8:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800f6cc:	eef5 da40 	vcmp.f32	s27, #0.0
 800f6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d4:	d008      	beq.n	800f6e8 <m_kalman_3gyro.isra.6.constprop.36+0x2078>
 800f6d6:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 800f6da:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e2:	bf18      	it	ne
 800f6e4:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 800f6e8:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f0:	d008      	beq.n	800f704 <m_kalman_3gyro.isra.6.constprop.36+0x2094>
 800f6f2:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 800f6f6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fe:	bf18      	it	ne
 800f700:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 800f704:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70c:	d008      	beq.n	800f720 <m_kalman_3gyro.isra.6.constprop.36+0x20b0>
 800f70e:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 800f712:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	bf18      	it	ne
 800f71c:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 800f720:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f728:	d008      	beq.n	800f73c <m_kalman_3gyro.isra.6.constprop.36+0x20cc>
 800f72a:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 800f72e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f736:	bf18      	it	ne
 800f738:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 800f73c:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f744:	d008      	beq.n	800f758 <m_kalman_3gyro.isra.6.constprop.36+0x20e8>
 800f746:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 800f74a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f752:	bf18      	it	ne
 800f754:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 800f758:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f760:	d008      	beq.n	800f774 <m_kalman_3gyro.isra.6.constprop.36+0x2104>
 800f762:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 800f766:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76e:	bf18      	it	ne
 800f770:	eee5 7a26 	vfmane.f32	s15, s10, s13
 800f774:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77c:	d008      	beq.n	800f790 <m_kalman_3gyro.isra.6.constprop.36+0x2120>
 800f77e:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 800f782:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78a:	bf18      	it	ne
 800f78c:	eee5 7a06 	vfmane.f32	s15, s10, s12
 800f790:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f798:	d008      	beq.n	800f7ac <m_kalman_3gyro.isra.6.constprop.36+0x213c>
 800f79a:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 800f79e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a6:	bf18      	it	ne
 800f7a8:	eee5 7a25 	vfmane.f32	s15, s10, s11
 800f7ac:	9a02      	ldr	r2, [sp, #8]
 800f7ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7b2:	edc2 7a19 	vstr	s15, [r2, #100]	; 0x64
 800f7b6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	4658      	mov	r0, fp
 800f7be:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7c0:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
 800f7c4:	ed8d 6a08 	vstr	s12, [sp, #32]
 800f7c8:	edcd 6a06 	vstr	s13, [sp, #24]
 800f7cc:	f004 fa07 	bl	8013bde <memset>
 800f7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7d2:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
 800f7d6:	ed9d 6a08 	vldr	s12, [sp, #32]
 800f7da:	eddd 6a06 	vldr	s13, [sp, #24]
 800f7de:	465c      	mov	r4, fp
 800f7e0:	a96b      	add	r1, sp, #428	; 0x1ac
 800f7e2:	465a      	mov	r2, fp
 800f7e4:	ecf1 7a01 	vldmia	r1!, {s15}
 800f7e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f0:	d062      	beq.n	800f8b8 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 800f7f2:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fa:	d005      	beq.n	800f808 <m_kalman_3gyro.isra.6.constprop.36+0x2198>
 800f7fc:	ed92 7a00 	vldr	s14, [r2]
 800f800:	eea7 7a8d 	vfma.f32	s14, s15, s26
 800f804:	ed82 7a00 	vstr	s14, [r2]
 800f808:	eef5 da40 	vcmp.f32	s27, #0.0
 800f80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f810:	d005      	beq.n	800f81e <m_kalman_3gyro.isra.6.constprop.36+0x21ae>
 800f812:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800f816:	eea7 7aad 	vfma.f32	s14, s15, s27
 800f81a:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800f81e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f826:	d005      	beq.n	800f834 <m_kalman_3gyro.isra.6.constprop.36+0x21c4>
 800f828:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 800f82c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800f830:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 800f834:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83c:	d005      	beq.n	800f84a <m_kalman_3gyro.isra.6.constprop.36+0x21da>
 800f83e:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 800f842:	eea7 7aae 	vfma.f32	s14, s15, s29
 800f846:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 800f84a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f852:	d005      	beq.n	800f860 <m_kalman_3gyro.isra.6.constprop.36+0x21f0>
 800f854:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 800f858:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800f85c:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 800f860:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f868:	d005      	beq.n	800f876 <m_kalman_3gyro.isra.6.constprop.36+0x2206>
 800f86a:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 800f86e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800f872:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 800f876:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87e:	d005      	beq.n	800f88c <m_kalman_3gyro.isra.6.constprop.36+0x221c>
 800f880:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 800f884:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f888:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 800f88c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f894:	d005      	beq.n	800f8a2 <m_kalman_3gyro.isra.6.constprop.36+0x2232>
 800f896:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 800f89a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800f89e:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 800f8a2:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8aa:	d005      	beq.n	800f8b8 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 800f8ac:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 800f8b0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f8b4:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 800f8b8:	42a9      	cmp	r1, r5
 800f8ba:	f102 0204 	add.w	r2, r2, #4
 800f8be:	d191      	bne.n	800f7e4 <m_kalman_3gyro.isra.6.constprop.36+0x2174>
 800f8c0:	f8df c664 	ldr.w	ip, [pc, #1636]	; 800ff28 <m_kalman_3gyro.isra.6.constprop.36+0x28b8>
 800f8c4:	4658      	mov	r0, fp
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8cc:	fbac e201 	umull	lr, r2, ip, r1
 800f8d0:	edd0 7a00 	vldr	s15, [r0]
 800f8d4:	08d2      	lsrs	r2, r2, #3
 800f8d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f8da:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 800f8de:	ee36 7ae7 	vsub.f32	s14, s13, s15
 800f8e2:	f101 0101 	add.w	r1, r1, #1
 800f8e6:	bf16      	itet	ne
 800f8e8:	eef1 7a67 	vnegne.f32	s15, s15
 800f8ec:	ed80 7a00 	vstreq	s14, [r0]
 800f8f0:	edc0 7a00 	vstrne	s15, [r0]
 800f8f4:	2951      	cmp	r1, #81	; 0x51
 800f8f6:	f100 0004 	add.w	r0, r0, #4
 800f8fa:	d1e7      	bne.n	800f8cc <m_kalman_3gyro.isra.6.constprop.36+0x225c>
 800f8fc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f900:	9904      	ldr	r1, [sp, #16]
 800f902:	9306      	str	r3, [sp, #24]
 800f904:	4640      	mov	r0, r8
 800f906:	f004 f95f 	bl	8013bc8 <memcpy>
 800f90a:	9804      	ldr	r0, [sp, #16]
 800f90c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f910:	2100      	movs	r1, #0
 800f912:	f004 f964 	bl	8013bde <memset>
 800f916:	9b06      	ldr	r3, [sp, #24]
 800f918:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 800f91c:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
 800f920:	ecf4 3a01 	vldmia	r4!, {s7}
 800f924:	ed94 4a08 	vldr	s8, [r4, #32]
 800f928:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 800f92c:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 800f930:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 800f934:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 800f938:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 800f93c:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 800f940:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 800f944:	4642      	mov	r2, r8
 800f946:	4631      	mov	r1, r6
 800f948:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	d00c      	beq.n	800f96c <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 800f952:	ed92 3a00 	vldr	s6, [r2]
 800f956:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95e:	d005      	beq.n	800f96c <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 800f960:	edd1 2a00 	vldr	s5, [r1]
 800f964:	eee3 2a83 	vfma.f32	s5, s7, s6
 800f968:	edc1 2a00 	vstr	s5, [r1]
 800f96c:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f974:	d00c      	beq.n	800f990 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 800f976:	ed92 3a01 	vldr	s6, [r2, #4]
 800f97a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f982:	d005      	beq.n	800f990 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 800f984:	edd1 2a00 	vldr	s5, [r1]
 800f988:	eee4 2a03 	vfma.f32	s5, s8, s6
 800f98c:	edc1 2a00 	vstr	s5, [r1]
 800f990:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f998:	d00c      	beq.n	800f9b4 <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 800f99a:	ed92 3a02 	vldr	s6, [r2, #8]
 800f99e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a6:	d005      	beq.n	800f9b4 <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 800f9a8:	edd1 2a00 	vldr	s5, [r1]
 800f9ac:	eee4 2a83 	vfma.f32	s5, s9, s6
 800f9b0:	edc1 2a00 	vstr	s5, [r1]
 800f9b4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9bc:	d00c      	beq.n	800f9d8 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 800f9be:	ed92 3a03 	vldr	s6, [r2, #12]
 800f9c2:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ca:	d005      	beq.n	800f9d8 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 800f9cc:	edd1 2a00 	vldr	s5, [r1]
 800f9d0:	eee5 2a03 	vfma.f32	s5, s10, s6
 800f9d4:	edc1 2a00 	vstr	s5, [r1]
 800f9d8:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	d00c      	beq.n	800f9fc <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 800f9e2:	ed92 3a04 	vldr	s6, [r2, #16]
 800f9e6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	d005      	beq.n	800f9fc <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 800f9f0:	edd1 2a00 	vldr	s5, [r1]
 800f9f4:	eee5 2a83 	vfma.f32	s5, s11, s6
 800f9f8:	edc1 2a00 	vstr	s5, [r1]
 800f9fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa04:	d00c      	beq.n	800fa20 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 800fa06:	ed92 3a05 	vldr	s6, [r2, #20]
 800fa0a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	d005      	beq.n	800fa20 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 800fa14:	edd1 2a00 	vldr	s5, [r1]
 800fa18:	eee6 2a03 	vfma.f32	s5, s12, s6
 800fa1c:	edc1 2a00 	vstr	s5, [r1]
 800fa20:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa28:	d00c      	beq.n	800fa44 <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 800fa2a:	ed92 3a06 	vldr	s6, [r2, #24]
 800fa2e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa36:	d005      	beq.n	800fa44 <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 800fa38:	edd1 2a00 	vldr	s5, [r1]
 800fa3c:	eee6 2a83 	vfma.f32	s5, s13, s6
 800fa40:	edc1 2a00 	vstr	s5, [r1]
 800fa44:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4c:	d00c      	beq.n	800fa68 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 800fa4e:	ed92 3a07 	vldr	s6, [r2, #28]
 800fa52:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5a:	d005      	beq.n	800fa68 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 800fa5c:	edd1 2a00 	vldr	s5, [r1]
 800fa60:	eee7 2a03 	vfma.f32	s5, s14, s6
 800fa64:	edc1 2a00 	vstr	s5, [r1]
 800fa68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa70:	d00c      	beq.n	800fa8c <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 800fa72:	ed92 3a08 	vldr	s6, [r2, #32]
 800fa76:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	d005      	beq.n	800fa8c <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 800fa80:	edd1 2a00 	vldr	s5, [r1]
 800fa84:	eee7 2a83 	vfma.f32	s5, s15, s6
 800fa88:	edc1 2a00 	vstr	s5, [r1]
 800fa8c:	3224      	adds	r2, #36	; 0x24
 800fa8e:	4282      	cmp	r2, r0
 800fa90:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800fa94:	f47f af58 	bne.w	800f948 <m_kalman_3gyro.isra.6.constprop.36+0x22d8>
 800fa98:	45a4      	cmp	ip, r4
 800fa9a:	f106 0604 	add.w	r6, r6, #4
 800fa9e:	f47f af3f 	bne.w	800f920 <m_kalman_3gyro.isra.6.constprop.36+0x22b0>
 800faa2:	9a02      	ldr	r2, [sp, #8]
 800faa4:	ed85 8a00 	vstr	s16, [r5]
 800faa8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800faac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab0:	ed85 8a01 	vstr	s16, [r5, #4]
 800fab4:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 800fab8:	f000 8098 	beq.w	800fbec <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 800fabc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac4:	f000 8092 	beq.w	800fbec <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 800fac8:	ee27 ca8c 	vmul.f32	s24, s15, s24
 800facc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad4:	ed85 ca00 	vstr	s24, [r5]
 800fad8:	f040 85a1 	bne.w	801061e <m_kalman_3gyro.isra.6.constprop.36+0x2fae>
 800fadc:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae4:	eeb0 9a48 	vmov.f32	s18, s16
 800fae8:	f000 8090 	beq.w	800fc0c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 800faec:	ee67 baab 	vmul.f32	s23, s15, s23
 800faf0:	eef5 ca40 	vcmp.f32	s25, #0.0
 800faf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf8:	edc5 ba02 	vstr	s23, [r5, #8]
 800fafc:	f000 8095 	beq.w	800fc2a <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 800fb00:	ee67 caac 	vmul.f32	s25, s15, s25
 800fb04:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0c:	edc5 ca03 	vstr	s25, [r5, #12]
 800fb10:	f000 80eb 	beq.w	800fcea <m_kalman_3gyro.isra.6.constprop.36+0x267a>
 800fb14:	ee27 ba8b 	vmul.f32	s22, s15, s22
 800fb18:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb20:	ed85 ba04 	vstr	s22, [r5, #16]
 800fb24:	f000 8094 	beq.w	800fc50 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 800fb28:	ee27 aa8a 	vmul.f32	s20, s15, s20
 800fb2c:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	ed85 aa05 	vstr	s20, [r5, #20]
 800fb38:	f000 80ba 	beq.w	800fcb0 <m_kalman_3gyro.isra.6.constprop.36+0x2640>
 800fb3c:	ee67 aaaa 	vmul.f32	s21, s15, s21
 800fb40:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb48:	edc5 aa06 	vstr	s21, [r5, #24]
 800fb4c:	f000 8098 	beq.w	800fc80 <m_kalman_3gyro.isra.6.constprop.36+0x2610>
 800fb50:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800fb54:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5c:	edc5 9a07 	vstr	s19, [r5, #28]
 800fb60:	f040 809e 	bne.w	800fca0 <m_kalman_3gyro.isra.6.constprop.36+0x2630>
 800fb64:	eef0 7a48 	vmov.f32	s15, s16
 800fb68:	ed9a 4a25 	vldr	s8, [sl, #148]	; 0x94
 800fb6c:	edda 6a26 	vldr	s13, [sl, #152]	; 0x98
 800fb70:	edda 4a27 	vldr	s9, [sl, #156]	; 0x9c
 800fb74:	edda 3a28 	vldr	s7, [sl, #160]	; 0xa0
 800fb78:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 800fb7c:	ed9a 6a2a 	vldr	s12, [sl, #168]	; 0xa8
 800fb80:	edda 5a2b 	vldr	s11, [sl, #172]	; 0xac
 800fb84:	ed9a 3a2c 	vldr	s6, [sl, #176]	; 0xb0
 800fb88:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 800fb8c:	edc5 7a08 	vstr	s15, [r5, #32]
 800fb90:	ee34 ca0c 	vadd.f32	s24, s8, s24
 800fb94:	ee36 9a89 	vadd.f32	s18, s13, s18
 800fb98:	ee74 baab 	vadd.f32	s23, s9, s23
 800fb9c:	ee73 caac 	vadd.f32	s25, s7, s25
 800fba0:	ee35 ba0b 	vadd.f32	s22, s10, s22
 800fba4:	ee36 aa0a 	vadd.f32	s20, s12, s20
 800fba8:	ee75 aaaa 	vadd.f32	s21, s11, s21
 800fbac:	ee73 9a29 	vadd.f32	s19, s6, s19
 800fbb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbb4:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 800fbb8:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 800fbbc:	edca ba27 	vstr	s23, [sl, #156]	; 0x9c
 800fbc0:	edca ca28 	vstr	s25, [sl, #160]	; 0xa0
 800fbc4:	ed8a ba29 	vstr	s22, [sl, #164]	; 0xa4
 800fbc8:	ed8a aa2a 	vstr	s20, [sl, #168]	; 0xa8
 800fbcc:	edca aa2b 	vstr	s21, [sl, #172]	; 0xac
 800fbd0:	edca 9a2c 	vstr	s19, [sl, #176]	; 0xb0
 800fbd4:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 800fbd8:	f7ff bbcd 	b.w	800f376 <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 800fbdc:	edd3 6a00 	vldr	s13, [r3]
 800fbe0:	ed93 7a03 	vldr	s14, [r3, #12]
 800fbe4:	edd3 7a06 	vldr	s15, [r3, #24]
 800fbe8:	f7ff bbb4 	b.w	800f354 <m_kalman_3gyro.isra.6.constprop.36+0x1ce4>
 800fbec:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf4:	f000 8130 	beq.w	800fe58 <m_kalman_3gyro.isra.6.constprop.36+0x27e8>
 800fbf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc00:	f040 850b 	bne.w	801061a <m_kalman_3gyro.isra.6.constprop.36+0x2faa>
 800fc04:	eeb0 9a48 	vmov.f32	s18, s16
 800fc08:	eeb0 ca48 	vmov.f32	s24, s16
 800fc0c:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc14:	ed85 8a02 	vstr	s16, [r5, #8]
 800fc18:	d077      	beq.n	800fd0a <m_kalman_3gyro.isra.6.constprop.36+0x269a>
 800fc1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc22:	eef0 ba48 	vmov.f32	s23, s16
 800fc26:	f47f af6b 	bne.w	800fb00 <m_kalman_3gyro.isra.6.constprop.36+0x2490>
 800fc2a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc32:	ed85 8a03 	vstr	s16, [r5, #12]
 800fc36:	d056      	beq.n	800fce6 <m_kalman_3gyro.isra.6.constprop.36+0x2676>
 800fc38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc40:	f041 813a 	bne.w	8010eb8 <m_kalman_3gyro.isra.6.constprop.36+0x3848>
 800fc44:	ed85 8a04 	vstr	s16, [r5, #16]
 800fc48:	eeb0 ba48 	vmov.f32	s22, s16
 800fc4c:	eef0 ca48 	vmov.f32	s25, s16
 800fc50:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc58:	ed85 8a05 	vstr	s16, [r5, #20]
 800fc5c:	d026      	beq.n	800fcac <m_kalman_3gyro.isra.6.constprop.36+0x263c>
 800fc5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc66:	f041 8123 	bne.w	8010eb0 <m_kalman_3gyro.isra.6.constprop.36+0x3840>
 800fc6a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc72:	ed85 8a06 	vstr	s16, [r5, #24]
 800fc76:	d12b      	bne.n	800fcd0 <m_kalman_3gyro.isra.6.constprop.36+0x2660>
 800fc78:	eef0 aa48 	vmov.f32	s21, s16
 800fc7c:	eeb0 aa48 	vmov.f32	s20, s16
 800fc80:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc88:	ed85 8a07 	vstr	s16, [r5, #28]
 800fc8c:	f000 84bf 	beq.w	801060e <m_kalman_3gyro.isra.6.constprop.36+0x2f9e>
 800fc90:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc98:	eef0 9a48 	vmov.f32	s19, s16
 800fc9c:	f43f af62 	beq.w	800fb64 <m_kalman_3gyro.isra.6.constprop.36+0x24f4>
 800fca0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800fca4:	e760      	b.n	800fb68 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 800fca6:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800ff20 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 800fcaa:	e455      	b.n	800f558 <m_kalman_3gyro.isra.6.constprop.36+0x1ee8>
 800fcac:	eeb0 aa48 	vmov.f32	s20, s16
 800fcb0:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb8:	ed85 8a06 	vstr	s16, [r5, #24]
 800fcbc:	f000 849d 	beq.w	80105fa <m_kalman_3gyro.isra.6.constprop.36+0x2f8a>
 800fcc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc8:	d004      	beq.n	800fcd4 <m_kalman_3gyro.isra.6.constprop.36+0x2664>
 800fcca:	eef0 aa48 	vmov.f32	s21, s16
 800fcce:	e73f      	b.n	800fb50 <m_kalman_3gyro.isra.6.constprop.36+0x24e0>
 800fcd0:	eeb0 aa48 	vmov.f32	s20, s16
 800fcd4:	ed85 8a07 	vstr	s16, [r5, #28]
 800fcd8:	eef0 9a48 	vmov.f32	s19, s16
 800fcdc:	eef0 aa48 	vmov.f32	s21, s16
 800fce0:	eef0 7a48 	vmov.f32	s15, s16
 800fce4:	e740      	b.n	800fb68 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 800fce6:	eef0 ca48 	vmov.f32	s25, s16
 800fcea:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf2:	ed85 8a04 	vstr	s16, [r5, #16]
 800fcf6:	f000 849e 	beq.w	8010636 <m_kalman_3gyro.isra.6.constprop.36+0x2fc6>
 800fcfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	eeb0 ba48 	vmov.f32	s22, s16
 800fd06:	d0a3      	beq.n	800fc50 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 800fd08:	e70e      	b.n	800fb28 <m_kalman_3gyro.isra.6.constprop.36+0x24b8>
 800fd0a:	eef0 ba48 	vmov.f32	s23, s16
 800fd0e:	e78c      	b.n	800fc2a <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 800fd10:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 800fd14:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 800fd18:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 800fd1c:	ee28 aaa8 	vmul.f32	s20, s17, s17
 800fd20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd24:	eea9 aa09 	vfma.f32	s20, s18, s18
 800fd28:	eea8 aa08 	vfma.f32	s20, s16, s16
 800fd2c:	eeb4 aae7 	vcmpe.f32	s20, s15
 800fd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd34:	f100 84f3 	bmi.w	801071e <m_kalman_3gyro.isra.6.constprop.36+0x30ae>
 800fd38:	eddf 9a79 	vldr	s19, [pc, #484]	; 800ff20 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 800fd3c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 847c 	beq.w	801063e <m_kalman_3gyro.isra.6.constprop.36+0x2fce>
 800fd46:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 800fd4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	6003      	str	r3, [r0, #0]
 800fd50:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 800fd54:	600b      	str	r3, [r1, #0]
 800fd56:	6043      	str	r3, [r0, #4]
 800fd58:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 800fd5c:	604b      	str	r3, [r1, #4]
 800fd5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fd62:	608b      	str	r3, [r1, #8]
 800fd64:	6083      	str	r3, [r0, #8]
 800fd66:	60ca      	str	r2, [r1, #12]
 800fd68:	60c2      	str	r2, [r0, #12]
 800fd6a:	460f      	mov	r7, r1
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	9901      	ldr	r1, [sp, #4]
 800fd70:	f7f9 f99c 	bl	80090ac <m_q2dcm_eml>
 800fd74:	ed97 9a01 	vldr	s18, [r7, #4]
 800fd78:	edd7 9a00 	vldr	s19, [r7]
 800fd7c:	edd7 8a02 	vldr	s17, [r7, #8]
 800fd80:	ed97 8a03 	vldr	s16, [r7, #12]
 800fd84:	ee69 7a09 	vmul.f32	s15, s18, s18
 800fd88:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 800fd8c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800fd90:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800fd94:	eee8 7a08 	vfma.f32	s15, s16, s16
 800fd98:	ee17 0a90 	vmov	r0, s15
 800fd9c:	f7f0 fbec 	bl	8000578 <__aeabi_f2d>
 800fda0:	f004 fccc 	bl	801473c <sqrt>
 800fda4:	f7f0 ff18 	bl	8000bd8 <__aeabi_d2f>
 800fda8:	ee07 0a90 	vmov	s15, r0
 800fdac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdb0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800fdb4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
 800fdb8:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800fdbc:	ee29 9a27 	vmul.f32	s18, s18, s15
 800fdc0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fdc4:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fdc8:	edc7 9a00 	vstr	s19, [r7]
 800fdcc:	ed87 9a01 	vstr	s18, [r7, #4]
 800fdd0:	edc7 8a02 	vstr	s17, [r7, #8]
 800fdd4:	ed87 8a03 	vstr	s16, [r7, #12]
 800fdd8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fddc:	f8dd 76c4 	ldr.w	r7, [sp, #1732]	; 0x6c4
 800fde0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800fde4:	6821      	ldr	r1, [r4, #0]
 800fde6:	6862      	ldr	r2, [r4, #4]
 800fde8:	68a3      	ldr	r3, [r4, #8]
 800fdea:	68e0      	ldr	r0, [r4, #12]
 800fdec:	60e8      	str	r0, [r5, #12]
 800fdee:	3410      	adds	r4, #16
 800fdf0:	42b4      	cmp	r4, r6
 800fdf2:	6029      	str	r1, [r5, #0]
 800fdf4:	606a      	str	r2, [r5, #4]
 800fdf6:	60ab      	str	r3, [r5, #8]
 800fdf8:	f105 0510 	add.w	r5, r5, #16
 800fdfc:	d1f2      	bne.n	800fde4 <m_kalman_3gyro.isra.6.constprop.36+0x2774>
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	602b      	str	r3, [r5, #0]
 800fe02:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800fe06:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 800fe0a:	6013      	str	r3, [r2, #0]
 800fe0c:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 800fe10:	6053      	str	r3, [r2, #4]
 800fe12:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 800fe16:	6093      	str	r3, [r2, #8]
 800fe18:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 800fe1c:	60d3      	str	r3, [r2, #12]
 800fe1e:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 800fe22:	6113      	str	r3, [r2, #16]
 800fe24:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 800fe28:	6153      	str	r3, [r2, #20]
 800fe2a:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 800fe2e:	6193      	str	r3, [r2, #24]
 800fe30:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 800fe34:	61d3      	str	r3, [r2, #28]
 800fe36:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 800fe3a:	6213      	str	r3, [r2, #32]
 800fe3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe3e:	f8dd 26cc 	ldr.w	r2, [sp, #1740]	; 0x6cc
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	6013      	str	r3, [r2, #0]
 800fe46:	f20d 6d34 	addw	sp, sp, #1588	; 0x634
 800fe4a:	ecbd 8b10 	vpop	{d8-d15}
 800fe4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe52:	eddf 7a33 	vldr	s15, [pc, #204]	; 800ff20 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 800fe56:	e439      	b.n	800f6cc <m_kalman_3gyro.isra.6.constprop.36+0x205c>
 800fe58:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fe5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe60:	f43f aed0 	beq.w	800fc04 <m_kalman_3gyro.isra.6.constprop.36+0x2594>
 800fe64:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fe68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6c:	eeb0 9a48 	vmov.f32	s18, s16
 800fe70:	eeb0 ca48 	vmov.f32	s24, s16
 800fe74:	f43f aeca 	beq.w	800fc0c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 800fe78:	e638      	b.n	800faec <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 800fe80:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 800fe84:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 800fe88:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 800fe8c:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 800fe90:	f7ff ba17 	b.w	800f2c2 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 800fe94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe98:	ee79 7a67 	vsub.f32	s15, s18, s15
 800fe9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe9e:	eef0 7ae7 	vabs.f32	s15, s15
 800fea2:	edc3 7a00 	vstr	s15, [r3]
 800fea6:	f7fe bebd 	b.w	800ec24 <m_kalman_3gyro.isra.6.constprop.36+0x15b4>
 800feaa:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 800feae:	2a31      	cmp	r2, #49	; 0x31
 800feb0:	f73e afe4 	bgt.w	800ee7c <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 800feb4:	2300      	movs	r3, #0
 800feb6:	2a00      	cmp	r2, #0
 800feb8:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 800febc:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 800fec0:	f102 0301 	add.w	r3, r2, #1
 800fec4:	dd03      	ble.n	800fece <m_kalman_3gyro.isra.6.constprop.36+0x285e>
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	bfd8      	it	le
 800feca:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 800fece:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 800fed2:	f7fe bfd3 	b.w	800ee7c <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 800fed6:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 800feda:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 800fede:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 800fee2:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 800fee6:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800feea:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 800feee:	2300      	movs	r3, #0
 800fef0:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 800fef4:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 800fef8:	ac86      	add	r4, sp, #536	; 0x218
 800fefa:	f7fe bfb0 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 800fefe:	2301      	movs	r3, #1
 800ff00:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 800ff04:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 800ff08:	f7ff b95c 	b.w	800f1c4 <m_kalman_3gyro.isra.6.constprop.36+0x1b54>
 800ff0c:	eddd 8aa2 	vldr	s17, [sp, #648]	; 0x288
 800ff10:	ed9d 9aac 	vldr	s18, [sp, #688]	; 0x2b0
 800ff14:	f7fe be9f 	b.w	800ec56 <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 800ff18:	2400      	movs	r4, #0
 800ff1a:	4d02      	ldr	r5, [pc, #8]	; (800ff24 <m_kalman_3gyro.isra.6.constprop.36+0x28b4>)
 800ff1c:	f7fe bd6a 	b.w	800e9f4 <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 800ff20:	00000000 	.word	0x00000000
 800ff24:	3ff00000 	.word	0x3ff00000
 800ff28:	cccccccd 	.word	0xcccccccd
 800ff2c:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 800ff30:	ed93 7a00 	vldr	s14, [r3]
 800ff34:	f60a 0374 	addw	r3, sl, #2164	; 0x874
 800ff38:	ee67 7a07 	vmul.f32	s15, s14, s14
 800ff3c:	ed93 aa00 	vldr	s20, [r3]
 800ff40:	ed8d 7a06 	vstr	s14, [sp, #24]
 800ff44:	eeea 7a0a 	vfma.f32	s15, s20, s20
 800ff48:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 800ff4c:	ac86      	add	r4, sp, #536	; 0x218
 800ff4e:	edd3 aa00 	vldr	s21, [r3]
 800ff52:	eeea 7aaa 	vfma.f32	s15, s21, s21
 800ff56:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
 800ff5a:	ee17 0a90 	vmov	r0, s15
 800ff5e:	f7f0 fb0b 	bl	8000578 <__aeabi_f2d>
 800ff62:	f004 fbeb 	bl	801473c <sqrt>
 800ff66:	f60a 0384 	addw	r3, sl, #2180	; 0x884
 800ff6a:	ed93 ba00 	vldr	s22, [r3]
 800ff6e:	f50a 6308 	add.w	r3, sl, #2176	; 0x880
 800ff72:	ed93 da00 	vldr	s26, [r3]
 800ff76:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 800ff7a:	f60a 0388 	addw	r3, sl, #2184	; 0x888
 800ff7e:	eeed 7a0d 	vfma.f32	s15, s26, s26
 800ff82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff86:	edd3 ba00 	vldr	s23, [r3]
 800ff8a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800ff8e:	ee17 0a90 	vmov	r0, s15
 800ff92:	f7f0 faf1 	bl	8000578 <__aeabi_f2d>
 800ff96:	f004 fbd1 	bl	801473c <sqrt>
 800ff9a:	f7f0 fe1d 	bl	8000bd8 <__aeabi_d2f>
 800ff9e:	4bd2      	ldr	r3, [pc, #840]	; (80102e8 <m_kalman_3gyro.isra.6.constprop.36+0x2c78>)
 800ffa0:	ee07 0a90 	vmov	s15, r0
 800ffa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffa8:	edc3 7a00 	vstr	s15, [r3]
 800ffac:	ee8f caa7 	vdiv.f32	s24, s31, s15
 800ffb0:	f7f0 fe12 	bl	8000bd8 <__aeabi_d2f>
 800ffb4:	ee07 0a90 	vmov	s15, r0
 800ffb8:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 800ffbc:	ee2c da0d 	vmul.f32	s26, s24, s26
 800ffc0:	ee27 6aaa 	vmul.f32	s12, s15, s21
 800ffc4:	ed9d 7a06 	vldr	s14, [sp, #24]
 800ffc8:	ee6c ba2b 	vmul.f32	s23, s24, s23
 800ffcc:	ee27 aa8a 	vmul.f32	s20, s15, s20
 800ffd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffd4:	ee2d 7a46 	vnmul.f32	s14, s26, s12
 800ffd8:	ee2c ca0b 	vmul.f32	s24, s24, s22
 800ffdc:	eeab 7a8a 	vfma.f32	s14, s23, s20
 800ffe0:	ee67 6aeb 	vnmul.f32	s13, s15, s23
 800ffe4:	eef0 aa47 	vmov.f32	s21, s14
 800ffe8:	eee6 6a0c 	vfma.f32	s13, s12, s24
 800ffec:	ee27 7a07 	vmul.f32	s14, s14, s14
 800fff0:	ee2a aa4c 	vnmul.f32	s20, s20, s24
 800fff4:	eeb0 ba66 	vmov.f32	s22, s13
 800fff8:	eea7 aa8d 	vfma.f32	s20, s15, s26
 800fffc:	eef0 7a47 	vmov.f32	s15, s14
 8010000:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010004:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8010008:	ee17 0a90 	vmov	r0, s15
 801000c:	f7f0 fab4 	bl	8000578 <__aeabi_f2d>
 8010010:	f004 fb94 	bl	801473c <sqrt>
 8010014:	f7f0 fde0 	bl	8000bd8 <__aeabi_d2f>
 8010018:	ee07 0a90 	vmov	s15, r0
 801001c:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 8010020:	aa7d      	add	r2, sp, #500	; 0x1f4
 8010022:	4620      	mov	r0, r4
 8010024:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010026:	ed84 da02 	vstr	s26, [r4, #8]
 801002a:	ee6b 6a27 	vmul.f32	s13, s22, s15
 801002e:	ee2a 7aa7 	vmul.f32	s14, s21, s15
 8010032:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8010036:	ee6d 5a47 	vnmul.f32	s11, s26, s14
 801003a:	ee2c 5a67 	vnmul.f32	s10, s24, s15
 801003e:	ee26 6aeb 	vnmul.f32	s12, s13, s23
 8010042:	eeab 5a87 	vfma.f32	s10, s23, s14
 8010046:	eee6 5a8c 	vfma.f32	s11, s13, s24
 801004a:	eea7 6a8d 	vfma.f32	s12, s15, s26
 801004e:	edc4 6a01 	vstr	s13, [r4, #4]
 8010052:	ed84 7a04 	vstr	s14, [r4, #16]
 8010056:	edc4 7a07 	vstr	s15, [r4, #28]
 801005a:	ed84 5a00 	vstr	s10, [r4]
 801005e:	edc4 5a06 	vstr	s11, [r4, #24]
 8010062:	ed84 6a03 	vstr	s12, [r4, #12]
 8010066:	ed84 ca05 	vstr	s24, [r4, #20]
 801006a:	edc4 ba08 	vstr	s23, [r4, #32]
 801006e:	f7f8 fe1f 	bl	8008cb0 <m_mldivide>
 8010072:	a94b      	add	r1, sp, #300	; 0x12c
 8010074:	a87d      	add	r0, sp, #500	; 0x1f4
 8010076:	f7f9 f999 	bl	80093ac <m_dcm2q_eml>
 801007a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80102ec <m_kalman_3gyro.isra.6.constprop.36+0x2c7c>
 801007e:	984b      	ldr	r0, [sp, #300]	; 0x12c
 8010080:	994c      	ldr	r1, [sp, #304]	; 0x130
 8010082:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8010084:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8010086:	904f      	str	r0, [sp, #316]	; 0x13c
 8010088:	eeb0 7a67 	vmov.f32	s14, s15
 801008c:	eef0 6a67 	vmov.f32	s13, s15
 8010090:	9150      	str	r1, [sp, #320]	; 0x140
 8010092:	9251      	str	r2, [sp, #324]	; 0x144
 8010094:	9352      	str	r3, [sp, #328]	; 0x148
 8010096:	ed96 5a06 	vldr	s10, [r6, #24]
 801009a:	edd6 5a07 	vldr	s11, [r6, #28]
 801009e:	ed96 6a08 	vldr	s12, [r6, #32]
 80100a2:	3624      	adds	r6, #36	; 0x24
 80100a4:	42b5      	cmp	r5, r6
 80100a6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80100aa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80100ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80100b2:	d1f0      	bne.n	8010096 <m_kalman_3gyro.isra.6.constprop.36+0x2a26>
 80100b4:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 80102f0 <m_kalman_3gyro.isra.6.constprop.36+0x2c80>
 80100b8:	eeb4 eaed 	vcmpe.f32	s28, s27
 80100bc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80100c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80100c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80100c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100cc:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 80100d0:	ed8d 7a3f 	vstr	s14, [sp, #252]	; 0xfc
 80100d4:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 80100d8:	f340 8339 	ble.w	801074e <m_kalman_3gyro.isra.6.constprop.36+0x30de>
 80100dc:	eef4 eaec 	vcmpe.f32	s29, s25
 80100e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e4:	f77e ae9c 	ble.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80100e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80100ea:	edd3 7a00 	vldr	s15, [r3]
 80100ee:	eeb4 fae7 	vcmpe.f32	s30, s15
 80100f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f6:	f77e ae93 	ble.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80100fa:	9b08      	ldr	r3, [sp, #32]
 80100fc:	eddf 7a7d 	vldr	s15, [pc, #500]	; 80102f4 <m_kalman_3gyro.isra.6.constprop.36+0x2c84>
 8010100:	ed93 7a00 	vldr	s14, [r3]
 8010104:	eeb0 7ac7 	vabs.f32	s14, s14
 8010108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010110:	f57e ae86 	bpl.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8010114:	ed93 7a01 	vldr	s14, [r3, #4]
 8010118:	eeb0 7ac7 	vabs.f32	s14, s14
 801011c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010124:	f57e ae7c 	bpl.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8010128:	ed93 7a02 	vldr	s14, [r3, #8]
 801012c:	eeb0 7ac7 	vabs.f32	s14, s14
 8010130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010138:	f57e ae72 	bpl.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801013c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801013e:	eddf 7a6e 	vldr	s15, [pc, #440]	; 80102f8 <m_kalman_3gyro.isra.6.constprop.36+0x2c88>
 8010142:	ed93 7a00 	vldr	s14, [r3]
 8010146:	eeb0 7ac7 	vabs.f32	s14, s14
 801014a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801014e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010152:	f57e ae65 	bpl.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8010156:	ed93 7a01 	vldr	s14, [r3, #4]
 801015a:	eeb0 7ac7 	vabs.f32	s14, s14
 801015e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010166:	f57e ae5b 	bpl.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801016a:	ed93 7a02 	vldr	s14, [r3, #8]
 801016e:	eeb0 7ac7 	vabs.f32	s14, s14
 8010172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017a:	f57e ae51 	bpl.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801017e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010180:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8010184:	ed93 5a00 	vldr	s10, [r3]
 8010188:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 801018a:	edd3 5a00 	vldr	s11, [r3]
 801018e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8010190:	edd3 6a00 	vldr	s13, [r3]
 8010194:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010196:	2a09      	cmp	r2, #9
 8010198:	eef4 5ac5 	vcmpe.f32	s11, s10
 801019c:	f50a 6198 	add.w	r1, sl, #1216	; 0x4c0
 80101a0:	ed93 7a00 	vldr	s14, [r3]
 80101a4:	ed91 6a00 	vldr	s12, [r1]
 80101a8:	bfcc      	ite	gt
 80101aa:	230a      	movgt	r3, #10
 80101ac:	2305      	movle	r3, #5
 80101ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b2:	bfb4      	ite	lt
 80101b4:	eef0 7a45 	vmovlt.f32	s15, s10
 80101b8:	eef0 7a65 	vmovge.f32	s15, s11
 80101bc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80101c0:	bf88      	it	hi
 80101c2:	eef0 5a45 	vmovhi.f32	s11, s10
 80101c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ca:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80101ce:	bfa8      	it	ge
 80101d0:	eef0 7a46 	vmovge.f32	s15, s12
 80101d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d8:	bf88      	it	hi
 80101da:	eeb0 6a65 	vmovhi.f32	s12, s11
 80101de:	eef4 6ae7 	vcmpe.f32	s13, s15
 80101e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80101ea:	bfa8      	it	ge
 80101ec:	eef0 7a66 	vmovge.f32	s15, s13
 80101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f4:	bf88      	it	hi
 80101f6:	eef0 6a46 	vmovhi.f32	s13, s12
 80101fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010202:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010206:	bfa8      	it	ge
 8010208:	eef0 7a47 	vmovge.f32	s15, s14
 801020c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010210:	bf88      	it	hi
 8010212:	eeb0 7a66 	vmovhi.f32	s14, s13
 8010216:	2b05      	cmp	r3, #5
 8010218:	d05b      	beq.n	80102d2 <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 801021a:	f20a 512c 	addw	r1, sl, #1324	; 0x52c
 801021e:	edd1 6a00 	vldr	s13, [r1]
 8010222:	f50a 61aa 	add.w	r1, sl, #1360	; 0x550
 8010226:	eef4 6ae7 	vcmpe.f32	s13, s15
 801022a:	ed91 6a00 	vldr	s12, [r1]
 801022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010232:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010236:	bfa8      	it	ge
 8010238:	eef0 7a66 	vmovge.f32	s15, s13
 801023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010240:	bf98      	it	ls
 8010242:	eeb0 7a66 	vmovls.f32	s14, s13
 8010246:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801024a:	f20a 5174 	addw	r1, sl, #1396	; 0x574
 801024e:	edd1 6a00 	vldr	s13, [r1]
 8010252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010256:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801025a:	bfa8      	it	ge
 801025c:	eef0 7a46 	vmovge.f32	s15, s12
 8010260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010264:	bf88      	it	hi
 8010266:	eeb0 6a47 	vmovhi.f32	s12, s14
 801026a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801026e:	f50a 61b3 	add.w	r1, sl, #1432	; 0x598
 8010272:	ed91 7a00 	vldr	s14, [r1]
 8010276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801027e:	bfa8      	it	ge
 8010280:	eef0 7a66 	vmovge.f32	s15, s13
 8010284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010288:	bf88      	it	hi
 801028a:	eef0 6a46 	vmovhi.f32	s13, s12
 801028e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801029a:	bfa8      	it	ge
 801029c:	eef0 7a47 	vmovge.f32	s15, s14
 80102a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a4:	bf88      	it	hi
 80102a6:	eeb0 7a66 	vmovhi.f32	s14, s13
 80102aa:	2b0a      	cmp	r3, #10
 80102ac:	d111      	bne.n	80102d2 <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 80102ae:	f20a 51bc 	addw	r1, sl, #1468	; 0x5bc
 80102b2:	edd1 6a00 	vldr	s13, [r1]
 80102b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80102ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102be:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80102c2:	bfb8      	it	lt
 80102c4:	eef0 7a66 	vmovlt.f32	s15, s13
 80102c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102cc:	bf88      	it	hi
 80102ce:	eeb0 7a66 	vmovhi.f32	s14, s13
 80102d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102d6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80102fc <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 80102da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e2:	f73e ad9d 	bgt.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80102e6:	e00b      	b.n	8010300 <m_kalman_3gyro.isra.6.constprop.36+0x2c90>
 80102e8:	20001bbc 	.word	0x20001bbc
 80102ec:	00000000 	.word	0x00000000
 80102f0:	3d088889 	.word	0x3d088889
 80102f4:	3e4ccccd 	.word	0x3e4ccccd
 80102f8:	3f99999a 	.word	0x3f99999a
 80102fc:	3be56042 	.word	0x3be56042
 8010300:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010302:	ed91 5a00 	vldr	s10, [r1]
 8010306:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8010308:	edd1 5a00 	vldr	s11, [r1]
 801030c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801030e:	edd1 6a00 	vldr	s13, [r1]
 8010312:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8010314:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010318:	ed91 7a00 	vldr	s14, [r1]
 801031c:	f20a 41c4 	addw	r1, sl, #1220	; 0x4c4
 8010320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010324:	ed91 6a00 	vldr	s12, [r1]
 8010328:	bfb4      	ite	lt
 801032a:	eef0 7a45 	vmovlt.f32	s15, s10
 801032e:	eef0 7a65 	vmovge.f32	s15, s11
 8010332:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010336:	bf88      	it	hi
 8010338:	eef0 5a45 	vmovhi.f32	s11, s10
 801033c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010340:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8010344:	bfa8      	it	ge
 8010346:	eef0 7a46 	vmovge.f32	s15, s12
 801034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034e:	bf88      	it	hi
 8010350:	eeb0 6a65 	vmovhi.f32	s12, s11
 8010354:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010360:	bfa8      	it	ge
 8010362:	eef0 7a66 	vmovge.f32	s15, s13
 8010366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036a:	bf88      	it	hi
 801036c:	eef0 6a46 	vmovhi.f32	s13, s12
 8010370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010378:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801037c:	bfa8      	it	ge
 801037e:	eef0 7a47 	vmovge.f32	s15, s14
 8010382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010386:	bf88      	it	hi
 8010388:	eeb0 7a66 	vmovhi.f32	s14, s13
 801038c:	2b05      	cmp	r3, #5
 801038e:	d05b      	beq.n	8010448 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8010390:	f50a 61a6 	add.w	r1, sl, #1328	; 0x530
 8010394:	edd1 6a00 	vldr	s13, [r1]
 8010398:	f20a 5154 	addw	r1, sl, #1364	; 0x554
 801039c:	eef4 6ae7 	vcmpe.f32	s13, s15
 80103a0:	ed91 6a00 	vldr	s12, [r1]
 80103a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80103ac:	bfa8      	it	ge
 80103ae:	eef0 7a66 	vmovge.f32	s15, s13
 80103b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b6:	bf98      	it	ls
 80103b8:	eeb0 7a66 	vmovls.f32	s14, s13
 80103bc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80103c0:	f50a 61af 	add.w	r1, sl, #1400	; 0x578
 80103c4:	edd1 6a00 	vldr	s13, [r1]
 80103c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103cc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80103d0:	bfa8      	it	ge
 80103d2:	eef0 7a46 	vmovge.f32	s15, s12
 80103d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103da:	bf88      	it	hi
 80103dc:	eeb0 6a47 	vmovhi.f32	s12, s14
 80103e0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80103e4:	f20a 519c 	addw	r1, sl, #1436	; 0x59c
 80103e8:	ed91 7a00 	vldr	s14, [r1]
 80103ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f0:	eef4 6ac6 	vcmpe.f32	s13, s12
 80103f4:	bfa8      	it	ge
 80103f6:	eef0 7a66 	vmovge.f32	s15, s13
 80103fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fe:	bf88      	it	hi
 8010400:	eef0 6a46 	vmovhi.f32	s13, s12
 8010404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010410:	bfa8      	it	ge
 8010412:	eef0 7a47 	vmovge.f32	s15, s14
 8010416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801041a:	bf88      	it	hi
 801041c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8010420:	2b0a      	cmp	r3, #10
 8010422:	d111      	bne.n	8010448 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8010424:	f50a 61b8 	add.w	r1, sl, #1472	; 0x5c0
 8010428:	edd1 6a00 	vldr	s13, [r1]
 801042c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010434:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010438:	bfb8      	it	lt
 801043a:	eef0 7a66 	vmovlt.f32	s15, s13
 801043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010442:	bf88      	it	hi
 8010444:	eeb0 7a66 	vmovhi.f32	s14, s13
 8010448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801044c:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 80102fc <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8010450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010458:	f73e ace2 	bgt.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801045c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801045e:	edd1 6a00 	vldr	s13, [r1]
 8010462:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8010464:	ed91 5a00 	vldr	s10, [r1]
 8010468:	9931      	ldr	r1, [sp, #196]	; 0xc4
 801046a:	edd1 5a00 	vldr	s11, [r1]
 801046e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8010470:	eef4 6ac5 	vcmpe.f32	s13, s10
 8010474:	ed91 6a00 	vldr	s12, [r1]
 8010478:	f50a 6199 	add.w	r1, sl, #1224	; 0x4c8
 801047c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010480:	ed91 7a00 	vldr	s14, [r1]
 8010484:	bfb4      	ite	lt
 8010486:	eef0 7a45 	vmovlt.f32	s15, s10
 801048a:	eef0 7a66 	vmovge.f32	s15, s13
 801048e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010492:	bf88      	it	hi
 8010494:	eef0 6a45 	vmovhi.f32	s13, s10
 8010498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80104a0:	bfa8      	it	ge
 80104a2:	eef0 7a47 	vmovge.f32	s15, s14
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	bf88      	it	hi
 80104ac:	eeb0 7a66 	vmovhi.f32	s14, s13
 80104b0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80104b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80104bc:	bfb8      	it	lt
 80104be:	eef0 7a65 	vmovlt.f32	s15, s11
 80104c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c6:	bf88      	it	hi
 80104c8:	eeb0 7a65 	vmovhi.f32	s14, s11
 80104cc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80104d8:	bfa8      	it	ge
 80104da:	eef0 7a46 	vmovge.f32	s15, s12
 80104de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e2:	bf88      	it	hi
 80104e4:	eeb0 7a46 	vmovhi.f32	s14, s12
 80104e8:	2b05      	cmp	r3, #5
 80104ea:	d05b      	beq.n	80105a4 <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 80104ec:	f20a 5134 	addw	r1, sl, #1332	; 0x534
 80104f0:	ed91 6a00 	vldr	s12, [r1]
 80104f4:	f50a 61ab 	add.w	r1, sl, #1368	; 0x558
 80104f8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80104fc:	edd1 6a00 	vldr	s13, [r1]
 8010500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010504:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8010508:	bfa8      	it	ge
 801050a:	eef0 7a46 	vmovge.f32	s15, s12
 801050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010512:	bf88      	it	hi
 8010514:	eeb0 6a47 	vmovhi.f32	s12, s14
 8010518:	eef4 6ae7 	vcmpe.f32	s13, s15
 801051c:	f20a 517c 	addw	r1, sl, #1404	; 0x57c
 8010520:	ed91 7a00 	vldr	s14, [r1]
 8010524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010528:	eef4 6ac6 	vcmpe.f32	s13, s12
 801052c:	bfa8      	it	ge
 801052e:	eef0 7a66 	vmovge.f32	s15, s13
 8010532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010536:	bf88      	it	hi
 8010538:	eef0 6a46 	vmovhi.f32	s13, s12
 801053c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010540:	f50a 61b4 	add.w	r1, sl, #1440	; 0x5a0
 8010544:	ed91 6a00 	vldr	s12, [r1]
 8010548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010550:	bfa8      	it	ge
 8010552:	eef0 7a47 	vmovge.f32	s15, s14
 8010556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055a:	bf88      	it	hi
 801055c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8010560:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010568:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801056c:	bfb8      	it	lt
 801056e:	eef0 7a46 	vmovlt.f32	s15, s12
 8010572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010576:	bf88      	it	hi
 8010578:	eeb0 7a46 	vmovhi.f32	s14, s12
 801057c:	2b0a      	cmp	r3, #10
 801057e:	d111      	bne.n	80105a4 <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 8010580:	f20a 53c4 	addw	r3, sl, #1476	; 0x5c4
 8010584:	edd3 6a00 	vldr	s13, [r3]
 8010588:	eef4 7ae6 	vcmpe.f32	s15, s13
 801058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010590:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010594:	bfb8      	it	lt
 8010596:	eef0 7a66 	vmovlt.f32	s15, s13
 801059a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801059e:	bf88      	it	hi
 80105a0:	eeb0 7a66 	vmovhi.f32	s14, s13
 80105a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105a8:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 80102fc <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 80105ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80105b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b4:	f73e ac34 	bgt.w	800ee20 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80105b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f43e ac34 	beq.w	800ee28 <m_kalman_3gyro.isra.6.constprop.36+0x17b8>
 80105c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	f040 8268 	bne.w	8010a9a <m_kalman_3gyro.isra.6.constprop.36+0x342a>
 80105ca:	2a0a      	cmp	r2, #10
 80105cc:	f000 85dc 	beq.w	8011188 <m_kalman_3gyro.isra.6.constprop.36+0x3b18>
 80105d0:	2300      	movs	r3, #0
 80105d2:	2a00      	cmp	r2, #0
 80105d4:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80105d8:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80105dc:	f102 0301 	add.w	r3, r2, #1
 80105e0:	dd03      	ble.n	80105ea <m_kalman_3gyro.isra.6.constprop.36+0x2f7a>
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	bfd8      	it	le
 80105e6:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80105ea:	2200      	movs	r2, #0
 80105ec:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 80105f0:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80105f4:	ac86      	add	r4, sp, #536	; 0x218
 80105f6:	f7fe bc32 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80105fa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010602:	eef0 aa48 	vmov.f32	s21, s16
 8010606:	ed85 8a07 	vstr	s16, [r5, #28]
 801060a:	f47f ab41 	bne.w	800fc90 <m_kalman_3gyro.isra.6.constprop.36+0x2620>
 801060e:	eef0 9a48 	vmov.f32	s19, s16
 8010612:	eef0 7a48 	vmov.f32	s15, s16
 8010616:	f7ff baa7 	b.w	800fb68 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 801061a:	eeb0 ca48 	vmov.f32	s24, s16
 801061e:	ee27 9a89 	vmul.f32	s18, s15, s18
 8010622:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801062a:	ed85 9a01 	vstr	s18, [r5, #4]
 801062e:	f47f aa5d 	bne.w	800faec <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 8010632:	f7ff baeb 	b.w	800fc0c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8010636:	eeb0 ba48 	vmov.f32	s22, s16
 801063a:	f7ff bb09 	b.w	800fc50 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 801063e:	eea9 aaa9 	vfma.f32	s20, s19, s19
 8010642:	eeb1 9a49 	vneg.f32	s18, s18
 8010646:	ee1a 0a10 	vmov	r0, s20
 801064a:	f7ef ff95 	bl	8000578 <__aeabi_f2d>
 801064e:	f004 f875 	bl	801473c <sqrt>
 8010652:	f7f0 fac1 	bl	8000bd8 <__aeabi_d2f>
 8010656:	ee07 0a90 	vmov	s15, r0
 801065a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801065e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8010662:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 8010666:	789c      	ldrb	r4, [r3, #2]
 8010668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801066a:	6818      	ldr	r0, [r3, #0]
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	6899      	ldr	r1, [r3, #8]
 8010670:	904b      	str	r0, [sp, #300]	; 0x12c
 8010672:	461d      	mov	r5, r3
 8010674:	a853      	add	r0, sp, #332	; 0x14c
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	924c      	str	r2, [sp, #304]	; 0x130
 801067a:	eeb1 0a48 	vneg.f32	s0, s16
 801067e:	eef1 8a68 	vneg.f32	s17, s17
 8010682:	ee29 ba27 	vmul.f32	s22, s18, s15
 8010686:	ee68 aaa7 	vmul.f32	s21, s17, s15
 801068a:	ee20 aa27 	vmul.f32	s20, s0, s15
 801068e:	ee29 8aa7 	vmul.f32	s16, s19, s15
 8010692:	2c00      	cmp	r4, #0
 8010694:	d051      	beq.n	801073a <m_kalman_3gyro.isra.6.constprop.36+0x30ca>
 8010696:	462a      	mov	r2, r5
 8010698:	914d      	str	r1, [sp, #308]	; 0x134
 801069a:	a94b      	add	r1, sp, #300	; 0x12c
 801069c:	934e      	str	r3, [sp, #312]	; 0x138
 801069e:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 80106a2:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 80106a6:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 80106aa:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 80106ae:	ac4f      	add	r4, sp, #316	; 0x13c
 80106b0:	f7f8 fcbc 	bl	800902c <m_qmult_eml>
 80106b4:	ed8d ba4f 	vstr	s22, [sp, #316]	; 0x13c
 80106b8:	edcd aa50 	vstr	s21, [sp, #320]	; 0x140
 80106bc:	ed8d aa51 	vstr	s20, [sp, #324]	; 0x144
 80106c0:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 80106c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106c6:	f8dd 46c8 	ldr.w	r4, [sp, #1736]	; 0x6c8
 80106ca:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 80106ce:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 80106d2:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 80106d6:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 80106da:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 80106de:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 80106e2:	ed8d 0a4d 	vstr	s0, [sp, #308]	; 0x134
 80106e6:	edcd 9a4e 	vstr	s19, [sp, #312]	; 0x138
 80106ea:	6020      	str	r0, [r4, #0]
 80106ec:	6061      	str	r1, [r4, #4]
 80106ee:	60a2      	str	r2, [r4, #8]
 80106f0:	60e3      	str	r3, [r4, #12]
 80106f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80106f4:	f7ff bb3a 	b.w	800fd6c <m_kalman_3gyro.isra.6.constprop.36+0x26fc>
 80106f8:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 80106fc:	2a00      	cmp	r2, #0
 80106fe:	f000 8357 	beq.w	8010db0 <m_kalman_3gyro.isra.6.constprop.36+0x3740>
 8010702:	2300      	movs	r3, #0
 8010704:	3a01      	subs	r2, #1
 8010706:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 801070a:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 801070e:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8010712:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8010716:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 801071a:	f7fe be07 	b.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 801071e:	ee77 7aca 	vsub.f32	s15, s15, s20
 8010722:	ee17 0a90 	vmov	r0, s15
 8010726:	f7ef ff27 	bl	8000578 <__aeabi_f2d>
 801072a:	f004 f807 	bl	801473c <sqrt>
 801072e:	f7f0 fa53 	bl	8000bd8 <__aeabi_d2f>
 8010732:	ee09 0a90 	vmov	s19, r0
 8010736:	f7ff bb01 	b.w	800fd3c <m_kalman_3gyro.isra.6.constprop.36+0x26cc>
 801073a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801073c:	e7ac      	b.n	8010698 <m_kalman_3gyro.isra.6.constprop.36+0x3028>
 801073e:	2400      	movs	r4, #0
 8010740:	4dcd      	ldr	r5, [pc, #820]	; (8010a78 <m_kalman_3gyro.isra.6.constprop.36+0x3408>)
 8010742:	f7fe b957 	b.w	800e9f4 <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8010746:	eddd 9a64 	vldr	s19, [sp, #400]	; 0x190
 801074a:	f7fe bae7 	b.w	800ed1c <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 801074e:	2301      	movs	r3, #1
 8010750:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8010754:	f240 1201 	movw	r2, #257	; 0x101
 8010758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801075a:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 801075e:	edd3 7a00 	vldr	s15, [r3]
 8010762:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8010766:	ee67 7a87 	vmul.f32	s15, s15, s14
 801076a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010772:	f200 844a 	bhi.w	801100a <m_kalman_3gyro.isra.6.constprop.36+0x399a>
 8010776:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 801077a:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 801077e:	edd2 6a06 	vldr	s13, [r2, #24]
 8010782:	ed92 7a07 	vldr	s14, [r2, #28]
 8010786:	edd2 7a08 	vldr	s15, [r2, #32]
 801078a:	2b00      	cmp	r3, #0
 801078c:	f000 86e1 	beq.w	8011552 <m_kalman_3gyro.isra.6.constprop.36+0x3ee2>
 8010790:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010794:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010798:	ee27 7a06 	vmul.f32	s14, s14, s12
 801079c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80107a0:	edc2 6a06 	vstr	s13, [r2, #24]
 80107a4:	ed82 7a07 	vstr	s14, [r2, #28]
 80107a8:	edc2 7a08 	vstr	s15, [r2, #32]
 80107ac:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 80107b0:	3301      	adds	r3, #1
 80107b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107b6:	f000 859e 	beq.w	80112f6 <m_kalman_3gyro.isra.6.constprop.36+0x3c86>
 80107ba:	2b31      	cmp	r3, #49	; 0x31
 80107bc:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80107c0:	d918      	bls.n	80107f4 <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 80107c2:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 80107c6:	b9ab      	cbnz	r3, 80107f4 <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 80107c8:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80107cc:	ed9f 6aab 	vldr	s12, [pc, #684]	; 8010a7c <m_kalman_3gyro.isra.6.constprop.36+0x340c>
 80107d0:	edd3 6a06 	vldr	s13, [r3, #24]
 80107d4:	ed93 7a07 	vldr	s14, [r3, #28]
 80107d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80107dc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80107e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80107e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80107e8:	edc3 6a06 	vstr	s13, [r3, #24]
 80107ec:	ed83 7a07 	vstr	s14, [r3, #28]
 80107f0:	edc3 7a08 	vstr	s15, [r3, #32]
 80107f4:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 80107f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80107fc:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8010800:	f000 857f 	beq.w	8011302 <m_kalman_3gyro.isra.6.constprop.36+0x3c92>
 8010804:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8010808:	f040 8418 	bne.w	801103c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 801080c:	2301      	movs	r3, #1
 801080e:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8010812:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8010816:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 801081a:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 801081e:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8010822:	6018      	str	r0, [r3, #0]
 8010824:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8010828:	6019      	str	r1, [r3, #0]
 801082a:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	eddd 7a50 	vldr	s15, [sp, #320]	; 0x140
 8010834:	eddd 6a4f 	vldr	s13, [sp, #316]	; 0x13c
 8010838:	ed9d 7a51 	vldr	s14, [sp, #324]	; 0x144
 801083c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010840:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010844:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010848:	ee37 7a07 	vadd.f32	s14, s14, s14
 801084c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010850:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010854:	ee17 0a90 	vmov	r0, s15
 8010858:	f7ef fe8e 	bl	8000578 <__aeabi_f2d>
 801085c:	f003 ff6e 	bl	801473c <sqrt>
 8010860:	f7f0 f9ba 	bl	8000bd8 <__aeabi_d2f>
 8010864:	f7ef fe88 	bl	8000578 <__aeabi_f2d>
 8010868:	a381      	add	r3, pc, #516	; (adr r3, 8010a70 <m_kalman_3gyro.isra.6.constprop.36+0x3400>)
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	f7f0 f94d 	bl	8000b0c <__aeabi_dcmplt>
 8010872:	2800      	cmp	r0, #0
 8010874:	f000 854e 	beq.w	8011314 <m_kalman_3gyro.isra.6.constprop.36+0x3ca4>
 8010878:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 801087c:	2200      	movs	r2, #0
 801087e:	2300      	movs	r3, #0
 8010880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010884:	f7f0 f938 	bl	8000af8 <__aeabi_dcmpeq>
 8010888:	2800      	cmp	r0, #0
 801088a:	f040 843d 	bne.w	8011108 <m_kalman_3gyro.isra.6.constprop.36+0x3a98>
 801088e:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 8010892:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8010896:	2301      	movs	r3, #1
 8010898:	2200      	movs	r2, #0
 801089a:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 801089e:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80108a2:	f7fe badc 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80108a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80108aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80108ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b2:	f77e ad06 	ble.w	800f2c2 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80108b6:	ed93 6a04 	vldr	s12, [r3, #16]
 80108ba:	edd3 6a05 	vldr	s13, [r3, #20]
 80108be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108c2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80108c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108ca:	ed83 7a03 	vstr	s14, [r3, #12]
 80108ce:	ed83 6a04 	vstr	s12, [r3, #16]
 80108d2:	edc3 7a05 	vstr	s15, [r3, #20]
 80108d6:	f7fe bcf4 	b.w	800f2c2 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80108da:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80108de:	f7fe bcdd 	b.w	800f29c <m_kalman_3gyro.isra.6.constprop.36+0x1c2c>
 80108e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80108e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80108ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ee:	f47e a8ce 	bne.w	800ea8e <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 80108f2:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80108f6:	9801      	ldr	r0, [sp, #4]
 80108f8:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 80108fc:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8010900:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 8010904:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8010908:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 801090c:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8010910:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8010914:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8010918:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 801091c:	f7f8 fd46 	bl	80093ac <m_dcm2q_eml>
 8010920:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8010924:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8010928:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 801092c:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 8010936:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 801093a:	4b51      	ldr	r3, [pc, #324]	; (8010a80 <m_kalman_3gyro.isra.6.constprop.36+0x3410>)
 801093c:	6852      	ldr	r2, [r2, #4]
 801093e:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8010942:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8010946:	6892      	ldr	r2, [r2, #8]
 8010948:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 801094c:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8010950:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8010954:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8010958:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801095c:	2100      	movs	r1, #0
 801095e:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8010962:	f003 f93c 	bl	8013bde <memset>
 8010966:	4b47      	ldr	r3, [pc, #284]	; (8010a84 <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8010968:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 801096c:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8010970:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8010974:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8010978:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 801097c:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8010980:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8010984:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8010988:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 801098c:	f7fe b87f 	b.w	800ea8e <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8010990:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8010994:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8010998:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 801099c:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 80109a0:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 80109a4:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 80109a8:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 80109ac:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 80109b0:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 80109b4:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 80109b8:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 80109bc:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 80109c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109c2:	f7f8 fcf3 	bl	80093ac <m_dcm2q_eml>
 80109c6:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010a88 <m_kalman_3gyro.isra.6.constprop.36+0x3418>
 80109ca:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 80109ce:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80109d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d6:	d507      	bpl.n	80109e8 <m_kalman_3gyro.isra.6.constprop.36+0x3378>
 80109d8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010a8c <m_kalman_3gyro.isra.6.constprop.36+0x341c>
 80109dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80109e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e4:	f300 85ab 	bgt.w	801153e <m_kalman_3gyro.isra.6.constprop.36+0x3ece>
 80109e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80109ec:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
 80109f0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80109f4:	2100      	movs	r1, #0
 80109f6:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 80109fa:	f003 f8f0 	bl	8013bde <memset>
 80109fe:	4b21      	ldr	r3, [pc, #132]	; (8010a84 <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8010a00:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8010a04:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8010a08:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8010a0c:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8010a10:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8010a14:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8010a18:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8010a1c:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8010a20:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8010a24:	f8dd 36dc 	ldr.w	r3, [sp, #1756]	; 0x6dc
 8010a28:	2100      	movs	r1, #0
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 8010a30:	701a      	strb	r2, [r3, #0]
 8010a32:	f7fe b812 	b.w	800ea5a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8010a36:	eef4 7ac8 	vcmpe.f32	s15, s16
 8010a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3e:	f300 840f 	bgt.w	8011260 <m_kalman_3gyro.isra.6.constprop.36+0x3bf0>
 8010a42:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8010a46:	f7fd bf60 	b.w	800e90a <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8010a4a:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8010a4e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8010a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a56:	f300 84d7 	bgt.w	8011408 <m_kalman_3gyro.isra.6.constprop.36+0x3d98>
 8010a5a:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8010a5e:	f7fd bc36 	b.w	800e2ce <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 8010a62:	ed9d 7add 	vldr	s14, [sp, #884]	; 0x374
 8010a66:	f7fd bf61 	b.w	800e92c <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 8010a6a:	bf00      	nop
 8010a6c:	f3af 8000 	nop.w
 8010a70:	47ae147b 	.word	0x47ae147b
 8010a74:	3f747ae1 	.word	0x3f747ae1
 8010a78:	40140000 	.word	0x40140000
 8010a7c:	3f19999a 	.word	0x3f19999a
 8010a80:	3f666666 	.word	0x3f666666
 8010a84:	40a00000 	.word	0x40a00000
 8010a88:	3f99999a 	.word	0x3f99999a
 8010a8c:	3f4ccccd 	.word	0x3f4ccccd
 8010a90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	f43f aa1e 	beq.w	800fed6 <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 8010a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a9c:	2b02      	cmp	r3, #2
 8010a9e:	f000 8348 	beq.w	8011132 <m_kalman_3gyro.isra.6.constprop.36+0x3ac2>
 8010aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010aa4:	2b04      	cmp	r3, #4
 8010aa6:	f47f aa16 	bne.w	800fed6 <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 8010aaa:	49cf      	ldr	r1, [pc, #828]	; (8010de8 <m_kalman_3gyro.isra.6.constprop.36+0x3778>)
 8010aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010aae:	f891 0838 	ldrb.w	r0, [r1, #2104]	; 0x838
 8010ab2:	edd3 3a00 	vldr	s7, [r3]
 8010ab6:	edd3 0a01 	vldr	s1, [r3, #4]
 8010aba:	ed93 4a02 	vldr	s8, [r3, #8]
 8010abe:	9b08      	ldr	r3, [sp, #32]
 8010ac0:	2804      	cmp	r0, #4
 8010ac2:	edd3 4a00 	vldr	s9, [r3]
 8010ac6:	ed93 5a01 	vldr	s10, [r3, #4]
 8010aca:	edd3 5a02 	vldr	s11, [r3, #8]
 8010ace:	f240 847d 	bls.w	80113cc <m_kalman_3gyro.isra.6.constprop.36+0x3d5c>
 8010ad2:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8010ad6:	edd2 2a07 	vldr	s5, [r2, #28]
 8010ada:	ed9f aac4 	vldr	s20, [pc, #784]	; 8010dec <m_kalman_3gyro.isra.6.constprop.36+0x377c>
 8010ade:	ed92 3a04 	vldr	s6, [r2, #16]
 8010ae2:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 8010df0 <m_kalman_3gyro.isra.6.constprop.36+0x3780>
 8010ae6:	ed92 7a06 	vldr	s14, [r2, #24]
 8010aea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010aec:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8010aee:	6193      	str	r3, [r2, #24]
 8010af0:	ee62 7a8a 	vmul.f32	s15, s5, s20
 8010af4:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8010af8:	eee3 7a01 	vfma.f32	s15, s6, s2
 8010afc:	61d0      	str	r0, [r2, #28]
 8010afe:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8010b00:	ed92 6a08 	vldr	s12, [r2, #32]
 8010b04:	ed92 2a03 	vldr	s4, [r2, #12]
 8010b08:	edd3 aa03 	vldr	s21, [r3, #12]
 8010b0c:	edd2 ba05 	vldr	s23, [r2, #20]
 8010b10:	ed93 ba04 	vldr	s22, [r3, #16]
 8010b14:	ed93 0a05 	vldr	s0, [r3, #20]
 8010b18:	ed82 7a03 	vstr	s14, [r2, #12]
 8010b1c:	edc2 2a04 	vstr	s5, [r2, #16]
 8010b20:	eef0 1a67 	vmov.f32	s3, s15
 8010b24:	edd3 2a07 	vldr	s5, [r3, #28]
 8010b28:	edd3 7a08 	vldr	s15, [r3, #32]
 8010b2c:	6210      	str	r0, [r2, #32]
 8010b2e:	ee67 6a0a 	vmul.f32	s13, s14, s20
 8010b32:	ed93 7a06 	vldr	s14, [r3, #24]
 8010b36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010b38:	ed82 2a00 	vstr	s4, [r2]
 8010b3c:	ed82 3a01 	vstr	s6, [r2, #4]
 8010b40:	ed82 6a05 	vstr	s12, [r2, #20]
 8010b44:	ed83 7a03 	vstr	s14, [r3, #12]
 8010b48:	edc3 aa00 	vstr	s21, [r3]
 8010b4c:	edc3 2a04 	vstr	s5, [r3, #16]
 8010b50:	edc3 7a05 	vstr	s15, [r3, #20]
 8010b54:	edc2 ba02 	vstr	s23, [r2, #8]
 8010b58:	6198      	str	r0, [r3, #24]
 8010b5a:	ed83 ba01 	vstr	s22, [r3, #4]
 8010b5e:	ed83 0a02 	vstr	s0, [r3, #8]
 8010b62:	eee2 6a01 	vfma.f32	s13, s4, s2
 8010b66:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010b68:	61d8      	str	r0, [r3, #28]
 8010b6a:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 8010df4 <m_kalman_3gyro.isra.6.constprop.36+0x3784>
 8010b6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010b70:	6218      	str	r0, [r3, #32]
 8010b72:	ee62 9a8a 	vmul.f32	s19, s5, s20
 8010b76:	edd2 2a0d 	vldr	s5, [r2, #52]	; 0x34
 8010b7a:	edc2 0a0d 	vstr	s1, [r2, #52]	; 0x34
 8010b7e:	ee26 3a0a 	vmul.f32	s6, s12, s20
 8010b82:	ee27 6a0a 	vmul.f32	s12, s14, s20
 8010b86:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8010b8a:	eef0 7a61 	vmov.f32	s15, s3
 8010b8e:	eee2 7a82 	vfma.f32	s15, s5, s4
 8010b92:	f601 04b4 	addw	r4, r1, #2228	; 0x8b4
 8010b96:	f501 610c 	add.w	r1, r1, #2240	; 0x8c0
 8010b9a:	edc2 2a0a 	vstr	s5, [r2, #40]	; 0x28
 8010b9e:	edd2 2a0c 	vldr	s5, [r2, #48]	; 0x30
 8010ba2:	eddf 1a95 	vldr	s3, [pc, #596]	; 8010df8 <m_kalman_3gyro.isra.6.constprop.36+0x3788>
 8010ba6:	edc2 2a09 	vstr	s5, [r2, #36]	; 0x24
 8010baa:	eeb0 7a43 	vmov.f32	s14, s6
 8010bae:	eee2 6a82 	vfma.f32	s13, s5, s4
 8010bb2:	eeab 7a81 	vfma.f32	s14, s23, s2
 8010bb6:	eee0 7aa1 	vfma.f32	s15, s1, s3
 8010bba:	eea0 aa01 	vfma.f32	s20, s0, s2
 8010bbe:	eeaa 6a81 	vfma.f32	s12, s21, s2
 8010bc2:	eeeb 9a01 	vfma.f32	s19, s22, s2
 8010bc6:	ed92 1a0e 	vldr	s2, [r2, #56]	; 0x38
 8010bca:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 8010bce:	ed93 3a0d 	vldr	s6, [r3, #52]	; 0x34
 8010bd2:	edc4 7a01 	vstr	s15, [r4, #4]
 8010bd6:	eee3 6aa1 	vfma.f32	s13, s7, s3
 8010bda:	eea1 7a02 	vfma.f32	s14, s2, s4
 8010bde:	eef0 aa46 	vmov.f32	s21, s12
 8010be2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010be6:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8010bea:	edc4 6a00 	vstr	s13, [r4]
 8010bee:	eea4 7a21 	vfma.f32	s14, s8, s3
 8010bf2:	eee0 aa82 	vfma.f32	s21, s1, s4
 8010bf6:	eee3 9a02 	vfma.f32	s19, s6, s4
 8010bfa:	eea6 aa02 	vfma.f32	s20, s12, s4
 8010bfe:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010c02:	eee4 aaa1 	vfma.f32	s21, s9, s3
 8010c06:	eee5 9a21 	vfma.f32	s19, s10, s3
 8010c0a:	eea5 aaa1 	vfma.f32	s20, s11, s3
 8010c0e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010c12:	ed84 7a02 	vstr	s14, [r4, #8]
 8010c16:	edc2 3a0c 	vstr	s7, [r2, #48]	; 0x30
 8010c1a:	ed82 1a0b 	vstr	s2, [r2, #44]	; 0x2c
 8010c1e:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
 8010c22:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
 8010c26:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8010c2a:	ed83 3a0a 	vstr	s6, [r3, #40]	; 0x28
 8010c2e:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
 8010c32:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
 8010c36:	edc3 5a0e 	vstr	s11, [r3, #56]	; 0x38
 8010c3a:	ee17 0a90 	vmov	r0, s15
 8010c3e:	edc1 9a01 	vstr	s19, [r1, #4]
 8010c42:	edc1 aa00 	vstr	s21, [r1]
 8010c46:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8010c4a:	ed81 aa02 	vstr	s20, [r1, #8]
 8010c4e:	f7ef fc93 	bl	8000578 <__aeabi_f2d>
 8010c52:	f003 fd73 	bl	801473c <sqrt>
 8010c56:	eef0 7a69 	vmov.f32	s15, s19
 8010c5a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8010c5e:	4604      	mov	r4, r0
 8010c60:	460d      	mov	r5, r1
 8010c62:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8010c66:	ee17 0a90 	vmov	r0, s15
 8010c6a:	f7ef fc85 	bl	8000578 <__aeabi_f2d>
 8010c6e:	f003 fd65 	bl	801473c <sqrt>
 8010c72:	f7ef ffb1 	bl	8000bd8 <__aeabi_d2f>
 8010c76:	4629      	mov	r1, r5
 8010c78:	ee09 0a90 	vmov	s19, r0
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f7ef ffab 	bl	8000bd8 <__aeabi_d2f>
 8010c82:	ee07 0a90 	vmov	s15, r0
 8010c86:	eef4 eae7 	vcmpe.f32	s29, s15
 8010c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8e:	f77f a933 	ble.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010c92:	eeb4 fae9 	vcmpe.f32	s30, s19
 8010c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9a:	f77f a92d 	ble.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010c9e:	9b08      	ldr	r3, [sp, #32]
 8010ca0:	ed93 7a00 	vldr	s14, [r3]
 8010ca4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8010ca8:	eeb0 7ac7 	vabs.f32	s14, s14
 8010cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb4:	f57f a920 	bpl.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010cb8:	9b08      	ldr	r3, [sp, #32]
 8010cba:	ed93 7a01 	vldr	s14, [r3, #4]
 8010cbe:	eeb0 7ac7 	vabs.f32	s14, s14
 8010cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	f57f a915 	bpl.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010cce:	9b08      	ldr	r3, [sp, #32]
 8010cd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8010cd4:	eeb0 7ac7 	vabs.f32	s14, s14
 8010cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	f57f a90a 	bpl.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ce6:	edd3 7a00 	vldr	s15, [r3]
 8010cea:	eef0 7ae7 	vabs.f32	s15, s15
 8010cee:	ee17 0a90 	vmov	r0, s15
 8010cf2:	f7ef fc41 	bl	8000578 <__aeabi_f2d>
 8010cf6:	a338      	add	r3, pc, #224	; (adr r3, 8010dd8 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	f7ef ff06 	bl	8000b0c <__aeabi_dcmplt>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	f43f a8f9 	beq.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d08:	edd3 7a01 	vldr	s15, [r3, #4]
 8010d0c:	eef0 7ae7 	vabs.f32	s15, s15
 8010d10:	ee17 0a90 	vmov	r0, s15
 8010d14:	f7ef fc30 	bl	8000578 <__aeabi_f2d>
 8010d18:	a32f      	add	r3, pc, #188	; (adr r3, 8010dd8 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8010d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1e:	f7ef fef5 	bl	8000b0c <__aeabi_dcmplt>
 8010d22:	2800      	cmp	r0, #0
 8010d24:	f43f a8e8 	beq.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8010d2e:	eef0 7ae7 	vabs.f32	s15, s15
 8010d32:	ee17 0a90 	vmov	r0, s15
 8010d36:	f7ef fc1f 	bl	8000578 <__aeabi_f2d>
 8010d3a:	a327      	add	r3, pc, #156	; (adr r3, 8010dd8 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8010d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d40:	f7ef fee4 	bl	8000b0c <__aeabi_dcmplt>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	f43f a8d7 	beq.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8010d4a:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8010d4e:	2a0a      	cmp	r2, #10
 8010d50:	f47f ac3e 	bne.w	80105d0 <m_kalman_3gyro.isra.6.constprop.36+0x2f60>
 8010d54:	2301      	movs	r3, #1
 8010d56:	9908      	ldr	r1, [sp, #32]
 8010d58:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8010d5c:	f240 1201 	movw	r2, #257	; 0x101
 8010d60:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8010d64:	680a      	ldr	r2, [r1, #0]
 8010d66:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8010d6a:	684a      	ldr	r2, [r1, #4]
 8010d6c:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8010d70:	688a      	ldr	r2, [r1, #8]
 8010d72:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8010d76:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8010d7a:	7013      	strb	r3, [r2, #0]
 8010d7c:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 8010d80:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8010d84:	3301      	adds	r3, #1
 8010d86:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8010d8a:	2a00      	cmp	r2, #0
 8010d8c:	f000 8226 	beq.w	80111dc <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 8010d90:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 8010d94:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 8010d98:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 8010d9c:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8010da0:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8010da4:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8010da8:	2200      	movs	r2, #0
 8010daa:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8010dae:	e215      	b.n	80111dc <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 8010db0:	f8da 68b0 	ldr.w	r6, [sl, #2224]	; 0x8b0
 8010db4:	b316      	cbz	r6, 8010dfc <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 8010db6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	f7ef fbdd 	bl	8000578 <__aeabi_f2d>
 8010dbe:	a308      	add	r3, pc, #32	; (adr r3, 8010de0 <m_kalman_3gyro.isra.6.constprop.36+0x3770>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	f7ef fec0 	bl	8000b48 <__aeabi_dcmpgt>
 8010dc8:	b1c0      	cbz	r0, 8010dfc <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 8010dca:	3e01      	subs	r6, #1
 8010dcc:	f8ca 68b0 	str.w	r6, [sl, #2224]	; 0x8b0
 8010dd0:	f7fe baac 	b.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8010dd4:	f3af 8000 	nop.w
 8010dd8:	66666666 	.word	0x66666666
 8010ddc:	3ff66666 	.word	0x3ff66666
 8010de0:	33333333 	.word	0x33333333
 8010de4:	3fd33333 	.word	0x3fd33333
 8010de8:	20001398 	.word	0x20001398
 8010dec:	bdcccccd 	.word	0xbdcccccd
 8010df0:	be4ccccd 	.word	0xbe4ccccd
 8010df4:	3dcccccd 	.word	0x3dcccccd
 8010df8:	3e4ccccd 	.word	0x3e4ccccd
 8010dfc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	f7ef fbba 	bl	8000578 <__aeabi_f2d>
 8010e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e08:	ee1e 0a90 	vmov	r0, s29
 8010e0c:	f7ef fbb4 	bl	8000578 <__aeabi_f2d>
 8010e10:	2200      	movs	r2, #0
 8010e12:	4bda      	ldr	r3, [pc, #872]	; (801117c <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 8010e14:	f7ef fc08 	bl	8000628 <__aeabi_dmul>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e20:	f7ef fe74 	bl	8000b0c <__aeabi_dcmplt>
 8010e24:	2800      	cmp	r0, #0
 8010e26:	f43e aa81 	beq.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8010e2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010e2c:	6818      	ldr	r0, [r3, #0]
 8010e2e:	f7ef fba3 	bl	8000578 <__aeabi_f2d>
 8010e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e36:	ee1f 0a10 	vmov	r0, s30
 8010e3a:	f7ef fb9d 	bl	8000578 <__aeabi_f2d>
 8010e3e:	2200      	movs	r2, #0
 8010e40:	4bce      	ldr	r3, [pc, #824]	; (801117c <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 8010e42:	f7ef fbf1 	bl	8000628 <__aeabi_dmul>
 8010e46:	4602      	mov	r2, r0
 8010e48:	460b      	mov	r3, r1
 8010e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e4e:	f7ef fe5d 	bl	8000b0c <__aeabi_dcmplt>
 8010e52:	2800      	cmp	r0, #0
 8010e54:	f43e aa6a 	beq.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8010e58:	4bc9      	ldr	r3, [pc, #804]	; (8011180 <m_kalman_3gyro.isra.6.constprop.36+0x3b10>)
 8010e5a:	f89a 58ad 	ldrb.w	r5, [sl, #2221]	; 0x8ad
 8010e5e:	6818      	ldr	r0, [r3, #0]
 8010e60:	f7ef fb8a 	bl	8000578 <__aeabi_f2d>
 8010e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e68:	ee1e 0a10 	vmov	r0, s28
 8010e6c:	f7ef fb84 	bl	8000578 <__aeabi_f2d>
 8010e70:	4602      	mov	r2, r0
 8010e72:	460b      	mov	r3, r1
 8010e74:	f7ef fa22 	bl	80002bc <__adddf3>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e80:	f7ef fe62 	bl	8000b48 <__aeabi_dcmpgt>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	f000 8376 	beq.w	8011576 <m_kalman_3gyro.isra.6.constprop.36+0x3f06>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	2d0e      	cmp	r5, #14
 8010e8e:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8010e92:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8010e96:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8010e9a:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8010e9e:	bf95      	itete	ls
 8010ea0:	3503      	addls	r5, #3
 8010ea2:	2364      	movhi	r3, #100	; 0x64
 8010ea4:	f88a 58ad 	strbls.w	r5, [sl, #2221]	; 0x8ad
 8010ea8:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 8010eac:	f7fe ba3e 	b.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8010eb0:	eeb0 aa48 	vmov.f32	s20, s16
 8010eb4:	f7fe be42 	b.w	800fb3c <m_kalman_3gyro.isra.6.constprop.36+0x24cc>
 8010eb8:	eef0 ca48 	vmov.f32	s25, s16
 8010ebc:	f7fe be2a 	b.w	800fb14 <m_kalman_3gyro.isra.6.constprop.36+0x24a4>
 8010ec0:	1c54      	adds	r4, r2, #1
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	f7fd bf02 	b.w	800eccc <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 8010ec8:	240a      	movs	r4, #10
 8010eca:	2002      	movs	r0, #2
 8010ecc:	2101      	movs	r1, #1
 8010ece:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8010ed2:	190a      	adds	r2, r1, r4
 8010ed4:	0852      	lsrs	r2, r2, #1
 8010ed6:	1953      	adds	r3, r2, r5
 8010ed8:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8010edc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ee0:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8010ee4:	ed93 7a00 	vldr	s14, [r3]
 8010ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef0:	f280 8189 	bge.w	8011206 <m_kalman_3gyro.isra.6.constprop.36+0x3b96>
 8010ef4:	188b      	adds	r3, r1, r2
 8010ef6:	085b      	lsrs	r3, r3, #1
 8010ef8:	195c      	adds	r4, r3, r5
 8010efa:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8010efe:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8010f02:	4290      	cmp	r0, r2
 8010f04:	f5a4 7474 	sub.w	r4, r4, #976	; 0x3d0
 8010f08:	d212      	bcs.n	8010f30 <m_kalman_3gyro.isra.6.constprop.36+0x38c0>
 8010f0a:	ed94 7a00 	vldr	s14, [r4]
 8010f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f16:	da05      	bge.n	8010f24 <m_kalman_3gyro.isra.6.constprop.36+0x38b4>
 8010f18:	461a      	mov	r2, r3
 8010f1a:	e7eb      	b.n	8010ef4 <m_kalman_3gyro.isra.6.constprop.36+0x3884>
 8010f1c:	eddd 9a6a 	vldr	s19, [sp, #424]	; 0x1a8
 8010f20:	f7fd befc 	b.w	800ed1c <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8010f24:	4614      	mov	r4, r2
 8010f26:	1c58      	adds	r0, r3, #1
 8010f28:	4284      	cmp	r4, r0
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	d8d1      	bhi.n	8010ed2 <m_kalman_3gyro.isra.6.constprop.36+0x3862>
 8010f2e:	e000      	b.n	8010f32 <m_kalman_3gyro.isra.6.constprop.36+0x38c2>
 8010f30:	460b      	mov	r3, r1
 8010f32:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8010f36:	185a      	adds	r2, r3, r1
 8010f38:	0092      	lsls	r2, r2, #2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	a898      	add	r0, sp, #608	; 0x260
 8010f3e:	1884      	adds	r4, r0, r2
 8010f40:	4418      	add	r0, r3
 8010f42:	edd4 6a00 	vldr	s13, [r4]
 8010f46:	ed90 7a00 	vldr	s14, [r0]
 8010f4a:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8010f4e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010f52:	a8a2      	add	r0, sp, #648	; 0x288
 8010f54:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8010f58:	4402      	add	r2, r0
 8010f5a:	4403      	add	r3, r0
 8010f5c:	250a      	movs	r5, #10
 8010f5e:	2402      	movs	r4, #2
 8010f60:	2001      	movs	r0, #1
 8010f62:	edd2 8a00 	vldr	s17, [r2]
 8010f66:	ed93 7a00 	vldr	s14, [r3]
 8010f6a:	ee37 7a68 	vsub.f32	s14, s14, s17
 8010f6e:	eee6 8a87 	vfma.f32	s17, s13, s14
 8010f72:	182a      	adds	r2, r5, r0
 8010f74:	0852      	lsrs	r2, r2, #1
 8010f76:	1853      	adds	r3, r2, r1
 8010f78:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8010f7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010f80:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8010f84:	ed93 7a00 	vldr	s14, [r3]
 8010f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f90:	f280 81d9 	bge.w	8011346 <m_kalman_3gyro.isra.6.constprop.36+0x3cd6>
 8010f94:	1813      	adds	r3, r2, r0
 8010f96:	085b      	lsrs	r3, r3, #1
 8010f98:	185d      	adds	r5, r3, r1
 8010f9a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8010f9e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8010fa2:	42a2      	cmp	r2, r4
 8010fa4:	f5a5 7574 	sub.w	r5, r5, #976	; 0x3d0
 8010fa8:	d908      	bls.n	8010fbc <m_kalman_3gyro.isra.6.constprop.36+0x394c>
 8010faa:	ed95 7a00 	vldr	s14, [r5]
 8010fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb6:	da22      	bge.n	8010ffe <m_kalman_3gyro.isra.6.constprop.36+0x398e>
 8010fb8:	461a      	mov	r2, r3
 8010fba:	e7eb      	b.n	8010f94 <m_kalman_3gyro.isra.6.constprop.36+0x3924>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8010fc2:	3a01      	subs	r2, #1
 8010fc4:	0091      	lsls	r1, r2, #2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	aa98      	add	r2, sp, #608	; 0x260
 8010fca:	1850      	adds	r0, r2, r1
 8010fcc:	441a      	add	r2, r3
 8010fce:	edd0 6a00 	vldr	s13, [r0]
 8010fd2:	ed92 7a00 	vldr	s14, [r2]
 8010fd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010fda:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010fde:	aaac      	add	r2, sp, #688	; 0x2b0
 8010fe0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010fe4:	440a      	add	r2, r1
 8010fe6:	a9ac      	add	r1, sp, #688	; 0x2b0
 8010fe8:	440b      	add	r3, r1
 8010fea:	ed92 9a00 	vldr	s18, [r2]
 8010fee:	edd3 7a00 	vldr	s15, [r3]
 8010ff2:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010ff6:	eea6 9aa7 	vfma.f32	s18, s13, s15
 8010ffa:	f7fd be2c 	b.w	800ec56 <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8010ffe:	4615      	mov	r5, r2
 8011000:	1c5c      	adds	r4, r3, #1
 8011002:	42ac      	cmp	r4, r5
 8011004:	4618      	mov	r0, r3
 8011006:	d3b4      	bcc.n	8010f72 <m_kalman_3gyro.isra.6.constprop.36+0x3902>
 8011008:	e7d9      	b.n	8010fbe <m_kalman_3gyro.isra.6.constprop.36+0x394e>
 801100a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801100e:	edd3 6a06 	vldr	s13, [r3, #24]
 8011012:	ed93 7a07 	vldr	s14, [r3, #28]
 8011016:	edd3 7a08 	vldr	s15, [r3, #32]
 801101a:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 801101e:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8011022:	ee29 7a87 	vmul.f32	s14, s19, s14
 8011026:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801102a:	2300      	movs	r3, #0
 801102c:	edc2 6a06 	vstr	s13, [r2, #24]
 8011030:	ed82 7a07 	vstr	s14, [r2, #28]
 8011034:	edc2 7a08 	vstr	s15, [r2, #32]
 8011038:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 801103c:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8011040:	2b00      	cmp	r3, #0
 8011042:	f47f abf5 	bne.w	8010830 <m_kalman_3gyro.isra.6.constprop.36+0x31c0>
 8011046:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 801104a:	b32a      	cbz	r2, 8011098 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 801104c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8011050:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105c:	d51c      	bpl.n	8011098 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 801105e:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 8011062:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106e:	d513      	bpl.n	8011098 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8011070:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 8011074:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 8011078:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 801107c:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 8011080:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 8011084:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8011088:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 801108c:	2201      	movs	r2, #1
 801108e:	700a      	strb	r2, [r1, #0]
 8011090:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8011094:	f7fd bee3 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8011098:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 801109c:	2a1e      	cmp	r2, #30
 801109e:	d00e      	beq.n	80110be <m_kalman_3gyro.isra.6.constprop.36+0x3a4e>
 80110a0:	2a00      	cmp	r2, #0
 80110a2:	f102 0301 	add.w	r3, r2, #1
 80110a6:	dd03      	ble.n	80110b0 <m_kalman_3gyro.isra.6.constprop.36+0x3a40>
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	bfd8      	it	le
 80110ac:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80110b0:	2200      	movs	r2, #0
 80110b2:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 80110b6:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80110ba:	f7fd bed0 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80110be:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 80110c2:	2b27      	cmp	r3, #39	; 0x27
 80110c4:	f200 8130 	bhi.w	8011328 <m_kalman_3gyro.isra.6.constprop.36+0x3cb8>
 80110c8:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 80110cc:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80110d0:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 80110d4:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 80110d8:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80110dc:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80110e0:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 80110e4:	2301      	movs	r3, #1
 80110e6:	7013      	strb	r3, [r2, #0]
 80110e8:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 80110ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110f0:	3301      	adds	r3, #1
 80110f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110f6:	bf08      	it	eq
 80110f8:	4613      	moveq	r3, r2
 80110fa:	2201      	movs	r2, #1
 80110fc:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8011100:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8011104:	f7fd beab 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8011108:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 801110c:	2a32      	cmp	r2, #50	; 0x32
 801110e:	f000 81a5 	beq.w	801145c <m_kalman_3gyro.isra.6.constprop.36+0x3dec>
 8011112:	2300      	movs	r3, #0
 8011114:	2a00      	cmp	r2, #0
 8011116:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 801111a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801111e:	f102 0301 	add.w	r3, r2, #1
 8011122:	f77f abb9 	ble.w	8010898 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8011126:	2b00      	cmp	r3, #0
 8011128:	bfd8      	it	le
 801112a:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801112e:	f7ff bbb3 	b.w	8010898 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8011132:	2301      	movs	r3, #1
 8011134:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8011138:	f240 1201 	movw	r2, #257	; 0x101
 801113c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801113e:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8011142:	edd3 7a00 	vldr	s15, [r3]
 8011146:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 801114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801114e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8011152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011156:	f280 8136 	bge.w	80113c6 <m_kalman_3gyro.isra.6.constprop.36+0x3d56>
 801115a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801115e:	eeb4 eaed 	vcmpe.f32	s28, s27
 8011162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011166:	edd3 6a06 	vldr	s13, [r3, #24]
 801116a:	ed93 7a07 	vldr	s14, [r3, #28]
 801116e:	edd3 7a08 	vldr	s15, [r3, #32]
 8011172:	f300 80ea 	bgt.w	801134a <m_kalman_3gyro.isra.6.constprop.36+0x3cda>
 8011176:	ac86      	add	r4, sp, #536	; 0x218
 8011178:	e74f      	b.n	801101a <m_kalman_3gyro.isra.6.constprop.36+0x39aa>
 801117a:	bf00      	nop
 801117c:	3ff80000 	.word	0x3ff80000
 8011180:	20001bc0 	.word	0x20001bc0
 8011184:	3e4ccccd 	.word	0x3e4ccccd
 8011188:	9908      	ldr	r1, [sp, #32]
 801118a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801118e:	f240 1201 	movw	r2, #257	; 0x101
 8011192:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8011196:	680a      	ldr	r2, [r1, #0]
 8011198:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801119c:	684a      	ldr	r2, [r1, #4]
 801119e:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80111a2:	688a      	ldr	r2, [r1, #8]
 80111a4:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80111a8:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80111ac:	7013      	strb	r3, [r2, #0]
 80111ae:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80111b2:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80111b6:	3301      	adds	r3, #1
 80111b8:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80111bc:	b172      	cbz	r2, 80111dc <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80111be:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80111c2:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 80111c6:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80111ca:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80111ce:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 80111d2:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 80111d6:	2200      	movs	r2, #0
 80111d8:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 80111dc:	2b1e      	cmp	r3, #30
 80111de:	f47e ae8b 	bne.w	800fef8 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80111e2:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 80111e6:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 80111ea:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 80111ee:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 80111f2:	6018      	str	r0, [r3, #0]
 80111f4:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80111f8:	ac86      	add	r4, sp, #536	; 0x218
 80111fa:	6019      	str	r1, [r3, #0]
 80111fc:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	f7fd be2c 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8011206:	4613      	mov	r3, r2
 8011208:	e68d      	b.n	8010f26 <m_kalman_3gyro.isra.6.constprop.36+0x38b6>
 801120a:	200d      	movs	r0, #13
 801120c:	2402      	movs	r4, #2
 801120e:	2101      	movs	r1, #1
 8011210:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8011214:	1843      	adds	r3, r0, r1
 8011216:	085b      	lsrs	r3, r3, #1
 8011218:	199a      	adds	r2, r3, r6
 801121a:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801121e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8011222:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8011226:	e00e      	b.n	8011246 <m_kalman_3gyro.isra.6.constprop.36+0x3bd6>
 8011228:	18ca      	adds	r2, r1, r3
 801122a:	4618      	mov	r0, r3
 801122c:	429c      	cmp	r4, r3
 801122e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8011232:	eb03 0206 	add.w	r2, r3, r6
 8011236:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801123a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801123e:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8011242:	f080 8180 	bcs.w	8011546 <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8011246:	ed95 7a00 	vldr	s14, [r5]
 801124a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011252:	dbe9      	blt.n	8011228 <m_kalman_3gyro.isra.6.constprop.36+0x3bb8>
 8011254:	1c5c      	adds	r4, r3, #1
 8011256:	42a0      	cmp	r0, r4
 8011258:	4619      	mov	r1, r3
 801125a:	d8db      	bhi.n	8011214 <m_kalman_3gyro.isra.6.constprop.36+0x3ba4>
 801125c:	f7fd b873 	b.w	800e346 <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8011260:	200d      	movs	r0, #13
 8011262:	2402      	movs	r4, #2
 8011264:	2101      	movs	r1, #1
 8011266:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801126a:	180b      	adds	r3, r1, r0
 801126c:	085b      	lsrs	r3, r3, #1
 801126e:	199a      	adds	r2, r3, r6
 8011270:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8011274:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8011278:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 801127c:	edd5 7a00 	vldr	s15, [r5]
 8011280:	eef4 7ac8 	vcmpe.f32	s15, s16
 8011284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011288:	d915      	bls.n	80112b6 <m_kalman_3gyro.isra.6.constprop.36+0x3c46>
 801128a:	18ca      	adds	r2, r1, r3
 801128c:	4618      	mov	r0, r3
 801128e:	429c      	cmp	r4, r3
 8011290:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8011294:	eb03 0206 	add.w	r2, r3, r6
 8011298:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801129c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80112a0:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 80112a4:	f080 8177 	bcs.w	8011596 <m_kalman_3gyro.isra.6.constprop.36+0x3f26>
 80112a8:	edd5 7a00 	vldr	s15, [r5]
 80112ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80112b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b4:	dbe9      	blt.n	801128a <m_kalman_3gyro.isra.6.constprop.36+0x3c1a>
 80112b6:	1c5c      	adds	r4, r3, #1
 80112b8:	42a0      	cmp	r0, r4
 80112ba:	4619      	mov	r1, r3
 80112bc:	d8d5      	bhi.n	801126a <m_kalman_3gyro.isra.6.constprop.36+0x3bfa>
 80112be:	0092      	lsls	r2, r2, #2
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	a9b6      	add	r1, sp, #728	; 0x2d8
 80112c4:	1888      	adds	r0, r1, r2
 80112c6:	4419      	add	r1, r3
 80112c8:	edd0 6a00 	vldr	s13, [r0]
 80112cc:	edd1 7a00 	vldr	s15, [r1]
 80112d0:	ee78 5a66 	vsub.f32	s11, s16, s13
 80112d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80112d8:	a9c3      	add	r1, sp, #780	; 0x30c
 80112da:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80112de:	440a      	add	r2, r1
 80112e0:	440b      	add	r3, r1
 80112e2:	edd2 7a00 	vldr	s15, [r2]
 80112e6:	edd3 6a00 	vldr	s13, [r3]
 80112ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80112ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 80112f2:	f7fd bb0a 	b.w	800e90a <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 80112f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112fa:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80112fe:	f7ff ba60 	b.w	80107c2 <m_kalman_3gyro.isra.6.constprop.36+0x3152>
 8011302:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011306:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 801130a:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 801130e:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8011312:	e693      	b.n	801103c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8011314:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8011318:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 801131c:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8011320:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8011324:	f7fd bd9b 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8011328:	9a08      	ldr	r2, [sp, #32]
 801132a:	6813      	ldr	r3, [r2, #0]
 801132c:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8011330:	6853      	ldr	r3, [r2, #4]
 8011332:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8011336:	6892      	ldr	r2, [r2, #8]
 8011338:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 801133c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011340:	2301      	movs	r3, #1
 8011342:	7013      	strb	r3, [r2, #0]
 8011344:	e6d0      	b.n	80110e8 <m_kalman_3gyro.isra.6.constprop.36+0x3a78>
 8011346:	4613      	mov	r3, r2
 8011348:	e65a      	b.n	8011000 <m_kalman_3gyro.isra.6.constprop.36+0x3990>
 801134a:	eef4 eaec 	vcmpe.f32	s29, s25
 801134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011352:	f77f af10 	ble.w	8011176 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8011356:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011358:	ed93 5a00 	vldr	s10, [r3]
 801135c:	eeb4 fac5 	vcmpe.f32	s30, s10
 8011360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011364:	f77f af07 	ble.w	8011176 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8011368:	ed9d 6a02 	vldr	s12, [sp, #8]
 801136c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011370:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8011374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011378:	f57f aefd 	bpl.w	8011176 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 801137c:	ee8d 6a8e 	vdiv.f32	s12, s27, s28
 8011380:	ee8c 4aae 	vdiv.f32	s8, s25, s29
 8011384:	eec5 4a0f 	vdiv.f32	s9, s10, s30
 8011388:	ee36 6a04 	vadd.f32	s12, s12, s8
 801138c:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 8011390:	ee36 6a24 	vadd.f32	s12, s12, s9
 8011394:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8011398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139c:	f57f aeeb 	bpl.w	8011176 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 80113a0:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80113a4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80113a8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80113ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80113b0:	2300      	movs	r3, #0
 80113b2:	edc2 6a06 	vstr	s13, [r2, #24]
 80113b6:	ed82 7a07 	vstr	s14, [r2, #28]
 80113ba:	edc2 7a08 	vstr	s15, [r2, #32]
 80113be:	ac86      	add	r4, sp, #536	; 0x218
 80113c0:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80113c4:	e63a      	b.n	801103c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 80113c6:	ac86      	add	r4, sp, #536	; 0x218
 80113c8:	f7ff b9d5 	b.w	8010776 <m_kalman_3gyro.isra.6.constprop.36+0x3106>
 80113cc:	230c      	movs	r3, #12
 80113ce:	fb03 f400 	mul.w	r4, r3, r0
 80113d2:	f601 0378 	addw	r3, r1, #2168	; 0x878
 80113d6:	4423      	add	r3, r4
 80113d8:	edc3 4a00 	vstr	s9, [r3]
 80113dc:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 80113e0:	ed83 5a01 	vstr	s10, [r3, #4]
 80113e4:	edc3 5a02 	vstr	s11, [r3, #8]
 80113e8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80113ec:	4422      	add	r2, r4
 80113ee:	3001      	adds	r0, #1
 80113f0:	2400      	movs	r4, #0
 80113f2:	f881 0838 	strb.w	r0, [r1, #2104]	; 0x838
 80113f6:	edc2 3a00 	vstr	s7, [r2]
 80113fa:	edc2 0a01 	vstr	s1, [r2, #4]
 80113fe:	ed82 4a02 	vstr	s8, [r2, #8]
 8011402:	701c      	strb	r4, [r3, #0]
 8011404:	f7fe bd1f 	b.w	800fe46 <m_kalman_3gyro.isra.6.constprop.36+0x27d6>
 8011408:	240d      	movs	r4, #13
 801140a:	2002      	movs	r0, #2
 801140c:	2101      	movs	r1, #1
 801140e:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8011412:	1862      	adds	r2, r4, r1
 8011414:	0852      	lsrs	r2, r2, #1
 8011416:	1953      	adds	r3, r2, r5
 8011418:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801141c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011420:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8011424:	edd3 7a00 	vldr	s15, [r3]
 8011428:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011430:	f280 80af 	bge.w	8011592 <m_kalman_3gyro.isra.6.constprop.36+0x3f22>
 8011434:	188b      	adds	r3, r1, r2
 8011436:	085b      	lsrs	r3, r3, #1
 8011438:	195c      	adds	r4, r3, r5
 801143a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801143e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011442:	4290      	cmp	r0, r2
 8011444:	f5a4 7456 	sub.w	r4, r4, #856	; 0x358
 8011448:	d259      	bcs.n	80114fe <m_kalman_3gyro.isra.6.constprop.36+0x3e8e>
 801144a:	edd4 7a00 	vldr	s15, [r4]
 801144e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011456:	da4c      	bge.n	80114f2 <m_kalman_3gyro.isra.6.constprop.36+0x3e82>
 8011458:	461a      	mov	r2, r3
 801145a:	e7eb      	b.n	8011434 <m_kalman_3gyro.isra.6.constprop.36+0x3dc4>
 801145c:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8011460:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 8011184 <m_kalman_3gyro.isra.6.constprop.36+0x3b14>
 8011464:	edd3 7a06 	vldr	s15, [r3, #24]
 8011468:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 801146c:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 8011470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011474:	2301      	movs	r3, #1
 8011476:	edc1 7a06 	vstr	s15, [r1, #24]
 801147a:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 801147e:	edd1 7a07 	vldr	s15, [r1, #28]
 8011482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011486:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801148a:	edc1 7a07 	vstr	s15, [r1, #28]
 801148e:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8011492:	edd1 7a08 	vldr	s15, [r1, #32]
 8011496:	ee67 7a87 	vmul.f32	s15, s15, s14
 801149a:	edc1 7a08 	vstr	s15, [r1, #32]
 801149e:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80114a2:	d014      	beq.n	80114ce <m_kalman_3gyro.isra.6.constprop.36+0x3e5e>
 80114a4:	2a00      	cmp	r2, #0
 80114a6:	f102 0301 	add.w	r3, r2, #1
 80114aa:	dd03      	ble.n	80114b4 <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	bfd8      	it	le
 80114b0:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80114b4:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80114b6:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80114ba:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80114bc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80114be:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80114c2:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80114c6:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 80114ca:	f7fd bcc8 	b.w	800ee5e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80114ce:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 80114d2:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 80114d6:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 80114da:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 80114de:	6018      	str	r0, [r3, #0]
 80114e0:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80114e4:	6019      	str	r1, [r3, #0]
 80114e6:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 80114ea:	601a      	str	r2, [r3, #0]
 80114ec:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80114f0:	e7e0      	b.n	80114b4 <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 80114f2:	4614      	mov	r4, r2
 80114f4:	1c58      	adds	r0, r3, #1
 80114f6:	42a0      	cmp	r0, r4
 80114f8:	4619      	mov	r1, r3
 80114fa:	d38a      	bcc.n	8011412 <m_kalman_3gyro.isra.6.constprop.36+0x3da2>
 80114fc:	e000      	b.n	8011500 <m_kalman_3gyro.isra.6.constprop.36+0x3e90>
 80114fe:	460b      	mov	r3, r1
 8011500:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8011504:	3a01      	subs	r2, #1
 8011506:	0092      	lsls	r2, r2, #2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	a9b6      	add	r1, sp, #728	; 0x2d8
 801150c:	1888      	adds	r0, r1, r2
 801150e:	4419      	add	r1, r3
 8011510:	ed90 7a00 	vldr	s14, [r0]
 8011514:	edd1 7a00 	vldr	s15, [r1]
 8011518:	ee38 6a47 	vsub.f32	s12, s16, s14
 801151c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011520:	a9c3      	add	r1, sp, #780	; 0x30c
 8011522:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8011526:	440a      	add	r2, r1
 8011528:	440b      	add	r3, r1
 801152a:	edd2 7a00 	vldr	s15, [r2]
 801152e:	ed93 7a00 	vldr	s14, [r3]
 8011532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011536:	eee6 7a87 	vfma.f32	s15, s13, s14
 801153a:	f7fc bec8 	b.w	800e2ce <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 801153e:	ed8a 9a2c 	vstr	s18, [sl, #176]	; 0xb0
 8011542:	f7ff ba55 	b.w	80109f0 <m_kalman_3gyro.isra.6.constprop.36+0x3380>
 8011546:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 801154a:	460b      	mov	r3, r1
 801154c:	3a01      	subs	r2, #1
 801154e:	f7fc befa 	b.w	800e346 <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8011552:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80115e8 <m_kalman_3gyro.isra.6.constprop.36+0x3f78>
 8011556:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801155a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801155e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011562:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011566:	edc3 6a06 	vstr	s13, [r3, #24]
 801156a:	ed83 7a07 	vstr	s14, [r3, #28]
 801156e:	edc3 7a08 	vstr	s15, [r3, #32]
 8011572:	f7ff b91b 	b.w	80107ac <m_kalman_3gyro.isra.6.constprop.36+0x313c>
 8011576:	b19d      	cbz	r5, 80115a0 <m_kalman_3gyro.isra.6.constprop.36+0x3f30>
 8011578:	3d01      	subs	r5, #1
 801157a:	f88a 58ad 	strb.w	r5, [sl, #2221]	; 0x8ad
 801157e:	f8aa 01fc 	strh.w	r0, [sl, #508]	; 0x1fc
 8011582:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 8011586:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 801158a:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 801158e:	f7fd becd 	b.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8011592:	4613      	mov	r3, r2
 8011594:	e7ae      	b.n	80114f4 <m_kalman_3gyro.isra.6.constprop.36+0x3e84>
 8011596:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 801159a:	460b      	mov	r3, r1
 801159c:	3a01      	subs	r2, #1
 801159e:	e68e      	b.n	80112be <m_kalman_3gyro.isra.6.constprop.36+0x3c4e>
 80115a0:	b14e      	cbz	r6, 80115b6 <m_kalman_3gyro.isra.6.constprop.36+0x3f46>
 80115a2:	f8aa 51fc 	strh.w	r5, [sl, #508]	; 0x1fc
 80115a6:	f88a 51fe 	strb.w	r5, [sl, #510]	; 0x1fe
 80115aa:	f88a 5205 	strb.w	r5, [sl, #517]	; 0x205
 80115ae:	f88a 5207 	strb.w	r5, [sl, #519]	; 0x207
 80115b2:	f7fd bebb 	b.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80115b6:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80115ba:	edd3 6a00 	vldr	s13, [r3]
 80115be:	ed93 7a01 	vldr	s14, [r3, #4]
 80115c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80115c6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80115ca:	ee66 6a86 	vmul.f32	s13, s13, s12
 80115ce:	ee27 7a06 	vmul.f32	s14, s14, s12
 80115d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80115d6:	edc3 6a00 	vstr	s13, [r3]
 80115da:	ed83 7a01 	vstr	s14, [r3, #4]
 80115de:	edc3 7a02 	vstr	s15, [r3, #8]
 80115e2:	f7fd bea3 	b.w	800f32c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80115e6:	bf00      	nop
 80115e8:	3eaaaaab 	.word	0x3eaaaaab

080115ec <SpacePointAlgorithm.isra.7>:
 80115ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f0:	ed2d 8b10 	vpush	{d8-d15}
 80115f4:	b0bb      	sub	sp, #236	; 0xec
 80115f6:	f8df e3c8 	ldr.w	lr, [pc, #968]	; 80119c0 <SpacePointAlgorithm.isra.7+0x3d4>
 80115fa:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 80115fe:	9514      	str	r5, [sp, #80]	; 0x50
 8011600:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8011604:	9515      	str	r5, [sp, #84]	; 0x54
 8011606:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 801160a:	9516      	str	r5, [sp, #88]	; 0x58
 801160c:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8011610:	9517      	str	r5, [sp, #92]	; 0x5c
 8011612:	4682      	mov	sl, r0
 8011614:	4688      	mov	r8, r1
 8011616:	4693      	mov	fp, r2
 8011618:	461d      	mov	r5, r3
 801161a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801161e:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8011622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011626:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801162a:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 801162c:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 8011630:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011634:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8011638:	eef0 ba40 	vmov.f32	s23, s0
 801163c:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8011640:	eeb0 ea61 	vmov.f32	s28, s3
 8011644:	eeb0 ba42 	vmov.f32	s22, s4
 8011648:	eef0 9a62 	vmov.f32	s19, s5
 801164c:	eeb0 aa43 	vmov.f32	s20, s6
 8011650:	eef0 aa63 	vmov.f32	s21, s7
 8011654:	f7ef fac0 	bl	8000bd8 <__aeabi_d2f>
 8011658:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 801165c:	9c54      	ldr	r4, [sp, #336]	; 0x150
 801165e:	f89d 9164 	ldrb.w	r9, [sp, #356]	; 0x164
 8011662:	9f64      	ldr	r7, [sp, #400]	; 0x190
 8011664:	ee0c 0a10 	vmov	s24, r0
 8011668:	b923      	cbnz	r3, 8011674 <SpacePointAlgorithm.isra.7+0x88>
 801166a:	2200      	movs	r2, #0
 801166c:	2301      	movs	r3, #1
 801166e:	6032      	str	r2, [r6, #0]
 8011670:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 8011674:	eddf 7ac6 	vldr	s15, [pc, #792]	; 8011990 <SpacePointAlgorithm.isra.7+0x3a4>
 8011678:	eec7 7aab 	vdiv.f32	s15, s15, s23
 801167c:	ee17 0a90 	vmov	r0, s15
 8011680:	f7ee ff7a 	bl	8000578 <__aeabi_f2d>
 8011684:	f003 f85a 	bl	801473c <sqrt>
 8011688:	f7ef faa6 	bl	8000bd8 <__aeabi_d2f>
 801168c:	ed9f 5ac1 	vldr	s10, [pc, #772]	; 8011994 <SpacePointAlgorithm.isra.7+0x3a8>
 8011690:	ed95 6a01 	vldr	s12, [r5, #4]
 8011694:	edd5 7a00 	vldr	s15, [r5]
 8011698:	edd5 6a02 	vldr	s13, [r5, #8]
 801169c:	ed9f 4abe 	vldr	s8, [pc, #760]	; 8011998 <SpacePointAlgorithm.isra.7+0x3ac>
 80116a0:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 80116a4:	eddd 0a21 	vldr	s1, [sp, #132]	; 0x84
 80116a8:	eddd 5a22 	vldr	s11, [sp, #136]	; 0x88
 80116ac:	eddd 4a23 	vldr	s9, [sp, #140]	; 0x8c
 80116b0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80116b4:	ee07 0a10 	vmov	s14, r0
 80116b8:	ee67 7a85 	vmul.f32	s15, s15, s10
 80116bc:	ee66 6a85 	vmul.f32	s13, s13, s10
 80116c0:	ed85 6a01 	vstr	s12, [r5, #4]
 80116c4:	ed9d 6a24 	vldr	s12, [sp, #144]	; 0x90
 80116c8:	edc5 7a00 	vstr	s15, [r5]
 80116cc:	edc5 6a02 	vstr	s13, [r5, #8]
 80116d0:	ee84 8a07 	vdiv.f32	s16, s8, s14
 80116d4:	ee27 fa01 	vmul.f32	s30, s14, s2
 80116d8:	ee67 ea20 	vmul.f32	s29, s14, s1
 80116dc:	ee67 8a25 	vmul.f32	s17, s14, s11
 80116e0:	ee67 fa24 	vmul.f32	s31, s14, s9
 80116e4:	ee27 da06 	vmul.f32	s26, s14, s12
 80116e8:	f1b9 0f04 	cmp.w	r9, #4
 80116ec:	d806      	bhi.n	80116fc <SpacePointAlgorithm.isra.7+0x110>
 80116ee:	e8df f019 	tbh	[pc, r9, lsl #1]
 80116f2:	0136      	.short	0x0136
 80116f4:	012b0143 	.word	0x012b0143
 80116f8:	010d0005 	.word	0x010d0005
 80116fc:	eddf 7aa7 	vldr	s15, [pc, #668]	; 801199c <SpacePointAlgorithm.isra.7+0x3b0>
 8011700:	eddf caa7 	vldr	s25, [pc, #668]	; 80119a0 <SpacePointAlgorithm.isra.7+0x3b4>
 8011704:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011708:	ee2a aa27 	vmul.f32	s20, s20, s15
 801170c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8011710:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8011714:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8011718:	ee6a aa8c 	vmul.f32	s21, s21, s24
 801171c:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
 8011720:	2200      	movs	r2, #0
 8011722:	2300      	movs	r3, #0
 8011724:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8011728:	ed96 9a00 	vldr	s18, [r6]
 801172c:	f7ef f9e4 	bl	8000af8 <__aeabi_dcmpeq>
 8011730:	b168      	cbz	r0, 801174e <SpacePointAlgorithm.isra.7+0x162>
 8011732:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8011736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801173a:	f340 80ec 	ble.w	8011916 <SpacePointAlgorithm.isra.7+0x32a>
 801173e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8011742:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8011746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174a:	f140 80e4 	bpl.w	8011916 <SpacePointAlgorithm.isra.7+0x32a>
 801174e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011752:	ee79 7a27 	vadd.f32	s15, s18, s15
 8011756:	ed9f 9a93 	vldr	s18, [pc, #588]	; 80119a4 <SpacePointAlgorithm.isra.7+0x3b8>
 801175a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80119a8 <SpacePointAlgorithm.isra.7+0x3bc>
 801175e:	edc6 7a00 	vstr	s15, [r6]
 8011762:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011766:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 801176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011772:	bfb8      	it	lt
 8011774:	eef0 7a47 	vmovlt.f32	s15, s14
 8011778:	ee88 5a27 	vdiv.f32	s10, s16, s15
 801177c:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 80119ac <SpacePointAlgorithm.isra.7+0x3c0>
 8011780:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8011784:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8011788:	ee67 0aae 	vmul.f32	s1, s15, s29
 801178c:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8011790:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8011794:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011798:	edd8 7a01 	vldr	s15, [r8, #4]
 801179c:	ed94 3a09 	vldr	s6, [r4, #36]	; 0x24
 80117a0:	ed94 4a05 	vldr	s8, [r4, #20]
 80117a4:	edd4 6a03 	vldr	s13, [r4, #12]
 80117a8:	edd8 3a00 	vldr	s7, [r8]
 80117ac:	edd4 2a02 	vldr	s5, [r4, #8]
 80117b0:	edcd 4a37 	vstr	s9, [sp, #220]	; 0xdc
 80117b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80117b8:	ed94 7a04 	vldr	s14, [r4, #16]
 80117bc:	edd4 4a07 	vldr	s9, [r4, #28]
 80117c0:	ed8d 6a38 	vstr	s12, [sp, #224]	; 0xe0
 80117c4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80117c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80117cc:	ed94 3a00 	vldr	s6, [r4]
 80117d0:	edcd 5a34 	vstr	s11, [sp, #208]	; 0xd0
 80117d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80117d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80117dc:	ed94 4a01 	vldr	s8, [r4, #4]
 80117e0:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 80117e4:	eee3 6a23 	vfma.f32	s13, s6, s7
 80117e8:	462b      	mov	r3, r5
 80117ea:	ad1a      	add	r5, sp, #104	; 0x68
 80117ec:	ed94 3a0b 	vldr	s6, [r4, #44]	; 0x2c
 80117f0:	edcd 5a36 	vstr	s11, [sp, #216]	; 0xd8
 80117f4:	eea3 7a84 	vfma.f32	s14, s7, s8
 80117f8:	4650      	mov	r0, sl
 80117fa:	a92e      	add	r1, sp, #184	; 0xb8
 80117fc:	ed98 4a02 	vldr	s8, [r8, #8]
 8011800:	edd4 5a08 	vldr	s11, [r4, #32]
 8011804:	ed8d 5a25 	vstr	s10, [sp, #148]	; 0x94
 8011808:	ee34 6a43 	vsub.f32	s12, s8, s6
 801180c:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8011810:	f10d 0a94 	add.w	sl, sp, #148	; 0x94
 8011814:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80119c4 <SpacePointAlgorithm.isra.7+0x3d8>
 8011818:	ed94 4a06 	vldr	s8, [r4, #24]
 801181c:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8011820:	eea4 7a86 	vfma.f32	s14, s9, s12
 8011824:	465a      	mov	r2, fp
 8011826:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80119c8 <SpacePointAlgorithm.isra.7+0x3dc>
 801182a:	ed8d 1a2e 	vstr	s2, [sp, #184]	; 0xb8
 801182e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011832:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80119cc <SpacePointAlgorithm.isra.7+0x3e0>
 8011836:	eee6 6a04 	vfma.f32	s13, s12, s8
 801183a:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 801183e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011842:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011846:	edcd 6a1c 	vstr	s13, [sp, #112]	; 0x70
 801184a:	ed8d 1a2f 	vstr	s2, [sp, #188]	; 0xbc
 801184e:	ed8d 1a30 	vstr	s2, [sp, #192]	; 0xc0
 8011852:	edcd 0a31 	vstr	s1, [sp, #196]	; 0xc4
 8011856:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 801185a:	edcd 0a33 	vstr	s1, [sp, #204]	; 0xcc
 801185e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011862:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 8011866:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801186a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801186c:	9402      	str	r4, [sp, #8]
 801186e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011870:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
 8011874:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011876:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
 801187a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801187c:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
 8011880:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
 8011882:	9411      	str	r4, [sp, #68]	; 0x44
 8011884:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 8011888:	9c67      	ldr	r4, [sp, #412]	; 0x19c
 801188a:	9410      	str	r4, [sp, #64]	; 0x40
 801188c:	9c66      	ldr	r4, [sp, #408]	; 0x198
 801188e:	9504      	str	r5, [sp, #16]
 8011890:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011894:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
 8011898:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 801189c:	9c63      	ldr	r4, [sp, #396]	; 0x18c
 801189e:	940c      	str	r4, [sp, #48]	; 0x30
 80118a0:	9c62      	ldr	r4, [sp, #392]	; 0x188
 80118a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80118a4:	ad1b      	add	r5, sp, #108	; 0x6c
 80118a6:	9c55      	ldr	r4, [sp, #340]	; 0x154
 80118a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80118ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118b0:	eeb0 2a4c 	vmov.f32	s4, s24
 80118b4:	eef0 1a6b 	vmov.f32	s3, s23
 80118b8:	eeb0 1a6a 	vmov.f32	s2, s21
 80118bc:	eef0 0a4a 	vmov.f32	s1, s20
 80118c0:	eeb0 0a69 	vmov.f32	s0, s19
 80118c4:	e9cd 1a00 	strd	r1, sl, [sp]
 80118c8:	edcd ca28 	vstr	s25, [sp, #160]	; 0xa0
 80118cc:	a91c      	add	r1, sp, #112	; 0x70
 80118ce:	edcd ca29 	vstr	s25, [sp, #164]	; 0xa4
 80118d2:	edcd ca2a 	vstr	s25, [sp, #168]	; 0xa8
 80118d6:	9612      	str	r6, [sp, #72]	; 0x48
 80118d8:	940a      	str	r4, [sp, #40]	; 0x28
 80118da:	950d      	str	r5, [sp, #52]	; 0x34
 80118dc:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 80118e0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80118e4:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
 80118e8:	f7fb fec2 	bl	800d670 <m_kalman_3gyro.isra.6.constprop.36>
 80118ec:	4651      	mov	r1, sl
 80118ee:	9862      	ldr	r0, [sp, #392]	; 0x188
 80118f0:	f7f7 fbdc 	bl	80090ac <m_q2dcm_eml>
 80118f4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6013      	str	r3, [r2, #0]
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	6053      	str	r3, [r2, #4]
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	6093      	str	r3, [r2, #8]
 8011902:	b03b      	add	sp, #236	; 0xec
 8011904:	ecbd 8b10 	vpop	{d8-d15}
 8011908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801190c:	eddf ca28 	vldr	s25, [pc, #160]	; 80119b0 <SpacePointAlgorithm.isra.7+0x3c4>
 8011910:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8011914:	e704      	b.n	8011720 <SpacePointAlgorithm.isra.7+0x134>
 8011916:	eddf 7a27 	vldr	s15, [pc, #156]	; 80119b4 <SpacePointAlgorithm.isra.7+0x3c8>
 801191a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80119ac <SpacePointAlgorithm.isra.7+0x3c0>
 801191e:	ee3e ea27 	vadd.f32	s28, s28, s15
 8011922:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8011926:	ee27 1a8f 	vmul.f32	s2, s15, s30
 801192a:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801192e:	2300      	movs	r3, #0
 8011930:	6033      	str	r3, [r6, #0]
 8011932:	ee67 0aae 	vmul.f32	s1, s15, s29
 8011936:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 801193a:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 801193e:	ee88 5a0e 	vdiv.f32	s10, s16, s28
 8011942:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8011946:	e725      	b.n	8011794 <SpacePointAlgorithm.isra.7+0x1a8>
 8011948:	ee69 9a8c 	vmul.f32	s19, s19, s24
 801194c:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8011950:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8011954:	eddf ca18 	vldr	s25, [pc, #96]	; 80119b8 <SpacePointAlgorithm.isra.7+0x3cc>
 8011958:	eef1 da04 	vmov.f32	s27, #20	; 0x40a00000  5.0
 801195c:	e6e0      	b.n	8011720 <SpacePointAlgorithm.isra.7+0x134>
 801195e:	eddf 7a17 	vldr	s15, [pc, #92]	; 80119bc <SpacePointAlgorithm.isra.7+0x3d0>
 8011962:	eddf ca0f 	vldr	s25, [pc, #60]	; 80119a0 <SpacePointAlgorithm.isra.7+0x3b4>
 8011966:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801196a:	ee2a aa27 	vmul.f32	s20, s20, s15
 801196e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8011972:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8011976:	e6d3      	b.n	8011720 <SpacePointAlgorithm.isra.7+0x134>
 8011978:	ee69 9a8c 	vmul.f32	s19, s19, s24
 801197c:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8011980:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8011984:	eddf ca0a 	vldr	s25, [pc, #40]	; 80119b0 <SpacePointAlgorithm.isra.7+0x3c4>
 8011988:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 801198c:	e6c8      	b.n	8011720 <SpacePointAlgorithm.isra.7+0x134>
 801198e:	bf00      	nop
 8011990:	3c03126f 	.word	0x3c03126f
 8011994:	3c8efa35 	.word	0x3c8efa35
 8011998:	3b656042 	.word	0x3b656042
 801199c:	42c80000 	.word	0x42c80000
 80119a0:	3a83126f 	.word	0x3a83126f
 80119a4:	3d4ccccd 	.word	0x3d4ccccd
 80119a8:	3e4ccccd 	.word	0x3e4ccccd
 80119ac:	3f333333 	.word	0x3f333333
 80119b0:	3ac49ba6 	.word	0x3ac49ba6
 80119b4:	358637bd 	.word	0x358637bd
 80119b8:	3727c5ac 	.word	0x3727c5ac
 80119bc:	3dcccccd 	.word	0x3dcccccd
 80119c0:	08016270 	.word	0x08016270
 80119c4:	3b449ba6 	.word	0x3b449ba6
 80119c8:	3a9d4952 	.word	0x3a9d4952
 80119cc:	3c23d70a 	.word	0x3c23d70a

080119d0 <iNemo_update_6X.constprop.34>:
 80119d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	4ce6      	ldr	r4, [pc, #920]	; (8011d70 <iNemo_update_6X.constprop.34+0x3a0>)
 80119d6:	4fe7      	ldr	r7, [pc, #924]	; (8011d74 <iNemo_update_6X.constprop.34+0x3a4>)
 80119d8:	f994 343d 	ldrsb.w	r3, [r4, #1085]	; 0x43d
 80119dc:	ee07 3a90 	vmov	s15, r3
 80119e0:	f994 3440 	ldrsb.w	r3, [r4, #1088]	; 0x440
 80119e4:	ee06 3a90 	vmov	s13, r3
 80119e8:	f994 3458 	ldrsb.w	r3, [r4, #1112]	; 0x458
 80119ec:	ee07 3a10 	vmov	s14, r3
 80119f0:	f994 3455 	ldrsb.w	r3, [r4, #1109]	; 0x455
 80119f4:	ed2d 8b08 	vpush	{d8-d11}
 80119f8:	ee09 3a90 	vmov	s19, r3
 80119fc:	f994 343c 	ldrsb.w	r3, [r4, #1084]	; 0x43c
 8011a00:	7b3a      	ldrb	r2, [r7, #12]
 8011a02:	ee01 3a90 	vmov	s3, r3
 8011a06:	f994 343f 	ldrsb.w	r3, [r4, #1087]	; 0x43f
 8011a0a:	ee02 3a10 	vmov	s4, r3
 8011a0e:	f994 3457 	ldrsb.w	r3, [r4, #1111]	; 0x457
 8011a12:	ee02 3a90 	vmov	s5, r3
 8011a16:	f994 3454 	ldrsb.w	r3, [r4, #1108]	; 0x454
 8011a1a:	ee03 3a90 	vmov	s7, r3
 8011a1e:	f994 3443 	ldrsb.w	r3, [r4, #1091]	; 0x443
 8011a22:	ee08 3a10 	vmov	s16, r3
 8011a26:	f994 345b 	ldrsb.w	r3, [r4, #1115]	; 0x45b
 8011a2a:	ee08 3a90 	vmov	s17, r3
 8011a2e:	f994 343e 	ldrsb.w	r3, [r4, #1086]	; 0x43e
 8011a32:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
 8011a36:	edd5 4a07 	vldr	s9, [r5, #28]
 8011a3a:	ed95 3a06 	vldr	s6, [r5, #24]
 8011a3e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8011a42:	ed95 4a09 	vldr	s8, [r5, #36]	; 0x24
 8011a46:	ed95 5a08 	vldr	s10, [r5, #32]
 8011a4a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011a4e:	ee00 3a90 	vmov	s1, r3
 8011a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a56:	f994 3441 	ldrsb.w	r3, [r4, #1089]	; 0x441
 8011a5a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011a5e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011a62:	ee01 3a10 	vmov	s2, r3
 8011a66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011a6a:	f994 3442 	ldrsb.w	r3, [r4, #1090]	; 0x442
 8011a6e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011a72:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8011a76:	eee1 7a83 	vfma.f32	s15, s3, s6
 8011a7a:	b0e5      	sub	sp, #404	; 0x194
 8011a7c:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8011a80:	ee01 3a90 	vmov	s3, r3
 8011a84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a88:	f994 3459 	ldrsb.w	r3, [r4, #1113]	; 0x459
 8011a8c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011a90:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8011a94:	eee3 6a02 	vfma.f32	s13, s6, s4
 8011a98:	4680      	mov	r8, r0
 8011a9a:	ee02 3a10 	vmov	s4, r3
 8011a9e:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8011aa2:	f994 3456 	ldrsb.w	r3, [r4, #1110]	; 0x456
 8011aa6:	ee69 9a86 	vmul.f32	s19, s19, s12
 8011aaa:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8011aae:	eea4 7a22 	vfma.f32	s14, s8, s5
 8011ab2:	ee02 3a90 	vmov	s5, r3
 8011ab6:	f994 345a 	ldrsb.w	r3, [r4, #1114]	; 0x45a
 8011aba:	eee3 9a84 	vfma.f32	s19, s7, s8
 8011abe:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8011ac2:	ee03 3a90 	vmov	s7, r3
 8011ac6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8011aca:	f994 3444 	ldrsb.w	r3, [r4, #1092]	; 0x444
 8011ace:	ee28 8a24 	vmul.f32	s16, s16, s9
 8011ad2:	ee68 8a86 	vmul.f32	s17, s17, s12
 8011ad6:	ee04 3a90 	vmov	s9, r3
 8011ada:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8011ade:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
 8011ae2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8011ae6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011aea:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8011aee:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8011af2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8011af6:	ee06 3a10 	vmov	s12, r3
 8011afa:	eee0 7a85 	vfma.f32	s15, s1, s10
 8011afe:	2300      	movs	r3, #0
 8011b00:	e9c9 3300 	strd	r3, r3, [r9]
 8011b04:	eee5 6a01 	vfma.f32	s13, s10, s2
 8011b08:	f8c9 3008 	str.w	r3, [r9, #8]
 8011b0c:	eea3 8a21 	vfma.f32	s16, s6, s3
 8011b10:	eea5 7a82 	vfma.f32	s14, s11, s4
 8011b14:	eee2 9aa5 	vfma.f32	s19, s5, s11
 8011b18:	eee4 8a23 	vfma.f32	s17, s8, s7
 8011b1c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011b20:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011b24:	eef0 ba40 	vmov.f32	s23, s0
 8011b28:	eea5 8a24 	vfma.f32	s16, s10, s9
 8011b2c:	eeb1 ba66 	vneg.f32	s22, s13
 8011b30:	eef1 aa67 	vneg.f32	s21, s15
 8011b34:	eeb1 aa47 	vneg.f32	s20, s14
 8011b38:	eef1 9a69 	vneg.f32	s19, s19
 8011b3c:	eee5 8a86 	vfma.f32	s17, s11, s12
 8011b40:	2a00      	cmp	r2, #0
 8011b42:	f000 8125 	beq.w	8011d90 <iNemo_update_6X.constprop.34+0x3c0>
 8011b46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011b4a:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8011d88 <iNemo_update_6X.constprop.34+0x3b8>
 8011b4e:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8011d8c <iNemo_update_6X.constprop.34+0x3bc>
 8011b52:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011b56:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011b5a:	ee17 0a90 	vmov	r0, s15
 8011b5e:	f7ee fd0b 	bl	8000578 <__aeabi_f2d>
 8011b62:	f002 fdeb 	bl	801473c <sqrt>
 8011b66:	f7ef f837 	bl	8000bd8 <__aeabi_d2f>
 8011b6a:	ee07 0a90 	vmov	s15, r0
 8011b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b72:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011b76:	ee2b ba27 	vmul.f32	s22, s22, s15
 8011b7a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8011b7e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011b82:	f894 29fd 	ldrb.w	r2, [r4, #2557]	; 0x9fd
 8011b86:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 8011b8a:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8011b8c:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 8011b90:	ee09 2a10 	vmov	s18, r2
 8011b94:	4978      	ldr	r1, [pc, #480]	; (8011d78 <iNemo_update_6X.constprop.34+0x3a8>)
 8011b96:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8011b98:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 8011b9c:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8011ba0:	f043 0302 	orr.w	r3, r3, #2
 8011ba4:	22f8      	movs	r2, #248	; 0xf8
 8011ba6:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 8011baa:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 8011bae:	f083 0301 	eor.w	r3, r3, #1
 8011bb2:	188e      	adds	r6, r1, r2
 8011bb4:	a826      	add	r0, sp, #152	; 0x98
 8011bb6:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 8011bba:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 8011bbe:	f002 f803 	bl	8013bc8 <memcpy>
 8011bc2:	f506 7c9b 	add.w	ip, r6, #310	; 0x136
 8011bc6:	6a30      	ldr	r0, [r6, #32]
 8011bc8:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8011bcc:	2300      	movs	r3, #0
 8011bce:	f506 7e9a 	add.w	lr, r6, #308	; 0x134
 8011bd2:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
 8011bd6:	f206 1235 	addw	r2, r6, #309	; 0x135
 8011bda:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8011bde:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011be2:	9213      	str	r2, [sp, #76]	; 0x4c
 8011be4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8011be8:	aa1d      	add	r2, sp, #116	; 0x74
 8011bea:	632b      	str	r3, [r5, #48]	; 0x30
 8011bec:	636b      	str	r3, [r5, #52]	; 0x34
 8011bee:	63ab      	str	r3, [r5, #56]	; 0x38
 8011bf0:	4962      	ldr	r1, [pc, #392]	; (8011d7c <iNemo_update_6X.constprop.34+0x3ac>)
 8011bf2:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8011bf6:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 8011bfa:	932a      	str	r3, [sp, #168]	; 0xa8
 8011bfc:	9210      	str	r2, [sp, #64]	; 0x40
 8011bfe:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 8011c02:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 8011c06:	ed8d 8a2e 	vstr	s16, [sp, #184]	; 0xb8
 8011c0a:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8011c0e:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 8011c12:	edcd 8a31 	vstr	s17, [sp, #196]	; 0xc4
 8011c16:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8011c1a:	9115      	str	r1, [sp, #84]	; 0x54
 8011c1c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011c20:	f7ee fcaa 	bl	8000578 <__aeabi_f2d>
 8011c24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011c28:	f894 09de 	ldrb.w	r0, [r4, #2526]	; 0x9de
 8011c2c:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8011c30:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 8011c34:	ed96 aa03 	vldr	s20, [r6, #12]
 8011c38:	edd6 9a02 	vldr	s19, [r6, #8]
 8011c3c:	edd6 8a01 	vldr	s17, [r6, #4]
 8011c40:	ed96 8a00 	vldr	s16, [r6]
 8011c44:	f7ee fc76 	bl	8000534 <__aeabi_ui2d>
 8011c48:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8011c4c:	f894 39dc 	ldrb.w	r3, [r4, #2524]	; 0x9dc
 8011c50:	f894 c9da 	ldrb.w	ip, [r4, #2522]	; 0x9da
 8011c54:	f894 29d9 	ldrb.w	r2, [r4, #2521]	; 0x9d9
 8011c58:	f894 e9db 	ldrb.w	lr, [r4, #2523]	; 0x9db
 8011c5c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8011c60:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 8011c64:	9308      	str	r3, [sp, #32]
 8011c66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011c6a:	f894 39d8 	ldrb.w	r3, [r4, #2520]	; 0x9d8
 8011c6e:	6930      	ldr	r0, [r6, #16]
 8011c70:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8011c74:	e9cd ce06 	strd	ip, lr, [sp, #24]
 8011c78:	f7ee fc7e 	bl	8000578 <__aeabi_f2d>
 8011c7c:	ae35      	add	r6, sp, #212	; 0xd4
 8011c7e:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 8011c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c86:	eeb0 0a49 	vmov.f32	s0, s18
 8011c8a:	eef0 3a6b 	vmov.f32	s7, s23
 8011c8e:	eeb0 3a4b 	vmov.f32	s6, s22
 8011c92:	eef0 2a6a 	vmov.f32	s5, s21
 8011c96:	eeb0 2a4a 	vmov.f32	s4, s20
 8011c9a:	eef0 1a69 	vmov.f32	s3, s19
 8011c9e:	eeb0 1a68 	vmov.f32	s2, s17
 8011ca2:	eef0 0a48 	vmov.f32	s1, s16
 8011ca6:	ab32      	add	r3, sp, #200	; 0xc8
 8011ca8:	aa2c      	add	r2, sp, #176	; 0xb0
 8011caa:	a929      	add	r1, sp, #164	; 0xa4
 8011cac:	a848      	add	r0, sp, #288	; 0x120
 8011cae:	e9cd 6c00 	strd	r6, ip, [sp]
 8011cb2:	f7ff fc9b 	bl	80115ec <SpacePointAlgorithm.isra.7>
 8011cb6:	f1b8 0f00 	cmp.w	r8, #0
 8011cba:	d00f      	beq.n	8011cdc <iNemo_update_6X.constprop.34+0x30c>
 8011cbc:	f8da 2000 	ldr.w	r2, [sl]
 8011cc0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011cc4:	f8c8 2000 	str.w	r2, [r8]
 8011cc8:	f8c8 3004 	str.w	r3, [r8, #4]
 8011ccc:	f8da 2008 	ldr.w	r2, [sl, #8]
 8011cd0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8011cd4:	f8c8 2008 	str.w	r2, [r8, #8]
 8011cd8:	f8c8 300c 	str.w	r3, [r8, #12]
 8011cdc:	4b28      	ldr	r3, [pc, #160]	; (8011d80 <iNemo_update_6X.constprop.34+0x3b0>)
 8011cde:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011ce2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8011ce6:	f894 2afa 	ldrb.w	r2, [r4, #2810]	; 0xafa
 8011cea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8011cee:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 8011cf2:	2a01      	cmp	r2, #1
 8011cf4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8011cf8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 8011cfc:	d119      	bne.n	8011d32 <iNemo_update_6X.constprop.34+0x362>
 8011cfe:	f8da 2004 	ldr.w	r2, [sl, #4]
 8011d02:	f8da 6000 	ldr.w	r6, [sl]
 8011d06:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011d0a:	f8da 100c 	ldr.w	r1, [sl, #12]
 8011d0e:	67ea      	str	r2, [r5, #124]	; 0x7c
 8011d10:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8011d14:	2200      	movs	r2, #0
 8011d16:	67ae      	str	r6, [r5, #120]	; 0x78
 8011d18:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 8011d1c:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 8011d20:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 8011d24:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8011d28:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 8011d2c:	f884 29e8 	strb.w	r2, [r4, #2536]	; 0x9e8
 8011d30:	733a      	strb	r2, [r7, #12]
 8011d32:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011d84 <iNemo_update_6X.constprop.34+0x3b4>
 8011d36:	ed99 6a00 	vldr	s12, [r9]
 8011d3a:	edd9 6a01 	vldr	s13, [r9, #4]
 8011d3e:	ed99 7a02 	vldr	s14, [r9, #8]
 8011d42:	f894 2af9 	ldrb.w	r2, [r4, #2809]	; 0xaf9
 8011d46:	ee26 5a27 	vmul.f32	s10, s12, s15
 8011d4a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8011d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d52:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8011d56:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8011d5a:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8011d5e:	b1e2      	cbz	r2, 8011d9a <iNemo_update_6X.constprop.34+0x3ca>
 8011d60:	f894 2b08 	ldrb.w	r2, [r4, #2824]	; 0xb08
 8011d64:	2a09      	cmp	r2, #9
 8011d66:	d825      	bhi.n	8011db4 <iNemo_update_6X.constprop.34+0x3e4>
 8011d68:	3201      	adds	r2, #1
 8011d6a:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 8011d6e:	e016      	b.n	8011d9e <iNemo_update_6X.constprop.34+0x3ce>
 8011d70:	20001398 	.word	0x20001398
 8011d74:	20000000 	.word	0x20000000
 8011d78:	20001c64 	.word	0x20001c64
 8011d7c:	20000010 	.word	0x20000010
 8011d80:	20001d98 	.word	0x20001d98
 8011d84:	42652ee1 	.word	0x42652ee1
 8011d88:	bf3504f3 	.word	0xbf3504f3
 8011d8c:	3f3504f3 	.word	0x3f3504f3
 8011d90:	f8df a030 	ldr.w	sl, [pc, #48]	; 8011dc4 <iNemo_update_6X.constprop.34+0x3f4>
 8011d94:	f8df b030 	ldr.w	fp, [pc, #48]	; 8011dc8 <iNemo_update_6X.constprop.34+0x3f8>
 8011d98:	e6f3      	b.n	8011b82 <iNemo_update_6X.constprop.34+0x1b2>
 8011d9a:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 8011d9e:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 8011da2:	f083 0302 	eor.w	r3, r3, #2
 8011da6:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 8011daa:	b065      	add	sp, #404	; 0x194
 8011dac:	ecbd 8b08 	vpop	{d8-d11}
 8011db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db4:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 8011db8:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 8011dbc:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8011dc0:	e7ed      	b.n	8011d9e <iNemo_update_6X.constprop.34+0x3ce>
 8011dc2:	bf00      	nop
 8011dc4:	bf333333 	.word	0xbf333333
 8011dc8:	3f333333 	.word	0x3f333333

08011dcc <iNemo_update.constprop.35>:
 8011dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	4cf0      	ldr	r4, [pc, #960]	; (8012194 <iNemo_update.constprop.35+0x3c8>)
 8011dd2:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 8011dd6:	f994 2437 	ldrsb.w	r2, [r4, #1079]	; 0x437
 8011dda:	f994 a41a 	ldrsb.w	sl, [r4, #1050]	; 0x41a
 8011dde:	f994 7420 	ldrsb.w	r7, [r4, #1056]	; 0x420
 8011de2:	f994 9436 	ldrsb.w	r9, [r4, #1078]	; 0x436
 8011de6:	f994 6438 	ldrsb.w	r6, [r4, #1080]	; 0x438
 8011dea:	f994 1426 	ldrsb.w	r1, [r4, #1062]	; 0x426
 8011dee:	f994 e424 	ldrsb.w	lr, [r4, #1060]	; 0x424
 8011df2:	f994 c427 	ldrsb.w	ip, [r4, #1063]	; 0x427
 8011df6:	ed2d 8b0c 	vpush	{d8-d13}
 8011dfa:	ee0c 3a10 	vmov	s24, r3
 8011dfe:	f994 3419 	ldrsb.w	r3, [r4, #1049]	; 0x419
 8011e02:	ee07 3a90 	vmov	s15, r3
 8011e06:	f994 341b 	ldrsb.w	r3, [r4, #1051]	; 0x41b
 8011e0a:	ee0b 3a90 	vmov	s23, r3
 8011e0e:	f994 341c 	ldrsb.w	r3, [r4, #1052]	; 0x41c
 8011e12:	ee06 3a10 	vmov	s12, r3
 8011e16:	f994 341d 	ldrsb.w	r3, [r4, #1053]	; 0x41d
 8011e1a:	ee00 3a90 	vmov	s1, r3
 8011e1e:	f994 341f 	ldrsb.w	r3, [r4, #1055]	; 0x41f
 8011e22:	ee0c 3a90 	vmov	s25, r3
 8011e26:	f994 341e 	ldrsb.w	r3, [r4, #1054]	; 0x41e
 8011e2a:	b0e7      	sub	sp, #412	; 0x19c
 8011e2c:	ee01 3a90 	vmov	s3, r3
 8011e30:	f994 3425 	ldrsb.w	r3, [r4, #1061]	; 0x425
 8011e34:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8011e38:	ee08 3a10 	vmov	s16, r3
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	e9c8 3300 	strd	r3, r3, [r8]
 8011e42:	f8c8 3008 	str.w	r3, [r8, #8]
 8011e46:	f994 3428 	ldrsb.w	r3, [r4, #1064]	; 0x428
 8011e4a:	ee08 3a90 	vmov	s17, r3
 8011e4e:	f994 3429 	ldrsb.w	r3, [r4, #1065]	; 0x429
 8011e52:	f604 350c 	addw	r5, r4, #2828	; 0xb0c
 8011e56:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 8011e5a:	ed95 3a03 	vldr	s6, [r5, #12]
 8011e5e:	ed95 1a06 	vldr	s2, [r5, #24]
 8011e62:	ed95 aa07 	vldr	s20, [r5, #28]
 8011e66:	edd5 3a08 	vldr	s7, [r5, #32]
 8011e6a:	edd5 9a0a 	vldr	s19, [r5, #40]	; 0x28
 8011e6e:	ed95 4a0b 	vldr	s8, [r5, #44]	; 0x2c
 8011e72:	ed95 9a04 	vldr	s18, [r5, #16]
 8011e76:	edd5 4a05 	vldr	s9, [r5, #20]
 8011e7a:	ee06 3a90 	vmov	s13, r3
 8011e7e:	f994 342b 	ldrsb.w	r3, [r4, #1067]	; 0x42b
 8011e82:	ee05 3a10 	vmov	s10, r3
 8011e86:	f994 342a 	ldrsb.w	r3, [r4, #1066]	; 0x42a
 8011e8a:	ee0a 3a90 	vmov	s21, r3
 8011e8e:	f994 342c 	ldrsb.w	r3, [r4, #1068]	; 0x42c
 8011e92:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011e96:	ee02 3a10 	vmov	s4, r3
 8011e9a:	f994 3434 	ldrsb.w	r3, [r4, #1076]	; 0x434
 8011e9e:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8011ea2:	ee05 3a90 	vmov	s11, r3
 8011ea6:	ee25 5a09 	vmul.f32	s10, s10, s18
 8011eaa:	f994 3431 	ldrsb.w	r3, [r4, #1073]	; 0x431
 8011eae:	eea3 5a2a 	vfma.f32	s10, s6, s21
 8011eb2:	4683      	mov	fp, r0
 8011eb4:	f994 0430 	ldrsb.w	r0, [r4, #1072]	; 0x430
 8011eb8:	ee07 3a10 	vmov	s14, r3
 8011ebc:	ee0a 0a90 	vmov	s21, r0
 8011ec0:	f994 3433 	ldrsb.w	r3, [r4, #1075]	; 0x433
 8011ec4:	48b4      	ldr	r0, [pc, #720]	; (8012198 <iNemo_update.constprop.35+0x3cc>)
 8011ec6:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8011eca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ece:	eea4 5a82 	vfma.f32	s10, s9, s4
 8011ed2:	f890 08e0 	ldrb.w	r0, [r0, #2272]	; 0x8e0
 8011ed6:	9017      	str	r0, [sp, #92]	; 0x5c
 8011ed8:	ee0b 3a10 	vmov	s22, r3
 8011edc:	ee27 7a29 	vmul.f32	s14, s14, s19
 8011ee0:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8011ee4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011ee8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011eec:	eeaa 7aa2 	vfma.f32	s14, s21, s5
 8011ef0:	f994 3432 	ldrsb.w	r3, [r4, #1074]	; 0x432
 8011ef4:	ee0a 2a90 	vmov	s21, r2
 8011ef8:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8011efc:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8011f00:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8011f04:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8011f08:	eea1 6a2b 	vfma.f32	s12, s2, s23
 8011f0c:	f994 2435 	ldrsb.w	r2, [r4, #1077]	; 0x435
 8011f10:	eee2 5a8b 	vfma.f32	s11, s5, s22
 8011f14:	eef8 baec 	vcvt.f32.s32	s23, s25
 8011f18:	eeb8 baea 	vcvt.f32.s32	s22, s21
 8011f1c:	eef0 ca45 	vmov.f32	s25, s10
 8011f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f24:	ee05 9a10 	vmov	s10, r9
 8011f28:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8011f2c:	ee6b 9a29 	vmul.f32	s19, s22, s19
 8011f30:	ee2b aa8a 	vmul.f32	s20, s23, s20
 8011f34:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011f38:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011f3c:	eea1 aa21 	vfma.f32	s20, s2, s3
 8011f40:	eee2 9a85 	vfma.f32	s19, s5, s10
 8011f44:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8011f48:	ee01 2a90 	vmov	s3, r2
 8011f4c:	ee05 ca10 	vmov	s10, ip
 8011f50:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8011f54:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011f58:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011f5c:	ee68 8a89 	vmul.f32	s17, s17, s18
 8011f60:	eeec 7a01 	vfma.f32	s15, s24, s2
 8011f64:	eee3 8a05 	vfma.f32	s17, s6, s10
 8011f68:	eee4 5a21 	vfma.f32	s11, s8, s3
 8011f6c:	ee05 7a10 	vmov	s10, r7
 8011f70:	ee0a aa90 	vmov	s21, sl
 8011f74:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8011f78:	ee01 3a90 	vmov	s3, r3
 8011f7c:	ee02 ea10 	vmov	s4, lr
 8011f80:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8011f84:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 8011f88:	ee28 8a09 	vmul.f32	s16, s16, s18
 8011f8c:	ee05 6a10 	vmov	s10, r6
 8011f90:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8011f94:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011f98:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8011f9c:	eeea 7aa3 	vfma.f32	s15, s21, s7
 8011fa0:	eea2 8a03 	vfma.f32	s16, s4, s6
 8011fa4:	eea3 6aa0 	vfma.f32	s12, s7, s1
 8011fa8:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 8011fac:	eea1 7a84 	vfma.f32	s14, s3, s8
 8011fb0:	ee05 1a10 	vmov	s10, r1
 8011fb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011fb8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011fbc:	eef0 da40 	vmov.f32	s27, s0
 8011fc0:	eea3 aaa2 	vfma.f32	s20, s7, s5
 8011fc4:	eeb1 ba65 	vneg.f32	s22, s11
 8011fc8:	eef1 aa47 	vneg.f32	s21, s14
 8011fcc:	eee4 9a03 	vfma.f32	s19, s8, s6
 8011fd0:	eea5 8a24 	vfma.f32	s16, s10, s9
 8011fd4:	eee4 8aa6 	vfma.f32	s17, s9, s13
 8011fd8:	eeb1 ca46 	vneg.f32	s24, s12
 8011fdc:	eef1 ba67 	vneg.f32	s23, s15
 8011fe0:	eeb1 da6c 	vneg.f32	s26, s25
 8011fe4:	b388      	cbz	r0, 801204a <iNemo_update.constprop.35+0x27e>
 8011fe6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fea:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011fee:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011ff2:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011ff6:	ee17 0a90 	vmov	r0, s15
 8011ffa:	f7ee fabd 	bl	8000578 <__aeabi_f2d>
 8011ffe:	f002 fb9d 	bl	801473c <sqrt>
 8012002:	f7ee fde9 	bl	8000bd8 <__aeabi_d2f>
 8012006:	ee07 0a90 	vmov	s15, r0
 801200a:	eec9 7a27 	vdiv.f32	s15, s18, s15
 801200e:	ee28 7a08 	vmul.f32	s14, s16, s16
 8012012:	ee2c ca27 	vmul.f32	s24, s24, s15
 8012016:	eea8 7aa8 	vfma.f32	s14, s17, s17
 801201a:	ee6b baa7 	vmul.f32	s23, s23, s15
 801201e:	eeac 7aac 	vfma.f32	s14, s25, s25
 8012022:	ee2a aa27 	vmul.f32	s20, s20, s15
 8012026:	ee17 0a10 	vmov	r0, s14
 801202a:	f7ee faa5 	bl	8000578 <__aeabi_f2d>
 801202e:	f002 fb85 	bl	801473c <sqrt>
 8012032:	f7ee fdd1 	bl	8000bd8 <__aeabi_d2f>
 8012036:	ee07 0a90 	vmov	s15, r0
 801203a:	eec9 7a27 	vdiv.f32	s15, s18, s15
 801203e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012042:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012046:	ee2d da27 	vmul.f32	s26, s26, s15
 801204a:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 801204e:	f894 2c3d 	ldrb.w	r2, [r4, #3133]	; 0xc3d
 8012052:	4e52      	ldr	r6, [pc, #328]	; (801219c <iNemo_update.constprop.35+0x3d0>)
 8012054:	4f52      	ldr	r7, [pc, #328]	; (80121a0 <iNemo_update.constprop.35+0x3d4>)
 8012056:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 801205a:	f8d5 907c 	ldr.w	r9, [r5, #124]	; 0x7c
 801205e:	f8d5 e080 	ldr.w	lr, [r5, #128]	; 0x80
 8012062:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 8012066:	ee09 2a10 	vmov	s18, r2
 801206a:	f043 0302 	orr.w	r3, r3, #2
 801206e:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8012070:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8012074:	f083 0301 	eor.w	r3, r3, #1
 8012078:	22f8      	movs	r2, #248	; 0xf8
 801207a:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 801207e:	a828      	add	r0, sp, #160	; 0xa0
 8012080:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 8012084:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
 8012088:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
 801208c:	f001 fd9c 	bl	8013bc8 <memcpy>
 8012090:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8012094:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8012098:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801209c:	eddf 7a41 	vldr	s15, [pc, #260]	; 80121a4 <iNemo_update.constprop.35+0x3d8>
 80120a0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80120a4:	9715      	str	r7, [sp, #84]	; 0x54
 80120a6:	f106 0efa 	add.w	lr, r6, #250	; 0xfa
 80120aa:	64f0      	str	r0, [r6, #76]	; 0x4c
 80120ac:	6531      	str	r1, [r6, #80]	; 0x50
 80120ae:	6572      	str	r2, [r6, #84]	; 0x54
 80120b0:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 80120b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80120b6:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
 80120ba:	f1a6 016c 	sub.w	r1, r6, #108	; 0x6c
 80120be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 80120c2:	edcd ba2f 	vstr	s23, [sp, #188]	; 0xbc
 80120c6:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 80120ca:	ed56 ba03 	vldr	s23, [r6, #-12]
 80120ce:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 80120d2:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 80120d6:	ed8d 8a2c 	vstr	s16, [sp, #176]	; 0xb0
 80120da:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 80120de:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 80120e2:	ed8d ba31 	vstr	s22, [sp, #196]	; 0xc4
 80120e6:	edcd aa32 	vstr	s21, [sp, #200]	; 0xc8
 80120ea:	ed16 ba04 	vldr	s22, [r6, #-16]
 80120ee:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 80120f2:	edcd 9a33 	vstr	s19, [sp, #204]	; 0xcc
 80120f6:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 80120fa:	ed56 9a0d 	vldr	s19, [r6, #-52]	; 0xffffffcc
 80120fe:	ed8d da2d 	vstr	s26, [sp, #180]	; 0xb4
 8012102:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8012106:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
 801210a:	910f      	str	r1, [sp, #60]	; 0x3c
 801210c:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
 8012110:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012114:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8012118:	9210      	str	r2, [sp, #64]	; 0x40
 801211a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801211e:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 8012122:	f7ee fa29 	bl	8000578 <__aeabi_f2d>
 8012126:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801212a:	f894 0c1e 	ldrb.w	r0, [r4, #3102]	; 0xc1e
 801212e:	f7ee fa01 	bl	8000534 <__aeabi_ui2d>
 8012132:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012136:	f894 3c1c 	ldrb.w	r3, [r4, #3100]	; 0xc1c
 801213a:	f894 cc1b 	ldrb.w	ip, [r4, #3099]	; 0xc1b
 801213e:	f894 2c1a 	ldrb.w	r2, [r4, #3098]	; 0xc1a
 8012142:	9308      	str	r3, [sp, #32]
 8012144:	f894 1c19 	ldrb.w	r1, [r4, #3097]	; 0xc19
 8012148:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
 801214c:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 8012150:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8012154:	e9cd 2c06 	strd	r2, ip, [sp, #24]
 8012158:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801215c:	f7ee fa0c 	bl	8000578 <__aeabi_f2d>
 8012160:	ee29 9a2d 	vmul.f32	s18, s18, s27
 8012164:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
 8012168:	f10d 0cdc 	add.w	ip, sp, #220	; 0xdc
 801216c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012170:	eef0 3a6b 	vmov.f32	s7, s23
 8012174:	eeb0 3a4b 	vmov.f32	s6, s22
 8012178:	eef0 2a6a 	vmov.f32	s5, s21
 801217c:	eeb0 2a4a 	vmov.f32	s4, s20
 8012180:	eef0 1a69 	vmov.f32	s3, s19
 8012184:	eeb0 1a68 	vmov.f32	s2, s17
 8012188:	eef0 0a48 	vmov.f32	s1, s16
 801218c:	eeb0 0a49 	vmov.f32	s0, s18
 8012190:	ab34      	add	r3, sp, #208	; 0xd0
 8012192:	e009      	b.n	80121a8 <iNemo_update.constprop.35+0x3dc>
 8012194:	20001398 	.word	0x20001398
 8012198:	20000000 	.word	0x20000000
 801219c:	20001fd8 	.word	0x20001fd8
 80121a0:	200008e8 	.word	0x200008e8
 80121a4:	00000000 	.word	0x00000000
 80121a8:	aa2e      	add	r2, sp, #184	; 0xb8
 80121aa:	a92b      	add	r1, sp, #172	; 0xac
 80121ac:	a84a      	add	r0, sp, #296	; 0x128
 80121ae:	e9cd ce00 	strd	ip, lr, [sp]
 80121b2:	f7ff fa1b 	bl	80115ec <SpacePointAlgorithm.isra.7>
 80121b6:	f1bb 0f00 	cmp.w	fp, #0
 80121ba:	d00f      	beq.n	80121dc <iNemo_update.constprop.35+0x410>
 80121bc:	f8d9 2000 	ldr.w	r2, [r9]
 80121c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80121c4:	f8cb 2000 	str.w	r2, [fp]
 80121c8:	f8cb 3004 	str.w	r3, [fp, #4]
 80121cc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80121d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80121d4:	f8cb 2008 	str.w	r2, [fp, #8]
 80121d8:	f8cb 300c 	str.w	r3, [fp, #12]
 80121dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121e0:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 80121e4:	f894 3d3a 	ldrb.w	r3, [r4, #3386]	; 0xd3a
 80121e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80121ec:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80121f6:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 80121fa:	d055      	beq.n	80122a8 <iNemo_update.constprop.35+0x4dc>
 80121fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80121fe:	f103 3aff 	add.w	sl, r3, #4294967295
 8012202:	fa5f fa8a 	uxtb.w	sl, sl
 8012206:	f1ba 0f08 	cmp.w	sl, #8
 801220a:	bf9c      	itt	ls
 801220c:	4b35      	ldrls	r3, [pc, #212]	; (80122e4 <iNemo_update.constprop.35+0x518>)
 801220e:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 8012212:	eddf 7a35 	vldr	s15, [pc, #212]	; 80122e8 <iNemo_update.constprop.35+0x51c>
 8012216:	ed98 6a00 	vldr	s12, [r8]
 801221a:	edd8 6a01 	vldr	s13, [r8, #4]
 801221e:	ed98 7a02 	vldr	s14, [r8, #8]
 8012222:	f894 3d39 	ldrb.w	r3, [r4, #3385]	; 0xd39
 8012226:	ee26 5a27 	vmul.f32	s10, s12, s15
 801222a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012232:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8012236:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 801223a:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 801223e:	b13b      	cbz	r3, 8012250 <iNemo_update.constprop.35+0x484>
 8012240:	f894 3d48 	ldrb.w	r3, [r4, #3400]	; 0xd48
 8012244:	2b09      	cmp	r3, #9
 8012246:	d828      	bhi.n	801229a <iNemo_update.constprop.35+0x4ce>
 8012248:	3301      	adds	r3, #1
 801224a:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 801224e:	e001      	b.n	8012254 <iNemo_update.constprop.35+0x488>
 8012250:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8012254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012258:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 801225c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012260:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 8012264:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012268:	f8c6 10b0 	str.w	r1, [r6, #176]	; 0xb0
 801226c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8012270:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 8012274:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8012278:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801227c:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 8012280:	f083 0302 	eor.w	r3, r3, #2
 8012284:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 8012288:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 801228c:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 8012290:	b067      	add	sp, #412	; 0x19c
 8012292:	ecbd 8b0c 	vpop	{d8-d13}
 8012296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229a:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 801229e:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 80122a2:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 80122a6:	e7d5      	b.n	8012254 <iNemo_update.constprop.35+0x488>
 80122a8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80122ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80122b0:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 80122b4:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 80122b8:	4a0a      	ldr	r2, [pc, #40]	; (80122e4 <iNemo_update.constprop.35+0x518>)
 80122ba:	f8d9 0000 	ldr.w	r0, [r9]
 80122be:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80122c2:	67eb      	str	r3, [r5, #124]	; 0x7c
 80122c4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80122c8:	2300      	movs	r3, #0
 80122ca:	67a8      	str	r0, [r5, #120]	; 0x78
 80122cc:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 80122d0:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 80122d4:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 80122d8:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
 80122dc:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 80122e0:	e797      	b.n	8012212 <iNemo_update.constprop.35+0x446>
 80122e2:	bf00      	nop
 80122e4:	20000000 	.word	0x20000000
 80122e8:	42652ee1 	.word	0x42652ee1
 80122ec:	00000000 	.word	0x00000000

080122f0 <MotionFX_initialize>:
 80122f0:	4a11      	ldr	r2, [pc, #68]	; (8012338 <MotionFX_initialize+0x48>)
 80122f2:	4912      	ldr	r1, [pc, #72]	; (801233c <MotionFX_initialize+0x4c>)
 80122f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f8:	6813      	ldr	r3, [r2, #0]
 80122fa:	f023 0301 	bic.w	r3, r3, #1
 80122fe:	6013      	str	r3, [r2, #0]
 8012300:	680b      	ldr	r3, [r1, #0]
 8012302:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8012306:	4013      	ands	r3, r2
 8012308:	f24c 2040 	movw	r0, #49728	; 0xc240
 801230c:	4283      	cmp	r3, r0
 801230e:	d01f      	beq.n	8012350 <MotionFX_initialize+0x60>
 8012310:	680b      	ldr	r3, [r1, #0]
 8012312:	f24c 2170 	movw	r1, #49776	; 0xc270
 8012316:	4013      	ands	r3, r2
 8012318:	428b      	cmp	r3, r1
 801231a:	d019      	beq.n	8012350 <MotionFX_initialize+0x60>
 801231c:	4b08      	ldr	r3, [pc, #32]	; (8012340 <MotionFX_initialize+0x50>)
 801231e:	2201      	movs	r2, #1
 8012320:	601a      	str	r2, [r3, #0]
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	2a00      	cmp	r2, #0
 8012326:	d1fc      	bne.n	8012322 <MotionFX_initialize+0x32>
 8012328:	4b06      	ldr	r3, [pc, #24]	; (8012344 <MotionFX_initialize+0x54>)
 801232a:	4a07      	ldr	r2, [pc, #28]	; (8012348 <MotionFX_initialize+0x58>)
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	4b06      	ldr	r3, [pc, #24]	; (801234c <MotionFX_initialize+0x5c>)
 8012332:	429a      	cmp	r2, r3
 8012334:	d02b      	beq.n	801238e <MotionFX_initialize+0x9e>
 8012336:	e7fe      	b.n	8012336 <MotionFX_initialize+0x46>
 8012338:	e0002000 	.word	0xe0002000
 801233c:	e000ed00 	.word	0xe000ed00
 8012340:	40023008 	.word	0x40023008
 8012344:	40023000 	.word	0x40023000
 8012348:	f407a5c2 	.word	0xf407a5c2
 801234c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012350:	4beb      	ldr	r3, [pc, #940]	; (8012700 <MotionFX_initialize+0x410>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1e1      	bne.n	801231c <MotionFX_initialize+0x2c>
 8012358:	4aea      	ldr	r2, [pc, #936]	; (8012704 <MotionFX_initialize+0x414>)
 801235a:	6813      	ldr	r3, [r2, #0]
 801235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012360:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8012364:	d006      	beq.n	8012374 <MotionFX_initialize+0x84>
 8012366:	6813      	ldr	r3, [r2, #0]
 8012368:	f240 4283 	movw	r2, #1155	; 0x483
 801236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012370:	4293      	cmp	r3, r2
 8012372:	d1d3      	bne.n	801231c <MotionFX_initialize+0x2c>
 8012374:	4be4      	ldr	r3, [pc, #912]	; (8012708 <MotionFX_initialize+0x418>)
 8012376:	2201      	movs	r2, #1
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	2a00      	cmp	r2, #0
 801237e:	d1fc      	bne.n	801237a <MotionFX_initialize+0x8a>
 8012380:	4be2      	ldr	r3, [pc, #904]	; (801270c <MotionFX_initialize+0x41c>)
 8012382:	4ae3      	ldr	r2, [pc, #908]	; (8012710 <MotionFX_initialize+0x420>)
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	4be2      	ldr	r3, [pc, #904]	; (8012714 <MotionFX_initialize+0x424>)
 801238a:	429a      	cmp	r2, r3
 801238c:	d1d3      	bne.n	8012336 <MotionFX_initialize+0x46>
 801238e:	4ce2      	ldr	r4, [pc, #904]	; (8012718 <MotionFX_initialize+0x428>)
 8012390:	eddf 7ae2 	vldr	s15, [pc, #904]	; 801271c <MotionFX_initialize+0x42c>
 8012394:	4ee2      	ldr	r6, [pc, #904]	; (8012720 <MotionFX_initialize+0x430>)
 8012396:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8012724 <MotionFX_initialize+0x434>
 801239a:	2500      	movs	r5, #0
 801239c:	f04f 0901 	mov.w	r9, #1
 80123a0:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 80126d8 <MotionFX_initialize+0x3e8>
 80123a4:	ed9f 1bce 	vldr	d1, [pc, #824]	; 80126e0 <MotionFX_initialize+0x3f0>
 80123a8:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 80126e8 <MotionFX_initialize+0x3f8>
 80123ac:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 80126f0 <MotionFX_initialize+0x400>
 80123b0:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 80123b4:	e9db ab00 	ldrd	sl, fp, [fp]
 80123b8:	f241 17b6 	movw	r7, #4534	; 0x11b6
 80123bc:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 80123c0:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 80123c4:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 80123c8:	f7f7 fa4c 	bl	8009864 <rt_InitInfAndNaN.isra.3>
 80123cc:	f241 10b4 	movw	r0, #4532	; 0x11b4
 80123d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123d4:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 80123d8:	5235      	strh	r5, [r6, r0]
 80123da:	55f5      	strb	r5, [r6, r7]
 80123dc:	200a      	movs	r0, #10
 80123de:	ed88 5b02 	vstr	d5, [r8, #8]
 80123e2:	ed88 1b04 	vstr	d1, [r8, #16]
 80123e6:	ed88 2b06 	vstr	d2, [r8, #24]
 80123ea:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 80123ee:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 80123f2:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 80123f6:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 80123fa:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 80123fe:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 8012402:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 8012406:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 801240a:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 801240e:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 8012412:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 8012416:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 801241a:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 801241e:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8012422:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 8012426:	f7f7 fa1d 	bl	8009864 <rt_InitInfAndNaN.isra.3>
 801242a:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 801242e:	ed86 5b06 	vstr	d5, [r6, #24]
 8012432:	eddf 4abd 	vldr	s9, [pc, #756]	; 8012728 <MotionFX_initialize+0x438>
 8012436:	ed9f 5abd 	vldr	s10, [pc, #756]	; 801272c <MotionFX_initialize+0x43c>
 801243a:	eddf 5abd 	vldr	s11, [pc, #756]	; 8012730 <MotionFX_initialize+0x440>
 801243e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 801274c <MotionFX_initialize+0x45c>
 8012442:	48bc      	ldr	r0, [pc, #752]	; (8012734 <MotionFX_initialize+0x444>)
 8012444:	49bc      	ldr	r1, [pc, #752]	; (8012738 <MotionFX_initialize+0x448>)
 8012446:	4abd      	ldr	r2, [pc, #756]	; (801273c <MotionFX_initialize+0x44c>)
 8012448:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 801244c:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 8012450:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 8012454:	ed86 1b08 	vstr	d1, [r6, #32]
 8012458:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 801245c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8012460:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 8012464:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 8012468:	f04f 0a02 	mov.w	sl, #2
 801246c:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 8012470:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 8012474:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 8012478:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 801247c:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8012480:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 8012484:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8012488:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 801248c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8012490:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8012494:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8012498:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 801249c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 80124a0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 80124a4:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 80124a8:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 80124ac:	f886 900c 	strb.w	r9, [r6, #12]
 80124b0:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 80124b4:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 80124b8:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 80124bc:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 80124c0:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 80124c4:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 80124c8:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 80124cc:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 80124d0:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 80124d4:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 80124d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 80124dc:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 80124e0:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 80124e4:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 80124e8:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 80124ec:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 80124f0:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 80124f4:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 80124f8:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 80124fc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8012500:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8012504:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 8012508:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 801250c:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 8012510:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8012514:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 8012518:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801251c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 8012520:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8012524:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 8012528:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 801252c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8012530:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 8012534:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8012538:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 801253c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8012540:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8012544:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8012548:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 801254c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8012550:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8012554:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 8012558:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801255c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8012560:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8012564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012568:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 801256c:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 8012570:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 8012574:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 8012578:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 801257c:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 8012580:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 8012584:	ed87 7a08 	vstr	s14, [r7, #32]
 8012588:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 801258c:	edc7 4a00 	vstr	s9, [r7]
 8012590:	ed87 5a01 	vstr	s10, [r7, #4]
 8012594:	edc7 5a02 	vstr	s11, [r7, #8]
 8012598:	edc7 6a03 	vstr	s13, [r7, #12]
 801259c:	ed87 6a04 	vstr	s12, [r7, #16]
 80125a0:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 80125a4:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 80125a8:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 80125ac:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 80125b0:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 80125b4:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 80125b8:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 80125bc:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 80125c0:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 80125c4:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 80125c8:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 80125cc:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 80125d0:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 80125d4:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 80125d8:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 80125dc:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 80125e0:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 80125e4:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 80125e8:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 80125ec:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 80125f0:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 80125f4:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 80125f8:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 80125fc:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 8012600:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 8012604:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 8012608:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 801260c:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 8012610:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 8012614:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 8012618:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 801261c:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8012620:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 8012624:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 8012628:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 801262c:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8012630:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 8012634:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 8012638:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 801263c:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8012640:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 8012644:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 8012648:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 801264c:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8012650:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 8012654:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 8012658:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 801265c:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8012660:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8012664:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 8012668:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 801266c:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8012670:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 8012674:	4b32      	ldr	r3, [pc, #200]	; (8012740 <MotionFX_initialize+0x450>)
 8012676:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 801267a:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 801267e:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 8012682:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 8012686:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 801268a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 801268e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8012692:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8012696:	edc8 4a00 	vstr	s9, [r8]
 801269a:	ed88 5a01 	vstr	s10, [r8, #4]
 801269e:	edc8 5a02 	vstr	s11, [r8, #8]
 80126a2:	edc8 6a03 	vstr	s13, [r8, #12]
 80126a6:	ed88 6a04 	vstr	s12, [r8, #16]
 80126aa:	ed88 7a08 	vstr	s14, [r8, #32]
 80126ae:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 80126b2:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 80126b6:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 80126ba:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 80126be:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 80126c2:	f7f7 f9a3 	bl	8009a0c <iNemo_setOrientation.constprop.40>
 80126c6:	f7f7 fb79 	bl	8009dbc <iNemo_setOrientation_6X.constprop.41>
 80126ca:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 80126ce:	f8df c080 	ldr.w	ip, [pc, #128]	; 8012750 <MotionFX_initialize+0x460>
 80126d2:	481c      	ldr	r0, [pc, #112]	; (8012744 <MotionFX_initialize+0x454>)
 80126d4:	491c      	ldr	r1, [pc, #112]	; (8012748 <MotionFX_initialize+0x458>)
 80126d6:	e03d      	b.n	8012754 <MotionFX_initialize+0x464>
 80126d8:	60000000 	.word	0x60000000
 80126dc:	3fc76cab 	.word	0x3fc76cab
 80126e0:	20000000 	.word	0x20000000
 80126e4:	3fc55a40 	.word	0x3fc55a40
 80126e8:	00000000 	.word	0x00000000
 80126ec:	3fbfdfb7 	.word	0x3fbfdfb7
 80126f0:	60000000 	.word	0x60000000
 80126f4:	3f9f1fed 	.word	0x3f9f1fed
 80126f8:	c0000000 	.word	0xc0000000
 80126fc:	3fb2875e 	.word	0x3fb2875e
 8012700:	e0042000 	.word	0xe0042000
 8012704:	5c001000 	.word	0x5c001000
 8012708:	58024c08 	.word	0x58024c08
 801270c:	58024c00 	.word	0x58024c00
 8012710:	f407a5c2 	.word	0xf407a5c2
 8012714:	b5e8b5cd 	.word	0xb5e8b5cd
 8012718:	20001398 	.word	0x20001398
 801271c:	00000000 	.word	0x00000000
 8012720:	20000000 	.word	0x20000000
 8012724:	3f2ac083 	.word	0x3f2ac083
 8012728:	3f639581 	.word	0x3f639581
 801272c:	402ab021 	.word	0x402ab021
 8012730:	3f13f7cf 	.word	0x3f13f7cf
 8012734:	3a09a027 	.word	0x3a09a027
 8012738:	39b24207 	.word	0x39b24207
 801273c:	3dcccccd 	.word	0x3dcccccd
 8012740:	01000101 	.word	0x01000101
 8012744:	3a51b717 	.word	0x3a51b717
 8012748:	3a378034 	.word	0x3a378034
 801274c:	39712c28 	.word	0x39712c28
 8012750:	3f666666 	.word	0x3f666666
 8012754:	4a14      	ldr	r2, [pc, #80]	; (80127a8 <MotionFX_initialize+0x4b8>)
 8012756:	4b15      	ldr	r3, [pc, #84]	; (80127ac <MotionFX_initialize+0x4bc>)
 8012758:	f8df e054 	ldr.w	lr, [pc, #84]	; 80127b0 <MotionFX_initialize+0x4c0>
 801275c:	edc8 6a03 	vstr	s13, [r8, #12]
 8012760:	edc7 6a03 	vstr	s13, [r7, #12]
 8012764:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 8012768:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 801276c:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 8012770:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8012774:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 8012778:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 801277c:	f8c8 c000 	str.w	ip, [r8]
 8012780:	f8c7 c000 	str.w	ip, [r7]
 8012784:	f8c8 6004 	str.w	r6, [r8, #4]
 8012788:	607e      	str	r6, [r7, #4]
 801278a:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 801278e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012790:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8012794:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012796:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 801279a:	633a      	str	r2, [r7, #48]	; 0x30
 801279c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 80127a0:	637b      	str	r3, [r7, #52]	; 0x34
 80127a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a6:	bf00      	nop
 80127a8:	3b378034 	.word	0x3b378034
 80127ac:	3dcccccd 	.word	0x3dcccccd
 80127b0:	01010001 	.word	0x01010001

080127b4 <MotionFX_setKnobs>:
 80127b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127b6:	4b2f      	ldr	r3, [pc, #188]	; (8012874 <MotionFX_setKnobs+0xc0>)
 80127b8:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 80127bc:	b902      	cbnz	r2, 80127c0 <MotionFX_setKnobs+0xc>
 80127be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d0fc      	beq.n	80127be <MotionFX_setKnobs+0xa>
 80127c4:	f603 12c4 	addw	r2, r3, #2500	; 0x9c4
 80127c8:	6884      	ldr	r4, [r0, #8]
 80127ca:	6806      	ldr	r6, [r0, #0]
 80127cc:	6845      	ldr	r5, [r0, #4]
 80127ce:	60d4      	str	r4, [r2, #12]
 80127d0:	7b01      	ldrb	r1, [r0, #12]
 80127d2:	f883 19d9 	strb.w	r1, [r3, #2521]	; 0x9d9
 80127d6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80127da:	f8d0 c014 	ldr.w	ip, [r0, #20]
 80127de:	6987      	ldr	r7, [r0, #24]
 80127e0:	6317      	str	r7, [r2, #48]	; 0x30
 80127e2:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 80127e6:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 80127ea:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 80127ee:	f883 79fd 	strb.w	r7, [r3, #2557]	; 0x9fd
 80127f2:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 80127f6:	f883 c9fe 	strb.w	ip, [r3, #2558]	; 0x9fe
 80127fa:	f883 1c19 	strb.w	r1, [r3, #3097]	; 0xc19
 80127fe:	f603 4104 	addw	r1, r3, #3076	; 0xc04
 8012802:	6016      	str	r6, [r2, #0]
 8012804:	6055      	str	r5, [r2, #4]
 8012806:	6a02      	ldr	r2, [r0, #32]
 8012808:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 801280c:	62ca      	str	r2, [r1, #44]	; 0x2c
 801280e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8012810:	f883 cc3e 	strb.w	ip, [r3, #3134]	; 0xc3e
 8012814:	f883 7c3d 	strb.w	r7, [r3, #3133]	; 0xc3d
 8012818:	6b87      	ldr	r7, [r0, #56]	; 0x38
 801281a:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
 801281e:	630a      	str	r2, [r1, #48]	; 0x30
 8012820:	4a15      	ldr	r2, [pc, #84]	; (8012878 <MotionFX_setKnobs+0xc4>)
 8012822:	600e      	str	r6, [r1, #0]
 8012824:	604d      	str	r5, [r1, #4]
 8012826:	60cc      	str	r4, [r1, #12]
 8012828:	f8c3 7d54 	str.w	r7, [r3, #3412]	; 0xd54
 801282c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8012830:	7013      	strb	r3, [r2, #0]
 8012832:	f890 e02d 	ldrb.w	lr, [r0, #45]	; 0x2d
 8012836:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 801283a:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 801283e:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 8012842:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 8012846:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 801284a:	f890 c031 	ldrb.w	ip, [r0, #49]	; 0x31
 801284e:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 8012852:	f882 e004 	strb.w	lr, [r2, #4]
 8012856:	7057      	strb	r7, [r2, #1]
 8012858:	7156      	strb	r6, [r2, #5]
 801285a:	7255      	strb	r5, [r2, #9]
 801285c:	7094      	strb	r4, [r2, #2]
 801285e:	7293      	strb	r3, [r2, #10]
 8012860:	f882 c008 	strb.w	ip, [r2, #8]
 8012864:	7191      	strb	r1, [r2, #6]
 8012866:	f7f7 f8d1 	bl	8009a0c <iNemo_setOrientation.constprop.40>
 801286a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801286e:	f7f7 baa5 	b.w	8009dbc <iNemo_setOrientation_6X.constprop.41>
 8012872:	bf00      	nop
 8012874:	20001398 	.word	0x20001398
 8012878:	20000000 	.word	0x20000000

0801287c <MotionFX_getKnobs>:
 801287c:	4b28      	ldr	r3, [pc, #160]	; (8012920 <MotionFX_getKnobs+0xa4>)
 801287e:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8012882:	b902      	cbnz	r2, 8012886 <MotionFX_getKnobs+0xa>
 8012884:	4770      	bx	lr
 8012886:	2800      	cmp	r0, #0
 8012888:	d0fc      	beq.n	8012884 <MotionFX_getKnobs+0x8>
 801288a:	b470      	push	{r4, r5, r6}
 801288c:	f603 4204 	addw	r2, r3, #3076	; 0xc04
 8012890:	68d1      	ldr	r1, [r2, #12]
 8012892:	6854      	ldr	r4, [r2, #4]
 8012894:	6815      	ldr	r5, [r2, #0]
 8012896:	6005      	str	r5, [r0, #0]
 8012898:	6044      	str	r4, [r0, #4]
 801289a:	6081      	str	r1, [r0, #8]
 801289c:	f893 1c19 	ldrb.w	r1, [r3, #3097]	; 0xc19
 80128a0:	7301      	strb	r1, [r0, #12]
 80128a2:	f603 11c4 	addw	r1, r3, #2500	; 0x9c4
 80128a6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80128a8:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80128aa:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80128ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80128ae:	6104      	str	r4, [r0, #16]
 80128b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80128b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80128b4:	6242      	str	r2, [r0, #36]	; 0x24
 80128b6:	6185      	str	r5, [r0, #24]
 80128b8:	61c4      	str	r4, [r0, #28]
 80128ba:	6146      	str	r6, [r0, #20]
 80128bc:	6201      	str	r1, [r0, #32]
 80128be:	4a19      	ldr	r2, [pc, #100]	; (8012924 <MotionFX_getKnobs+0xa8>)
 80128c0:	f893 1c3d 	ldrb.w	r1, [r3, #3133]	; 0xc3d
 80128c4:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 80128c8:	f893 6c3e 	ldrb.w	r6, [r3, #3134]	; 0xc3e
 80128cc:	f8d3 5d54 	ldr.w	r5, [r3, #3412]	; 0xd54
 80128d0:	7814      	ldrb	r4, [r2, #0]
 80128d2:	7911      	ldrb	r1, [r2, #4]
 80128d4:	7a13      	ldrb	r3, [r2, #8]
 80128d6:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 80128da:	6385      	str	r5, [r0, #56]	; 0x38
 80128dc:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 80128e0:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 80128e4:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 80128e8:	7854      	ldrb	r4, [r2, #1]
 80128ea:	7951      	ldrb	r1, [r2, #5]
 80128ec:	7a55      	ldrb	r5, [r2, #9]
 80128ee:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 80128f2:	2300      	movs	r3, #0
 80128f4:	7894      	ldrb	r4, [r2, #2]
 80128f6:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80128fa:	7991      	ldrb	r1, [r2, #6]
 80128fc:	7a92      	ldrb	r2, [r2, #10]
 80128fe:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 8012902:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 8012906:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 801290a:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 801290e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8012912:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8012916:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 801291a:	bc70      	pop	{r4, r5, r6}
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	20001398 	.word	0x20001398
 8012924:	20000000 	.word	0x20000000

08012928 <MotionFX_enable_6X>:
 8012928:	4b0c      	ldr	r3, [pc, #48]	; (801295c <MotionFX_enable_6X+0x34>)
 801292a:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801292e:	b112      	cbz	r2, 8012936 <MotionFX_enable_6X+0xe>
 8012930:	f8c3 0d4c 	str.w	r0, [r3, #3404]	; 0xd4c
 8012934:	b900      	cbnz	r0, 8012938 <MotionFX_enable_6X+0x10>
 8012936:	4770      	bx	lr
 8012938:	b430      	push	{r4, r5}
 801293a:	4a09      	ldr	r2, [pc, #36]	; (8012960 <MotionFX_enable_6X+0x38>)
 801293c:	4809      	ldr	r0, [pc, #36]	; (8012964 <MotionFX_enable_6X+0x3c>)
 801293e:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8012942:	2100      	movs	r1, #0
 8012944:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012948:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 801294c:	f8a2 18dc 	strh.w	r1, [r2, #2268]	; 0x8dc
 8012950:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 8012954:	6025      	str	r5, [r4, #0]
 8012956:	6018      	str	r0, [r3, #0]
 8012958:	bc30      	pop	{r4, r5}
 801295a:	4770      	bx	lr
 801295c:	20001398 	.word	0x20001398
 8012960:	20000000 	.word	0x20000000
 8012964:	ff800000 	.word	0xff800000

08012968 <MotionFX_enable_9X>:
 8012968:	4b0d      	ldr	r3, [pc, #52]	; (80129a0 <MotionFX_enable_9X+0x38>)
 801296a:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801296e:	b112      	cbz	r2, 8012976 <MotionFX_enable_9X+0xe>
 8012970:	f8c3 0d50 	str.w	r0, [r3, #3408]	; 0xd50
 8012974:	b900      	cbnz	r0, 8012978 <MotionFX_enable_9X+0x10>
 8012976:	4770      	bx	lr
 8012978:	b430      	push	{r4, r5}
 801297a:	4a0a      	ldr	r2, [pc, #40]	; (80129a4 <MotionFX_enable_9X+0x3c>)
 801297c:	480a      	ldr	r0, [pc, #40]	; (80129a8 <MotionFX_enable_9X+0x40>)
 801297e:	f241 15b4 	movw	r5, #4532	; 0x11b4
 8012982:	2100      	movs	r1, #0
 8012984:	5351      	strh	r1, [r2, r5]
 8012986:	f241 15b6 	movw	r5, #4534	; 0x11b6
 801298a:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 801298e:	5551      	strb	r1, [r2, r5]
 8012990:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8012994:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012998:	6014      	str	r4, [r2, #0]
 801299a:	6018      	str	r0, [r3, #0]
 801299c:	bc30      	pop	{r4, r5}
 801299e:	4770      	bx	lr
 80129a0:	20001398 	.word	0x20001398
 80129a4:	20000000 	.word	0x20000000
 80129a8:	ff800000 	.word	0xff800000

080129ac <MotionFX_update>:
 80129ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129b0:	4ec1      	ldr	r6, [pc, #772]	; (8012cb8 <MotionFX_update+0x30c>)
 80129b2:	ed2d 8b02 	vpush	{d8}
 80129b6:	f896 5d49 	ldrb.w	r5, [r6, #3401]	; 0xd49
 80129ba:	b08b      	sub	sp, #44	; 0x2c
 80129bc:	b925      	cbnz	r5, 80129c8 <MotionFX_update+0x1c>
 80129be:	b00b      	add	sp, #44	; 0x2c
 80129c0:	ecbd 8b02 	vpop	{d8}
 80129c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c8:	4604      	mov	r4, r0
 80129ca:	ed92 8a00 	vldr	s16, [r2]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f000 80d7 	beq.w	8012b82 <MotionFX_update+0x1d6>
 80129d4:	4ab9      	ldr	r2, [pc, #740]	; (8012cbc <MotionFX_update+0x310>)
 80129d6:	68cf      	ldr	r7, [r1, #12]
 80129d8:	f8d1 e000 	ldr.w	lr, [r1]
 80129dc:	690d      	ldr	r5, [r1, #16]
 80129de:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80129e2:	6197      	str	r7, [r2, #24]
 80129e4:	f5a2 7010 	sub.w	r0, r2, #576	; 0x240
 80129e8:	f8c2 e00c 	str.w	lr, [r2, #12]
 80129ec:	6187      	str	r7, [r0, #24]
 80129ee:	684f      	ldr	r7, [r1, #4]
 80129f0:	f8c0 e00c 	str.w	lr, [r0, #12]
 80129f4:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80129f8:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 80129fc:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8012a00:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8012a04:	6117      	str	r7, [r2, #16]
 8012a06:	6107      	str	r7, [r0, #16]
 8012a08:	f8d6 7d54 	ldr.w	r7, [r6, #3412]	; 0xd54
 8012a0c:	61d5      	str	r5, [r2, #28]
 8012a0e:	61c5      	str	r5, [r0, #28]
 8012a10:	688d      	ldr	r5, [r1, #8]
 8012a12:	6a09      	ldr	r1, [r1, #32]
 8012a14:	6155      	str	r5, [r2, #20]
 8012a16:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8012a1a:	f8c2 c020 	str.w	ip, [r2, #32]
 8012a1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8012a20:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 8012a24:	f8c0 c020 	str.w	ip, [r0, #32]
 8012a28:	6145      	str	r5, [r0, #20]
 8012a2a:	62c1      	str	r1, [r0, #44]	; 0x2c
 8012a2c:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 8012a30:	b187      	cbz	r7, 8012a54 <MotionFX_update+0xa8>
 8012a32:	f896 1c3c 	ldrb.w	r1, [r6, #3132]	; 0xc3c
 8012a36:	07cd      	lsls	r5, r1, #31
 8012a38:	d403      	bmi.n	8012a42 <MotionFX_update+0x96>
 8012a3a:	f896 19fc 	ldrb.w	r1, [r6, #2556]	; 0x9fc
 8012a3e:	07c8      	lsls	r0, r1, #31
 8012a40:	d523      	bpl.n	8012a8a <MotionFX_update+0xde>
 8012a42:	489f      	ldr	r0, [pc, #636]	; (8012cc0 <MotionFX_update+0x314>)
 8012a44:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8012a48:	2900      	cmp	r1, #0
 8012a4a:	f340 809c 	ble.w	8012b86 <MotionFX_update+0x1da>
 8012a4e:	3901      	subs	r1, #1
 8012a50:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 8012a54:	2a00      	cmp	r2, #0
 8012a56:	f000 808e 	beq.w	8012b76 <MotionFX_update+0x1ca>
 8012a5a:	f896 29fc 	ldrb.w	r2, [r6, #2556]	; 0x9fc
 8012a5e:	07d1      	lsls	r1, r2, #31
 8012a60:	f140 8089 	bpl.w	8012b76 <MotionFX_update+0x1ca>
 8012a64:	4618      	mov	r0, r3
 8012a66:	eeb0 0a48 	vmov.f32	s0, s16
 8012a6a:	9301      	str	r3, [sp, #4]
 8012a6c:	f7fe ffb0 	bl	80119d0 <iNemo_update_6X.constprop.34>
 8012a70:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 8012a74:	9b01      	ldr	r3, [sp, #4]
 8012a76:	b141      	cbz	r1, 8012a8a <MotionFX_update+0xde>
 8012a78:	f896 2c3c 	ldrb.w	r2, [r6, #3132]	; 0xc3c
 8012a7c:	07d2      	lsls	r2, r2, #31
 8012a7e:	d504      	bpl.n	8012a8a <MotionFX_update+0xde>
 8012a80:	4618      	mov	r0, r3
 8012a82:	eeb0 0a48 	vmov.f32	s0, s16
 8012a86:	f7ff f9a1 	bl	8011dcc <iNemo_update.constprop.35>
 8012a8a:	4d8e      	ldr	r5, [pc, #568]	; (8012cc4 <MotionFX_update+0x318>)
 8012a8c:	69ea      	ldr	r2, [r5, #28]
 8012a8e:	69af      	ldr	r7, [r5, #24]
 8012a90:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 8012a94:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 8012a98:	60e1      	str	r1, [r4, #12]
 8012a9a:	64a7      	str	r7, [r4, #72]	; 0x48
 8012a9c:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 8012aa0:	6a2f      	ldr	r7, [r5, #32]
 8012aa2:	64e2      	str	r2, [r4, #76]	; 0x4c
 8012aa4:	6120      	str	r0, [r4, #16]
 8012aa6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8012aa8:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 8012aac:	6527      	str	r7, [r4, #80]	; 0x50
 8012aae:	6161      	str	r1, [r4, #20]
 8012ab0:	68ef      	ldr	r7, [r5, #12]
 8012ab2:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 8012ab6:	61a0      	str	r0, [r4, #24]
 8012ab8:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8012abc:	6562      	str	r2, [r4, #84]	; 0x54
 8012abe:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8012ac2:	63e7      	str	r7, [r4, #60]	; 0x3c
 8012ac4:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 8012ac8:	65a0      	str	r0, [r4, #88]	; 0x58
 8012aca:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 8012ace:	6021      	str	r1, [r4, #0]
 8012ad0:	6662      	str	r2, [r4, #100]	; 0x64
 8012ad2:	6929      	ldr	r1, [r5, #16]
 8012ad4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8012ad8:	65e2      	str	r2, [r4, #92]	; 0x5c
 8012ada:	61e7      	str	r7, [r4, #28]
 8012adc:	6421      	str	r1, [r4, #64]	; 0x40
 8012ade:	62a0      	str	r0, [r4, #40]	; 0x28
 8012ae0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8012ae4:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8012ae8:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 8012aec:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 8012af0:	66a0      	str	r0, [r4, #104]	; 0x68
 8012af2:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 8012af6:	6062      	str	r2, [r4, #4]
 8012af8:	696a      	ldr	r2, [r5, #20]
 8012afa:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 8012afe:	6227      	str	r7, [r4, #32]
 8012b00:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 8012b04:	62e1      	str	r1, [r4, #44]	; 0x2c
 8012b06:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8012b0a:	6462      	str	r2, [r4, #68]	; 0x44
 8012b0c:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8012b10:	6262      	str	r2, [r4, #36]	; 0x24
 8012b12:	60a0      	str	r0, [r4, #8]
 8012b14:	66e1      	str	r1, [r4, #108]	; 0x6c
 8012b16:	6323      	str	r3, [r4, #48]	; 0x30
 8012b18:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 8012b1c:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 8012b20:	aa03      	add	r2, sp, #12
 8012b22:	6627      	str	r7, [r4, #96]	; 0x60
 8012b24:	f7f6 fda2 	bl	800966c <quatErr2EulerErr>
 8012b28:	9b03      	ldr	r3, [sp, #12]
 8012b2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8012b2c:	aa03      	add	r2, sp, #12
 8012b2e:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 8012b32:	f105 000c 	add.w	r0, r5, #12
 8012b36:	f7f6 fd99 	bl	800966c <quatErr2EulerErr>
 8012b3a:	9a03      	ldr	r2, [sp, #12]
 8012b3c:	f896 39fe 	ldrb.w	r3, [r6, #2558]	; 0x9fe
 8012b40:	6762      	str	r2, [r4, #116]	; 0x74
 8012b42:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8012b46:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8012b4a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8012b4e:	f7f7 fd37 	bl	800a5c0 <iNemo_quat2heading>
 8012b52:	f896 3c3e 	ldrb.w	r3, [r6, #3134]	; 0xc3e
 8012b56:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8012b5a:	f104 021c 	add.w	r2, r4, #28
 8012b5e:	4621      	mov	r1, r4
 8012b60:	f104 000c 	add.w	r0, r4, #12
 8012b64:	f7f7 fd2c 	bl	800a5c0 <iNemo_quat2heading>
 8012b68:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8012b6c:	b00b      	add	sp, #44	; 0x2c
 8012b6e:	ecbd 8b02 	vpop	{d8}
 8012b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b76:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 8012b7a:	2900      	cmp	r1, #0
 8012b7c:	f47f af7c 	bne.w	8012a78 <MotionFX_update+0xcc>
 8012b80:	e783      	b.n	8012a8a <MotionFX_update+0xde>
 8012b82:	ab06      	add	r3, sp, #24
 8012b84:	e726      	b.n	80129d4 <MotionFX_update+0x28>
 8012b86:	f8d6 cd58 	ldr.w	ip, [r6, #3416]	; 0xd58
 8012b8a:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 8012b8e:	f10c 0e01 	add.w	lr, ip, #1
 8012b92:	b369      	cbz	r1, 8012bf0 <MotionFX_update+0x244>
 8012b94:	ee07 ea90 	vmov	s15, lr
 8012b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ba0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8012ba4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8012cd0 <MotionFX_update+0x324>
 8012ba8:	4847      	ldr	r0, [pc, #284]	; (8012cc8 <MotionFX_update+0x31c>)
 8012baa:	46c8      	mov	r8, r9
 8012bac:	ecb8 7a01 	vldmia	r8!, {s14}
 8012bb0:	edd0 4a01 	vldr	s9, [r0, #4]
 8012bb4:	ed90 5a02 	vldr	s10, [r0, #8]
 8012bb8:	ed90 4a00 	vldr	s8, [r0]
 8012bbc:	edd8 6a00 	vldr	s13, [r8]
 8012bc0:	edd9 7a02 	vldr	s15, [r9, #8]
 8012bc4:	ee05 ca90 	vmov	s11, ip
 8012bc8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012bcc:	eea5 7a84 	vfma.f32	s14, s11, s8
 8012bd0:	eee5 6aa4 	vfma.f32	s13, s11, s9
 8012bd4:	eee5 7a85 	vfma.f32	s15, s11, s10
 8012bd8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012bdc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012be0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012be4:	edc0 6a01 	vstr	s13, [r0, #4]
 8012be8:	ed80 7a00 	vstr	s14, [r0]
 8012bec:	edc0 7a02 	vstr	s15, [r0, #8]
 8012bf0:	2a00      	cmp	r2, #0
 8012bf2:	d071      	beq.n	8012cd8 <MotionFX_update+0x32c>
 8012bf4:	ee07 ea90 	vmov	s15, lr
 8012bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012c00:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8012c04:	4830      	ldr	r0, [pc, #192]	; (8012cc8 <MotionFX_update+0x31c>)
 8012c06:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8012cd4 <MotionFX_update+0x328>
 8012c0a:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8012c0e:	4607      	mov	r7, r0
 8012c10:	46c8      	mov	r8, r9
 8012c12:	4605      	mov	r5, r0
 8012c14:	3708      	adds	r7, #8
 8012c16:	3504      	adds	r5, #4
 8012c18:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8012c1c:	ee07 ca90 	vmov	s15, ip
 8012c20:	ecf8 6a01 	vldmia	r8!, {s13}
 8012c24:	ed97 5a00 	vldr	s10, [r7]
 8012c28:	ed99 7a02 	vldr	s14, [r9, #8]
 8012c2c:	edd5 4a00 	vldr	s9, [r5]
 8012c30:	ed90 4a00 	vldr	s8, [r0]
 8012c34:	ed98 6a00 	vldr	s12, [r8]
 8012c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c3c:	eea7 7a85 	vfma.f32	s14, s15, s10
 8012c40:	eee7 6a84 	vfma.f32	s13, s15, s8
 8012c44:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8012c48:	eef0 7a47 	vmov.f32	s15, s14
 8012c4c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012c50:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8012c54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012c58:	ed85 6a00 	vstr	s12, [r5]
 8012c5c:	ed80 7a00 	vstr	s14, [r0]
 8012c60:	edc7 7a00 	vstr	s15, [r7]
 8012c64:	f47f aef9 	bne.w	8012a5a <MotionFX_update+0xae>
 8012c68:	2900      	cmp	r1, #0
 8012c6a:	d046      	beq.n	8012cfa <MotionFX_update+0x34e>
 8012c6c:	eef0 6a46 	vmov.f32	s13, s12
 8012c70:	eeb0 7a67 	vmov.f32	s14, s15
 8012c74:	edd0 7a00 	vldr	s15, [r0]
 8012c78:	4914      	ldr	r1, [pc, #80]	; (8012ccc <MotionFX_update+0x320>)
 8012c7a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012c7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012c82:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012c86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012c8a:	edc1 6a0b 	vstr	s13, [r1, #44]	; 0x2c
 8012c8e:	ed81 7a0c 	vstr	s14, [r1, #48]	; 0x30
 8012c92:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 8012c96:	bb82      	cbnz	r2, 8012cfa <MotionFX_update+0x34e>
 8012c98:	2100      	movs	r1, #0
 8012c9a:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 8012c9e:	6001      	str	r1, [r0, #0]
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	6029      	str	r1, [r5, #0]
 8012ca4:	6039      	str	r1, [r7, #0]
 8012ca6:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
 8012caa:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
 8012cae:	2a00      	cmp	r2, #0
 8012cb0:	f47f aed3 	bne.w	8012a5a <MotionFX_update+0xae>
 8012cb4:	e75f      	b.n	8012b76 <MotionFX_update+0x1ca>
 8012cb6:	bf00      	nop
 8012cb8:	20001398 	.word	0x20001398
 8012cbc:	20001ea4 	.word	0x20001ea4
 8012cc0:	200010f8 	.word	0x200010f8
 8012cc4:	20001d98 	.word	0x20001d98
 8012cc8:	200020f4 	.word	0x200020f4
 8012ccc:	20001f9c 	.word	0x20001f9c
 8012cd0:	20000cec 	.word	0x20000cec
 8012cd4:	20000414 	.word	0x20000414
 8012cd8:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8012cdc:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8012ce0:	f47f aec9 	bne.w	8012a76 <MotionFX_update+0xca>
 8012ce4:	4810      	ldr	r0, [pc, #64]	; (8012d28 <MotionFX_update+0x37c>)
 8012ce6:	1d05      	adds	r5, r0, #4
 8012ce8:	f100 0708 	add.w	r7, r0, #8
 8012cec:	2900      	cmp	r1, #0
 8012cee:	d0d3      	beq.n	8012c98 <MotionFX_update+0x2ec>
 8012cf0:	edd5 6a00 	vldr	s13, [r5]
 8012cf4:	ed97 7a00 	vldr	s14, [r7]
 8012cf8:	e7bc      	b.n	8012c74 <MotionFX_update+0x2c8>
 8012cfa:	edd5 6a00 	vldr	s13, [r5]
 8012cfe:	ed97 7a00 	vldr	s14, [r7]
 8012d02:	edd0 7a00 	vldr	s15, [r0]
 8012d06:	4a09      	ldr	r2, [pc, #36]	; (8012d2c <MotionFX_update+0x380>)
 8012d08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012d0c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012d10:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012d14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d18:	edc2 6a0b 	vstr	s13, [r2, #44]	; 0x2c
 8012d1c:	ed82 7a0c 	vstr	s14, [r2, #48]	; 0x30
 8012d20:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 8012d24:	e7b8      	b.n	8012c98 <MotionFX_update+0x2ec>
 8012d26:	bf00      	nop
 8012d28:	200020f4 	.word	0x200020f4
 8012d2c:	20001d5c 	.word	0x20001d5c

08012d30 <MotionFX_propagate>:
 8012d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d34:	ed2d 8b0a 	vpush	{d8-d12}
 8012d38:	4d48      	ldr	r5, [pc, #288]	; (8012e5c <MotionFX_propagate+0x12c>)
 8012d3a:	f895 3d49 	ldrb.w	r3, [r5, #3401]	; 0xd49
 8012d3e:	b095      	sub	sp, #84	; 0x54
 8012d40:	b923      	cbnz	r3, 8012d4c <MotionFX_propagate+0x1c>
 8012d42:	b015      	add	sp, #84	; 0x54
 8012d44:	ecbd 8b0a 	vpop	{d8-d12}
 8012d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d4c:	edd1 4a03 	vldr	s9, [r1, #12]
 8012d50:	680f      	ldr	r7, [r1, #0]
 8012d52:	edd1 7a04 	vldr	s15, [r1, #16]
 8012d56:	edd1 5a05 	vldr	s11, [r1, #20]
 8012d5a:	688b      	ldr	r3, [r1, #8]
 8012d5c:	ed91 5a06 	vldr	s10, [r1, #24]
 8012d60:	ed91 4a07 	vldr	s8, [r1, #28]
 8012d64:	ed91 6a08 	vldr	s12, [r1, #32]
 8012d68:	ed92 9a00 	vldr	s18, [r2]
 8012d6c:	f605 360c 	addw	r6, r5, #2828	; 0xb0c
 8012d70:	f605 08cc 	addw	r8, r5, #2252	; 0x8cc
 8012d74:	4604      	mov	r4, r0
 8012d76:	6848      	ldr	r0, [r1, #4]
 8012d78:	f8d5 1d50 	ldr.w	r1, [r5, #3408]	; 0xd50
 8012d7c:	edc6 4a06 	vstr	s9, [r6, #24]
 8012d80:	60f7      	str	r7, [r6, #12]
 8012d82:	f8c8 700c 	str.w	r7, [r8, #12]
 8012d86:	ed86 5a09 	vstr	s10, [r6, #36]	; 0x24
 8012d8a:	edc8 4a06 	vstr	s9, [r8, #24]
 8012d8e:	ed88 5a09 	vstr	s10, [r8, #36]	; 0x24
 8012d92:	edc6 7a07 	vstr	s15, [r6, #28]
 8012d96:	6130      	str	r0, [r6, #16]
 8012d98:	f8c8 0010 	str.w	r0, [r8, #16]
 8012d9c:	ed86 4a0a 	vstr	s8, [r6, #40]	; 0x28
 8012da0:	edc8 7a07 	vstr	s15, [r8, #28]
 8012da4:	ed88 4a0a 	vstr	s8, [r8, #40]	; 0x28
 8012da8:	edc6 5a08 	vstr	s11, [r6, #32]
 8012dac:	6173      	str	r3, [r6, #20]
 8012dae:	f8c8 3014 	str.w	r3, [r8, #20]
 8012db2:	ed86 6a0b 	vstr	s12, [r6, #44]	; 0x2c
 8012db6:	edc8 5a08 	vstr	s11, [r8, #32]
 8012dba:	ed88 6a0b 	vstr	s12, [r8, #44]	; 0x2c
 8012dbe:	2900      	cmp	r1, #0
 8012dc0:	f040 81fa 	bne.w	80131b8 <MotionFX_propagate+0x488>
 8012dc4:	f505 6744 	add.w	r7, r5, #3136	; 0xc40
 8012dc8:	f8d5 3d4c 	ldr.w	r3, [r5, #3404]	; 0xd4c
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d149      	bne.n	8012e64 <MotionFX_propagate+0x134>
 8012dd0:	4e23      	ldr	r6, [pc, #140]	; (8012e60 <MotionFX_propagate+0x130>)
 8012dd2:	69b3      	ldr	r3, [r6, #24]
 8012dd4:	69f2      	ldr	r2, [r6, #28]
 8012dd6:	69b9      	ldr	r1, [r7, #24]
 8012dd8:	64a3      	str	r3, [r4, #72]	; 0x48
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	64e2      	str	r2, [r4, #76]	; 0x4c
 8012dde:	60e1      	str	r1, [r4, #12]
 8012de0:	6a3a      	ldr	r2, [r7, #32]
 8012de2:	6a31      	ldr	r1, [r6, #32]
 8012de4:	6123      	str	r3, [r4, #16]
 8012de6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012de8:	6521      	str	r1, [r4, #80]	; 0x50
 8012dea:	6563      	str	r3, [r4, #84]	; 0x54
 8012dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dee:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8012df2:	6162      	str	r2, [r4, #20]
 8012df4:	68f2      	ldr	r2, [r6, #12]
 8012df6:	61a1      	str	r1, [r4, #24]
 8012df8:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 8012dfc:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8012e00:	68fa      	ldr	r2, [r7, #12]
 8012e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012e06:	6661      	str	r1, [r4, #100]	; 0x64
 8012e08:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012e0c:	6022      	str	r2, [r4, #0]
 8012e0e:	61e3      	str	r3, [r4, #28]
 8012e10:	6932      	ldr	r2, [r6, #16]
 8012e12:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8012e16:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012e18:	62a1      	str	r1, [r4, #40]	; 0x28
 8012e1a:	6422      	str	r2, [r4, #64]	; 0x40
 8012e1c:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012e26:	66a2      	str	r2, [r4, #104]	; 0x68
 8012e28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012e2c:	6063      	str	r3, [r4, #4]
 8012e2e:	6973      	ldr	r3, [r6, #20]
 8012e30:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
 8012e34:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 8012e38:	6221      	str	r1, [r4, #32]
 8012e3a:	62e2      	str	r2, [r4, #44]	; 0x2c
 8012e3c:	6979      	ldr	r1, [r7, #20]
 8012e3e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012e42:	6463      	str	r3, [r4, #68]	; 0x44
 8012e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e48:	6323      	str	r3, [r4, #48]	; 0x30
 8012e4a:	6625      	str	r5, [r4, #96]	; 0x60
 8012e4c:	66e0      	str	r0, [r4, #108]	; 0x6c
 8012e4e:	60a1      	str	r1, [r4, #8]
 8012e50:	6262      	str	r2, [r4, #36]	; 0x24
 8012e52:	b015      	add	sp, #84	; 0x54
 8012e54:	ecbd 8b0a 	vpop	{d8-d12}
 8012e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e5c:	20001398 	.word	0x20001398
 8012e60:	20001d98 	.word	0x20001d98
 8012e64:	f995 3443 	ldrsb.w	r3, [r5, #1091]	; 0x443
 8012e68:	ed98 0a07 	vldr	s0, [r8, #28]
 8012e6c:	f995 245b 	ldrsb.w	r2, [r5, #1115]	; 0x45b
 8012e70:	ed98 3a06 	vldr	s6, [r8, #24]
 8012e74:	ed98 6a08 	vldr	s12, [r8, #32]
 8012e78:	edd8 6a0a 	vldr	s13, [r8, #40]	; 0x28
 8012e7c:	ed98 2a09 	vldr	s4, [r8, #36]	; 0x24
 8012e80:	f895 99fd 	ldrb.w	r9, [r5, #2557]	; 0x9fd
 8012e84:	ee0a 3a10 	vmov	s20, r3
 8012e88:	f995 3442 	ldrsb.w	r3, [r5, #1090]	; 0x442
 8012e8c:	ee05 3a10 	vmov	s10, r3
 8012e90:	f995 3444 	ldrsb.w	r3, [r5, #1092]	; 0x444
 8012e94:	ee05 3a90 	vmov	s11, r3
 8012e98:	f995 343d 	ldrsb.w	r3, [r5, #1085]	; 0x43d
 8012e9c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8012ea0:	ee07 3a90 	vmov	s15, r3
 8012ea4:	f995 3440 	ldrsb.w	r3, [r5, #1088]	; 0x440
 8012ea8:	ee09 2a90 	vmov	s19, r2
 8012eac:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012eb0:	f995 243c 	ldrsb.w	r2, [r5, #1084]	; 0x43c
 8012eb4:	ee2a aa00 	vmul.f32	s20, s20, s0
 8012eb8:	ee07 3a10 	vmov	s14, r3
 8012ebc:	f995 3455 	ldrsb.w	r3, [r5, #1109]	; 0x455
 8012ec0:	eea3 aa05 	vfma.f32	s20, s6, s10
 8012ec4:	ee0b 2a10 	vmov	s22, r2
 8012ec8:	f995 243f 	ldrsb.w	r2, [r5, #1087]	; 0x43f
 8012ecc:	ee08 3a10 	vmov	s16, r3
 8012ed0:	f995 3458 	ldrsb.w	r3, [r5, #1112]	; 0x458
 8012ed4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012ed8:	ee00 2a90 	vmov	s1, r2
 8012edc:	f995 2454 	ldrsb.w	r2, [r5, #1108]	; 0x454
 8012ee0:	ee08 3a90 	vmov	s17, r3
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	9308      	str	r3, [sp, #32]
 8012ee8:	ee01 2a10 	vmov	s2, r2
 8012eec:	9309      	str	r3, [sp, #36]	; 0x24
 8012eee:	f995 2457 	ldrsb.w	r2, [r5, #1111]	; 0x457
 8012ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ef4:	eea6 aa25 	vfma.f32	s20, s12, s11
 8012ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8012efa:	930d      	str	r3, [sp, #52]	; 0x34
 8012efc:	930e      	str	r3, [sp, #56]	; 0x38
 8012efe:	f995 3456 	ldrsb.w	r3, [r5, #1110]	; 0x456
 8012f02:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 8012f06:	ed8d aa04 	vstr	s20, [sp, #16]
 8012f0a:	ee01 2a90 	vmov	s3, r2
 8012f0e:	ee04 3a90 	vmov	s9, r3
 8012f12:	f995 243e 	ldrsb.w	r2, [r5, #1086]	; 0x43e
 8012f16:	f995 3459 	ldrsb.w	r3, [r5, #1113]	; 0x459
 8012f1a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8012f1e:	ee03 2a90 	vmov	s7, r2
 8012f22:	ee05 3a10 	vmov	s10, r3
 8012f26:	f995 2441 	ldrsb.w	r2, [r5, #1089]	; 0x441
 8012f2a:	edcd aa0b 	vstr	s21, [sp, #44]	; 0x2c
 8012f2e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8012f32:	f995 345a 	ldrsb.w	r3, [r5, #1114]	; 0x45a
 8012f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f3e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8012f42:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8012f46:	ee02 3a90 	vmov	s5, r3
 8012f4a:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8012f4e:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8012f52:	ee28 8a26 	vmul.f32	s16, s16, s13
 8012f56:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8012f5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012f5e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012f62:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8012f66:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8012f6a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012f6e:	ee69 9aa6 	vmul.f32	s19, s19, s13
 8012f72:	f995 345c 	ldrsb.w	r3, [r5, #1116]	; 0x45c
 8012f76:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8012f7a:	eeeb 7a03 	vfma.f32	s15, s22, s6
 8012f7e:	ee04 2a10 	vmov	s8, r2
 8012f82:	eea3 7a20 	vfma.f32	s14, s6, s1
 8012f86:	eea1 8a02 	vfma.f32	s16, s2, s4
 8012f8a:	eee2 8a21 	vfma.f32	s17, s4, s3
 8012f8e:	ee06 3a90 	vmov	s13, r3
 8012f92:	eee2 9a22 	vfma.f32	s19, s4, s5
 8012f96:	4b84      	ldr	r3, [pc, #528]	; (80131a8 <MotionFX_propagate+0x478>)
 8012f98:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8012f9c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8012fa0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8012fa4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012fa8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012fac:	eee3 7a86 	vfma.f32	s15, s7, s12
 8012fb0:	7b1b      	ldrb	r3, [r3, #12]
 8012fb2:	eea6 7a04 	vfma.f32	s14, s12, s8
 8012fb6:	eea4 8aa5 	vfma.f32	s16, s9, s11
 8012fba:	eee5 8a85 	vfma.f32	s17, s11, s10
 8012fbe:	eee5 9aa6 	vfma.f32	s19, s11, s13
 8012fc2:	eef1 ba47 	vneg.f32	s23, s14
 8012fc6:	eeb1 8a48 	vneg.f32	s16, s16
 8012fca:	eef1 8a68 	vneg.f32	s17, s17
 8012fce:	eeb1 ba67 	vneg.f32	s22, s15
 8012fd2:	edcd ba02 	vstr	s23, [sp, #8]
 8012fd6:	ed8d 8a06 	vstr	s16, [sp, #24]
 8012fda:	edcd 8a05 	vstr	s17, [sp, #20]
 8012fde:	edcd 9a07 	vstr	s19, [sp, #28]
 8012fe2:	ed8d ba03 	vstr	s22, [sp, #12]
 8012fe6:	b1fb      	cbz	r3, 8013028 <MotionFX_propagate+0x2f8>
 8012fe8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012fec:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ff0:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8012ff4:	ee17 0a90 	vmov	r0, s15
 8012ff8:	f7ed fabe 	bl	8000578 <__aeabi_f2d>
 8012ffc:	f001 fb9e 	bl	801473c <sqrt>
 8013000:	f7ed fdea 	bl	8000bd8 <__aeabi_d2f>
 8013004:	ee0c 0a10 	vmov	s24, r0
 8013008:	f7ed fab6 	bl	8000578 <__aeabi_f2d>
 801300c:	a364      	add	r3, pc, #400	; (adr r3, 80131a0 <MotionFX_propagate+0x470>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	f7ed fd7b 	bl	8000b0c <__aeabi_dcmplt>
 8013016:	2800      	cmp	r0, #0
 8013018:	f000 8269 	beq.w	80134ee <MotionFX_propagate+0x7be>
 801301c:	edcd ba02 	vstr	s23, [sp, #8]
 8013020:	ed8d ba03 	vstr	s22, [sp, #12]
 8013024:	ed8d aa04 	vstr	s20, [sp, #16]
 8013028:	f1b9 0f00 	cmp.w	r9, #0
 801302c:	f000 8257 	beq.w	80134de <MotionFX_propagate+0x7ae>
 8013030:	ee07 9a90 	vmov	s15, r9
 8013034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801303c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013040:	464a      	mov	r2, r9
 8013042:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013046:	ee28 8a27 	vmul.f32	s16, s16, s15
 801304a:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801304e:	f895 39e0 	ldrb.w	r3, [r5, #2528]	; 0x9e0
 8013052:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 8013056:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 801305a:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 801305e:	f895 09dc 	ldrb.w	r0, [r5, #2524]	; 0x9dc
 8013062:	3301      	adds	r3, #1
 8013064:	b2db      	uxtb	r3, r3
 8013066:	ee76 8aa8 	vadd.f32	s17, s13, s17
 801306a:	ee37 8a08 	vadd.f32	s16, s14, s16
 801306e:	ee77 9aa9 	vadd.f32	s19, s15, s19
 8013072:	fbb3 f1f2 	udiv	r1, r3, r2
 8013076:	fb02 3311 	mls	r3, r2, r1, r3
 801307a:	f885 39e0 	strb.w	r3, [r5, #2528]	; 0x9e0
 801307e:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 8013082:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 8013086:	edc8 9a0e 	vstr	s19, [r8, #56]	; 0x38
 801308a:	2800      	cmp	r0, #0
 801308c:	f040 8238 	bne.w	8013500 <MotionFX_propagate+0x7d0>
 8013090:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8013094:	4a45      	ldr	r2, [pc, #276]	; (80131ac <MotionFX_propagate+0x47c>)
 8013096:	f102 064c 	add.w	r6, r2, #76	; 0x4c
 801309a:	4611      	mov	r1, r2
 801309c:	f1a2 0010 	sub.w	r0, r2, #16
 80130a0:	f7f5 ffc4 	bl	800902c <m_qmult_eml>
 80130a4:	f1a6 027c 	sub.w	r2, r6, #124	; 0x7c
 80130a8:	4611      	mov	r1, r2
 80130aa:	4650      	mov	r0, sl
 80130ac:	f7f5 ffbe 	bl	800902c <m_qmult_eml>
 80130b0:	f106 0218 	add.w	r2, r6, #24
 80130b4:	f1a6 019c 	sub.w	r1, r6, #156	; 0x9c
 80130b8:	f1a6 004c 	sub.w	r0, r6, #76	; 0x4c
 80130bc:	f7f5 ffb6 	bl	800902c <m_qmult_eml>
 80130c0:	f106 0218 	add.w	r2, r6, #24
 80130c4:	4611      	mov	r1, r2
 80130c6:	f1a6 007c 	sub.w	r0, r6, #124	; 0x7c
 80130ca:	f7f5 ffaf 	bl	800902c <m_qmult_eml>
 80130ce:	edd6 8a07 	vldr	s17, [r6, #28]
 80130d2:	ed96 9a06 	vldr	s18, [r6, #24]
 80130d6:	ed96 8a08 	vldr	s16, [r6, #32]
 80130da:	edd6 9a09 	vldr	s19, [r6, #36]	; 0x24
 80130de:	ee28 7aa8 	vmul.f32	s14, s17, s17
 80130e2:	eea9 7a09 	vfma.f32	s14, s18, s18
 80130e6:	eea8 7a08 	vfma.f32	s14, s16, s16
 80130ea:	eea9 7aa9 	vfma.f32	s14, s19, s19
 80130ee:	ee17 0a10 	vmov	r0, s14
 80130f2:	f7ed fa41 	bl	8000578 <__aeabi_f2d>
 80130f6:	f001 fb21 	bl	801473c <sqrt>
 80130fa:	f7ed fd6d 	bl	8000bd8 <__aeabi_d2f>
 80130fe:	ee07 0a90 	vmov	s15, r0
 8013102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013106:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801310a:	f895 39e8 	ldrb.w	r3, [r5, #2536]	; 0x9e8
 801310e:	2b01      	cmp	r3, #1
 8013110:	ee27 9a89 	vmul.f32	s18, s15, s18
 8013114:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8013118:	ee27 8a88 	vmul.f32	s16, s15, s16
 801311c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8013120:	ed86 9a06 	vstr	s18, [r6, #24]
 8013124:	edc6 8a07 	vstr	s17, [r6, #28]
 8013128:	ed86 8a08 	vstr	s16, [r6, #32]
 801312c:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 8013130:	f000 82af 	beq.w	8013692 <MotionFX_propagate+0x962>
 8013134:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80131b4 <MotionFX_propagate+0x484>
 8013138:	f895 19fe 	ldrb.w	r1, [r5, #2558]	; 0x9fe
 801313c:	9101      	str	r1, [sp, #4]
 801313e:	f1ab 030c 	sub.w	r3, fp, #12
 8013142:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 8013146:	f8cd b000 	str.w	fp, [sp]
 801314a:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 801314e:	a902      	add	r1, sp, #8
 8013150:	f7f7 fcc6 	bl	800aae0 <output_update>
 8013154:	f895 29fc 	ldrb.w	r2, [r5, #2556]	; 0x9fc
 8013158:	2300      	movs	r3, #0
 801315a:	f885 39de 	strb.w	r3, [r5, #2526]	; 0x9de
 801315e:	0793      	lsls	r3, r2, #30
 8013160:	d409      	bmi.n	8013176 <MotionFX_propagate+0x446>
 8013162:	f895 19e0 	ldrb.w	r1, [r5, #2528]	; 0x9e0
 8013166:	fbb1 f3f9 	udiv	r3, r1, r9
 801316a:	fb09 1913 	mls	r9, r9, r3, r1
 801316e:	f019 0fff 	tst.w	r9, #255	; 0xff
 8013172:	f000 81ed 	beq.w	8013550 <MotionFX_propagate+0x820>
 8013176:	4a0e      	ldr	r2, [pc, #56]	; (80131b0 <MotionFX_propagate+0x480>)
 8013178:	4650      	mov	r0, sl
 801317a:	4611      	mov	r1, r2
 801317c:	f7f5 ff56 	bl	800902c <m_qmult_eml>
 8013180:	f895 39fe 	ldrb.w	r3, [r5, #2558]	; 0x9fe
 8013184:	69b2      	ldr	r2, [r6, #24]
 8013186:	2b01      	cmp	r3, #1
 8013188:	f47f ae23 	bne.w	8012dd2 <MotionFX_propagate+0xa2>
 801318c:	edd6 7a08 	vldr	s15, [r6, #32]
 8013190:	69f3      	ldr	r3, [r6, #28]
 8013192:	61b3      	str	r3, [r6, #24]
 8013194:	eef1 7a67 	vneg.f32	s15, s15
 8013198:	61f2      	str	r2, [r6, #28]
 801319a:	edc6 7a08 	vstr	s15, [r6, #32]
 801319e:	e618      	b.n	8012dd2 <MotionFX_propagate+0xa2>
 80131a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80131a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80131a8:	20000000 	.word	0x20000000
 80131ac:	20001d4c 	.word	0x20001d4c
 80131b0:	20001d0c 	.word	0x20001d0c
 80131b4:	20001e38 	.word	0x20001e38
 80131b8:	f995 3419 	ldrsb.w	r3, [r5, #1049]	; 0x419
 80131bc:	f995 2420 	ldrsb.w	r2, [r5, #1056]	; 0x420
 80131c0:	f895 9c3d 	ldrb.w	r9, [r5, #3133]	; 0xc3d
 80131c4:	ee06 3a90 	vmov	s13, r3
 80131c8:	f995 341c 	ldrsb.w	r3, [r5, #1052]	; 0x41c
 80131cc:	ee07 3a10 	vmov	s14, r3
 80131d0:	f995 3434 	ldrsb.w	r3, [r5, #1076]	; 0x434
 80131d4:	ee08 3a90 	vmov	s17, r3
 80131d8:	f995 3431 	ldrsb.w	r3, [r5, #1073]	; 0x431
 80131dc:	ee08 3a10 	vmov	s16, r3
 80131e0:	f995 3418 	ldrsb.w	r3, [r5, #1048]	; 0x418
 80131e4:	ee03 3a90 	vmov	s7, r3
 80131e8:	f995 341f 	ldrsb.w	r3, [r5, #1055]	; 0x41f
 80131ec:	ee09 3a90 	vmov	s19, r3
 80131f0:	f995 3437 	ldrsb.w	r3, [r5, #1079]	; 0x437
 80131f4:	ee0a 3a10 	vmov	s20, r3
 80131f8:	f995 341b 	ldrsb.w	r3, [r5, #1051]	; 0x41b
 80131fc:	ee00 3a90 	vmov	s1, r3
 8013200:	f995 3433 	ldrsb.w	r3, [r5, #1075]	; 0x433
 8013204:	ee01 3a10 	vmov	s2, r3
 8013208:	f995 3430 	ldrsb.w	r3, [r5, #1072]	; 0x430
 801320c:	ee01 3a90 	vmov	s3, r3
 8013210:	f995 341a 	ldrsb.w	r3, [r5, #1050]	; 0x41a
 8013214:	ee03 3a10 	vmov	s6, r3
 8013218:	f995 341e 	ldrsb.w	r3, [r5, #1054]	; 0x41e
 801321c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013220:	ee02 3a10 	vmov	s4, r3
 8013224:	f995 3436 	ldrsb.w	r3, [r5, #1078]	; 0x436
 8013228:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801322c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013230:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8013234:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013238:	ee02 3a90 	vmov	s5, r3
 801323c:	f995 341d 	ldrsb.w	r3, [r5, #1053]	; 0x41d
 8013240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013244:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8013248:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801324c:	eef0 7a66 	vmov.f32	s15, s13
 8013250:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8013254:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8013258:	eee3 7aa4 	vfma.f32	s15, s7, s9
 801325c:	ee03 3a90 	vmov	s7, r3
 8013260:	f995 3435 	ldrsb.w	r3, [r5, #1077]	; 0x435
 8013264:	ee68 8a84 	vmul.f32	s17, s17, s8
 8013268:	ee28 8a04 	vmul.f32	s16, s16, s8
 801326c:	ee2a aa04 	vmul.f32	s20, s20, s8
 8013270:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8013274:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013278:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801327c:	ee04 3a10 	vmov	s8, r3
 8013280:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013284:	f995 3432 	ldrsb.w	r3, [r5, #1074]	; 0x432
 8013288:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801328c:	eee1 8a05 	vfma.f32	s17, s2, s10
 8013290:	eea1 8a85 	vfma.f32	s16, s3, s10
 8013294:	eea2 aa85 	vfma.f32	s20, s5, s10
 8013298:	ee05 2a10 	vmov	s10, r2
 801329c:	f995 2438 	ldrsb.w	r2, [r5, #1080]	; 0x438
 80132a0:	eea0 7aa4 	vfma.f32	s14, s1, s9
 80132a4:	eee2 9a24 	vfma.f32	s19, s4, s9
 80132a8:	ee04 3a90 	vmov	s9, r3
 80132ac:	ee06 2a90 	vmov	s13, r2
 80132b0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80132b4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80132b8:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80132bc:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80132c0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80132c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80132c8:	eee5 7a83 	vfma.f32	s15, s11, s6
 80132cc:	4a9a      	ldr	r2, [pc, #616]	; (8013538 <MotionFX_propagate+0x808>)
 80132ce:	eea5 7aa3 	vfma.f32	s14, s11, s7
 80132d2:	2300      	movs	r3, #0
 80132d4:	9308      	str	r3, [sp, #32]
 80132d6:	eee6 8a04 	vfma.f32	s17, s12, s8
 80132da:	9309      	str	r3, [sp, #36]	; 0x24
 80132dc:	930a      	str	r3, [sp, #40]	; 0x28
 80132de:	eea6 8a24 	vfma.f32	s16, s12, s9
 80132e2:	930c      	str	r3, [sp, #48]	; 0x30
 80132e4:	930d      	str	r3, [sp, #52]	; 0x34
 80132e6:	eee5 9a85 	vfma.f32	s19, s11, s10
 80132ea:	930e      	str	r3, [sp, #56]	; 0x38
 80132ec:	eea6 aa26 	vfma.f32	s20, s12, s13
 80132f0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80132f4:	eef1 aa67 	vneg.f32	s21, s15
 80132f8:	eeb1 ba47 	vneg.f32	s22, s14
 80132fc:	eef1 8a68 	vneg.f32	s17, s17
 8013300:	eeb1 8a48 	vneg.f32	s16, s16
 8013304:	edcd 9a04 	vstr	s19, [sp, #16]
 8013308:	edcd aa03 	vstr	s21, [sp, #12]
 801330c:	ed8d ba02 	vstr	s22, [sp, #8]
 8013310:	edcd 8a05 	vstr	s17, [sp, #20]
 8013314:	ed8d aa07 	vstr	s20, [sp, #28]
 8013318:	edcd ba0b 	vstr	s23, [sp, #44]	; 0x2c
 801331c:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 8013320:	ed8d 8a06 	vstr	s16, [sp, #24]
 8013324:	f892 38e0 	ldrb.w	r3, [r2, #2272]	; 0x8e0
 8013328:	b1eb      	cbz	r3, 8013366 <MotionFX_propagate+0x636>
 801332a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801332e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013332:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8013336:	ee17 0a90 	vmov	r0, s15
 801333a:	f7ed f91d 	bl	8000578 <__aeabi_f2d>
 801333e:	f001 f9fd 	bl	801473c <sqrt>
 8013342:	f7ed fc49 	bl	8000bd8 <__aeabi_d2f>
 8013346:	ee07 0a90 	vmov	s15, r0
 801334a:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801334e:	ee2b ba27 	vmul.f32	s22, s22, s15
 8013352:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8013356:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801335a:	ed8d ba02 	vstr	s22, [sp, #8]
 801335e:	edcd aa03 	vstr	s21, [sp, #12]
 8013362:	edcd 9a04 	vstr	s19, [sp, #16]
 8013366:	f1b9 0f00 	cmp.w	r9, #0
 801336a:	f000 80bc 	beq.w	80134e6 <MotionFX_propagate+0x7b6>
 801336e:	ee07 9a90 	vmov	s15, r9
 8013372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801337a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801337e:	464a      	mov	r2, r9
 8013380:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013384:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013388:	ee2a aa27 	vmul.f32	s20, s20, s15
 801338c:	f895 3c20 	ldrb.w	r3, [r5, #3104]	; 0xc20
 8013390:	edd6 6a0c 	vldr	s13, [r6, #48]	; 0x30
 8013394:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 8013398:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 801339c:	f895 0c1c 	ldrb.w	r0, [r5, #3100]	; 0xc1c
 80133a0:	3301      	adds	r3, #1
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80133a8:	ee37 8a08 	vadd.f32	s16, s14, s16
 80133ac:	ee37 aa8a 	vadd.f32	s20, s15, s20
 80133b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80133b4:	fb02 3311 	mls	r3, r2, r1, r3
 80133b8:	f885 3c20 	strb.w	r3, [r5, #3104]	; 0xc20
 80133bc:	edc6 8a0c 	vstr	s17, [r6, #48]	; 0x30
 80133c0:	ed86 8a0d 	vstr	s16, [r6, #52]	; 0x34
 80133c4:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 80133c8:	2800      	cmp	r0, #0
 80133ca:	f040 80a7 	bne.w	801351c <MotionFX_propagate+0x7ec>
 80133ce:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80133d2:	4a5a      	ldr	r2, [pc, #360]	; (801353c <MotionFX_propagate+0x80c>)
 80133d4:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 80133d8:	4611      	mov	r1, r2
 80133da:	f1a2 0010 	sub.w	r0, r2, #16
 80133de:	f7f5 fe25 	bl	800902c <m_qmult_eml>
 80133e2:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 80133e6:	4611      	mov	r1, r2
 80133e8:	4650      	mov	r0, sl
 80133ea:	f7f5 fe1f 	bl	800902c <m_qmult_eml>
 80133ee:	f107 0218 	add.w	r2, r7, #24
 80133f2:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 80133f6:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 80133fa:	f7f5 fe17 	bl	800902c <m_qmult_eml>
 80133fe:	f107 0218 	add.w	r2, r7, #24
 8013402:	4611      	mov	r1, r2
 8013404:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 8013408:	f7f5 fe10 	bl	800902c <m_qmult_eml>
 801340c:	edd7 8a07 	vldr	s17, [r7, #28]
 8013410:	edd7 9a06 	vldr	s19, [r7, #24]
 8013414:	ed97 8a08 	vldr	s16, [r7, #32]
 8013418:	ed97 aa09 	vldr	s20, [r7, #36]	; 0x24
 801341c:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8013420:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8013424:	eea8 7a08 	vfma.f32	s14, s16, s16
 8013428:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 801342c:	ee17 0a10 	vmov	r0, s14
 8013430:	f7ed f8a2 	bl	8000578 <__aeabi_f2d>
 8013434:	f001 f982 	bl	801473c <sqrt>
 8013438:	f7ed fbce 	bl	8000bd8 <__aeabi_d2f>
 801343c:	ee07 0a90 	vmov	s15, r0
 8013440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013444:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8013448:	f895 3c28 	ldrb.w	r3, [r5, #3112]	; 0xc28
 801344c:	2b01      	cmp	r3, #1
 801344e:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8013452:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8013456:	ee27 8a88 	vmul.f32	s16, s15, s16
 801345a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801345e:	edc7 9a06 	vstr	s19, [r7, #24]
 8013462:	edc7 8a07 	vstr	s17, [r7, #28]
 8013466:	ed87 8a08 	vstr	s16, [r7, #32]
 801346a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801346e:	f000 81b7 	beq.w	80137e0 <MotionFX_propagate+0xab0>
 8013472:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801354c <MotionFX_propagate+0x81c>
 8013476:	f895 1c3e 	ldrb.w	r1, [r5, #3134]	; 0xc3e
 801347a:	9101      	str	r1, [sp, #4]
 801347c:	f1ab 030c 	sub.w	r3, fp, #12
 8013480:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 8013484:	a902      	add	r1, sp, #8
 8013486:	f8cd b000 	str.w	fp, [sp]
 801348a:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 801348e:	f7f7 fb27 	bl	800aae0 <output_update>
 8013492:	f895 2c3c 	ldrb.w	r2, [r5, #3132]	; 0xc3c
 8013496:	2300      	movs	r3, #0
 8013498:	0791      	lsls	r1, r2, #30
 801349a:	f885 3c1e 	strb.w	r3, [r5, #3102]	; 0xc1e
 801349e:	d409      	bmi.n	80134b4 <MotionFX_propagate+0x784>
 80134a0:	f895 1c20 	ldrb.w	r1, [r5, #3104]	; 0xc20
 80134a4:	fbb1 f3f9 	udiv	r3, r1, r9
 80134a8:	fb09 1913 	mls	r9, r9, r3, r1
 80134ac:	f019 0fff 	tst.w	r9, #255	; 0xff
 80134b0:	f000 80f6 	beq.w	80136a0 <MotionFX_propagate+0x970>
 80134b4:	4a22      	ldr	r2, [pc, #136]	; (8013540 <MotionFX_propagate+0x810>)
 80134b6:	4650      	mov	r0, sl
 80134b8:	4611      	mov	r1, r2
 80134ba:	f7f5 fdb7 	bl	800902c <m_qmult_eml>
 80134be:	f895 3c3e 	ldrb.w	r3, [r5, #3134]	; 0xc3e
 80134c2:	2b01      	cmp	r3, #1
 80134c4:	f47f ac80 	bne.w	8012dc8 <MotionFX_propagate+0x98>
 80134c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80134cc:	69ba      	ldr	r2, [r7, #24]
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	61bb      	str	r3, [r7, #24]
 80134d2:	eef1 7a67 	vneg.f32	s15, s15
 80134d6:	61fa      	str	r2, [r7, #28]
 80134d8:	edc7 7a08 	vstr	s15, [r7, #32]
 80134dc:	e474      	b.n	8012dc8 <MotionFX_propagate+0x98>
 80134de:	2201      	movs	r2, #1
 80134e0:	f885 29fd 	strb.w	r2, [r5, #2557]	; 0x9fd
 80134e4:	e5b3      	b.n	801304e <MotionFX_propagate+0x31e>
 80134e6:	2201      	movs	r2, #1
 80134e8:	f885 2c3d 	strb.w	r2, [r5, #3133]	; 0xc3d
 80134ec:	e74e      	b.n	801338c <MotionFX_propagate+0x65c>
 80134ee:	eeca 7a8c 	vdiv.f32	s15, s21, s24
 80134f2:	ee6b baa7 	vmul.f32	s23, s23, s15
 80134f6:	ee2b ba27 	vmul.f32	s22, s22, s15
 80134fa:	ee2a aa27 	vmul.f32	s20, s20, s15
 80134fe:	e58d      	b.n	801301c <MotionFX_propagate+0x2ec>
 8013500:	4b10      	ldr	r3, [pc, #64]	; (8013544 <MotionFX_propagate+0x814>)
 8013502:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8013506:	eeb0 0a49 	vmov.f32	s0, s18
 801350a:	f1a3 020c 	sub.w	r2, r3, #12
 801350e:	4618      	mov	r0, r3
 8013510:	f8cd a000 	str.w	sl, [sp]
 8013514:	a905      	add	r1, sp, #20
 8013516:	f7f6 f821 	bl	800955c <SpacePointGyroProp>
 801351a:	e5bb      	b.n	8013094 <MotionFX_propagate+0x364>
 801351c:	4b0a      	ldr	r3, [pc, #40]	; (8013548 <MotionFX_propagate+0x818>)
 801351e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8013522:	f1a3 020c 	sub.w	r2, r3, #12
 8013526:	4618      	mov	r0, r3
 8013528:	f8cd a000 	str.w	sl, [sp]
 801352c:	eeb0 0a49 	vmov.f32	s0, s18
 8013530:	a905      	add	r1, sp, #20
 8013532:	f7f6 f813 	bl	800955c <SpacePointGyroProp>
 8013536:	e74c      	b.n	80133d2 <MotionFX_propagate+0x6a2>
 8013538:	20000000 	.word	0x20000000
 801353c:	20001f8c 	.word	0x20001f8c
 8013540:	20001f4c 	.word	0x20001f4c
 8013544:	20001cdc 	.word	0x20001cdc
 8013548:	20001f1c 	.word	0x20001f1c
 801354c:	20002078 	.word	0x20002078
 8013550:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8013554:	f8d8 008c 	ldr.w	r0, [r8, #140]	; 0x8c
 8013558:	f8d8 1090 	ldr.w	r1, [r8, #144]	; 0x90
 801355c:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 8013560:	f042 0201 	orr.w	r2, r2, #1
 8013564:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8013568:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
 801356c:	f885 29fc 	strb.w	r2, [r5, #2556]	; 0x9fc
 8013570:	4650      	mov	r0, sl
 8013572:	aa10      	add	r2, sp, #64	; 0x40
 8013574:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 8013578:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 801357c:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 8013580:	f7f5 fd54 	bl	800902c <m_qmult_eml>
 8013584:	aa08      	add	r2, sp, #32
 8013586:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 801358a:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 801358e:	f7f5 fd4d 	bl	800902c <m_qmult_eml>
 8013592:	aa08      	add	r2, sp, #32
 8013594:	4611      	mov	r1, r2
 8013596:	a810      	add	r0, sp, #64	; 0x40
 8013598:	f7f5 fd48 	bl	800902c <m_qmult_eml>
 801359c:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 80135a0:	eddd 9a08 	vldr	s19, [sp, #32]
 80135a4:	eddd 8a0a 	vldr	s17, [sp, #40]	; 0x28
 80135a8:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 80135ac:	ee69 7a09 	vmul.f32	s15, s18, s18
 80135b0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80135b4:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80135b8:	eee8 7a08 	vfma.f32	s15, s16, s16
 80135bc:	ee17 0a90 	vmov	r0, s15
 80135c0:	f7ec ffda 	bl	8000578 <__aeabi_f2d>
 80135c4:	f001 f8ba 	bl	801473c <sqrt>
 80135c8:	f7ed fb06 	bl	8000bd8 <__aeabi_d2f>
 80135cc:	f895 39fd 	ldrb.w	r3, [r5, #2557]	; 0x9fd
 80135d0:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 80135d4:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 80135d8:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 80135dc:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 80135e0:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 80135e4:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 80135e8:	ee07 3a10 	vmov	s14, r3
 80135ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80135f0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80135f4:	eec5 7a07 	vdiv.f32	s15, s10, s14
 80135f8:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 80135fc:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8013600:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8013604:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8013608:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 801360c:	ee07 0a10 	vmov	s14, r0
 8013610:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8013614:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013618:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801361c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8013620:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013624:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8013628:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801362c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8013630:	ee29 9a25 	vmul.f32	s18, s18, s11
 8013634:	ee68 8aa5 	vmul.f32	s17, s17, s11
 8013638:	ee28 8a25 	vmul.f32	s16, s16, s11
 801363c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8013640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013644:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 8013648:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 801364c:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 8013650:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 8013654:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 8013658:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 801365c:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 8013660:	f100 80c5 	bmi.w	80137ee <MotionFX_propagate+0xabe>
 8013664:	2000      	movs	r0, #0
 8013666:	2300      	movs	r3, #0
 8013668:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801366c:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 8013670:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8013674:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 8013678:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 801367c:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 8013680:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8013684:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 8013688:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 801368c:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 8013690:	e576      	b.n	8013180 <MotionFX_propagate+0x450>
 8013692:	2300      	movs	r3, #0
 8013694:	ed86 7a09 	vstr	s14, [r6, #36]	; 0x24
 8013698:	61b3      	str	r3, [r6, #24]
 801369a:	61f3      	str	r3, [r6, #28]
 801369c:	6233      	str	r3, [r6, #32]
 801369e:	e549      	b.n	8013134 <MotionFX_propagate+0x404>
 80136a0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80136a4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 80136a8:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
 80136ac:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 80136b0:	f042 0201 	orr.w	r2, r2, #1
 80136b4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80136b8:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
 80136bc:	f885 2c3c 	strb.w	r2, [r5, #3132]	; 0xc3c
 80136c0:	4650      	mov	r0, sl
 80136c2:	aa10      	add	r2, sp, #64	; 0x40
 80136c4:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
 80136c8:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 80136cc:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
 80136d0:	f7f5 fcac 	bl	800902c <m_qmult_eml>
 80136d4:	aa08      	add	r2, sp, #32
 80136d6:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 80136da:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 80136de:	f7f5 fca5 	bl	800902c <m_qmult_eml>
 80136e2:	aa08      	add	r2, sp, #32
 80136e4:	4611      	mov	r1, r2
 80136e6:	a810      	add	r0, sp, #64	; 0x40
 80136e8:	f7f5 fca0 	bl	800902c <m_qmult_eml>
 80136ec:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 80136f0:	eddd 9a08 	vldr	s19, [sp, #32]
 80136f4:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 80136f8:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 80136fc:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8013700:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8013704:	eee8 7a08 	vfma.f32	s15, s16, s16
 8013708:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801370c:	ee17 0a90 	vmov	r0, s15
 8013710:	f7ec ff32 	bl	8000578 <__aeabi_f2d>
 8013714:	f001 f812 	bl	801473c <sqrt>
 8013718:	f7ed fa5e 	bl	8000bd8 <__aeabi_d2f>
 801371c:	f895 3c3d 	ldrb.w	r3, [r5, #3133]	; 0xc3d
 8013720:	edd6 5a33 	vldr	s11, [r6, #204]	; 0xcc
 8013724:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
 8013728:	edd6 4a34 	vldr	s9, [r6, #208]	; 0xd0
 801372c:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
 8013730:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8013734:	f8c6 10bc 	str.w	r1, [r6, #188]	; 0xbc
 8013738:	ee07 3a10 	vmov	s14, r3
 801373c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013740:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013744:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8013748:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 801374c:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 8013750:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 8013754:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0
 8013758:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 801375c:	ee07 0a10 	vmov	s14, r0
 8013760:	ee85 7a07 	vdiv.f32	s14, s10, s14
 8013764:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013768:	ee27 6a86 	vmul.f32	s12, s15, s12
 801376c:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8013770:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013774:	eee6 6a06 	vfma.f32	s13, s12, s12
 8013778:	ee67 9a29 	vmul.f32	s19, s14, s19
 801377c:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8013780:	ee67 8a28 	vmul.f32	s17, s14, s17
 8013784:	ee27 8a08 	vmul.f32	s16, s14, s16
 8013788:	eef4 6ac5 	vcmpe.f32	s13, s10
 801378c:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8013790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013794:	edc6 9a1e 	vstr	s19, [r6, #120]	; 0x78
 8013798:	edc6 8a1f 	vstr	s17, [r6, #124]	; 0x7c
 801379c:	ed86 8a20 	vstr	s16, [r6, #128]	; 0x80
 80137a0:	ed86 7a21 	vstr	s14, [r6, #132]	; 0x84
 80137a4:	edc6 5a37 	vstr	s11, [r6, #220]	; 0xdc
 80137a8:	ed86 6a36 	vstr	s12, [r6, #216]	; 0xd8
 80137ac:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 80137b0:	d428      	bmi.n	8013804 <MotionFX_propagate+0xad4>
 80137b2:	2000      	movs	r0, #0
 80137b4:	2300      	movs	r3, #0
 80137b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80137ba:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 80137be:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
 80137c2:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 80137c6:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 80137ca:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 80137ce:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 80137d2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 80137d6:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 80137da:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 80137de:	e66e      	b.n	80134be <MotionFX_propagate+0x78e>
 80137e0:	2300      	movs	r3, #0
 80137e2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80137e6:	61bb      	str	r3, [r7, #24]
 80137e8:	61fb      	str	r3, [r7, #28]
 80137ea:	623b      	str	r3, [r7, #32]
 80137ec:	e641      	b.n	8013472 <MotionFX_propagate+0x742>
 80137ee:	ee75 7a47 	vsub.f32	s15, s10, s14
 80137f2:	ee17 0a90 	vmov	r0, s15
 80137f6:	f7ec febf 	bl	8000578 <__aeabi_f2d>
 80137fa:	f000 ff9f 	bl	801473c <sqrt>
 80137fe:	f7ed f9eb 	bl	8000bd8 <__aeabi_d2f>
 8013802:	e730      	b.n	8013666 <MotionFX_propagate+0x936>
 8013804:	ee75 7a66 	vsub.f32	s15, s10, s13
 8013808:	ee17 0a90 	vmov	r0, s15
 801380c:	f7ec feb4 	bl	8000578 <__aeabi_f2d>
 8013810:	f000 ff94 	bl	801473c <sqrt>
 8013814:	f7ed f9e0 	bl	8000bd8 <__aeabi_d2f>
 8013818:	e7cc      	b.n	80137b4 <MotionFX_propagate+0xa84>
 801381a:	bf00      	nop

0801381c <MotionFX_MagCal_init>:
 801381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013820:	4c50      	ldr	r4, [pc, #320]	; (8013964 <MotionFX_MagCal_init+0x148>)
 8013822:	f894 3d49 	ldrb.w	r3, [r4, #3401]	; 0xd49
 8013826:	b90b      	cbnz	r3, 801382c <MotionFX_MagCal_init+0x10>
 8013828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801382c:	1e43      	subs	r3, r0, #1
 801382e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013832:	d2f9      	bcs.n	8013828 <MotionFX_MagCal_init+0xc>
 8013834:	460e      	mov	r6, r1
 8013836:	4605      	mov	r5, r0
 8013838:	b207      	sxth	r7, r0
 801383a:	2900      	cmp	r1, #0
 801383c:	f000 8089 	beq.w	8013952 <MotionFX_MagCal_init+0x136>
 8013840:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 8013844:	2600      	movs	r6, #0
 8013846:	4640      	mov	r0, r8
 8013848:	f7f5 fc9e 	bl	8009188 <MEMS_DataBuffInit>
 801384c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013850:	4631      	mov	r1, r6
 8013852:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013856:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 801385a:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
 801385e:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 8013862:	f8c4 64ac 	str.w	r6, [r4, #1196]	; 0x4ac
 8013866:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
 801386a:	f884 6475 	strb.w	r6, [r4, #1141]	; 0x475
 801386e:	f000 f9b6 	bl	8013bde <memset>
 8013872:	225f      	movs	r2, #95	; 0x5f
 8013874:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013878:	23ff      	movs	r3, #255	; 0xff
 801387a:	4631      	mov	r1, r6
 801387c:	f884 2501 	strb.w	r2, [r4, #1281]	; 0x501
 8013880:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 8013884:	222e      	movs	r2, #46	; 0x2e
 8013886:	f8a4 04b4 	strh.w	r0, [r4, #1204]	; 0x4b4
 801388a:	f204 40ce 	addw	r0, r4, #1230	; 0x4ce
 801388e:	f884 3502 	strb.w	r3, [r4, #1282]	; 0x502
 8013892:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
 8013896:	f8c4 6478 	str.w	r6, [r4, #1144]	; 0x478
 801389a:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 801389e:	f8c4 6480 	str.w	r6, [r4, #1152]	; 0x480
 80138a2:	f8a4 c484 	strh.w	ip, [r4, #1156]	; 0x484
 80138a6:	f000 f99a 	bl	8013bde <memset>
 80138aa:	f1a5 030a 	sub.w	r3, r5, #10
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80138b4:	2101      	movs	r1, #1
 80138b6:	2b32      	cmp	r3, #50	; 0x32
 80138b8:	f884 64cc 	strb.w	r6, [r4, #1228]	; 0x4cc
 80138bc:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 80138c0:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 80138c4:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
 80138c8:	f884 14cd 	strb.w	r1, [r4, #1229]	; 0x4cd
 80138cc:	d801      	bhi.n	80138d2 <MotionFX_MagCal_init+0xb6>
 80138ce:	f884 14a8 	strb.w	r1, [r4, #1192]	; 0x4a8
 80138d2:	2100      	movs	r1, #0
 80138d4:	4824      	ldr	r0, [pc, #144]	; (8013968 <MotionFX_MagCal_init+0x14c>)
 80138d6:	f7f5 ffd7 	bl	8009888 <MEMSLoadMagCalNVM>
 80138da:	f9b4 3462 	ldrsh.w	r3, [r4, #1122]	; 0x462
 80138de:	4a23      	ldr	r2, [pc, #140]	; (801396c <MotionFX_MagCal_init+0x150>)
 80138e0:	1b5b      	subs	r3, r3, r5
 80138e2:	ee07 3a90 	vmov	s15, r3
 80138e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138ea:	23c8      	movs	r3, #200	; 0xc8
 80138ec:	eef0 7ae7 	vabs.f32	s15, s15
 80138f0:	fb93 f3f5 	sdiv	r3, r3, r5
 80138f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	2b0f      	cmp	r3, #15
 80138fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013900:	bf28      	it	cs
 8013902:	230f      	movcs	r3, #15
 8013904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013908:	f884 3d6e 	strb.w	r3, [r4, #3438]	; 0xd6e
 801390c:	f8c2 50c4 	str.w	r5, [r2, #196]	; 0xc4
 8013910:	dc0e      	bgt.n	8013930 <MotionFX_MagCal_init+0x114>
 8013912:	edd8 7a01 	vldr	s15, [r8, #4]
 8013916:	eddf 6a16 	vldr	s13, [pc, #88]	; 8013970 <MotionFX_MagCal_init+0x154>
 801391a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013974 <MotionFX_MagCal_init+0x158>
 801391e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013922:	eef0 7ae7 	vabs.f32	s15, s15
 8013926:	eef4 7ac7 	vcmpe.f32	s15, s14
 801392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801392e:	dd0b      	ble.n	8013948 <MotionFX_MagCal_init+0x12c>
 8013930:	480d      	ldr	r0, [pc, #52]	; (8013968 <MotionFX_MagCal_init+0x14c>)
 8013932:	f7f5 fc25 	bl	8009180 <MEMS_EmptyDataFrame>
 8013936:	4a10      	ldr	r2, [pc, #64]	; (8013978 <MotionFX_MagCal_init+0x15c>)
 8013938:	f8a4 7462 	strh.w	r7, [r4, #1122]	; 0x462
 801393c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8013940:	f8c8 2004 	str.w	r2, [r8, #4]
 8013944:	f8a4 3460 	strh.w	r3, [r4, #1120]	; 0x460
 8013948:	2300      	movs	r3, #0
 801394a:	f884 3de8 	strb.w	r3, [r4, #3560]	; 0xde8
 801394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013952:	f204 4074 	addw	r0, r4, #1140	; 0x474
 8013956:	f7f5 ffd9 	bl	800990c <MEMSSaveMagCalNVM>
 801395a:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801395e:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 8013962:	e7ba      	b.n	80138da <MotionFX_MagCal_init+0xbe>
 8013964:	20001398 	.word	0x20001398
 8013968:	200017f8 	.word	0x200017f8
 801396c:	200010f8 	.word	0x200010f8
 8013970:	3dcccccd 	.word	0x3dcccccd
 8013974:	3c23d70a 	.word	0x3c23d70a
 8013978:	3dcccccd 	.word	0x3dcccccd

0801397c <MotionFX_MagCal_run>:
 801397c:	4b4c      	ldr	r3, [pc, #304]	; (8013ab0 <MotionFX_MagCal_run+0x134>)
 801397e:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8013982:	2a00      	cmp	r2, #0
 8013984:	d07f      	beq.n	8013a86 <MotionFX_MagCal_run+0x10a>
 8013986:	ed90 7a00 	vldr	s14, [r0]
 801398a:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013ab4 <MotionFX_MagCal_run+0x138>
 801398e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013994:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801399c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80139a0:	bfac      	ite	ge
 80139a2:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80139a6:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80139aa:	b085      	sub	sp, #20
 80139ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139b0:	ed90 7a01 	vldr	s14, [r0, #4]
 80139b4:	edcd 7a01 	vstr	s15, [sp, #4]
 80139b8:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8013ab4 <MotionFX_MagCal_run+0x138>
 80139bc:	f893 2de8 	ldrb.w	r2, [r3, #3560]	; 0xde8
 80139c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80139c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80139d0:	bfac      	ite	ge
 80139d2:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80139d6:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80139da:	ed90 7a02 	vldr	s14, [r0, #8]
 80139de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139e2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80139e6:	edcd 7a02 	vstr	s15, [sp, #8]
 80139ea:	eddf 7a32 	vldr	s15, [pc, #200]	; 8013ab4 <MotionFX_MagCal_run+0x138>
 80139ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80139fa:	bfac      	ite	ge
 80139fc:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8013a00:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8013a04:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 8013a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a0c:	edcd 7a03 	vstr	s15, [sp, #12]
 8013a10:	ee17 5a90 	vmov	r5, s15
 8013a14:	b37a      	cbz	r2, 8013a76 <MotionFX_MagCal_run+0xfa>
 8013a16:	4828      	ldr	r0, [pc, #160]	; (8013ab8 <MotionFX_MagCal_run+0x13c>)
 8013a18:	00d1      	lsls	r1, r2, #3
 8013a1a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013a1e:	185f      	adds	r7, r3, r1
 8013a20:	fb10 f002 	smulbb	r0, r0, r2
 8013a24:	f8a7 0d70 	strh.w	r0, [r7, #3440]	; 0xd70
 8013a28:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8013a2c:	4f23      	ldr	r7, [pc, #140]	; (8013abc <MotionFX_MagCal_run+0x140>)
 8013a2e:	4284      	cmp	r4, r0
 8013a30:	bfa8      	it	ge
 8013a32:	4604      	movge	r4, r0
 8013a34:	4285      	cmp	r5, r0
 8013a36:	bfa8      	it	ge
 8013a38:	4605      	movge	r5, r0
 8013a3a:	42bc      	cmp	r4, r7
 8013a3c:	bfb8      	it	lt
 8013a3e:	463c      	movlt	r4, r7
 8013a40:	42be      	cmp	r6, r7
 8013a42:	db03      	blt.n	8013a4c <MotionFX_MagCal_run+0xd0>
 8013a44:	42b0      	cmp	r0, r6
 8013a46:	bfa8      	it	ge
 8013a48:	4630      	movge	r0, r6
 8013a4a:	b200      	sxth	r0, r0
 8013a4c:	4f1b      	ldr	r7, [pc, #108]	; (8013abc <MotionFX_MagCal_run+0x140>)
 8013a4e:	f893 6d6e 	ldrb.w	r6, [r3, #3438]	; 0xd6e
 8013a52:	3201      	adds	r2, #1
 8013a54:	4419      	add	r1, r3
 8013a56:	b2d2      	uxtb	r2, r2
 8013a58:	42bd      	cmp	r5, r7
 8013a5a:	bfb8      	it	lt
 8013a5c:	463d      	movlt	r5, r7
 8013a5e:	4296      	cmp	r6, r2
 8013a60:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 8013a64:	f8a1 4d72 	strh.w	r4, [r1, #3442]	; 0xd72
 8013a68:	f8a1 0d74 	strh.w	r0, [r1, #3444]	; 0xd74
 8013a6c:	f8a1 5d76 	strh.w	r5, [r1, #3446]	; 0xd76
 8013a70:	d00a      	beq.n	8013a88 <MotionFX_MagCal_run+0x10c>
 8013a72:	b005      	add	sp, #20
 8013a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a76:	68c1      	ldr	r1, [r0, #12]
 8013a78:	f8c3 1d68 	str.w	r1, [r3, #3432]	; 0xd68
 8013a7c:	2101      	movs	r1, #1
 8013a7e:	f883 1d6c 	strb.w	r1, [r3, #3436]	; 0xd6c
 8013a82:	4611      	mov	r1, r2
 8013a84:	e7d0      	b.n	8013a28 <MotionFX_MagCal_run+0xac>
 8013a86:	4770      	bx	lr
 8013a88:	490d      	ldr	r1, [pc, #52]	; (8013ac0 <MotionFX_MagCal_run+0x144>)
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	f6a1 1008 	subw	r0, r1, #2312	; 0x908
 8013a90:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 8013a94:	f7f5 fbbe 	bl	8009214 <updateProcBuffer_Temp>
 8013a98:	490a      	ldr	r1, [pc, #40]	; (8013ac4 <MotionFX_MagCal_run+0x148>)
 8013a9a:	f101 0048 	add.w	r0, r1, #72	; 0x48
 8013a9e:	f7f5 fb7f 	bl	80091a0 <MEMS_checkTimeToRun>
 8013aa2:	2801      	cmp	r0, #1
 8013aa4:	d1e5      	bne.n	8013a72 <MotionFX_MagCal_run+0xf6>
 8013aa6:	b005      	add	sp, #20
 8013aa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013aac:	f7f7 ba8c 	b.w	800afc8 <MEMS_runMagCal.constprop.14>
 8013ab0:	20001398 	.word	0x20001398
 8013ab4:	43fa0000 	.word	0x43fa0000
 8013ab8:	200010f8 	.word	0x200010f8
 8013abc:	ffff8002 	.word	0xffff8002
 8013ac0:	20002100 	.word	0x20002100
 8013ac4:	200017f8 	.word	0x200017f8

08013ac8 <MotionFX_MagCal_getParams>:
 8013ac8:	4b15      	ldr	r3, [pc, #84]	; (8013b20 <MotionFX_MagCal_getParams+0x58>)
 8013aca:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8013ace:	b902      	cbnz	r2, 8013ad2 <MotionFX_MagCal_getParams+0xa>
 8013ad0:	4770      	bx	lr
 8013ad2:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8013ad6:	edd2 6a1c 	vldr	s13, [r2, #112]	; 0x70
 8013ada:	ed92 7a1d 	vldr	s14, [r2, #116]	; 0x74
 8013ade:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 8013ae2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013b24 <MotionFX_MagCal_getParams+0x5c>
 8013ae6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8013aea:	7303      	strb	r3, [r0, #12]
 8013aec:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013af0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013af8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013afc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b04:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013b08:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013b0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013b10:	edc0 6a00 	vstr	s13, [r0]
 8013b14:	ed80 7a01 	vstr	s14, [r0, #4]
 8013b18:	edc0 7a02 	vstr	s15, [r0, #8]
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop
 8013b20:	20001398 	.word	0x20001398
 8013b24:	3b03126f 	.word	0x3b03126f

08013b28 <MotionFX_GetLibVersion>:
 8013b28:	4b10      	ldr	r3, [pc, #64]	; (8013b6c <MotionFX_GetLibVersion+0x44>)
 8013b2a:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 8013b2e:	b90b      	cbnz	r3, 8013b34 <MotionFX_GetLibVersion+0xc>
 8013b30:	4618      	mov	r0, r3
 8013b32:	4770      	bx	lr
 8013b34:	b470      	push	{r4, r5, r6}
 8013b36:	4e0e      	ldr	r6, [pc, #56]	; (8013b70 <MotionFX_GetLibVersion+0x48>)
 8013b38:	4605      	mov	r5, r0
 8013b3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b3c:	b08b      	sub	sp, #44	; 0x2c
 8013b3e:	ac01      	add	r4, sp, #4
 8013b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b42:	6833      	ldr	r3, [r6, #0]
 8013b44:	f824 3b02 	strh.w	r3, [r4], #2
 8013b48:	0c1b      	lsrs	r3, r3, #16
 8013b4a:	7023      	strb	r3, [r4, #0]
 8013b4c:	ac01      	add	r4, sp, #4
 8013b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b50:	8826      	ldrh	r6, [r4, #0]
 8013b52:	60eb      	str	r3, [r5, #12]
 8013b54:	78a4      	ldrb	r4, [r4, #2]
 8013b56:	6028      	str	r0, [r5, #0]
 8013b58:	2312      	movs	r3, #18
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	6069      	str	r1, [r5, #4]
 8013b5e:	60aa      	str	r2, [r5, #8]
 8013b60:	822e      	strh	r6, [r5, #16]
 8013b62:	74ac      	strb	r4, [r5, #18]
 8013b64:	b00b      	add	sp, #44	; 0x2c
 8013b66:	bc70      	pop	{r4, r5, r6}
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop
 8013b6c:	20001398 	.word	0x20001398
 8013b70:	08016288 	.word	0x08016288

08013b74 <__errno>:
 8013b74:	4b01      	ldr	r3, [pc, #4]	; (8013b7c <__errno+0x8>)
 8013b76:	6818      	ldr	r0, [r3, #0]
 8013b78:	4770      	bx	lr
 8013b7a:	bf00      	nop
 8013b7c:	20001314 	.word	0x20001314

08013b80 <__libc_init_array>:
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	4e0d      	ldr	r6, [pc, #52]	; (8013bb8 <__libc_init_array+0x38>)
 8013b84:	4c0d      	ldr	r4, [pc, #52]	; (8013bbc <__libc_init_array+0x3c>)
 8013b86:	1ba4      	subs	r4, r4, r6
 8013b88:	10a4      	asrs	r4, r4, #2
 8013b8a:	2500      	movs	r5, #0
 8013b8c:	42a5      	cmp	r5, r4
 8013b8e:	d109      	bne.n	8013ba4 <__libc_init_array+0x24>
 8013b90:	4e0b      	ldr	r6, [pc, #44]	; (8013bc0 <__libc_init_array+0x40>)
 8013b92:	4c0c      	ldr	r4, [pc, #48]	; (8013bc4 <__libc_init_array+0x44>)
 8013b94:	f002 fa9e 	bl	80160d4 <_init>
 8013b98:	1ba4      	subs	r4, r4, r6
 8013b9a:	10a4      	asrs	r4, r4, #2
 8013b9c:	2500      	movs	r5, #0
 8013b9e:	42a5      	cmp	r5, r4
 8013ba0:	d105      	bne.n	8013bae <__libc_init_array+0x2e>
 8013ba2:	bd70      	pop	{r4, r5, r6, pc}
 8013ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ba8:	4798      	blx	r3
 8013baa:	3501      	adds	r5, #1
 8013bac:	e7ee      	b.n	8013b8c <__libc_init_array+0xc>
 8013bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013bb2:	4798      	blx	r3
 8013bb4:	3501      	adds	r5, #1
 8013bb6:	e7f2      	b.n	8013b9e <__libc_init_array+0x1e>
 8013bb8:	08016778 	.word	0x08016778
 8013bbc:	08016778 	.word	0x08016778
 8013bc0:	08016778 	.word	0x08016778
 8013bc4:	0801677c 	.word	0x0801677c

08013bc8 <memcpy>:
 8013bc8:	b510      	push	{r4, lr}
 8013bca:	1e43      	subs	r3, r0, #1
 8013bcc:	440a      	add	r2, r1
 8013bce:	4291      	cmp	r1, r2
 8013bd0:	d100      	bne.n	8013bd4 <memcpy+0xc>
 8013bd2:	bd10      	pop	{r4, pc}
 8013bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bdc:	e7f7      	b.n	8013bce <memcpy+0x6>

08013bde <memset>:
 8013bde:	4402      	add	r2, r0
 8013be0:	4603      	mov	r3, r0
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d100      	bne.n	8013be8 <memset+0xa>
 8013be6:	4770      	bx	lr
 8013be8:	f803 1b01 	strb.w	r1, [r3], #1
 8013bec:	e7f9      	b.n	8013be2 <memset+0x4>
	...

08013bf0 <sniprintf>:
 8013bf0:	b40c      	push	{r2, r3}
 8013bf2:	b530      	push	{r4, r5, lr}
 8013bf4:	4b17      	ldr	r3, [pc, #92]	; (8013c54 <sniprintf+0x64>)
 8013bf6:	1e0c      	subs	r4, r1, #0
 8013bf8:	b09d      	sub	sp, #116	; 0x74
 8013bfa:	681d      	ldr	r5, [r3, #0]
 8013bfc:	da08      	bge.n	8013c10 <sniprintf+0x20>
 8013bfe:	238b      	movs	r3, #139	; 0x8b
 8013c00:	602b      	str	r3, [r5, #0]
 8013c02:	f04f 30ff 	mov.w	r0, #4294967295
 8013c06:	b01d      	add	sp, #116	; 0x74
 8013c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c0c:	b002      	add	sp, #8
 8013c0e:	4770      	bx	lr
 8013c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013c14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c18:	bf14      	ite	ne
 8013c1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013c1e:	4623      	moveq	r3, r4
 8013c20:	9304      	str	r3, [sp, #16]
 8013c22:	9307      	str	r3, [sp, #28]
 8013c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c28:	9002      	str	r0, [sp, #8]
 8013c2a:	9006      	str	r0, [sp, #24]
 8013c2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013c32:	ab21      	add	r3, sp, #132	; 0x84
 8013c34:	a902      	add	r1, sp, #8
 8013c36:	4628      	mov	r0, r5
 8013c38:	9301      	str	r3, [sp, #4]
 8013c3a:	f000 f867 	bl	8013d0c <_svfiprintf_r>
 8013c3e:	1c43      	adds	r3, r0, #1
 8013c40:	bfbc      	itt	lt
 8013c42:	238b      	movlt	r3, #139	; 0x8b
 8013c44:	602b      	strlt	r3, [r5, #0]
 8013c46:	2c00      	cmp	r4, #0
 8013c48:	d0dd      	beq.n	8013c06 <sniprintf+0x16>
 8013c4a:	9b02      	ldr	r3, [sp, #8]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	701a      	strb	r2, [r3, #0]
 8013c50:	e7d9      	b.n	8013c06 <sniprintf+0x16>
 8013c52:	bf00      	nop
 8013c54:	20001314 	.word	0x20001314

08013c58 <__ssputs_r>:
 8013c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c5c:	688e      	ldr	r6, [r1, #8]
 8013c5e:	429e      	cmp	r6, r3
 8013c60:	4682      	mov	sl, r0
 8013c62:	460c      	mov	r4, r1
 8013c64:	4690      	mov	r8, r2
 8013c66:	4699      	mov	r9, r3
 8013c68:	d837      	bhi.n	8013cda <__ssputs_r+0x82>
 8013c6a:	898a      	ldrh	r2, [r1, #12]
 8013c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c70:	d031      	beq.n	8013cd6 <__ssputs_r+0x7e>
 8013c72:	6825      	ldr	r5, [r4, #0]
 8013c74:	6909      	ldr	r1, [r1, #16]
 8013c76:	1a6f      	subs	r7, r5, r1
 8013c78:	6965      	ldr	r5, [r4, #20]
 8013c7a:	2302      	movs	r3, #2
 8013c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c80:	fb95 f5f3 	sdiv	r5, r5, r3
 8013c84:	f109 0301 	add.w	r3, r9, #1
 8013c88:	443b      	add	r3, r7
 8013c8a:	429d      	cmp	r5, r3
 8013c8c:	bf38      	it	cc
 8013c8e:	461d      	movcc	r5, r3
 8013c90:	0553      	lsls	r3, r2, #21
 8013c92:	d530      	bpl.n	8013cf6 <__ssputs_r+0x9e>
 8013c94:	4629      	mov	r1, r5
 8013c96:	f000 fb21 	bl	80142dc <_malloc_r>
 8013c9a:	4606      	mov	r6, r0
 8013c9c:	b950      	cbnz	r0, 8013cb4 <__ssputs_r+0x5c>
 8013c9e:	230c      	movs	r3, #12
 8013ca0:	f8ca 3000 	str.w	r3, [sl]
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013caa:	81a3      	strh	r3, [r4, #12]
 8013cac:	f04f 30ff 	mov.w	r0, #4294967295
 8013cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cb4:	463a      	mov	r2, r7
 8013cb6:	6921      	ldr	r1, [r4, #16]
 8013cb8:	f7ff ff86 	bl	8013bc8 <memcpy>
 8013cbc:	89a3      	ldrh	r3, [r4, #12]
 8013cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cc6:	81a3      	strh	r3, [r4, #12]
 8013cc8:	6126      	str	r6, [r4, #16]
 8013cca:	6165      	str	r5, [r4, #20]
 8013ccc:	443e      	add	r6, r7
 8013cce:	1bed      	subs	r5, r5, r7
 8013cd0:	6026      	str	r6, [r4, #0]
 8013cd2:	60a5      	str	r5, [r4, #8]
 8013cd4:	464e      	mov	r6, r9
 8013cd6:	454e      	cmp	r6, r9
 8013cd8:	d900      	bls.n	8013cdc <__ssputs_r+0x84>
 8013cda:	464e      	mov	r6, r9
 8013cdc:	4632      	mov	r2, r6
 8013cde:	4641      	mov	r1, r8
 8013ce0:	6820      	ldr	r0, [r4, #0]
 8013ce2:	f000 fa93 	bl	801420c <memmove>
 8013ce6:	68a3      	ldr	r3, [r4, #8]
 8013ce8:	1b9b      	subs	r3, r3, r6
 8013cea:	60a3      	str	r3, [r4, #8]
 8013cec:	6823      	ldr	r3, [r4, #0]
 8013cee:	441e      	add	r6, r3
 8013cf0:	6026      	str	r6, [r4, #0]
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	e7dc      	b.n	8013cb0 <__ssputs_r+0x58>
 8013cf6:	462a      	mov	r2, r5
 8013cf8:	f000 fb4a 	bl	8014390 <_realloc_r>
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d1e2      	bne.n	8013cc8 <__ssputs_r+0x70>
 8013d02:	6921      	ldr	r1, [r4, #16]
 8013d04:	4650      	mov	r0, sl
 8013d06:	f000 fa9b 	bl	8014240 <_free_r>
 8013d0a:	e7c8      	b.n	8013c9e <__ssputs_r+0x46>

08013d0c <_svfiprintf_r>:
 8013d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d10:	461d      	mov	r5, r3
 8013d12:	898b      	ldrh	r3, [r1, #12]
 8013d14:	061f      	lsls	r7, r3, #24
 8013d16:	b09d      	sub	sp, #116	; 0x74
 8013d18:	4680      	mov	r8, r0
 8013d1a:	460c      	mov	r4, r1
 8013d1c:	4616      	mov	r6, r2
 8013d1e:	d50f      	bpl.n	8013d40 <_svfiprintf_r+0x34>
 8013d20:	690b      	ldr	r3, [r1, #16]
 8013d22:	b96b      	cbnz	r3, 8013d40 <_svfiprintf_r+0x34>
 8013d24:	2140      	movs	r1, #64	; 0x40
 8013d26:	f000 fad9 	bl	80142dc <_malloc_r>
 8013d2a:	6020      	str	r0, [r4, #0]
 8013d2c:	6120      	str	r0, [r4, #16]
 8013d2e:	b928      	cbnz	r0, 8013d3c <_svfiprintf_r+0x30>
 8013d30:	230c      	movs	r3, #12
 8013d32:	f8c8 3000 	str.w	r3, [r8]
 8013d36:	f04f 30ff 	mov.w	r0, #4294967295
 8013d3a:	e0c8      	b.n	8013ece <_svfiprintf_r+0x1c2>
 8013d3c:	2340      	movs	r3, #64	; 0x40
 8013d3e:	6163      	str	r3, [r4, #20]
 8013d40:	2300      	movs	r3, #0
 8013d42:	9309      	str	r3, [sp, #36]	; 0x24
 8013d44:	2320      	movs	r3, #32
 8013d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d4a:	2330      	movs	r3, #48	; 0x30
 8013d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d50:	9503      	str	r5, [sp, #12]
 8013d52:	f04f 0b01 	mov.w	fp, #1
 8013d56:	4637      	mov	r7, r6
 8013d58:	463d      	mov	r5, r7
 8013d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013d5e:	b10b      	cbz	r3, 8013d64 <_svfiprintf_r+0x58>
 8013d60:	2b25      	cmp	r3, #37	; 0x25
 8013d62:	d13e      	bne.n	8013de2 <_svfiprintf_r+0xd6>
 8013d64:	ebb7 0a06 	subs.w	sl, r7, r6
 8013d68:	d00b      	beq.n	8013d82 <_svfiprintf_r+0x76>
 8013d6a:	4653      	mov	r3, sl
 8013d6c:	4632      	mov	r2, r6
 8013d6e:	4621      	mov	r1, r4
 8013d70:	4640      	mov	r0, r8
 8013d72:	f7ff ff71 	bl	8013c58 <__ssputs_r>
 8013d76:	3001      	adds	r0, #1
 8013d78:	f000 80a4 	beq.w	8013ec4 <_svfiprintf_r+0x1b8>
 8013d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7e:	4453      	add	r3, sl
 8013d80:	9309      	str	r3, [sp, #36]	; 0x24
 8013d82:	783b      	ldrb	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f000 809d 	beq.w	8013ec4 <_svfiprintf_r+0x1b8>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d94:	9304      	str	r3, [sp, #16]
 8013d96:	9307      	str	r3, [sp, #28]
 8013d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8013d9e:	462f      	mov	r7, r5
 8013da0:	2205      	movs	r2, #5
 8013da2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013da6:	4850      	ldr	r0, [pc, #320]	; (8013ee8 <_svfiprintf_r+0x1dc>)
 8013da8:	f7ec fa32 	bl	8000210 <memchr>
 8013dac:	9b04      	ldr	r3, [sp, #16]
 8013dae:	b9d0      	cbnz	r0, 8013de6 <_svfiprintf_r+0xda>
 8013db0:	06d9      	lsls	r1, r3, #27
 8013db2:	bf44      	itt	mi
 8013db4:	2220      	movmi	r2, #32
 8013db6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013dba:	071a      	lsls	r2, r3, #28
 8013dbc:	bf44      	itt	mi
 8013dbe:	222b      	movmi	r2, #43	; 0x2b
 8013dc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013dc4:	782a      	ldrb	r2, [r5, #0]
 8013dc6:	2a2a      	cmp	r2, #42	; 0x2a
 8013dc8:	d015      	beq.n	8013df6 <_svfiprintf_r+0xea>
 8013dca:	9a07      	ldr	r2, [sp, #28]
 8013dcc:	462f      	mov	r7, r5
 8013dce:	2000      	movs	r0, #0
 8013dd0:	250a      	movs	r5, #10
 8013dd2:	4639      	mov	r1, r7
 8013dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dd8:	3b30      	subs	r3, #48	; 0x30
 8013dda:	2b09      	cmp	r3, #9
 8013ddc:	d94d      	bls.n	8013e7a <_svfiprintf_r+0x16e>
 8013dde:	b1b8      	cbz	r0, 8013e10 <_svfiprintf_r+0x104>
 8013de0:	e00f      	b.n	8013e02 <_svfiprintf_r+0xf6>
 8013de2:	462f      	mov	r7, r5
 8013de4:	e7b8      	b.n	8013d58 <_svfiprintf_r+0x4c>
 8013de6:	4a40      	ldr	r2, [pc, #256]	; (8013ee8 <_svfiprintf_r+0x1dc>)
 8013de8:	1a80      	subs	r0, r0, r2
 8013dea:	fa0b f000 	lsl.w	r0, fp, r0
 8013dee:	4318      	orrs	r0, r3
 8013df0:	9004      	str	r0, [sp, #16]
 8013df2:	463d      	mov	r5, r7
 8013df4:	e7d3      	b.n	8013d9e <_svfiprintf_r+0x92>
 8013df6:	9a03      	ldr	r2, [sp, #12]
 8013df8:	1d11      	adds	r1, r2, #4
 8013dfa:	6812      	ldr	r2, [r2, #0]
 8013dfc:	9103      	str	r1, [sp, #12]
 8013dfe:	2a00      	cmp	r2, #0
 8013e00:	db01      	blt.n	8013e06 <_svfiprintf_r+0xfa>
 8013e02:	9207      	str	r2, [sp, #28]
 8013e04:	e004      	b.n	8013e10 <_svfiprintf_r+0x104>
 8013e06:	4252      	negs	r2, r2
 8013e08:	f043 0302 	orr.w	r3, r3, #2
 8013e0c:	9207      	str	r2, [sp, #28]
 8013e0e:	9304      	str	r3, [sp, #16]
 8013e10:	783b      	ldrb	r3, [r7, #0]
 8013e12:	2b2e      	cmp	r3, #46	; 0x2e
 8013e14:	d10c      	bne.n	8013e30 <_svfiprintf_r+0x124>
 8013e16:	787b      	ldrb	r3, [r7, #1]
 8013e18:	2b2a      	cmp	r3, #42	; 0x2a
 8013e1a:	d133      	bne.n	8013e84 <_svfiprintf_r+0x178>
 8013e1c:	9b03      	ldr	r3, [sp, #12]
 8013e1e:	1d1a      	adds	r2, r3, #4
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	9203      	str	r2, [sp, #12]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	bfb8      	it	lt
 8013e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e2c:	3702      	adds	r7, #2
 8013e2e:	9305      	str	r3, [sp, #20]
 8013e30:	4d2e      	ldr	r5, [pc, #184]	; (8013eec <_svfiprintf_r+0x1e0>)
 8013e32:	7839      	ldrb	r1, [r7, #0]
 8013e34:	2203      	movs	r2, #3
 8013e36:	4628      	mov	r0, r5
 8013e38:	f7ec f9ea 	bl	8000210 <memchr>
 8013e3c:	b138      	cbz	r0, 8013e4e <_svfiprintf_r+0x142>
 8013e3e:	2340      	movs	r3, #64	; 0x40
 8013e40:	1b40      	subs	r0, r0, r5
 8013e42:	fa03 f000 	lsl.w	r0, r3, r0
 8013e46:	9b04      	ldr	r3, [sp, #16]
 8013e48:	4303      	orrs	r3, r0
 8013e4a:	3701      	adds	r7, #1
 8013e4c:	9304      	str	r3, [sp, #16]
 8013e4e:	7839      	ldrb	r1, [r7, #0]
 8013e50:	4827      	ldr	r0, [pc, #156]	; (8013ef0 <_svfiprintf_r+0x1e4>)
 8013e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e56:	2206      	movs	r2, #6
 8013e58:	1c7e      	adds	r6, r7, #1
 8013e5a:	f7ec f9d9 	bl	8000210 <memchr>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d038      	beq.n	8013ed4 <_svfiprintf_r+0x1c8>
 8013e62:	4b24      	ldr	r3, [pc, #144]	; (8013ef4 <_svfiprintf_r+0x1e8>)
 8013e64:	bb13      	cbnz	r3, 8013eac <_svfiprintf_r+0x1a0>
 8013e66:	9b03      	ldr	r3, [sp, #12]
 8013e68:	3307      	adds	r3, #7
 8013e6a:	f023 0307 	bic.w	r3, r3, #7
 8013e6e:	3308      	adds	r3, #8
 8013e70:	9303      	str	r3, [sp, #12]
 8013e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e74:	444b      	add	r3, r9
 8013e76:	9309      	str	r3, [sp, #36]	; 0x24
 8013e78:	e76d      	b.n	8013d56 <_svfiprintf_r+0x4a>
 8013e7a:	fb05 3202 	mla	r2, r5, r2, r3
 8013e7e:	2001      	movs	r0, #1
 8013e80:	460f      	mov	r7, r1
 8013e82:	e7a6      	b.n	8013dd2 <_svfiprintf_r+0xc6>
 8013e84:	2300      	movs	r3, #0
 8013e86:	3701      	adds	r7, #1
 8013e88:	9305      	str	r3, [sp, #20]
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	250a      	movs	r5, #10
 8013e8e:	4638      	mov	r0, r7
 8013e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e94:	3a30      	subs	r2, #48	; 0x30
 8013e96:	2a09      	cmp	r2, #9
 8013e98:	d903      	bls.n	8013ea2 <_svfiprintf_r+0x196>
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d0c8      	beq.n	8013e30 <_svfiprintf_r+0x124>
 8013e9e:	9105      	str	r1, [sp, #20]
 8013ea0:	e7c6      	b.n	8013e30 <_svfiprintf_r+0x124>
 8013ea2:	fb05 2101 	mla	r1, r5, r1, r2
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	4607      	mov	r7, r0
 8013eaa:	e7f0      	b.n	8013e8e <_svfiprintf_r+0x182>
 8013eac:	ab03      	add	r3, sp, #12
 8013eae:	9300      	str	r3, [sp, #0]
 8013eb0:	4622      	mov	r2, r4
 8013eb2:	4b11      	ldr	r3, [pc, #68]	; (8013ef8 <_svfiprintf_r+0x1ec>)
 8013eb4:	a904      	add	r1, sp, #16
 8013eb6:	4640      	mov	r0, r8
 8013eb8:	f3af 8000 	nop.w
 8013ebc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013ec0:	4681      	mov	r9, r0
 8013ec2:	d1d6      	bne.n	8013e72 <_svfiprintf_r+0x166>
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	065b      	lsls	r3, r3, #25
 8013ec8:	f53f af35 	bmi.w	8013d36 <_svfiprintf_r+0x2a>
 8013ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ece:	b01d      	add	sp, #116	; 0x74
 8013ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed4:	ab03      	add	r3, sp, #12
 8013ed6:	9300      	str	r3, [sp, #0]
 8013ed8:	4622      	mov	r2, r4
 8013eda:	4b07      	ldr	r3, [pc, #28]	; (8013ef8 <_svfiprintf_r+0x1ec>)
 8013edc:	a904      	add	r1, sp, #16
 8013ede:	4640      	mov	r0, r8
 8013ee0:	f000 f882 	bl	8013fe8 <_printf_i>
 8013ee4:	e7ea      	b.n	8013ebc <_svfiprintf_r+0x1b0>
 8013ee6:	bf00      	nop
 8013ee8:	08016318 	.word	0x08016318
 8013eec:	0801631e 	.word	0x0801631e
 8013ef0:	08016322 	.word	0x08016322
 8013ef4:	00000000 	.word	0x00000000
 8013ef8:	08013c59 	.word	0x08013c59

08013efc <_printf_common>:
 8013efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f00:	4691      	mov	r9, r2
 8013f02:	461f      	mov	r7, r3
 8013f04:	688a      	ldr	r2, [r1, #8]
 8013f06:	690b      	ldr	r3, [r1, #16]
 8013f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	bfb8      	it	lt
 8013f10:	4613      	movlt	r3, r2
 8013f12:	f8c9 3000 	str.w	r3, [r9]
 8013f16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	460c      	mov	r4, r1
 8013f1e:	b112      	cbz	r2, 8013f26 <_printf_common+0x2a>
 8013f20:	3301      	adds	r3, #1
 8013f22:	f8c9 3000 	str.w	r3, [r9]
 8013f26:	6823      	ldr	r3, [r4, #0]
 8013f28:	0699      	lsls	r1, r3, #26
 8013f2a:	bf42      	ittt	mi
 8013f2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013f30:	3302      	addmi	r3, #2
 8013f32:	f8c9 3000 	strmi.w	r3, [r9]
 8013f36:	6825      	ldr	r5, [r4, #0]
 8013f38:	f015 0506 	ands.w	r5, r5, #6
 8013f3c:	d107      	bne.n	8013f4e <_printf_common+0x52>
 8013f3e:	f104 0a19 	add.w	sl, r4, #25
 8013f42:	68e3      	ldr	r3, [r4, #12]
 8013f44:	f8d9 2000 	ldr.w	r2, [r9]
 8013f48:	1a9b      	subs	r3, r3, r2
 8013f4a:	42ab      	cmp	r3, r5
 8013f4c:	dc28      	bgt.n	8013fa0 <_printf_common+0xa4>
 8013f4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013f52:	6822      	ldr	r2, [r4, #0]
 8013f54:	3300      	adds	r3, #0
 8013f56:	bf18      	it	ne
 8013f58:	2301      	movne	r3, #1
 8013f5a:	0692      	lsls	r2, r2, #26
 8013f5c:	d42d      	bmi.n	8013fba <_printf_common+0xbe>
 8013f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f62:	4639      	mov	r1, r7
 8013f64:	4630      	mov	r0, r6
 8013f66:	47c0      	blx	r8
 8013f68:	3001      	adds	r0, #1
 8013f6a:	d020      	beq.n	8013fae <_printf_common+0xb2>
 8013f6c:	6823      	ldr	r3, [r4, #0]
 8013f6e:	68e5      	ldr	r5, [r4, #12]
 8013f70:	f8d9 2000 	ldr.w	r2, [r9]
 8013f74:	f003 0306 	and.w	r3, r3, #6
 8013f78:	2b04      	cmp	r3, #4
 8013f7a:	bf08      	it	eq
 8013f7c:	1aad      	subeq	r5, r5, r2
 8013f7e:	68a3      	ldr	r3, [r4, #8]
 8013f80:	6922      	ldr	r2, [r4, #16]
 8013f82:	bf0c      	ite	eq
 8013f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f88:	2500      	movne	r5, #0
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	bfc4      	itt	gt
 8013f8e:	1a9b      	subgt	r3, r3, r2
 8013f90:	18ed      	addgt	r5, r5, r3
 8013f92:	f04f 0900 	mov.w	r9, #0
 8013f96:	341a      	adds	r4, #26
 8013f98:	454d      	cmp	r5, r9
 8013f9a:	d11a      	bne.n	8013fd2 <_printf_common+0xd6>
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	e008      	b.n	8013fb2 <_printf_common+0xb6>
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	4652      	mov	r2, sl
 8013fa4:	4639      	mov	r1, r7
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	47c0      	blx	r8
 8013faa:	3001      	adds	r0, #1
 8013fac:	d103      	bne.n	8013fb6 <_printf_common+0xba>
 8013fae:	f04f 30ff 	mov.w	r0, #4294967295
 8013fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fb6:	3501      	adds	r5, #1
 8013fb8:	e7c3      	b.n	8013f42 <_printf_common+0x46>
 8013fba:	18e1      	adds	r1, r4, r3
 8013fbc:	1c5a      	adds	r2, r3, #1
 8013fbe:	2030      	movs	r0, #48	; 0x30
 8013fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fc4:	4422      	add	r2, r4
 8013fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fce:	3302      	adds	r3, #2
 8013fd0:	e7c5      	b.n	8013f5e <_printf_common+0x62>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	4622      	mov	r2, r4
 8013fd6:	4639      	mov	r1, r7
 8013fd8:	4630      	mov	r0, r6
 8013fda:	47c0      	blx	r8
 8013fdc:	3001      	adds	r0, #1
 8013fde:	d0e6      	beq.n	8013fae <_printf_common+0xb2>
 8013fe0:	f109 0901 	add.w	r9, r9, #1
 8013fe4:	e7d8      	b.n	8013f98 <_printf_common+0x9c>
	...

08013fe8 <_printf_i>:
 8013fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013ff0:	460c      	mov	r4, r1
 8013ff2:	7e09      	ldrb	r1, [r1, #24]
 8013ff4:	b085      	sub	sp, #20
 8013ff6:	296e      	cmp	r1, #110	; 0x6e
 8013ff8:	4617      	mov	r7, r2
 8013ffa:	4606      	mov	r6, r0
 8013ffc:	4698      	mov	r8, r3
 8013ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014000:	f000 80b3 	beq.w	801416a <_printf_i+0x182>
 8014004:	d822      	bhi.n	801404c <_printf_i+0x64>
 8014006:	2963      	cmp	r1, #99	; 0x63
 8014008:	d036      	beq.n	8014078 <_printf_i+0x90>
 801400a:	d80a      	bhi.n	8014022 <_printf_i+0x3a>
 801400c:	2900      	cmp	r1, #0
 801400e:	f000 80b9 	beq.w	8014184 <_printf_i+0x19c>
 8014012:	2958      	cmp	r1, #88	; 0x58
 8014014:	f000 8083 	beq.w	801411e <_printf_i+0x136>
 8014018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801401c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014020:	e032      	b.n	8014088 <_printf_i+0xa0>
 8014022:	2964      	cmp	r1, #100	; 0x64
 8014024:	d001      	beq.n	801402a <_printf_i+0x42>
 8014026:	2969      	cmp	r1, #105	; 0x69
 8014028:	d1f6      	bne.n	8014018 <_printf_i+0x30>
 801402a:	6820      	ldr	r0, [r4, #0]
 801402c:	6813      	ldr	r3, [r2, #0]
 801402e:	0605      	lsls	r5, r0, #24
 8014030:	f103 0104 	add.w	r1, r3, #4
 8014034:	d52a      	bpl.n	801408c <_printf_i+0xa4>
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	6011      	str	r1, [r2, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	da03      	bge.n	8014046 <_printf_i+0x5e>
 801403e:	222d      	movs	r2, #45	; 0x2d
 8014040:	425b      	negs	r3, r3
 8014042:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014046:	486f      	ldr	r0, [pc, #444]	; (8014204 <_printf_i+0x21c>)
 8014048:	220a      	movs	r2, #10
 801404a:	e039      	b.n	80140c0 <_printf_i+0xd8>
 801404c:	2973      	cmp	r1, #115	; 0x73
 801404e:	f000 809d 	beq.w	801418c <_printf_i+0x1a4>
 8014052:	d808      	bhi.n	8014066 <_printf_i+0x7e>
 8014054:	296f      	cmp	r1, #111	; 0x6f
 8014056:	d020      	beq.n	801409a <_printf_i+0xb2>
 8014058:	2970      	cmp	r1, #112	; 0x70
 801405a:	d1dd      	bne.n	8014018 <_printf_i+0x30>
 801405c:	6823      	ldr	r3, [r4, #0]
 801405e:	f043 0320 	orr.w	r3, r3, #32
 8014062:	6023      	str	r3, [r4, #0]
 8014064:	e003      	b.n	801406e <_printf_i+0x86>
 8014066:	2975      	cmp	r1, #117	; 0x75
 8014068:	d017      	beq.n	801409a <_printf_i+0xb2>
 801406a:	2978      	cmp	r1, #120	; 0x78
 801406c:	d1d4      	bne.n	8014018 <_printf_i+0x30>
 801406e:	2378      	movs	r3, #120	; 0x78
 8014070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014074:	4864      	ldr	r0, [pc, #400]	; (8014208 <_printf_i+0x220>)
 8014076:	e055      	b.n	8014124 <_printf_i+0x13c>
 8014078:	6813      	ldr	r3, [r2, #0]
 801407a:	1d19      	adds	r1, r3, #4
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	6011      	str	r1, [r2, #0]
 8014080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014088:	2301      	movs	r3, #1
 801408a:	e08c      	b.n	80141a6 <_printf_i+0x1be>
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	6011      	str	r1, [r2, #0]
 8014090:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014094:	bf18      	it	ne
 8014096:	b21b      	sxthne	r3, r3
 8014098:	e7cf      	b.n	801403a <_printf_i+0x52>
 801409a:	6813      	ldr	r3, [r2, #0]
 801409c:	6825      	ldr	r5, [r4, #0]
 801409e:	1d18      	adds	r0, r3, #4
 80140a0:	6010      	str	r0, [r2, #0]
 80140a2:	0628      	lsls	r0, r5, #24
 80140a4:	d501      	bpl.n	80140aa <_printf_i+0xc2>
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	e002      	b.n	80140b0 <_printf_i+0xc8>
 80140aa:	0668      	lsls	r0, r5, #25
 80140ac:	d5fb      	bpl.n	80140a6 <_printf_i+0xbe>
 80140ae:	881b      	ldrh	r3, [r3, #0]
 80140b0:	4854      	ldr	r0, [pc, #336]	; (8014204 <_printf_i+0x21c>)
 80140b2:	296f      	cmp	r1, #111	; 0x6f
 80140b4:	bf14      	ite	ne
 80140b6:	220a      	movne	r2, #10
 80140b8:	2208      	moveq	r2, #8
 80140ba:	2100      	movs	r1, #0
 80140bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140c0:	6865      	ldr	r5, [r4, #4]
 80140c2:	60a5      	str	r5, [r4, #8]
 80140c4:	2d00      	cmp	r5, #0
 80140c6:	f2c0 8095 	blt.w	80141f4 <_printf_i+0x20c>
 80140ca:	6821      	ldr	r1, [r4, #0]
 80140cc:	f021 0104 	bic.w	r1, r1, #4
 80140d0:	6021      	str	r1, [r4, #0]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d13d      	bne.n	8014152 <_printf_i+0x16a>
 80140d6:	2d00      	cmp	r5, #0
 80140d8:	f040 808e 	bne.w	80141f8 <_printf_i+0x210>
 80140dc:	4665      	mov	r5, ip
 80140de:	2a08      	cmp	r2, #8
 80140e0:	d10b      	bne.n	80140fa <_printf_i+0x112>
 80140e2:	6823      	ldr	r3, [r4, #0]
 80140e4:	07db      	lsls	r3, r3, #31
 80140e6:	d508      	bpl.n	80140fa <_printf_i+0x112>
 80140e8:	6923      	ldr	r3, [r4, #16]
 80140ea:	6862      	ldr	r2, [r4, #4]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	bfde      	ittt	le
 80140f0:	2330      	movle	r3, #48	; 0x30
 80140f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80140fa:	ebac 0305 	sub.w	r3, ip, r5
 80140fe:	6123      	str	r3, [r4, #16]
 8014100:	f8cd 8000 	str.w	r8, [sp]
 8014104:	463b      	mov	r3, r7
 8014106:	aa03      	add	r2, sp, #12
 8014108:	4621      	mov	r1, r4
 801410a:	4630      	mov	r0, r6
 801410c:	f7ff fef6 	bl	8013efc <_printf_common>
 8014110:	3001      	adds	r0, #1
 8014112:	d14d      	bne.n	80141b0 <_printf_i+0x1c8>
 8014114:	f04f 30ff 	mov.w	r0, #4294967295
 8014118:	b005      	add	sp, #20
 801411a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801411e:	4839      	ldr	r0, [pc, #228]	; (8014204 <_printf_i+0x21c>)
 8014120:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014124:	6813      	ldr	r3, [r2, #0]
 8014126:	6821      	ldr	r1, [r4, #0]
 8014128:	1d1d      	adds	r5, r3, #4
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	6015      	str	r5, [r2, #0]
 801412e:	060a      	lsls	r2, r1, #24
 8014130:	d50b      	bpl.n	801414a <_printf_i+0x162>
 8014132:	07ca      	lsls	r2, r1, #31
 8014134:	bf44      	itt	mi
 8014136:	f041 0120 	orrmi.w	r1, r1, #32
 801413a:	6021      	strmi	r1, [r4, #0]
 801413c:	b91b      	cbnz	r3, 8014146 <_printf_i+0x15e>
 801413e:	6822      	ldr	r2, [r4, #0]
 8014140:	f022 0220 	bic.w	r2, r2, #32
 8014144:	6022      	str	r2, [r4, #0]
 8014146:	2210      	movs	r2, #16
 8014148:	e7b7      	b.n	80140ba <_printf_i+0xd2>
 801414a:	064d      	lsls	r5, r1, #25
 801414c:	bf48      	it	mi
 801414e:	b29b      	uxthmi	r3, r3
 8014150:	e7ef      	b.n	8014132 <_printf_i+0x14a>
 8014152:	4665      	mov	r5, ip
 8014154:	fbb3 f1f2 	udiv	r1, r3, r2
 8014158:	fb02 3311 	mls	r3, r2, r1, r3
 801415c:	5cc3      	ldrb	r3, [r0, r3]
 801415e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014162:	460b      	mov	r3, r1
 8014164:	2900      	cmp	r1, #0
 8014166:	d1f5      	bne.n	8014154 <_printf_i+0x16c>
 8014168:	e7b9      	b.n	80140de <_printf_i+0xf6>
 801416a:	6813      	ldr	r3, [r2, #0]
 801416c:	6825      	ldr	r5, [r4, #0]
 801416e:	6961      	ldr	r1, [r4, #20]
 8014170:	1d18      	adds	r0, r3, #4
 8014172:	6010      	str	r0, [r2, #0]
 8014174:	0628      	lsls	r0, r5, #24
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	d501      	bpl.n	801417e <_printf_i+0x196>
 801417a:	6019      	str	r1, [r3, #0]
 801417c:	e002      	b.n	8014184 <_printf_i+0x19c>
 801417e:	066a      	lsls	r2, r5, #25
 8014180:	d5fb      	bpl.n	801417a <_printf_i+0x192>
 8014182:	8019      	strh	r1, [r3, #0]
 8014184:	2300      	movs	r3, #0
 8014186:	6123      	str	r3, [r4, #16]
 8014188:	4665      	mov	r5, ip
 801418a:	e7b9      	b.n	8014100 <_printf_i+0x118>
 801418c:	6813      	ldr	r3, [r2, #0]
 801418e:	1d19      	adds	r1, r3, #4
 8014190:	6011      	str	r1, [r2, #0]
 8014192:	681d      	ldr	r5, [r3, #0]
 8014194:	6862      	ldr	r2, [r4, #4]
 8014196:	2100      	movs	r1, #0
 8014198:	4628      	mov	r0, r5
 801419a:	f7ec f839 	bl	8000210 <memchr>
 801419e:	b108      	cbz	r0, 80141a4 <_printf_i+0x1bc>
 80141a0:	1b40      	subs	r0, r0, r5
 80141a2:	6060      	str	r0, [r4, #4]
 80141a4:	6863      	ldr	r3, [r4, #4]
 80141a6:	6123      	str	r3, [r4, #16]
 80141a8:	2300      	movs	r3, #0
 80141aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141ae:	e7a7      	b.n	8014100 <_printf_i+0x118>
 80141b0:	6923      	ldr	r3, [r4, #16]
 80141b2:	462a      	mov	r2, r5
 80141b4:	4639      	mov	r1, r7
 80141b6:	4630      	mov	r0, r6
 80141b8:	47c0      	blx	r8
 80141ba:	3001      	adds	r0, #1
 80141bc:	d0aa      	beq.n	8014114 <_printf_i+0x12c>
 80141be:	6823      	ldr	r3, [r4, #0]
 80141c0:	079b      	lsls	r3, r3, #30
 80141c2:	d413      	bmi.n	80141ec <_printf_i+0x204>
 80141c4:	68e0      	ldr	r0, [r4, #12]
 80141c6:	9b03      	ldr	r3, [sp, #12]
 80141c8:	4298      	cmp	r0, r3
 80141ca:	bfb8      	it	lt
 80141cc:	4618      	movlt	r0, r3
 80141ce:	e7a3      	b.n	8014118 <_printf_i+0x130>
 80141d0:	2301      	movs	r3, #1
 80141d2:	464a      	mov	r2, r9
 80141d4:	4639      	mov	r1, r7
 80141d6:	4630      	mov	r0, r6
 80141d8:	47c0      	blx	r8
 80141da:	3001      	adds	r0, #1
 80141dc:	d09a      	beq.n	8014114 <_printf_i+0x12c>
 80141de:	3501      	adds	r5, #1
 80141e0:	68e3      	ldr	r3, [r4, #12]
 80141e2:	9a03      	ldr	r2, [sp, #12]
 80141e4:	1a9b      	subs	r3, r3, r2
 80141e6:	42ab      	cmp	r3, r5
 80141e8:	dcf2      	bgt.n	80141d0 <_printf_i+0x1e8>
 80141ea:	e7eb      	b.n	80141c4 <_printf_i+0x1dc>
 80141ec:	2500      	movs	r5, #0
 80141ee:	f104 0919 	add.w	r9, r4, #25
 80141f2:	e7f5      	b.n	80141e0 <_printf_i+0x1f8>
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d1ac      	bne.n	8014152 <_printf_i+0x16a>
 80141f8:	7803      	ldrb	r3, [r0, #0]
 80141fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80141fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014202:	e76c      	b.n	80140de <_printf_i+0xf6>
 8014204:	08016329 	.word	0x08016329
 8014208:	0801633a 	.word	0x0801633a

0801420c <memmove>:
 801420c:	4288      	cmp	r0, r1
 801420e:	b510      	push	{r4, lr}
 8014210:	eb01 0302 	add.w	r3, r1, r2
 8014214:	d807      	bhi.n	8014226 <memmove+0x1a>
 8014216:	1e42      	subs	r2, r0, #1
 8014218:	4299      	cmp	r1, r3
 801421a:	d00a      	beq.n	8014232 <memmove+0x26>
 801421c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014220:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014224:	e7f8      	b.n	8014218 <memmove+0xc>
 8014226:	4283      	cmp	r3, r0
 8014228:	d9f5      	bls.n	8014216 <memmove+0xa>
 801422a:	1881      	adds	r1, r0, r2
 801422c:	1ad2      	subs	r2, r2, r3
 801422e:	42d3      	cmn	r3, r2
 8014230:	d100      	bne.n	8014234 <memmove+0x28>
 8014232:	bd10      	pop	{r4, pc}
 8014234:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014238:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801423c:	e7f7      	b.n	801422e <memmove+0x22>
	...

08014240 <_free_r>:
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	4605      	mov	r5, r0
 8014244:	2900      	cmp	r1, #0
 8014246:	d045      	beq.n	80142d4 <_free_r+0x94>
 8014248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801424c:	1f0c      	subs	r4, r1, #4
 801424e:	2b00      	cmp	r3, #0
 8014250:	bfb8      	it	lt
 8014252:	18e4      	addlt	r4, r4, r3
 8014254:	f000 f8d2 	bl	80143fc <__malloc_lock>
 8014258:	4a1f      	ldr	r2, [pc, #124]	; (80142d8 <_free_r+0x98>)
 801425a:	6813      	ldr	r3, [r2, #0]
 801425c:	4610      	mov	r0, r2
 801425e:	b933      	cbnz	r3, 801426e <_free_r+0x2e>
 8014260:	6063      	str	r3, [r4, #4]
 8014262:	6014      	str	r4, [r2, #0]
 8014264:	4628      	mov	r0, r5
 8014266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801426a:	f000 b8c8 	b.w	80143fe <__malloc_unlock>
 801426e:	42a3      	cmp	r3, r4
 8014270:	d90c      	bls.n	801428c <_free_r+0x4c>
 8014272:	6821      	ldr	r1, [r4, #0]
 8014274:	1862      	adds	r2, r4, r1
 8014276:	4293      	cmp	r3, r2
 8014278:	bf04      	itt	eq
 801427a:	681a      	ldreq	r2, [r3, #0]
 801427c:	685b      	ldreq	r3, [r3, #4]
 801427e:	6063      	str	r3, [r4, #4]
 8014280:	bf04      	itt	eq
 8014282:	1852      	addeq	r2, r2, r1
 8014284:	6022      	streq	r2, [r4, #0]
 8014286:	6004      	str	r4, [r0, #0]
 8014288:	e7ec      	b.n	8014264 <_free_r+0x24>
 801428a:	4613      	mov	r3, r2
 801428c:	685a      	ldr	r2, [r3, #4]
 801428e:	b10a      	cbz	r2, 8014294 <_free_r+0x54>
 8014290:	42a2      	cmp	r2, r4
 8014292:	d9fa      	bls.n	801428a <_free_r+0x4a>
 8014294:	6819      	ldr	r1, [r3, #0]
 8014296:	1858      	adds	r0, r3, r1
 8014298:	42a0      	cmp	r0, r4
 801429a:	d10b      	bne.n	80142b4 <_free_r+0x74>
 801429c:	6820      	ldr	r0, [r4, #0]
 801429e:	4401      	add	r1, r0
 80142a0:	1858      	adds	r0, r3, r1
 80142a2:	4282      	cmp	r2, r0
 80142a4:	6019      	str	r1, [r3, #0]
 80142a6:	d1dd      	bne.n	8014264 <_free_r+0x24>
 80142a8:	6810      	ldr	r0, [r2, #0]
 80142aa:	6852      	ldr	r2, [r2, #4]
 80142ac:	605a      	str	r2, [r3, #4]
 80142ae:	4401      	add	r1, r0
 80142b0:	6019      	str	r1, [r3, #0]
 80142b2:	e7d7      	b.n	8014264 <_free_r+0x24>
 80142b4:	d902      	bls.n	80142bc <_free_r+0x7c>
 80142b6:	230c      	movs	r3, #12
 80142b8:	602b      	str	r3, [r5, #0]
 80142ba:	e7d3      	b.n	8014264 <_free_r+0x24>
 80142bc:	6820      	ldr	r0, [r4, #0]
 80142be:	1821      	adds	r1, r4, r0
 80142c0:	428a      	cmp	r2, r1
 80142c2:	bf04      	itt	eq
 80142c4:	6811      	ldreq	r1, [r2, #0]
 80142c6:	6852      	ldreq	r2, [r2, #4]
 80142c8:	6062      	str	r2, [r4, #4]
 80142ca:	bf04      	itt	eq
 80142cc:	1809      	addeq	r1, r1, r0
 80142ce:	6021      	streq	r1, [r4, #0]
 80142d0:	605c      	str	r4, [r3, #4]
 80142d2:	e7c7      	b.n	8014264 <_free_r+0x24>
 80142d4:	bd38      	pop	{r3, r4, r5, pc}
 80142d6:	bf00      	nop
 80142d8:	2000277c 	.word	0x2000277c

080142dc <_malloc_r>:
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	1ccd      	adds	r5, r1, #3
 80142e0:	f025 0503 	bic.w	r5, r5, #3
 80142e4:	3508      	adds	r5, #8
 80142e6:	2d0c      	cmp	r5, #12
 80142e8:	bf38      	it	cc
 80142ea:	250c      	movcc	r5, #12
 80142ec:	2d00      	cmp	r5, #0
 80142ee:	4606      	mov	r6, r0
 80142f0:	db01      	blt.n	80142f6 <_malloc_r+0x1a>
 80142f2:	42a9      	cmp	r1, r5
 80142f4:	d903      	bls.n	80142fe <_malloc_r+0x22>
 80142f6:	230c      	movs	r3, #12
 80142f8:	6033      	str	r3, [r6, #0]
 80142fa:	2000      	movs	r0, #0
 80142fc:	bd70      	pop	{r4, r5, r6, pc}
 80142fe:	f000 f87d 	bl	80143fc <__malloc_lock>
 8014302:	4a21      	ldr	r2, [pc, #132]	; (8014388 <_malloc_r+0xac>)
 8014304:	6814      	ldr	r4, [r2, #0]
 8014306:	4621      	mov	r1, r4
 8014308:	b991      	cbnz	r1, 8014330 <_malloc_r+0x54>
 801430a:	4c20      	ldr	r4, [pc, #128]	; (801438c <_malloc_r+0xb0>)
 801430c:	6823      	ldr	r3, [r4, #0]
 801430e:	b91b      	cbnz	r3, 8014318 <_malloc_r+0x3c>
 8014310:	4630      	mov	r0, r6
 8014312:	f000 f863 	bl	80143dc <_sbrk_r>
 8014316:	6020      	str	r0, [r4, #0]
 8014318:	4629      	mov	r1, r5
 801431a:	4630      	mov	r0, r6
 801431c:	f000 f85e 	bl	80143dc <_sbrk_r>
 8014320:	1c43      	adds	r3, r0, #1
 8014322:	d124      	bne.n	801436e <_malloc_r+0x92>
 8014324:	230c      	movs	r3, #12
 8014326:	6033      	str	r3, [r6, #0]
 8014328:	4630      	mov	r0, r6
 801432a:	f000 f868 	bl	80143fe <__malloc_unlock>
 801432e:	e7e4      	b.n	80142fa <_malloc_r+0x1e>
 8014330:	680b      	ldr	r3, [r1, #0]
 8014332:	1b5b      	subs	r3, r3, r5
 8014334:	d418      	bmi.n	8014368 <_malloc_r+0x8c>
 8014336:	2b0b      	cmp	r3, #11
 8014338:	d90f      	bls.n	801435a <_malloc_r+0x7e>
 801433a:	600b      	str	r3, [r1, #0]
 801433c:	50cd      	str	r5, [r1, r3]
 801433e:	18cc      	adds	r4, r1, r3
 8014340:	4630      	mov	r0, r6
 8014342:	f000 f85c 	bl	80143fe <__malloc_unlock>
 8014346:	f104 000b 	add.w	r0, r4, #11
 801434a:	1d23      	adds	r3, r4, #4
 801434c:	f020 0007 	bic.w	r0, r0, #7
 8014350:	1ac3      	subs	r3, r0, r3
 8014352:	d0d3      	beq.n	80142fc <_malloc_r+0x20>
 8014354:	425a      	negs	r2, r3
 8014356:	50e2      	str	r2, [r4, r3]
 8014358:	e7d0      	b.n	80142fc <_malloc_r+0x20>
 801435a:	428c      	cmp	r4, r1
 801435c:	684b      	ldr	r3, [r1, #4]
 801435e:	bf16      	itet	ne
 8014360:	6063      	strne	r3, [r4, #4]
 8014362:	6013      	streq	r3, [r2, #0]
 8014364:	460c      	movne	r4, r1
 8014366:	e7eb      	b.n	8014340 <_malloc_r+0x64>
 8014368:	460c      	mov	r4, r1
 801436a:	6849      	ldr	r1, [r1, #4]
 801436c:	e7cc      	b.n	8014308 <_malloc_r+0x2c>
 801436e:	1cc4      	adds	r4, r0, #3
 8014370:	f024 0403 	bic.w	r4, r4, #3
 8014374:	42a0      	cmp	r0, r4
 8014376:	d005      	beq.n	8014384 <_malloc_r+0xa8>
 8014378:	1a21      	subs	r1, r4, r0
 801437a:	4630      	mov	r0, r6
 801437c:	f000 f82e 	bl	80143dc <_sbrk_r>
 8014380:	3001      	adds	r0, #1
 8014382:	d0cf      	beq.n	8014324 <_malloc_r+0x48>
 8014384:	6025      	str	r5, [r4, #0]
 8014386:	e7db      	b.n	8014340 <_malloc_r+0x64>
 8014388:	2000277c 	.word	0x2000277c
 801438c:	20002780 	.word	0x20002780

08014390 <_realloc_r>:
 8014390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014392:	4607      	mov	r7, r0
 8014394:	4614      	mov	r4, r2
 8014396:	460e      	mov	r6, r1
 8014398:	b921      	cbnz	r1, 80143a4 <_realloc_r+0x14>
 801439a:	4611      	mov	r1, r2
 801439c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80143a0:	f7ff bf9c 	b.w	80142dc <_malloc_r>
 80143a4:	b922      	cbnz	r2, 80143b0 <_realloc_r+0x20>
 80143a6:	f7ff ff4b 	bl	8014240 <_free_r>
 80143aa:	4625      	mov	r5, r4
 80143ac:	4628      	mov	r0, r5
 80143ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b0:	f000 f826 	bl	8014400 <_malloc_usable_size_r>
 80143b4:	42a0      	cmp	r0, r4
 80143b6:	d20f      	bcs.n	80143d8 <_realloc_r+0x48>
 80143b8:	4621      	mov	r1, r4
 80143ba:	4638      	mov	r0, r7
 80143bc:	f7ff ff8e 	bl	80142dc <_malloc_r>
 80143c0:	4605      	mov	r5, r0
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d0f2      	beq.n	80143ac <_realloc_r+0x1c>
 80143c6:	4631      	mov	r1, r6
 80143c8:	4622      	mov	r2, r4
 80143ca:	f7ff fbfd 	bl	8013bc8 <memcpy>
 80143ce:	4631      	mov	r1, r6
 80143d0:	4638      	mov	r0, r7
 80143d2:	f7ff ff35 	bl	8014240 <_free_r>
 80143d6:	e7e9      	b.n	80143ac <_realloc_r+0x1c>
 80143d8:	4635      	mov	r5, r6
 80143da:	e7e7      	b.n	80143ac <_realloc_r+0x1c>

080143dc <_sbrk_r>:
 80143dc:	b538      	push	{r3, r4, r5, lr}
 80143de:	4c06      	ldr	r4, [pc, #24]	; (80143f8 <_sbrk_r+0x1c>)
 80143e0:	2300      	movs	r3, #0
 80143e2:	4605      	mov	r5, r0
 80143e4:	4608      	mov	r0, r1
 80143e6:	6023      	str	r3, [r4, #0]
 80143e8:	f7ed f862 	bl	80014b0 <_sbrk>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d102      	bne.n	80143f6 <_sbrk_r+0x1a>
 80143f0:	6823      	ldr	r3, [r4, #0]
 80143f2:	b103      	cbz	r3, 80143f6 <_sbrk_r+0x1a>
 80143f4:	602b      	str	r3, [r5, #0]
 80143f6:	bd38      	pop	{r3, r4, r5, pc}
 80143f8:	20002cc8 	.word	0x20002cc8

080143fc <__malloc_lock>:
 80143fc:	4770      	bx	lr

080143fe <__malloc_unlock>:
 80143fe:	4770      	bx	lr

08014400 <_malloc_usable_size_r>:
 8014400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014404:	1f18      	subs	r0, r3, #4
 8014406:	2b00      	cmp	r3, #0
 8014408:	bfbc      	itt	lt
 801440a:	580b      	ldrlt	r3, [r1, r0]
 801440c:	18c0      	addlt	r0, r0, r3
 801440e:	4770      	bx	lr

08014410 <floor>:
 8014410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014414:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014418:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801441c:	2e13      	cmp	r6, #19
 801441e:	4602      	mov	r2, r0
 8014420:	460b      	mov	r3, r1
 8014422:	460c      	mov	r4, r1
 8014424:	4605      	mov	r5, r0
 8014426:	4680      	mov	r8, r0
 8014428:	dc35      	bgt.n	8014496 <floor+0x86>
 801442a:	2e00      	cmp	r6, #0
 801442c:	da16      	bge.n	801445c <floor+0x4c>
 801442e:	a334      	add	r3, pc, #208	; (adr r3, 8014500 <floor+0xf0>)
 8014430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014434:	f7eb ff42 	bl	80002bc <__adddf3>
 8014438:	2200      	movs	r2, #0
 801443a:	2300      	movs	r3, #0
 801443c:	f7ec fb84 	bl	8000b48 <__aeabi_dcmpgt>
 8014440:	b148      	cbz	r0, 8014456 <floor+0x46>
 8014442:	2c00      	cmp	r4, #0
 8014444:	da59      	bge.n	80144fa <floor+0xea>
 8014446:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801444a:	4a2f      	ldr	r2, [pc, #188]	; (8014508 <floor+0xf8>)
 801444c:	432b      	orrs	r3, r5
 801444e:	2500      	movs	r5, #0
 8014450:	42ab      	cmp	r3, r5
 8014452:	bf18      	it	ne
 8014454:	4614      	movne	r4, r2
 8014456:	4623      	mov	r3, r4
 8014458:	462a      	mov	r2, r5
 801445a:	e025      	b.n	80144a8 <floor+0x98>
 801445c:	4f2b      	ldr	r7, [pc, #172]	; (801450c <floor+0xfc>)
 801445e:	4137      	asrs	r7, r6
 8014460:	ea01 0c07 	and.w	ip, r1, r7
 8014464:	ea5c 0c00 	orrs.w	ip, ip, r0
 8014468:	d01e      	beq.n	80144a8 <floor+0x98>
 801446a:	a325      	add	r3, pc, #148	; (adr r3, 8014500 <floor+0xf0>)
 801446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014470:	f7eb ff24 	bl	80002bc <__adddf3>
 8014474:	2200      	movs	r2, #0
 8014476:	2300      	movs	r3, #0
 8014478:	f7ec fb66 	bl	8000b48 <__aeabi_dcmpgt>
 801447c:	2800      	cmp	r0, #0
 801447e:	d0ea      	beq.n	8014456 <floor+0x46>
 8014480:	2c00      	cmp	r4, #0
 8014482:	bfbe      	ittt	lt
 8014484:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014488:	fa43 f606 	asrlt.w	r6, r3, r6
 801448c:	19a4      	addlt	r4, r4, r6
 801448e:	ea24 0407 	bic.w	r4, r4, r7
 8014492:	2500      	movs	r5, #0
 8014494:	e7df      	b.n	8014456 <floor+0x46>
 8014496:	2e33      	cmp	r6, #51	; 0x33
 8014498:	dd0a      	ble.n	80144b0 <floor+0xa0>
 801449a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801449e:	d103      	bne.n	80144a8 <floor+0x98>
 80144a0:	f7eb ff0c 	bl	80002bc <__adddf3>
 80144a4:	4602      	mov	r2, r0
 80144a6:	460b      	mov	r3, r1
 80144a8:	4610      	mov	r0, r2
 80144aa:	4619      	mov	r1, r3
 80144ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80144b4:	f04f 3cff 	mov.w	ip, #4294967295
 80144b8:	fa2c f707 	lsr.w	r7, ip, r7
 80144bc:	4207      	tst	r7, r0
 80144be:	d0f3      	beq.n	80144a8 <floor+0x98>
 80144c0:	a30f      	add	r3, pc, #60	; (adr r3, 8014500 <floor+0xf0>)
 80144c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c6:	f7eb fef9 	bl	80002bc <__adddf3>
 80144ca:	2200      	movs	r2, #0
 80144cc:	2300      	movs	r3, #0
 80144ce:	f7ec fb3b 	bl	8000b48 <__aeabi_dcmpgt>
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d0bf      	beq.n	8014456 <floor+0x46>
 80144d6:	2c00      	cmp	r4, #0
 80144d8:	da02      	bge.n	80144e0 <floor+0xd0>
 80144da:	2e14      	cmp	r6, #20
 80144dc:	d103      	bne.n	80144e6 <floor+0xd6>
 80144de:	3401      	adds	r4, #1
 80144e0:	ea25 0507 	bic.w	r5, r5, r7
 80144e4:	e7b7      	b.n	8014456 <floor+0x46>
 80144e6:	2301      	movs	r3, #1
 80144e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80144ec:	fa03 f606 	lsl.w	r6, r3, r6
 80144f0:	4435      	add	r5, r6
 80144f2:	4545      	cmp	r5, r8
 80144f4:	bf38      	it	cc
 80144f6:	18e4      	addcc	r4, r4, r3
 80144f8:	e7f2      	b.n	80144e0 <floor+0xd0>
 80144fa:	2500      	movs	r5, #0
 80144fc:	462c      	mov	r4, r5
 80144fe:	e7aa      	b.n	8014456 <floor+0x46>
 8014500:	8800759c 	.word	0x8800759c
 8014504:	7e37e43c 	.word	0x7e37e43c
 8014508:	bff00000 	.word	0xbff00000
 801450c:	000fffff 	.word	0x000fffff

08014510 <cosf>:
 8014510:	b507      	push	{r0, r1, r2, lr}
 8014512:	4a1a      	ldr	r2, [pc, #104]	; (801457c <cosf+0x6c>)
 8014514:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014518:	4293      	cmp	r3, r2
 801451a:	ee07 0a90 	vmov	s15, r0
 801451e:	dc03      	bgt.n	8014528 <cosf+0x18>
 8014520:	2100      	movs	r1, #0
 8014522:	f000 ff79 	bl	8015418 <__kernel_cosf>
 8014526:	e006      	b.n	8014536 <cosf+0x26>
 8014528:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801452c:	db06      	blt.n	801453c <cosf+0x2c>
 801452e:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8014532:	ee17 0a90 	vmov	r0, s15
 8014536:	b003      	add	sp, #12
 8014538:	f85d fb04 	ldr.w	pc, [sp], #4
 801453c:	4669      	mov	r1, sp
 801453e:	f000 fe39 	bl	80151b4 <__ieee754_rem_pio2f>
 8014542:	f000 0203 	and.w	r2, r0, #3
 8014546:	2a01      	cmp	r2, #1
 8014548:	d005      	beq.n	8014556 <cosf+0x46>
 801454a:	2a02      	cmp	r2, #2
 801454c:	d00a      	beq.n	8014564 <cosf+0x54>
 801454e:	b972      	cbnz	r2, 801456e <cosf+0x5e>
 8014550:	9901      	ldr	r1, [sp, #4]
 8014552:	9800      	ldr	r0, [sp, #0]
 8014554:	e7e5      	b.n	8014522 <cosf+0x12>
 8014556:	9901      	ldr	r1, [sp, #4]
 8014558:	9800      	ldr	r0, [sp, #0]
 801455a:	f001 fa3f 	bl	80159dc <__kernel_sinf>
 801455e:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8014562:	e7e8      	b.n	8014536 <cosf+0x26>
 8014564:	9901      	ldr	r1, [sp, #4]
 8014566:	9800      	ldr	r0, [sp, #0]
 8014568:	f000 ff56 	bl	8015418 <__kernel_cosf>
 801456c:	e7f7      	b.n	801455e <cosf+0x4e>
 801456e:	2201      	movs	r2, #1
 8014570:	9901      	ldr	r1, [sp, #4]
 8014572:	9800      	ldr	r0, [sp, #0]
 8014574:	f001 fa32 	bl	80159dc <__kernel_sinf>
 8014578:	e7dd      	b.n	8014536 <cosf+0x26>
 801457a:	bf00      	nop
 801457c:	3f490fd8 	.word	0x3f490fd8

08014580 <roundf>:
 8014580:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014584:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8014588:	2a16      	cmp	r2, #22
 801458a:	ee07 0a90 	vmov	s15, r0
 801458e:	dc15      	bgt.n	80145bc <roundf+0x3c>
 8014590:	2a00      	cmp	r2, #0
 8014592:	da08      	bge.n	80145a6 <roundf+0x26>
 8014594:	3201      	adds	r2, #1
 8014596:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801459a:	d101      	bne.n	80145a0 <roundf+0x20>
 801459c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80145a0:	ee07 3a90 	vmov	s15, r3
 80145a4:	e00e      	b.n	80145c4 <roundf+0x44>
 80145a6:	4909      	ldr	r1, [pc, #36]	; (80145cc <roundf+0x4c>)
 80145a8:	4111      	asrs	r1, r2
 80145aa:	4208      	tst	r0, r1
 80145ac:	d00a      	beq.n	80145c4 <roundf+0x44>
 80145ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80145b2:	4113      	asrs	r3, r2
 80145b4:	4403      	add	r3, r0
 80145b6:	ea23 0301 	bic.w	r3, r3, r1
 80145ba:	e7f1      	b.n	80145a0 <roundf+0x20>
 80145bc:	2a80      	cmp	r2, #128	; 0x80
 80145be:	d101      	bne.n	80145c4 <roundf+0x44>
 80145c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80145c4:	ee17 0a90 	vmov	r0, s15
 80145c8:	4770      	bx	lr
 80145ca:	bf00      	nop
 80145cc:	007fffff 	.word	0x007fffff

080145d0 <sinf>:
 80145d0:	b507      	push	{r0, r1, r2, lr}
 80145d2:	4a1b      	ldr	r2, [pc, #108]	; (8014640 <sinf+0x70>)
 80145d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80145d8:	4293      	cmp	r3, r2
 80145da:	ee07 0a90 	vmov	s15, r0
 80145de:	dc04      	bgt.n	80145ea <sinf+0x1a>
 80145e0:	2200      	movs	r2, #0
 80145e2:	2100      	movs	r1, #0
 80145e4:	f001 f9fa 	bl	80159dc <__kernel_sinf>
 80145e8:	e006      	b.n	80145f8 <sinf+0x28>
 80145ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80145ee:	db06      	blt.n	80145fe <sinf+0x2e>
 80145f0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80145f4:	ee17 0a90 	vmov	r0, s15
 80145f8:	b003      	add	sp, #12
 80145fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80145fe:	4669      	mov	r1, sp
 8014600:	f000 fdd8 	bl	80151b4 <__ieee754_rem_pio2f>
 8014604:	f000 0003 	and.w	r0, r0, #3
 8014608:	2801      	cmp	r0, #1
 801460a:	d006      	beq.n	801461a <sinf+0x4a>
 801460c:	2802      	cmp	r0, #2
 801460e:	d009      	beq.n	8014624 <sinf+0x54>
 8014610:	b980      	cbnz	r0, 8014634 <sinf+0x64>
 8014612:	2201      	movs	r2, #1
 8014614:	9901      	ldr	r1, [sp, #4]
 8014616:	9800      	ldr	r0, [sp, #0]
 8014618:	e7e4      	b.n	80145e4 <sinf+0x14>
 801461a:	9901      	ldr	r1, [sp, #4]
 801461c:	9800      	ldr	r0, [sp, #0]
 801461e:	f000 fefb 	bl	8015418 <__kernel_cosf>
 8014622:	e7e9      	b.n	80145f8 <sinf+0x28>
 8014624:	2201      	movs	r2, #1
 8014626:	9901      	ldr	r1, [sp, #4]
 8014628:	9800      	ldr	r0, [sp, #0]
 801462a:	f001 f9d7 	bl	80159dc <__kernel_sinf>
 801462e:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8014632:	e7e1      	b.n	80145f8 <sinf+0x28>
 8014634:	9901      	ldr	r1, [sp, #4]
 8014636:	9800      	ldr	r0, [sp, #0]
 8014638:	f000 feee 	bl	8015418 <__kernel_cosf>
 801463c:	e7f7      	b.n	801462e <sinf+0x5e>
 801463e:	bf00      	nop
 8014640:	3f490fd8 	.word	0x3f490fd8

08014644 <tanf>:
 8014644:	b507      	push	{r0, r1, r2, lr}
 8014646:	4a11      	ldr	r2, [pc, #68]	; (801468c <tanf+0x48>)
 8014648:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801464c:	4293      	cmp	r3, r2
 801464e:	ee07 0a90 	vmov	s15, r0
 8014652:	dc06      	bgt.n	8014662 <tanf+0x1e>
 8014654:	2201      	movs	r2, #1
 8014656:	2100      	movs	r1, #0
 8014658:	f001 fa0c 	bl	8015a74 <__kernel_tanf>
 801465c:	ee07 0a90 	vmov	s15, r0
 8014660:	e004      	b.n	801466c <tanf+0x28>
 8014662:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014666:	db06      	blt.n	8014676 <tanf+0x32>
 8014668:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801466c:	ee17 0a90 	vmov	r0, s15
 8014670:	b003      	add	sp, #12
 8014672:	f85d fb04 	ldr.w	pc, [sp], #4
 8014676:	4669      	mov	r1, sp
 8014678:	f000 fd9c 	bl	80151b4 <__ieee754_rem_pio2f>
 801467c:	0042      	lsls	r2, r0, #1
 801467e:	f002 0202 	and.w	r2, r2, #2
 8014682:	f1c2 0201 	rsb	r2, r2, #1
 8014686:	9901      	ldr	r1, [sp, #4]
 8014688:	9800      	ldr	r0, [sp, #0]
 801468a:	e7e5      	b.n	8014658 <tanf+0x14>
 801468c:	3f490fda 	.word	0x3f490fda

08014690 <asin>:
 8014690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014694:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8014734 <asin+0xa4>
 8014698:	b08b      	sub	sp, #44	; 0x2c
 801469a:	4604      	mov	r4, r0
 801469c:	460d      	mov	r5, r1
 801469e:	f000 f8fb 	bl	8014898 <__ieee754_asin>
 80146a2:	f998 3000 	ldrsb.w	r3, [r8]
 80146a6:	3301      	adds	r3, #1
 80146a8:	4606      	mov	r6, r0
 80146aa:	460f      	mov	r7, r1
 80146ac:	d036      	beq.n	801471c <asin+0x8c>
 80146ae:	4622      	mov	r2, r4
 80146b0:	462b      	mov	r3, r5
 80146b2:	4620      	mov	r0, r4
 80146b4:	4629      	mov	r1, r5
 80146b6:	f7ec fa51 	bl	8000b5c <__aeabi_dcmpun>
 80146ba:	4681      	mov	r9, r0
 80146bc:	2800      	cmp	r0, #0
 80146be:	d12d      	bne.n	801471c <asin+0x8c>
 80146c0:	4620      	mov	r0, r4
 80146c2:	4629      	mov	r1, r5
 80146c4:	f001 fc4c 	bl	8015f60 <fabs>
 80146c8:	2200      	movs	r2, #0
 80146ca:	4b17      	ldr	r3, [pc, #92]	; (8014728 <asin+0x98>)
 80146cc:	f7ec fa3c 	bl	8000b48 <__aeabi_dcmpgt>
 80146d0:	b320      	cbz	r0, 801471c <asin+0x8c>
 80146d2:	2301      	movs	r3, #1
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	4815      	ldr	r0, [pc, #84]	; (801472c <asin+0x9c>)
 80146d8:	4b15      	ldr	r3, [pc, #84]	; (8014730 <asin+0xa0>)
 80146da:	9301      	str	r3, [sp, #4]
 80146dc:	f8cd 9020 	str.w	r9, [sp, #32]
 80146e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80146e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80146e8:	f001 fc40 	bl	8015f6c <nan>
 80146ec:	f998 3000 	ldrsb.w	r3, [r8]
 80146f0:	2b02      	cmp	r3, #2
 80146f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80146f6:	d104      	bne.n	8014702 <asin+0x72>
 80146f8:	f7ff fa3c 	bl	8013b74 <__errno>
 80146fc:	2321      	movs	r3, #33	; 0x21
 80146fe:	6003      	str	r3, [r0, #0]
 8014700:	e004      	b.n	801470c <asin+0x7c>
 8014702:	4668      	mov	r0, sp
 8014704:	f001 fc30 	bl	8015f68 <matherr>
 8014708:	2800      	cmp	r0, #0
 801470a:	d0f5      	beq.n	80146f8 <asin+0x68>
 801470c:	9b08      	ldr	r3, [sp, #32]
 801470e:	b11b      	cbz	r3, 8014718 <asin+0x88>
 8014710:	f7ff fa30 	bl	8013b74 <__errno>
 8014714:	9b08      	ldr	r3, [sp, #32]
 8014716:	6003      	str	r3, [r0, #0]
 8014718:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801471c:	4630      	mov	r0, r6
 801471e:	4639      	mov	r1, r7
 8014720:	b00b      	add	sp, #44	; 0x2c
 8014722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014726:	bf00      	nop
 8014728:	3ff00000 	.word	0x3ff00000
 801472c:	0801631d 	.word	0x0801631d
 8014730:	0801634b 	.word	0x0801634b
 8014734:	20001378 	.word	0x20001378

08014738 <atan2>:
 8014738:	f000 baaa 	b.w	8014c90 <__ieee754_atan2>

0801473c <sqrt>:
 801473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	b08b      	sub	sp, #44	; 0x2c
 8014742:	4604      	mov	r4, r0
 8014744:	460d      	mov	r5, r1
 8014746:	f000 fb89 	bl	8014e5c <__ieee754_sqrt>
 801474a:	4b24      	ldr	r3, [pc, #144]	; (80147dc <sqrt+0xa0>)
 801474c:	f993 a000 	ldrsb.w	sl, [r3]
 8014750:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014754:	4680      	mov	r8, r0
 8014756:	4689      	mov	r9, r1
 8014758:	d02b      	beq.n	80147b2 <sqrt+0x76>
 801475a:	4622      	mov	r2, r4
 801475c:	462b      	mov	r3, r5
 801475e:	4620      	mov	r0, r4
 8014760:	4629      	mov	r1, r5
 8014762:	f7ec f9fb 	bl	8000b5c <__aeabi_dcmpun>
 8014766:	4683      	mov	fp, r0
 8014768:	bb18      	cbnz	r0, 80147b2 <sqrt+0x76>
 801476a:	2600      	movs	r6, #0
 801476c:	2700      	movs	r7, #0
 801476e:	4632      	mov	r2, r6
 8014770:	463b      	mov	r3, r7
 8014772:	4620      	mov	r0, r4
 8014774:	4629      	mov	r1, r5
 8014776:	f7ec f9c9 	bl	8000b0c <__aeabi_dcmplt>
 801477a:	b1d0      	cbz	r0, 80147b2 <sqrt+0x76>
 801477c:	2301      	movs	r3, #1
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	4b17      	ldr	r3, [pc, #92]	; (80147e0 <sqrt+0xa4>)
 8014782:	9301      	str	r3, [sp, #4]
 8014784:	f8cd b020 	str.w	fp, [sp, #32]
 8014788:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801478c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014790:	f1ba 0f00 	cmp.w	sl, #0
 8014794:	d112      	bne.n	80147bc <sqrt+0x80>
 8014796:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801479a:	4668      	mov	r0, sp
 801479c:	f001 fbe4 	bl	8015f68 <matherr>
 80147a0:	b1b8      	cbz	r0, 80147d2 <sqrt+0x96>
 80147a2:	9b08      	ldr	r3, [sp, #32]
 80147a4:	b11b      	cbz	r3, 80147ae <sqrt+0x72>
 80147a6:	f7ff f9e5 	bl	8013b74 <__errno>
 80147aa:	9b08      	ldr	r3, [sp, #32]
 80147ac:	6003      	str	r3, [r0, #0]
 80147ae:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80147b2:	4640      	mov	r0, r8
 80147b4:	4649      	mov	r1, r9
 80147b6:	b00b      	add	sp, #44	; 0x2c
 80147b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147bc:	4632      	mov	r2, r6
 80147be:	463b      	mov	r3, r7
 80147c0:	4630      	mov	r0, r6
 80147c2:	4639      	mov	r1, r7
 80147c4:	f7ec f85a 	bl	800087c <__aeabi_ddiv>
 80147c8:	f1ba 0f02 	cmp.w	sl, #2
 80147cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80147d0:	d1e3      	bne.n	801479a <sqrt+0x5e>
 80147d2:	f7ff f9cf 	bl	8013b74 <__errno>
 80147d6:	2321      	movs	r3, #33	; 0x21
 80147d8:	6003      	str	r3, [r0, #0]
 80147da:	e7e2      	b.n	80147a2 <sqrt+0x66>
 80147dc:	20001378 	.word	0x20001378
 80147e0:	08016350 	.word	0x08016350

080147e4 <acosf>:
 80147e4:	b530      	push	{r4, r5, lr}
 80147e6:	ed2d 8b02 	vpush	{d8}
 80147ea:	4d27      	ldr	r5, [pc, #156]	; (8014888 <acosf+0xa4>)
 80147ec:	b08b      	sub	sp, #44	; 0x2c
 80147ee:	ee08 0a10 	vmov	s16, r0
 80147f2:	f000 fbdf 	bl	8014fb4 <__ieee754_acosf>
 80147f6:	f995 3000 	ldrsb.w	r3, [r5]
 80147fa:	3301      	adds	r3, #1
 80147fc:	4604      	mov	r4, r0
 80147fe:	d03d      	beq.n	801487c <acosf+0x98>
 8014800:	eeb4 8a48 	vcmp.f32	s16, s16
 8014804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014808:	d638      	bvs.n	801487c <acosf+0x98>
 801480a:	ee18 0a10 	vmov	r0, s16
 801480e:	f001 fbb3 	bl	8015f78 <fabsf>
 8014812:	ee07 0a10 	vmov	s14, r0
 8014816:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801481a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014822:	dd2b      	ble.n	801487c <acosf+0x98>
 8014824:	2301      	movs	r3, #1
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	4b18      	ldr	r3, [pc, #96]	; (801488c <acosf+0xa8>)
 801482a:	9301      	str	r3, [sp, #4]
 801482c:	ee18 0a10 	vmov	r0, s16
 8014830:	2300      	movs	r3, #0
 8014832:	9308      	str	r3, [sp, #32]
 8014834:	f7eb fea0 	bl	8000578 <__aeabi_f2d>
 8014838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801483c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014840:	4813      	ldr	r0, [pc, #76]	; (8014890 <acosf+0xac>)
 8014842:	f001 fb93 	bl	8015f6c <nan>
 8014846:	f995 3000 	ldrsb.w	r3, [r5]
 801484a:	2b02      	cmp	r3, #2
 801484c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014850:	d104      	bne.n	801485c <acosf+0x78>
 8014852:	f7ff f98f 	bl	8013b74 <__errno>
 8014856:	2321      	movs	r3, #33	; 0x21
 8014858:	6003      	str	r3, [r0, #0]
 801485a:	e004      	b.n	8014866 <acosf+0x82>
 801485c:	4668      	mov	r0, sp
 801485e:	f001 fb83 	bl	8015f68 <matherr>
 8014862:	2800      	cmp	r0, #0
 8014864:	d0f5      	beq.n	8014852 <acosf+0x6e>
 8014866:	9b08      	ldr	r3, [sp, #32]
 8014868:	b11b      	cbz	r3, 8014872 <acosf+0x8e>
 801486a:	f7ff f983 	bl	8013b74 <__errno>
 801486e:	9b08      	ldr	r3, [sp, #32]
 8014870:	6003      	str	r3, [r0, #0]
 8014872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014876:	f7ec f9af 	bl	8000bd8 <__aeabi_d2f>
 801487a:	4604      	mov	r4, r0
 801487c:	4620      	mov	r0, r4
 801487e:	b00b      	add	sp, #44	; 0x2c
 8014880:	ecbd 8b02 	vpop	{d8}
 8014884:	bd30      	pop	{r4, r5, pc}
 8014886:	bf00      	nop
 8014888:	20001378 	.word	0x20001378
 801488c:	08016355 	.word	0x08016355
 8014890:	0801631d 	.word	0x0801631d
 8014894:	00000000 	.word	0x00000000

08014898 <__ieee754_asin>:
 8014898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801489c:	4bc4      	ldr	r3, [pc, #784]	; (8014bb0 <__ieee754_asin+0x318>)
 801489e:	b087      	sub	sp, #28
 80148a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80148a4:	429f      	cmp	r7, r3
 80148a6:	4604      	mov	r4, r0
 80148a8:	460d      	mov	r5, r1
 80148aa:	9101      	str	r1, [sp, #4]
 80148ac:	dd2a      	ble.n	8014904 <__ieee754_asin+0x6c>
 80148ae:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80148b2:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80148b6:	4603      	mov	r3, r0
 80148b8:	433b      	orrs	r3, r7
 80148ba:	d114      	bne.n	80148e6 <__ieee754_asin+0x4e>
 80148bc:	a3a2      	add	r3, pc, #648	; (adr r3, 8014b48 <__ieee754_asin+0x2b0>)
 80148be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c2:	f7eb feb1 	bl	8000628 <__aeabi_dmul>
 80148c6:	a3a2      	add	r3, pc, #648	; (adr r3, 8014b50 <__ieee754_asin+0x2b8>)
 80148c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148cc:	4606      	mov	r6, r0
 80148ce:	460f      	mov	r7, r1
 80148d0:	4620      	mov	r0, r4
 80148d2:	4629      	mov	r1, r5
 80148d4:	f7eb fea8 	bl	8000628 <__aeabi_dmul>
 80148d8:	4602      	mov	r2, r0
 80148da:	460b      	mov	r3, r1
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f7eb fcec 	bl	80002bc <__adddf3>
 80148e4:	e007      	b.n	80148f6 <__ieee754_asin+0x5e>
 80148e6:	4602      	mov	r2, r0
 80148e8:	460b      	mov	r3, r1
 80148ea:	f7eb fce5 	bl	80002b8 <__aeabi_dsub>
 80148ee:	4602      	mov	r2, r0
 80148f0:	460b      	mov	r3, r1
 80148f2:	f7eb ffc3 	bl	800087c <__aeabi_ddiv>
 80148f6:	4604      	mov	r4, r0
 80148f8:	460d      	mov	r5, r1
 80148fa:	4620      	mov	r0, r4
 80148fc:	4629      	mov	r1, r5
 80148fe:	b007      	add	sp, #28
 8014900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014904:	4bab      	ldr	r3, [pc, #684]	; (8014bb4 <__ieee754_asin+0x31c>)
 8014906:	429f      	cmp	r7, r3
 8014908:	dc0e      	bgt.n	8014928 <__ieee754_asin+0x90>
 801490a:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801490e:	f280 80ab 	bge.w	8014a68 <__ieee754_asin+0x1d0>
 8014912:	a391      	add	r3, pc, #580	; (adr r3, 8014b58 <__ieee754_asin+0x2c0>)
 8014914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014918:	f7eb fcd0 	bl	80002bc <__adddf3>
 801491c:	2200      	movs	r2, #0
 801491e:	4ba6      	ldr	r3, [pc, #664]	; (8014bb8 <__ieee754_asin+0x320>)
 8014920:	f7ec f912 	bl	8000b48 <__aeabi_dcmpgt>
 8014924:	2800      	cmp	r0, #0
 8014926:	d1e8      	bne.n	80148fa <__ieee754_asin+0x62>
 8014928:	4620      	mov	r0, r4
 801492a:	4629      	mov	r1, r5
 801492c:	f001 fb18 	bl	8015f60 <fabs>
 8014930:	4602      	mov	r2, r0
 8014932:	460b      	mov	r3, r1
 8014934:	2000      	movs	r0, #0
 8014936:	49a0      	ldr	r1, [pc, #640]	; (8014bb8 <__ieee754_asin+0x320>)
 8014938:	f7eb fcbe 	bl	80002b8 <__aeabi_dsub>
 801493c:	2200      	movs	r2, #0
 801493e:	4b9f      	ldr	r3, [pc, #636]	; (8014bbc <__ieee754_asin+0x324>)
 8014940:	f7eb fe72 	bl	8000628 <__aeabi_dmul>
 8014944:	a386      	add	r3, pc, #536	; (adr r3, 8014b60 <__ieee754_asin+0x2c8>)
 8014946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494a:	4604      	mov	r4, r0
 801494c:	460d      	mov	r5, r1
 801494e:	f7eb fe6b 	bl	8000628 <__aeabi_dmul>
 8014952:	a385      	add	r3, pc, #532	; (adr r3, 8014b68 <__ieee754_asin+0x2d0>)
 8014954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014958:	f7eb fcb0 	bl	80002bc <__adddf3>
 801495c:	4622      	mov	r2, r4
 801495e:	462b      	mov	r3, r5
 8014960:	f7eb fe62 	bl	8000628 <__aeabi_dmul>
 8014964:	a382      	add	r3, pc, #520	; (adr r3, 8014b70 <__ieee754_asin+0x2d8>)
 8014966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496a:	f7eb fca5 	bl	80002b8 <__aeabi_dsub>
 801496e:	4622      	mov	r2, r4
 8014970:	462b      	mov	r3, r5
 8014972:	f7eb fe59 	bl	8000628 <__aeabi_dmul>
 8014976:	a380      	add	r3, pc, #512	; (adr r3, 8014b78 <__ieee754_asin+0x2e0>)
 8014978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497c:	f7eb fc9e 	bl	80002bc <__adddf3>
 8014980:	4622      	mov	r2, r4
 8014982:	462b      	mov	r3, r5
 8014984:	f7eb fe50 	bl	8000628 <__aeabi_dmul>
 8014988:	a37d      	add	r3, pc, #500	; (adr r3, 8014b80 <__ieee754_asin+0x2e8>)
 801498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498e:	f7eb fc93 	bl	80002b8 <__aeabi_dsub>
 8014992:	4622      	mov	r2, r4
 8014994:	462b      	mov	r3, r5
 8014996:	f7eb fe47 	bl	8000628 <__aeabi_dmul>
 801499a:	a37b      	add	r3, pc, #492	; (adr r3, 8014b88 <__ieee754_asin+0x2f0>)
 801499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a0:	f7eb fc8c 	bl	80002bc <__adddf3>
 80149a4:	4622      	mov	r2, r4
 80149a6:	462b      	mov	r3, r5
 80149a8:	f7eb fe3e 	bl	8000628 <__aeabi_dmul>
 80149ac:	a378      	add	r3, pc, #480	; (adr r3, 8014b90 <__ieee754_asin+0x2f8>)
 80149ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b2:	4680      	mov	r8, r0
 80149b4:	4689      	mov	r9, r1
 80149b6:	4620      	mov	r0, r4
 80149b8:	4629      	mov	r1, r5
 80149ba:	f7eb fe35 	bl	8000628 <__aeabi_dmul>
 80149be:	a376      	add	r3, pc, #472	; (adr r3, 8014b98 <__ieee754_asin+0x300>)
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	f7eb fc78 	bl	80002b8 <__aeabi_dsub>
 80149c8:	4622      	mov	r2, r4
 80149ca:	462b      	mov	r3, r5
 80149cc:	f7eb fe2c 	bl	8000628 <__aeabi_dmul>
 80149d0:	a373      	add	r3, pc, #460	; (adr r3, 8014ba0 <__ieee754_asin+0x308>)
 80149d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d6:	f7eb fc71 	bl	80002bc <__adddf3>
 80149da:	4622      	mov	r2, r4
 80149dc:	462b      	mov	r3, r5
 80149de:	f7eb fe23 	bl	8000628 <__aeabi_dmul>
 80149e2:	a371      	add	r3, pc, #452	; (adr r3, 8014ba8 <__ieee754_asin+0x310>)
 80149e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e8:	f7eb fc66 	bl	80002b8 <__aeabi_dsub>
 80149ec:	4622      	mov	r2, r4
 80149ee:	462b      	mov	r3, r5
 80149f0:	f7eb fe1a 	bl	8000628 <__aeabi_dmul>
 80149f4:	4b70      	ldr	r3, [pc, #448]	; (8014bb8 <__ieee754_asin+0x320>)
 80149f6:	2200      	movs	r2, #0
 80149f8:	f7eb fc60 	bl	80002bc <__adddf3>
 80149fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a00:	4620      	mov	r0, r4
 8014a02:	4629      	mov	r1, r5
 8014a04:	f000 fa2a 	bl	8014e5c <__ieee754_sqrt>
 8014a08:	4b6d      	ldr	r3, [pc, #436]	; (8014bc0 <__ieee754_asin+0x328>)
 8014a0a:	429f      	cmp	r7, r3
 8014a0c:	4682      	mov	sl, r0
 8014a0e:	468b      	mov	fp, r1
 8014a10:	f340 80d8 	ble.w	8014bc4 <__ieee754_asin+0x32c>
 8014a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a18:	4640      	mov	r0, r8
 8014a1a:	4649      	mov	r1, r9
 8014a1c:	f7eb ff2e 	bl	800087c <__aeabi_ddiv>
 8014a20:	4652      	mov	r2, sl
 8014a22:	465b      	mov	r3, fp
 8014a24:	f7eb fe00 	bl	8000628 <__aeabi_dmul>
 8014a28:	4652      	mov	r2, sl
 8014a2a:	465b      	mov	r3, fp
 8014a2c:	f7eb fc46 	bl	80002bc <__adddf3>
 8014a30:	4602      	mov	r2, r0
 8014a32:	460b      	mov	r3, r1
 8014a34:	f7eb fc42 	bl	80002bc <__adddf3>
 8014a38:	a345      	add	r3, pc, #276	; (adr r3, 8014b50 <__ieee754_asin+0x2b8>)
 8014a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3e:	f7eb fc3b 	bl	80002b8 <__aeabi_dsub>
 8014a42:	4602      	mov	r2, r0
 8014a44:	460b      	mov	r3, r1
 8014a46:	a140      	add	r1, pc, #256	; (adr r1, 8014b48 <__ieee754_asin+0x2b0>)
 8014a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a4c:	f7eb fc34 	bl	80002b8 <__aeabi_dsub>
 8014a50:	9b01      	ldr	r3, [sp, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	bfdc      	itt	le
 8014a56:	4602      	movle	r2, r0
 8014a58:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8014a5c:	4604      	mov	r4, r0
 8014a5e:	460d      	mov	r5, r1
 8014a60:	bfdc      	itt	le
 8014a62:	4614      	movle	r4, r2
 8014a64:	461d      	movle	r5, r3
 8014a66:	e748      	b.n	80148fa <__ieee754_asin+0x62>
 8014a68:	4602      	mov	r2, r0
 8014a6a:	460b      	mov	r3, r1
 8014a6c:	f7eb fddc 	bl	8000628 <__aeabi_dmul>
 8014a70:	a33b      	add	r3, pc, #236	; (adr r3, 8014b60 <__ieee754_asin+0x2c8>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	4606      	mov	r6, r0
 8014a78:	460f      	mov	r7, r1
 8014a7a:	f7eb fdd5 	bl	8000628 <__aeabi_dmul>
 8014a7e:	a33a      	add	r3, pc, #232	; (adr r3, 8014b68 <__ieee754_asin+0x2d0>)
 8014a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a84:	f7eb fc1a 	bl	80002bc <__adddf3>
 8014a88:	4632      	mov	r2, r6
 8014a8a:	463b      	mov	r3, r7
 8014a8c:	f7eb fdcc 	bl	8000628 <__aeabi_dmul>
 8014a90:	a337      	add	r3, pc, #220	; (adr r3, 8014b70 <__ieee754_asin+0x2d8>)
 8014a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a96:	f7eb fc0f 	bl	80002b8 <__aeabi_dsub>
 8014a9a:	4632      	mov	r2, r6
 8014a9c:	463b      	mov	r3, r7
 8014a9e:	f7eb fdc3 	bl	8000628 <__aeabi_dmul>
 8014aa2:	a335      	add	r3, pc, #212	; (adr r3, 8014b78 <__ieee754_asin+0x2e0>)
 8014aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa8:	f7eb fc08 	bl	80002bc <__adddf3>
 8014aac:	4632      	mov	r2, r6
 8014aae:	463b      	mov	r3, r7
 8014ab0:	f7eb fdba 	bl	8000628 <__aeabi_dmul>
 8014ab4:	a332      	add	r3, pc, #200	; (adr r3, 8014b80 <__ieee754_asin+0x2e8>)
 8014ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aba:	f7eb fbfd 	bl	80002b8 <__aeabi_dsub>
 8014abe:	4632      	mov	r2, r6
 8014ac0:	463b      	mov	r3, r7
 8014ac2:	f7eb fdb1 	bl	8000628 <__aeabi_dmul>
 8014ac6:	a330      	add	r3, pc, #192	; (adr r3, 8014b88 <__ieee754_asin+0x2f0>)
 8014ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014acc:	f7eb fbf6 	bl	80002bc <__adddf3>
 8014ad0:	4632      	mov	r2, r6
 8014ad2:	463b      	mov	r3, r7
 8014ad4:	f7eb fda8 	bl	8000628 <__aeabi_dmul>
 8014ad8:	a32d      	add	r3, pc, #180	; (adr r3, 8014b90 <__ieee754_asin+0x2f8>)
 8014ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ade:	4680      	mov	r8, r0
 8014ae0:	4689      	mov	r9, r1
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	4639      	mov	r1, r7
 8014ae6:	f7eb fd9f 	bl	8000628 <__aeabi_dmul>
 8014aea:	a32b      	add	r3, pc, #172	; (adr r3, 8014b98 <__ieee754_asin+0x300>)
 8014aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af0:	f7eb fbe2 	bl	80002b8 <__aeabi_dsub>
 8014af4:	4632      	mov	r2, r6
 8014af6:	463b      	mov	r3, r7
 8014af8:	f7eb fd96 	bl	8000628 <__aeabi_dmul>
 8014afc:	a328      	add	r3, pc, #160	; (adr r3, 8014ba0 <__ieee754_asin+0x308>)
 8014afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b02:	f7eb fbdb 	bl	80002bc <__adddf3>
 8014b06:	4632      	mov	r2, r6
 8014b08:	463b      	mov	r3, r7
 8014b0a:	f7eb fd8d 	bl	8000628 <__aeabi_dmul>
 8014b0e:	a326      	add	r3, pc, #152	; (adr r3, 8014ba8 <__ieee754_asin+0x310>)
 8014b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b14:	f7eb fbd0 	bl	80002b8 <__aeabi_dsub>
 8014b18:	4632      	mov	r2, r6
 8014b1a:	463b      	mov	r3, r7
 8014b1c:	f7eb fd84 	bl	8000628 <__aeabi_dmul>
 8014b20:	2200      	movs	r2, #0
 8014b22:	4b25      	ldr	r3, [pc, #148]	; (8014bb8 <__ieee754_asin+0x320>)
 8014b24:	f7eb fbca 	bl	80002bc <__adddf3>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	460b      	mov	r3, r1
 8014b2c:	4640      	mov	r0, r8
 8014b2e:	4649      	mov	r1, r9
 8014b30:	f7eb fea4 	bl	800087c <__aeabi_ddiv>
 8014b34:	4622      	mov	r2, r4
 8014b36:	462b      	mov	r3, r5
 8014b38:	f7eb fd76 	bl	8000628 <__aeabi_dmul>
 8014b3c:	4602      	mov	r2, r0
 8014b3e:	460b      	mov	r3, r1
 8014b40:	4620      	mov	r0, r4
 8014b42:	4629      	mov	r1, r5
 8014b44:	e6cc      	b.n	80148e0 <__ieee754_asin+0x48>
 8014b46:	bf00      	nop
 8014b48:	54442d18 	.word	0x54442d18
 8014b4c:	3ff921fb 	.word	0x3ff921fb
 8014b50:	33145c07 	.word	0x33145c07
 8014b54:	3c91a626 	.word	0x3c91a626
 8014b58:	8800759c 	.word	0x8800759c
 8014b5c:	7e37e43c 	.word	0x7e37e43c
 8014b60:	0dfdf709 	.word	0x0dfdf709
 8014b64:	3f023de1 	.word	0x3f023de1
 8014b68:	7501b288 	.word	0x7501b288
 8014b6c:	3f49efe0 	.word	0x3f49efe0
 8014b70:	b5688f3b 	.word	0xb5688f3b
 8014b74:	3fa48228 	.word	0x3fa48228
 8014b78:	0e884455 	.word	0x0e884455
 8014b7c:	3fc9c155 	.word	0x3fc9c155
 8014b80:	03eb6f7d 	.word	0x03eb6f7d
 8014b84:	3fd4d612 	.word	0x3fd4d612
 8014b88:	55555555 	.word	0x55555555
 8014b8c:	3fc55555 	.word	0x3fc55555
 8014b90:	b12e9282 	.word	0xb12e9282
 8014b94:	3fb3b8c5 	.word	0x3fb3b8c5
 8014b98:	1b8d0159 	.word	0x1b8d0159
 8014b9c:	3fe6066c 	.word	0x3fe6066c
 8014ba0:	9c598ac8 	.word	0x9c598ac8
 8014ba4:	40002ae5 	.word	0x40002ae5
 8014ba8:	1c8a2d4b 	.word	0x1c8a2d4b
 8014bac:	40033a27 	.word	0x40033a27
 8014bb0:	3fefffff 	.word	0x3fefffff
 8014bb4:	3fdfffff 	.word	0x3fdfffff
 8014bb8:	3ff00000 	.word	0x3ff00000
 8014bbc:	3fe00000 	.word	0x3fe00000
 8014bc0:	3fef3332 	.word	0x3fef3332
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	460f      	mov	r7, r1
 8014bca:	f7eb fb77 	bl	80002bc <__adddf3>
 8014bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bd6:	4640      	mov	r0, r8
 8014bd8:	4649      	mov	r1, r9
 8014bda:	f7eb fe4f 	bl	800087c <__aeabi_ddiv>
 8014bde:	4602      	mov	r2, r0
 8014be0:	460b      	mov	r3, r1
 8014be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014be6:	f7eb fd1f 	bl	8000628 <__aeabi_dmul>
 8014bea:	2600      	movs	r6, #0
 8014bec:	4680      	mov	r8, r0
 8014bee:	4689      	mov	r9, r1
 8014bf0:	4632      	mov	r2, r6
 8014bf2:	465b      	mov	r3, fp
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4659      	mov	r1, fp
 8014bf8:	f7eb fd16 	bl	8000628 <__aeabi_dmul>
 8014bfc:	4602      	mov	r2, r0
 8014bfe:	460b      	mov	r3, r1
 8014c00:	4620      	mov	r0, r4
 8014c02:	4629      	mov	r1, r5
 8014c04:	f7eb fb58 	bl	80002b8 <__aeabi_dsub>
 8014c08:	4632      	mov	r2, r6
 8014c0a:	4604      	mov	r4, r0
 8014c0c:	460d      	mov	r5, r1
 8014c0e:	465b      	mov	r3, fp
 8014c10:	4650      	mov	r0, sl
 8014c12:	4659      	mov	r1, fp
 8014c14:	f7eb fb52 	bl	80002bc <__adddf3>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	4629      	mov	r1, r5
 8014c20:	f7eb fe2c 	bl	800087c <__aeabi_ddiv>
 8014c24:	4602      	mov	r2, r0
 8014c26:	460b      	mov	r3, r1
 8014c28:	f7eb fb48 	bl	80002bc <__adddf3>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	460b      	mov	r3, r1
 8014c30:	a113      	add	r1, pc, #76	; (adr r1, 8014c80 <__ieee754_asin+0x3e8>)
 8014c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c36:	f7eb fb3f 	bl	80002b8 <__aeabi_dsub>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	4640      	mov	r0, r8
 8014c40:	4649      	mov	r1, r9
 8014c42:	f7eb fb39 	bl	80002b8 <__aeabi_dsub>
 8014c46:	4632      	mov	r2, r6
 8014c48:	4604      	mov	r4, r0
 8014c4a:	460d      	mov	r5, r1
 8014c4c:	465b      	mov	r3, fp
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4639      	mov	r1, r7
 8014c52:	f7eb fb33 	bl	80002bc <__adddf3>
 8014c56:	4602      	mov	r2, r0
 8014c58:	460b      	mov	r3, r1
 8014c5a:	a10b      	add	r1, pc, #44	; (adr r1, 8014c88 <__ieee754_asin+0x3f0>)
 8014c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c60:	f7eb fb2a 	bl	80002b8 <__aeabi_dsub>
 8014c64:	4602      	mov	r2, r0
 8014c66:	460b      	mov	r3, r1
 8014c68:	4620      	mov	r0, r4
 8014c6a:	4629      	mov	r1, r5
 8014c6c:	f7eb fb24 	bl	80002b8 <__aeabi_dsub>
 8014c70:	4602      	mov	r2, r0
 8014c72:	460b      	mov	r3, r1
 8014c74:	a104      	add	r1, pc, #16	; (adr r1, 8014c88 <__ieee754_asin+0x3f0>)
 8014c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c7a:	e6e7      	b.n	8014a4c <__ieee754_asin+0x1b4>
 8014c7c:	f3af 8000 	nop.w
 8014c80:	33145c07 	.word	0x33145c07
 8014c84:	3c91a626 	.word	0x3c91a626
 8014c88:	54442d18 	.word	0x54442d18
 8014c8c:	3fe921fb 	.word	0x3fe921fb

08014c90 <__ieee754_atan2>:
 8014c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	4690      	mov	r8, r2
 8014c96:	4699      	mov	r9, r3
 8014c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014c9c:	461f      	mov	r7, r3
 8014c9e:	f1c8 0300 	rsb	r3, r8, #0
 8014ca2:	ea43 0308 	orr.w	r3, r3, r8
 8014ca6:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8014e58 <__ieee754_atan2+0x1c8>
 8014caa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014cae:	4573      	cmp	r3, lr
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	460d      	mov	r5, r1
 8014cb4:	d808      	bhi.n	8014cc8 <__ieee754_atan2+0x38>
 8014cb6:	4246      	negs	r6, r0
 8014cb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014cbc:	4306      	orrs	r6, r0
 8014cbe:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8014cc2:	4576      	cmp	r6, lr
 8014cc4:	468c      	mov	ip, r1
 8014cc6:	d908      	bls.n	8014cda <__ieee754_atan2+0x4a>
 8014cc8:	4642      	mov	r2, r8
 8014cca:	464b      	mov	r3, r9
 8014ccc:	4620      	mov	r0, r4
 8014cce:	4629      	mov	r1, r5
 8014cd0:	f7eb faf4 	bl	80002bc <__adddf3>
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	460d      	mov	r5, r1
 8014cd8:	e031      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014cda:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8014cde:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8014ce2:	ea56 0608 	orrs.w	r6, r6, r8
 8014ce6:	d103      	bne.n	8014cf0 <__ieee754_atan2+0x60>
 8014ce8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cec:	f000 bfa8 	b.w	8015c40 <atan>
 8014cf0:	17be      	asrs	r6, r7, #30
 8014cf2:	f006 0602 	and.w	r6, r6, #2
 8014cf6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8014cfa:	ea53 0100 	orrs.w	r1, r3, r0
 8014cfe:	d107      	bne.n	8014d10 <__ieee754_atan2+0x80>
 8014d00:	2e02      	cmp	r6, #2
 8014d02:	d07a      	beq.n	8014dfa <__ieee754_atan2+0x16a>
 8014d04:	2e03      	cmp	r6, #3
 8014d06:	d11a      	bne.n	8014d3e <__ieee754_atan2+0xae>
 8014d08:	a541      	add	r5, pc, #260	; (adr r5, 8014e10 <__ieee754_atan2+0x180>)
 8014d0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d0e:	e016      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014d10:	ea52 0108 	orrs.w	r1, r2, r8
 8014d14:	d106      	bne.n	8014d24 <__ieee754_atan2+0x94>
 8014d16:	f1bc 0f00 	cmp.w	ip, #0
 8014d1a:	da72      	bge.n	8014e02 <__ieee754_atan2+0x172>
 8014d1c:	a53e      	add	r5, pc, #248	; (adr r5, 8014e18 <__ieee754_atan2+0x188>)
 8014d1e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d22:	e00c      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014d24:	4572      	cmp	r2, lr
 8014d26:	d123      	bne.n	8014d70 <__ieee754_atan2+0xe0>
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d114      	bne.n	8014d56 <__ieee754_atan2+0xc6>
 8014d2c:	2e02      	cmp	r6, #2
 8014d2e:	d00a      	beq.n	8014d46 <__ieee754_atan2+0xb6>
 8014d30:	2e03      	cmp	r6, #3
 8014d32:	d00c      	beq.n	8014d4e <__ieee754_atan2+0xbe>
 8014d34:	2e01      	cmp	r6, #1
 8014d36:	d15c      	bne.n	8014df2 <__ieee754_atan2+0x162>
 8014d38:	a539      	add	r5, pc, #228	; (adr r5, 8014e20 <__ieee754_atan2+0x190>)
 8014d3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d3e:	4620      	mov	r0, r4
 8014d40:	4629      	mov	r1, r5
 8014d42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d46:	a538      	add	r5, pc, #224	; (adr r5, 8014e28 <__ieee754_atan2+0x198>)
 8014d48:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d4c:	e7f7      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014d4e:	a538      	add	r5, pc, #224	; (adr r5, 8014e30 <__ieee754_atan2+0x1a0>)
 8014d50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d54:	e7f3      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014d56:	2e02      	cmp	r6, #2
 8014d58:	d04f      	beq.n	8014dfa <__ieee754_atan2+0x16a>
 8014d5a:	2e03      	cmp	r6, #3
 8014d5c:	d0d4      	beq.n	8014d08 <__ieee754_atan2+0x78>
 8014d5e:	2e01      	cmp	r6, #1
 8014d60:	f04f 0400 	mov.w	r4, #0
 8014d64:	d102      	bne.n	8014d6c <__ieee754_atan2+0xdc>
 8014d66:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8014d6a:	e7e8      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014d6c:	2500      	movs	r5, #0
 8014d6e:	e7e6      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014d70:	4573      	cmp	r3, lr
 8014d72:	d0d0      	beq.n	8014d16 <__ieee754_atan2+0x86>
 8014d74:	1a9b      	subs	r3, r3, r2
 8014d76:	151b      	asrs	r3, r3, #20
 8014d78:	2b3c      	cmp	r3, #60	; 0x3c
 8014d7a:	dc20      	bgt.n	8014dbe <__ieee754_atan2+0x12e>
 8014d7c:	2f00      	cmp	r7, #0
 8014d7e:	da01      	bge.n	8014d84 <__ieee754_atan2+0xf4>
 8014d80:	333c      	adds	r3, #60	; 0x3c
 8014d82:	db20      	blt.n	8014dc6 <__ieee754_atan2+0x136>
 8014d84:	4642      	mov	r2, r8
 8014d86:	464b      	mov	r3, r9
 8014d88:	4620      	mov	r0, r4
 8014d8a:	4629      	mov	r1, r5
 8014d8c:	f7eb fd76 	bl	800087c <__aeabi_ddiv>
 8014d90:	f001 f8e6 	bl	8015f60 <fabs>
 8014d94:	f000 ff54 	bl	8015c40 <atan>
 8014d98:	4604      	mov	r4, r0
 8014d9a:	460d      	mov	r5, r1
 8014d9c:	2e01      	cmp	r6, #1
 8014d9e:	d015      	beq.n	8014dcc <__ieee754_atan2+0x13c>
 8014da0:	2e02      	cmp	r6, #2
 8014da2:	d017      	beq.n	8014dd4 <__ieee754_atan2+0x144>
 8014da4:	2e00      	cmp	r6, #0
 8014da6:	d0ca      	beq.n	8014d3e <__ieee754_atan2+0xae>
 8014da8:	a323      	add	r3, pc, #140	; (adr r3, 8014e38 <__ieee754_atan2+0x1a8>)
 8014daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dae:	4620      	mov	r0, r4
 8014db0:	4629      	mov	r1, r5
 8014db2:	f7eb fa81 	bl	80002b8 <__aeabi_dsub>
 8014db6:	a322      	add	r3, pc, #136	; (adr r3, 8014e40 <__ieee754_atan2+0x1b0>)
 8014db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbc:	e016      	b.n	8014dec <__ieee754_atan2+0x15c>
 8014dbe:	a522      	add	r5, pc, #136	; (adr r5, 8014e48 <__ieee754_atan2+0x1b8>)
 8014dc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014dc4:	e7ea      	b.n	8014d9c <__ieee754_atan2+0x10c>
 8014dc6:	2400      	movs	r4, #0
 8014dc8:	2500      	movs	r5, #0
 8014dca:	e7e7      	b.n	8014d9c <__ieee754_atan2+0x10c>
 8014dcc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8014dd0:	461d      	mov	r5, r3
 8014dd2:	e7b4      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014dd4:	a318      	add	r3, pc, #96	; (adr r3, 8014e38 <__ieee754_atan2+0x1a8>)
 8014dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dda:	4620      	mov	r0, r4
 8014ddc:	4629      	mov	r1, r5
 8014dde:	f7eb fa6b 	bl	80002b8 <__aeabi_dsub>
 8014de2:	4602      	mov	r2, r0
 8014de4:	460b      	mov	r3, r1
 8014de6:	a116      	add	r1, pc, #88	; (adr r1, 8014e40 <__ieee754_atan2+0x1b0>)
 8014de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dec:	f7eb fa64 	bl	80002b8 <__aeabi_dsub>
 8014df0:	e770      	b.n	8014cd4 <__ieee754_atan2+0x44>
 8014df2:	a517      	add	r5, pc, #92	; (adr r5, 8014e50 <__ieee754_atan2+0x1c0>)
 8014df4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014df8:	e7a1      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014dfa:	a511      	add	r5, pc, #68	; (adr r5, 8014e40 <__ieee754_atan2+0x1b0>)
 8014dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014e00:	e79d      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014e02:	a511      	add	r5, pc, #68	; (adr r5, 8014e48 <__ieee754_atan2+0x1b8>)
 8014e04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014e08:	e799      	b.n	8014d3e <__ieee754_atan2+0xae>
 8014e0a:	bf00      	nop
 8014e0c:	f3af 8000 	nop.w
 8014e10:	54442d18 	.word	0x54442d18
 8014e14:	c00921fb 	.word	0xc00921fb
 8014e18:	54442d18 	.word	0x54442d18
 8014e1c:	bff921fb 	.word	0xbff921fb
 8014e20:	54442d18 	.word	0x54442d18
 8014e24:	bfe921fb 	.word	0xbfe921fb
 8014e28:	7f3321d2 	.word	0x7f3321d2
 8014e2c:	4002d97c 	.word	0x4002d97c
 8014e30:	7f3321d2 	.word	0x7f3321d2
 8014e34:	c002d97c 	.word	0xc002d97c
 8014e38:	33145c07 	.word	0x33145c07
 8014e3c:	3ca1a626 	.word	0x3ca1a626
 8014e40:	54442d18 	.word	0x54442d18
 8014e44:	400921fb 	.word	0x400921fb
 8014e48:	54442d18 	.word	0x54442d18
 8014e4c:	3ff921fb 	.word	0x3ff921fb
 8014e50:	54442d18 	.word	0x54442d18
 8014e54:	3fe921fb 	.word	0x3fe921fb
 8014e58:	7ff00000 	.word	0x7ff00000

08014e5c <__ieee754_sqrt>:
 8014e5c:	4b54      	ldr	r3, [pc, #336]	; (8014fb0 <__ieee754_sqrt+0x154>)
 8014e5e:	438b      	bics	r3, r1
 8014e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e64:	460a      	mov	r2, r1
 8014e66:	4606      	mov	r6, r0
 8014e68:	460f      	mov	r7, r1
 8014e6a:	460c      	mov	r4, r1
 8014e6c:	d10f      	bne.n	8014e8e <__ieee754_sqrt+0x32>
 8014e6e:	4602      	mov	r2, r0
 8014e70:	460b      	mov	r3, r1
 8014e72:	f7eb fbd9 	bl	8000628 <__aeabi_dmul>
 8014e76:	4602      	mov	r2, r0
 8014e78:	460b      	mov	r3, r1
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	4639      	mov	r1, r7
 8014e7e:	f7eb fa1d 	bl	80002bc <__adddf3>
 8014e82:	4606      	mov	r6, r0
 8014e84:	460f      	mov	r7, r1
 8014e86:	4630      	mov	r0, r6
 8014e88:	4639      	mov	r1, r7
 8014e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e8e:	2900      	cmp	r1, #0
 8014e90:	4605      	mov	r5, r0
 8014e92:	4603      	mov	r3, r0
 8014e94:	dc0e      	bgt.n	8014eb4 <__ieee754_sqrt+0x58>
 8014e96:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8014e9a:	ea5c 0505 	orrs.w	r5, ip, r5
 8014e9e:	d0f2      	beq.n	8014e86 <__ieee754_sqrt+0x2a>
 8014ea0:	b141      	cbz	r1, 8014eb4 <__ieee754_sqrt+0x58>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	f7eb fa07 	bl	80002b8 <__aeabi_dsub>
 8014eaa:	4602      	mov	r2, r0
 8014eac:	460b      	mov	r3, r1
 8014eae:	f7eb fce5 	bl	800087c <__aeabi_ddiv>
 8014eb2:	e7e6      	b.n	8014e82 <__ieee754_sqrt+0x26>
 8014eb4:	1512      	asrs	r2, r2, #20
 8014eb6:	d073      	beq.n	8014fa0 <__ieee754_sqrt+0x144>
 8014eb8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014ebc:	07d5      	lsls	r5, r2, #31
 8014ebe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014ec2:	bf48      	it	mi
 8014ec4:	0fd9      	lsrmi	r1, r3, #31
 8014ec6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8014eca:	bf44      	itt	mi
 8014ecc:	005b      	lslmi	r3, r3, #1
 8014ece:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8014ed2:	2500      	movs	r5, #0
 8014ed4:	1051      	asrs	r1, r2, #1
 8014ed6:	0fda      	lsrs	r2, r3, #31
 8014ed8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014edc:	005b      	lsls	r3, r3, #1
 8014ede:	2216      	movs	r2, #22
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014ee6:	1987      	adds	r7, r0, r6
 8014ee8:	42a7      	cmp	r7, r4
 8014eea:	bfde      	ittt	le
 8014eec:	19b8      	addle	r0, r7, r6
 8014eee:	1be4      	suble	r4, r4, r7
 8014ef0:	19ad      	addle	r5, r5, r6
 8014ef2:	0fdf      	lsrs	r7, r3, #31
 8014ef4:	3a01      	subs	r2, #1
 8014ef6:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8014efa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014efe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014f02:	d1f0      	bne.n	8014ee6 <__ieee754_sqrt+0x8a>
 8014f04:	f04f 0c20 	mov.w	ip, #32
 8014f08:	4696      	mov	lr, r2
 8014f0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014f0e:	4284      	cmp	r4, r0
 8014f10:	eb06 070e 	add.w	r7, r6, lr
 8014f14:	dc02      	bgt.n	8014f1c <__ieee754_sqrt+0xc0>
 8014f16:	d112      	bne.n	8014f3e <__ieee754_sqrt+0xe2>
 8014f18:	429f      	cmp	r7, r3
 8014f1a:	d810      	bhi.n	8014f3e <__ieee754_sqrt+0xe2>
 8014f1c:	2f00      	cmp	r7, #0
 8014f1e:	eb07 0e06 	add.w	lr, r7, r6
 8014f22:	da42      	bge.n	8014faa <__ieee754_sqrt+0x14e>
 8014f24:	f1be 0f00 	cmp.w	lr, #0
 8014f28:	db3f      	blt.n	8014faa <__ieee754_sqrt+0x14e>
 8014f2a:	f100 0801 	add.w	r8, r0, #1
 8014f2e:	1a24      	subs	r4, r4, r0
 8014f30:	429f      	cmp	r7, r3
 8014f32:	bf88      	it	hi
 8014f34:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8014f38:	1bdb      	subs	r3, r3, r7
 8014f3a:	4432      	add	r2, r6
 8014f3c:	4640      	mov	r0, r8
 8014f3e:	0064      	lsls	r4, r4, #1
 8014f40:	f1bc 0c01 	subs.w	ip, ip, #1
 8014f44:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8014f48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014f4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014f50:	d1dd      	bne.n	8014f0e <__ieee754_sqrt+0xb2>
 8014f52:	4323      	orrs	r3, r4
 8014f54:	d006      	beq.n	8014f64 <__ieee754_sqrt+0x108>
 8014f56:	1c54      	adds	r4, r2, #1
 8014f58:	bf13      	iteet	ne
 8014f5a:	3201      	addne	r2, #1
 8014f5c:	3501      	addeq	r5, #1
 8014f5e:	4662      	moveq	r2, ip
 8014f60:	f022 0201 	bicne.w	r2, r2, #1
 8014f64:	106b      	asrs	r3, r5, #1
 8014f66:	0852      	lsrs	r2, r2, #1
 8014f68:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014f6c:	07e8      	lsls	r0, r5, #31
 8014f6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014f72:	bf48      	it	mi
 8014f74:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8014f78:	eb03 5701 	add.w	r7, r3, r1, lsl #20
 8014f7c:	4616      	mov	r6, r2
 8014f7e:	e782      	b.n	8014e86 <__ieee754_sqrt+0x2a>
 8014f80:	0adc      	lsrs	r4, r3, #11
 8014f82:	3915      	subs	r1, #21
 8014f84:	055b      	lsls	r3, r3, #21
 8014f86:	2c00      	cmp	r4, #0
 8014f88:	d0fa      	beq.n	8014f80 <__ieee754_sqrt+0x124>
 8014f8a:	02e6      	lsls	r6, r4, #11
 8014f8c:	d50a      	bpl.n	8014fa4 <__ieee754_sqrt+0x148>
 8014f8e:	f1c2 0020 	rsb	r0, r2, #32
 8014f92:	fa23 f000 	lsr.w	r0, r3, r0
 8014f96:	1e55      	subs	r5, r2, #1
 8014f98:	4093      	lsls	r3, r2
 8014f9a:	4304      	orrs	r4, r0
 8014f9c:	1b4a      	subs	r2, r1, r5
 8014f9e:	e78b      	b.n	8014eb8 <__ieee754_sqrt+0x5c>
 8014fa0:	4611      	mov	r1, r2
 8014fa2:	e7f0      	b.n	8014f86 <__ieee754_sqrt+0x12a>
 8014fa4:	0064      	lsls	r4, r4, #1
 8014fa6:	3201      	adds	r2, #1
 8014fa8:	e7ef      	b.n	8014f8a <__ieee754_sqrt+0x12e>
 8014faa:	4680      	mov	r8, r0
 8014fac:	e7bf      	b.n	8014f2e <__ieee754_sqrt+0xd2>
 8014fae:	bf00      	nop
 8014fb0:	7ff00000 	.word	0x7ff00000

08014fb4 <__ieee754_acosf>:
 8014fb4:	b508      	push	{r3, lr}
 8014fb6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8014fba:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014fbe:	ed2d 8b0c 	vpush	{d8-d13}
 8014fc2:	ee08 0a10 	vmov	s16, r0
 8014fc6:	d10c      	bne.n	8014fe2 <__ieee754_acosf+0x2e>
 8014fc8:	eddf 7a69 	vldr	s15, [pc, #420]	; 8015170 <__ieee754_acosf+0x1bc>
 8014fcc:	ed9f 8a69 	vldr	s16, [pc, #420]	; 8015174 <__ieee754_acosf+0x1c0>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	bfd8      	it	le
 8014fd4:	eef0 7a48 	vmovle.f32	s15, s16
 8014fd8:	ecbd 8b0c 	vpop	{d8-d13}
 8014fdc:	ee17 0a90 	vmov	r0, s15
 8014fe0:	bd08      	pop	{r3, pc}
 8014fe2:	dd04      	ble.n	8014fee <__ieee754_acosf+0x3a>
 8014fe4:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014fe8:	eec8 7a08 	vdiv.f32	s15, s16, s16
 8014fec:	e7f4      	b.n	8014fd8 <__ieee754_acosf+0x24>
 8014fee:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8014ff2:	da3e      	bge.n	8015072 <__ieee754_acosf+0xbe>
 8014ff4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8014ff8:	f340 80b7 	ble.w	801516a <__ieee754_acosf+0x1b6>
 8014ffc:	ee68 7a08 	vmul.f32	s15, s16, s16
 8015000:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8015178 <__ieee754_acosf+0x1c4>
 8015004:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801517c <__ieee754_acosf+0x1c8>
 8015008:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8015180 <__ieee754_acosf+0x1cc>
 801500c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015010:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8015184 <__ieee754_acosf+0x1d0>
 8015014:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015018:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015188 <__ieee754_acosf+0x1d4>
 801501c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015020:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801518c <__ieee754_acosf+0x1d8>
 8015024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015028:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015190 <__ieee754_acosf+0x1dc>
 801502c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015030:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015194 <__ieee754_acosf+0x1e0>
 8015034:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8015038:	eddf 6a57 	vldr	s13, [pc, #348]	; 8015198 <__ieee754_acosf+0x1e4>
 801503c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015040:	ed9f 6a56 	vldr	s12, [pc, #344]	; 801519c <__ieee754_acosf+0x1e8>
 8015044:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801504c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015054:	eef0 7a66 	vmov.f32	s15, s13
 8015058:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801505c:	eddf 7a50 	vldr	s15, [pc, #320]	; 80151a0 <__ieee754_acosf+0x1ec>
 8015060:	eee8 7a66 	vfms.f32	s15, s16, s13
 8015064:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015068:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80151a4 <__ieee754_acosf+0x1f0>
 801506c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8015070:	e7b2      	b.n	8014fd8 <__ieee754_acosf+0x24>
 8015072:	2800      	cmp	r0, #0
 8015074:	eddf da40 	vldr	s27, [pc, #256]	; 8015178 <__ieee754_acosf+0x1c4>
 8015078:	eddf ca40 	vldr	s25, [pc, #256]	; 801517c <__ieee754_acosf+0x1c8>
 801507c:	ed9f ca41 	vldr	s24, [pc, #260]	; 8015184 <__ieee754_acosf+0x1d0>
 8015080:	eddf ba41 	vldr	s23, [pc, #260]	; 8015188 <__ieee754_acosf+0x1d4>
 8015084:	ed9f ba41 	vldr	s22, [pc, #260]	; 801518c <__ieee754_acosf+0x1d8>
 8015088:	eddf 8a41 	vldr	s17, [pc, #260]	; 8015190 <__ieee754_acosf+0x1dc>
 801508c:	ed9f da41 	vldr	s26, [pc, #260]	; 8015194 <__ieee754_acosf+0x1e0>
 8015090:	eddf aa3b 	vldr	s21, [pc, #236]	; 8015180 <__ieee754_acosf+0x1cc>
 8015094:	ed9f aa40 	vldr	s20, [pc, #256]	; 8015198 <__ieee754_acosf+0x1e4>
 8015098:	eddf 9a40 	vldr	s19, [pc, #256]	; 801519c <__ieee754_acosf+0x1e8>
 801509c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80150a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80150a4:	da2c      	bge.n	8015100 <__ieee754_acosf+0x14c>
 80150a6:	ee38 8a09 	vadd.f32	s16, s16, s18
 80150aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150ae:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80150b2:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80150b6:	eeac ca88 	vfma.f32	s24, s25, s16
 80150ba:	eeaa aa88 	vfma.f32	s20, s21, s16
 80150be:	eeec ba08 	vfma.f32	s23, s24, s16
 80150c2:	eeea 9a08 	vfma.f32	s19, s20, s16
 80150c6:	eeab ba88 	vfma.f32	s22, s23, s16
 80150ca:	eea9 9a88 	vfma.f32	s18, s19, s16
 80150ce:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80150d2:	ee18 0a10 	vmov	r0, s16
 80150d6:	ee68 8a88 	vmul.f32	s17, s17, s16
 80150da:	f000 f995 	bl	8015408 <__ieee754_sqrtf>
 80150de:	eec8 7a89 	vdiv.f32	s15, s17, s18
 80150e2:	ee06 0a90 	vmov	s13, r0
 80150e6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80151a8 <__ieee754_acosf+0x1f4>
 80150ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80150ee:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80151ac <__ieee754_acosf+0x1f8>
 80150f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80150f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80150fa:	eee7 7a66 	vfms.f32	s15, s14, s13
 80150fe:	e76b      	b.n	8014fd8 <__ieee754_acosf+0x24>
 8015100:	ee39 8a48 	vsub.f32	s16, s18, s16
 8015104:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015108:	ee18 0a10 	vmov	r0, s16
 801510c:	f000 f97c 	bl	8015408 <__ieee754_sqrtf>
 8015110:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8015114:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8015118:	f023 030f 	bic.w	r3, r3, #15
 801511c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8015120:	eeac ca88 	vfma.f32	s24, s25, s16
 8015124:	eeaa aa88 	vfma.f32	s20, s21, s16
 8015128:	eeec ba08 	vfma.f32	s23, s24, s16
 801512c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8015130:	eeab ba88 	vfma.f32	s22, s23, s16
 8015134:	ee07 3a10 	vmov	s14, r3
 8015138:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801513c:	eef0 5a48 	vmov.f32	s11, s16
 8015140:	ee06 0a90 	vmov	s13, r0
 8015144:	eee7 5a47 	vfms.f32	s11, s14, s14
 8015148:	eea9 9a88 	vfma.f32	s18, s19, s16
 801514c:	ee36 6a87 	vadd.f32	s12, s13, s14
 8015150:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015154:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8015158:	ee88 6a89 	vdiv.f32	s12, s17, s18
 801515c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015164:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015168:	e736      	b.n	8014fd8 <__ieee754_acosf+0x24>
 801516a:	eddf 7a11 	vldr	s15, [pc, #68]	; 80151b0 <__ieee754_acosf+0x1fc>
 801516e:	e733      	b.n	8014fd8 <__ieee754_acosf+0x24>
 8015170:	00000000 	.word	0x00000000
 8015174:	40490fdb 	.word	0x40490fdb
 8015178:	3811ef08 	.word	0x3811ef08
 801517c:	3a4f7f04 	.word	0x3a4f7f04
 8015180:	bf303361 	.word	0xbf303361
 8015184:	bd241146 	.word	0xbd241146
 8015188:	3e4e0aa8 	.word	0x3e4e0aa8
 801518c:	bea6b090 	.word	0xbea6b090
 8015190:	3e2aaaab 	.word	0x3e2aaaab
 8015194:	3d9dc62e 	.word	0x3d9dc62e
 8015198:	4001572d 	.word	0x4001572d
 801519c:	c019d139 	.word	0xc019d139
 80151a0:	33a22168 	.word	0x33a22168
 80151a4:	3fc90fda 	.word	0x3fc90fda
 80151a8:	b3a22168 	.word	0xb3a22168
 80151ac:	40490fda 	.word	0x40490fda
 80151b0:	3fc90fdb 	.word	0x3fc90fdb

080151b4 <__ieee754_rem_pio2f>:
 80151b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151b6:	4b86      	ldr	r3, [pc, #536]	; (80153d0 <__ieee754_rem_pio2f+0x21c>)
 80151b8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80151bc:	429c      	cmp	r4, r3
 80151be:	b087      	sub	sp, #28
 80151c0:	ee07 0a90 	vmov	s15, r0
 80151c4:	460d      	mov	r5, r1
 80151c6:	4606      	mov	r6, r0
 80151c8:	dc04      	bgt.n	80151d4 <__ieee754_rem_pio2f+0x20>
 80151ca:	2300      	movs	r3, #0
 80151cc:	6028      	str	r0, [r5, #0]
 80151ce:	604b      	str	r3, [r1, #4]
 80151d0:	2000      	movs	r0, #0
 80151d2:	e020      	b.n	8015216 <__ieee754_rem_pio2f+0x62>
 80151d4:	4b7f      	ldr	r3, [pc, #508]	; (80153d4 <__ieee754_rem_pio2f+0x220>)
 80151d6:	429c      	cmp	r4, r3
 80151d8:	dc38      	bgt.n	801524c <__ieee754_rem_pio2f+0x98>
 80151da:	2800      	cmp	r0, #0
 80151dc:	f024 040f 	bic.w	r4, r4, #15
 80151e0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80153d8 <__ieee754_rem_pio2f+0x224>
 80151e4:	4b7d      	ldr	r3, [pc, #500]	; (80153dc <__ieee754_rem_pio2f+0x228>)
 80151e6:	dd18      	ble.n	801521a <__ieee754_rem_pio2f+0x66>
 80151e8:	429c      	cmp	r4, r3
 80151ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80151ee:	bf09      	itett	eq
 80151f0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80153e0 <__ieee754_rem_pio2f+0x22c>
 80151f4:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 80153e4 <__ieee754_rem_pio2f+0x230>
 80151f8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80151fc:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 80153e8 <__ieee754_rem_pio2f+0x234>
 8015200:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015204:	2001      	movs	r0, #1
 8015206:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801520a:	edc1 6a00 	vstr	s13, [r1]
 801520e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015212:	edc1 7a01 	vstr	s15, [r1, #4]
 8015216:	b007      	add	sp, #28
 8015218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801521a:	429c      	cmp	r4, r3
 801521c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015220:	bf09      	itett	eq
 8015222:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80153e0 <__ieee754_rem_pio2f+0x22c>
 8015226:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 80153e4 <__ieee754_rem_pio2f+0x230>
 801522a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801522e:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 80153e8 <__ieee754_rem_pio2f+0x234>
 8015232:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015236:	f04f 30ff 	mov.w	r0, #4294967295
 801523a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801523e:	edc1 6a00 	vstr	s13, [r1]
 8015242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015246:	edc1 7a01 	vstr	s15, [r1, #4]
 801524a:	e7e4      	b.n	8015216 <__ieee754_rem_pio2f+0x62>
 801524c:	4b67      	ldr	r3, [pc, #412]	; (80153ec <__ieee754_rem_pio2f+0x238>)
 801524e:	429c      	cmp	r4, r3
 8015250:	dc73      	bgt.n	801533a <__ieee754_rem_pio2f+0x186>
 8015252:	f000 fe91 	bl	8015f78 <fabsf>
 8015256:	eddf 6a66 	vldr	s13, [pc, #408]	; 80153f0 <__ieee754_rem_pio2f+0x23c>
 801525a:	ee07 0a90 	vmov	s15, r0
 801525e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015262:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015266:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801526a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801526e:	ee17 0a10 	vmov	r0, s14
 8015272:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80153d8 <__ieee754_rem_pio2f+0x224>
 8015276:	eef1 6a65 	vneg.f32	s13, s11
 801527a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801527e:	281f      	cmp	r0, #31
 8015280:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80153e4 <__ieee754_rem_pio2f+0x230>
 8015284:	ee25 7a87 	vmul.f32	s14, s11, s14
 8015288:	ee37 6ac7 	vsub.f32	s12, s15, s14
 801528c:	ee16 3a10 	vmov	r3, s12
 8015290:	dc1c      	bgt.n	80152cc <__ieee754_rem_pio2f+0x118>
 8015292:	1e47      	subs	r7, r0, #1
 8015294:	4957      	ldr	r1, [pc, #348]	; (80153f4 <__ieee754_rem_pio2f+0x240>)
 8015296:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801529a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801529e:	428a      	cmp	r2, r1
 80152a0:	d014      	beq.n	80152cc <__ieee754_rem_pio2f+0x118>
 80152a2:	602b      	str	r3, [r5, #0]
 80152a4:	edd5 6a00 	vldr	s13, [r5]
 80152a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80152ac:	2e00      	cmp	r6, #0
 80152ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152b2:	edc5 7a01 	vstr	s15, [r5, #4]
 80152b6:	daae      	bge.n	8015216 <__ieee754_rem_pio2f+0x62>
 80152b8:	eef1 6a66 	vneg.f32	s13, s13
 80152bc:	edc5 6a00 	vstr	s13, [r5]
 80152c0:	eef1 7a67 	vneg.f32	s15, s15
 80152c4:	edc5 7a01 	vstr	s15, [r5, #4]
 80152c8:	4240      	negs	r0, r0
 80152ca:	e7a4      	b.n	8015216 <__ieee754_rem_pio2f+0x62>
 80152cc:	15e4      	asrs	r4, r4, #23
 80152ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80152d2:	1aa2      	subs	r2, r4, r2
 80152d4:	2a08      	cmp	r2, #8
 80152d6:	dde4      	ble.n	80152a2 <__ieee754_rem_pio2f+0xee>
 80152d8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80153e0 <__ieee754_rem_pio2f+0x22c>
 80152dc:	eeb0 6a67 	vmov.f32	s12, s15
 80152e0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80152e4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80152e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80152ec:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80153e8 <__ieee754_rem_pio2f+0x234>
 80152f0:	eed5 7a87 	vfnms.f32	s15, s11, s14
 80152f4:	eeb0 7a67 	vmov.f32	s14, s15
 80152f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80152fc:	ee17 3a90 	vmov	r3, s15
 8015300:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015304:	1aa4      	subs	r4, r4, r2
 8015306:	2c19      	cmp	r4, #25
 8015308:	dc04      	bgt.n	8015314 <__ieee754_rem_pio2f+0x160>
 801530a:	edc5 7a00 	vstr	s15, [r5]
 801530e:	eef0 7a46 	vmov.f32	s15, s12
 8015312:	e7c7      	b.n	80152a4 <__ieee754_rem_pio2f+0xf0>
 8015314:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80153f8 <__ieee754_rem_pio2f+0x244>
 8015318:	eef0 7a46 	vmov.f32	s15, s12
 801531c:	eee6 7a85 	vfma.f32	s15, s13, s10
 8015320:	ee36 7a67 	vsub.f32	s14, s12, s15
 8015324:	eea6 7a85 	vfma.f32	s14, s13, s10
 8015328:	eddf 6a34 	vldr	s13, [pc, #208]	; 80153fc <__ieee754_rem_pio2f+0x248>
 801532c:	ee95 7aa6 	vfnms.f32	s14, s11, s13
 8015330:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015334:	edc5 6a00 	vstr	s13, [r5]
 8015338:	e7b4      	b.n	80152a4 <__ieee754_rem_pio2f+0xf0>
 801533a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801533e:	db06      	blt.n	801534e <__ieee754_rem_pio2f+0x19a>
 8015340:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8015344:	edc1 7a01 	vstr	s15, [r1, #4]
 8015348:	edc1 7a00 	vstr	s15, [r1]
 801534c:	e740      	b.n	80151d0 <__ieee754_rem_pio2f+0x1c>
 801534e:	15e2      	asrs	r2, r4, #23
 8015350:	3a86      	subs	r2, #134	; 0x86
 8015352:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8015356:	ee07 3a90 	vmov	s15, r3
 801535a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801535e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015400 <__ieee754_rem_pio2f+0x24c>
 8015362:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015366:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801536a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801536e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015372:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015376:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801537a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801537e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015382:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015386:	eef5 7a40 	vcmp.f32	s15, #0.0
 801538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801538e:	edcd 7a05 	vstr	s15, [sp, #20]
 8015392:	d11a      	bne.n	80153ca <__ieee754_rem_pio2f+0x216>
 8015394:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801539c:	bf0c      	ite	eq
 801539e:	2301      	moveq	r3, #1
 80153a0:	2302      	movne	r3, #2
 80153a2:	4918      	ldr	r1, [pc, #96]	; (8015404 <__ieee754_rem_pio2f+0x250>)
 80153a4:	9101      	str	r1, [sp, #4]
 80153a6:	2102      	movs	r1, #2
 80153a8:	9100      	str	r1, [sp, #0]
 80153aa:	a803      	add	r0, sp, #12
 80153ac:	4629      	mov	r1, r5
 80153ae:	f000 f897 	bl	80154e0 <__kernel_rem_pio2f>
 80153b2:	2e00      	cmp	r6, #0
 80153b4:	f6bf af2f 	bge.w	8015216 <__ieee754_rem_pio2f+0x62>
 80153b8:	edd5 7a00 	vldr	s15, [r5]
 80153bc:	eef1 7a67 	vneg.f32	s15, s15
 80153c0:	edc5 7a00 	vstr	s15, [r5]
 80153c4:	edd5 7a01 	vldr	s15, [r5, #4]
 80153c8:	e77a      	b.n	80152c0 <__ieee754_rem_pio2f+0x10c>
 80153ca:	2303      	movs	r3, #3
 80153cc:	e7e9      	b.n	80153a2 <__ieee754_rem_pio2f+0x1ee>
 80153ce:	bf00      	nop
 80153d0:	3f490fd8 	.word	0x3f490fd8
 80153d4:	4016cbe3 	.word	0x4016cbe3
 80153d8:	3fc90f80 	.word	0x3fc90f80
 80153dc:	3fc90fd0 	.word	0x3fc90fd0
 80153e0:	37354400 	.word	0x37354400
 80153e4:	37354443 	.word	0x37354443
 80153e8:	2e85a308 	.word	0x2e85a308
 80153ec:	43490f80 	.word	0x43490f80
 80153f0:	3f22f984 	.word	0x3f22f984
 80153f4:	0801635c 	.word	0x0801635c
 80153f8:	2e85a300 	.word	0x2e85a300
 80153fc:	248d3132 	.word	0x248d3132
 8015400:	43800000 	.word	0x43800000
 8015404:	080163dc 	.word	0x080163dc

08015408 <__ieee754_sqrtf>:
 8015408:	ee07 0a90 	vmov	s15, r0
 801540c:	eef1 7ae7 	vsqrt.f32	s15, s15
 8015410:	ee17 0a90 	vmov	r0, s15
 8015414:	4770      	bx	lr
	...

08015418 <__kernel_cosf>:
 8015418:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801541c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015420:	ee05 0a10 	vmov	s10, r0
 8015424:	ee07 1a10 	vmov	s14, r1
 8015428:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801542c:	da05      	bge.n	801543a <__kernel_cosf+0x22>
 801542e:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 8015432:	ee17 2a90 	vmov	r2, s15
 8015436:	2a00      	cmp	r2, #0
 8015438:	d03f      	beq.n	80154ba <__kernel_cosf+0xa2>
 801543a:	ee65 5a05 	vmul.f32	s11, s10, s10
 801543e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015442:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8015446:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801544a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80154c0 <__kernel_cosf+0xa8>
 801544e:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80154c4 <__kernel_cosf+0xac>
 8015452:	4a1d      	ldr	r2, [pc, #116]	; (80154c8 <__kernel_cosf+0xb0>)
 8015454:	eee5 6a85 	vfma.f32	s13, s11, s10
 8015458:	4293      	cmp	r3, r2
 801545a:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 80154cc <__kernel_cosf+0xb4>
 801545e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015462:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80154d0 <__kernel_cosf+0xb8>
 8015466:	eee5 6a25 	vfma.f32	s13, s10, s11
 801546a:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 80154d4 <__kernel_cosf+0xbc>
 801546e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015472:	eddf 6a19 	vldr	s13, [pc, #100]	; 80154d8 <__kernel_cosf+0xc0>
 8015476:	eee5 6a25 	vfma.f32	s13, s10, s11
 801547a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801547e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015482:	eef0 5a47 	vmov.f32	s11, s14
 8015486:	dc06      	bgt.n	8015496 <__kernel_cosf+0x7e>
 8015488:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801548c:	ee76 7a47 	vsub.f32	s15, s12, s14
 8015490:	ee17 0a90 	vmov	r0, s15
 8015494:	4770      	bx	lr
 8015496:	4a11      	ldr	r2, [pc, #68]	; (80154dc <__kernel_cosf+0xc4>)
 8015498:	4293      	cmp	r3, r2
 801549a:	bfda      	itte	le
 801549c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80154a0:	ee06 3a90 	vmovle	s13, r3
 80154a4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80154a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80154ac:	ee36 7a66 	vsub.f32	s14, s12, s13
 80154b0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80154b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154b8:	e7ea      	b.n	8015490 <__kernel_cosf+0x78>
 80154ba:	eef0 7a46 	vmov.f32	s15, s12
 80154be:	e7e7      	b.n	8015490 <__kernel_cosf+0x78>
 80154c0:	310f74f6 	.word	0x310f74f6
 80154c4:	ad47d74e 	.word	0xad47d74e
 80154c8:	3e999999 	.word	0x3e999999
 80154cc:	b493f27c 	.word	0xb493f27c
 80154d0:	37d00d01 	.word	0x37d00d01
 80154d4:	bab60b61 	.word	0xbab60b61
 80154d8:	3d2aaaab 	.word	0x3d2aaaab
 80154dc:	3f480000 	.word	0x3f480000

080154e0 <__kernel_rem_pio2f>:
 80154e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e4:	ed2d 8b04 	vpush	{d8-d9}
 80154e8:	b0d7      	sub	sp, #348	; 0x15c
 80154ea:	4688      	mov	r8, r1
 80154ec:	9301      	str	r3, [sp, #4]
 80154ee:	9964      	ldr	r1, [sp, #400]	; 0x190
 80154f0:	4bd2      	ldr	r3, [pc, #840]	; (801583c <__kernel_rem_pio2f+0x35c>)
 80154f2:	9002      	str	r0, [sp, #8]
 80154f4:	f853 b021 	ldr.w	fp, [r3, r1, lsl #2]
 80154f8:	9b01      	ldr	r3, [sp, #4]
 80154fa:	9c65      	ldr	r4, [sp, #404]	; 0x194
 80154fc:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 801584c <__kernel_rem_pio2f+0x36c>
 8015500:	3b01      	subs	r3, #1
 8015502:	1ed1      	subs	r1, r2, #3
 8015504:	2008      	movs	r0, #8
 8015506:	fb91 f1f0 	sdiv	r1, r1, r0
 801550a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801550e:	1c4d      	adds	r5, r1, #1
 8015510:	1ace      	subs	r6, r1, r3
 8015512:	a81a      	add	r0, sp, #104	; 0x68
 8015514:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8015518:	eb0b 0703 	add.w	r7, fp, r3
 801551c:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
 8015520:	4686      	mov	lr, r0
 8015522:	2200      	movs	r2, #0
 8015524:	42ba      	cmp	r2, r7
 8015526:	dd0f      	ble.n	8015548 <__kernel_rem_pio2f+0x68>
 8015528:	af42      	add	r7, sp, #264	; 0x108
 801552a:	2000      	movs	r0, #0
 801552c:	4558      	cmp	r0, fp
 801552e:	dc27      	bgt.n	8015580 <__kernel_rem_pio2f+0xa0>
 8015530:	e9dd 2601 	ldrd	r2, r6, [sp, #4]
 8015534:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8015538:	4402      	add	r2, r0
 801553a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801553e:	eddf 7ac3 	vldr	s15, [pc, #780]	; 801584c <__kernel_rem_pio2f+0x36c>
 8015542:	f04f 0c00 	mov.w	ip, #0
 8015546:	e015      	b.n	8015574 <__kernel_rem_pio2f+0x94>
 8015548:	42d6      	cmn	r6, r2
 801554a:	bf5d      	ittte	pl
 801554c:	f85c 0022 	ldrpl.w	r0, [ip, r2, lsl #2]
 8015550:	ee07 0a90 	vmovpl	s15, r0
 8015554:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8015558:	eef0 7a47 	vmovmi.f32	s15, s14
 801555c:	ecee 7a01 	vstmia	lr!, {s15}
 8015560:	3201      	adds	r2, #1
 8015562:	e7df      	b.n	8015524 <__kernel_rem_pio2f+0x44>
 8015564:	ecf6 6a01 	vldmia	r6!, {s13}
 8015568:	ed32 7a01 	vldmdb	r2!, {s14}
 801556c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015570:	f10c 0c01 	add.w	ip, ip, #1
 8015574:	459c      	cmp	ip, r3
 8015576:	ddf5      	ble.n	8015564 <__kernel_rem_pio2f+0x84>
 8015578:	ece7 7a01 	vstmia	r7!, {s15}
 801557c:	3001      	adds	r0, #1
 801557e:	e7d5      	b.n	801552c <__kernel_rem_pio2f+0x4c>
 8015580:	aa06      	add	r2, sp, #24
 8015582:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 8015586:	9204      	str	r2, [sp, #16]
 8015588:	eddf 8aad 	vldr	s17, [pc, #692]	; 8015840 <__kernel_rem_pio2f+0x360>
 801558c:	ed9f 9aad 	vldr	s18, [pc, #692]	; 8015844 <__kernel_rem_pio2f+0x364>
 8015590:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 8015594:	9203      	str	r2, [sp, #12]
 8015596:	465f      	mov	r7, fp
 8015598:	aa56      	add	r2, sp, #344	; 0x158
 801559a:	f107 4980 	add.w	r9, r7, #1073741824	; 0x40000000
 801559e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80155a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80155a6:	ed52 7a14 	vldr	s15, [r2, #-80]	; 0xffffffb0
 80155aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80155ae:	aa56      	add	r2, sp, #344	; 0x158
 80155b0:	eb02 0109 	add.w	r1, r2, r9
 80155b4:	394c      	subs	r1, #76	; 0x4c
 80155b6:	2200      	movs	r2, #0
 80155b8:	1ab8      	subs	r0, r7, r2
 80155ba:	2800      	cmp	r0, #0
 80155bc:	dc54      	bgt.n	8015668 <__kernel_rem_pio2f+0x188>
 80155be:	4629      	mov	r1, r5
 80155c0:	ee17 0a90 	vmov	r0, s15
 80155c4:	9305      	str	r3, [sp, #20]
 80155c6:	f000 fd1f 	bl	8016008 <scalbnf>
 80155ca:	ee08 0a10 	vmov	s16, r0
 80155ce:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 80155d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80155d6:	ee17 0a90 	vmov	r0, s15
 80155da:	f000 fcd1 	bl	8015f80 <floorf>
 80155de:	ee07 0a10 	vmov	s14, r0
 80155e2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80155e6:	eea7 8a67 	vfms.f32	s16, s14, s15
 80155ea:	2d00      	cmp	r5, #0
 80155ec:	9b05      	ldr	r3, [sp, #20]
 80155ee:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80155f2:	ee17 aa90 	vmov	sl, s15
 80155f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155fa:	ee38 8a67 	vsub.f32	s16, s16, s15
 80155fe:	dd48      	ble.n	8015692 <__kernel_rem_pio2f+0x1b2>
 8015600:	1e79      	subs	r1, r7, #1
 8015602:	aa06      	add	r2, sp, #24
 8015604:	f1c5 0008 	rsb	r0, r5, #8
 8015608:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801560c:	fa46 f200 	asr.w	r2, r6, r0
 8015610:	4492      	add	sl, r2
 8015612:	4082      	lsls	r2, r0
 8015614:	1ab6      	subs	r6, r6, r2
 8015616:	aa06      	add	r2, sp, #24
 8015618:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
 801561c:	f1c5 0207 	rsb	r2, r5, #7
 8015620:	4116      	asrs	r6, r2
 8015622:	2e00      	cmp	r6, #0
 8015624:	dd44      	ble.n	80156b0 <__kernel_rem_pio2f+0x1d0>
 8015626:	2100      	movs	r1, #0
 8015628:	f10a 0a01 	add.w	sl, sl, #1
 801562c:	4608      	mov	r0, r1
 801562e:	428f      	cmp	r7, r1
 8015630:	dc70      	bgt.n	8015714 <__kernel_rem_pio2f+0x234>
 8015632:	2d00      	cmp	r5, #0
 8015634:	dd05      	ble.n	8015642 <__kernel_rem_pio2f+0x162>
 8015636:	2d01      	cmp	r5, #1
 8015638:	f000 8081 	beq.w	801573e <__kernel_rem_pio2f+0x25e>
 801563c:	2d02      	cmp	r5, #2
 801563e:	f000 8088 	beq.w	8015752 <__kernel_rem_pio2f+0x272>
 8015642:	2e02      	cmp	r6, #2
 8015644:	d134      	bne.n	80156b0 <__kernel_rem_pio2f+0x1d0>
 8015646:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801564a:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801564e:	b378      	cbz	r0, 80156b0 <__kernel_rem_pio2f+0x1d0>
 8015650:	ee17 0a90 	vmov	r0, s15
 8015654:	4629      	mov	r1, r5
 8015656:	9305      	str	r3, [sp, #20]
 8015658:	f000 fcd6 	bl	8016008 <scalbnf>
 801565c:	ee07 0a90 	vmov	s15, r0
 8015660:	9b05      	ldr	r3, [sp, #20]
 8015662:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015666:	e023      	b.n	80156b0 <__kernel_rem_pio2f+0x1d0>
 8015668:	ee27 7aa8 	vmul.f32	s14, s15, s17
 801566c:	ac06      	add	r4, sp, #24
 801566e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015676:	eee7 7a49 	vfms.f32	s15, s14, s18
 801567a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801567e:	ee17 0a90 	vmov	r0, s15
 8015682:	ed71 7a01 	vldmdb	r1!, {s15}
 8015686:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 801568a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801568e:	3201      	adds	r2, #1
 8015690:	e792      	b.n	80155b8 <__kernel_rem_pio2f+0xd8>
 8015692:	d105      	bne.n	80156a0 <__kernel_rem_pio2f+0x1c0>
 8015694:	1e7a      	subs	r2, r7, #1
 8015696:	a906      	add	r1, sp, #24
 8015698:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801569c:	1236      	asrs	r6, r6, #8
 801569e:	e7c0      	b.n	8015622 <__kernel_rem_pio2f+0x142>
 80156a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80156a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80156a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ac:	da30      	bge.n	8015710 <__kernel_rem_pio2f+0x230>
 80156ae:	2600      	movs	r6, #0
 80156b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80156b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b8:	f040 8098 	bne.w	80157ec <__kernel_rem_pio2f+0x30c>
 80156bc:	1e7c      	subs	r4, r7, #1
 80156be:	4622      	mov	r2, r4
 80156c0:	2000      	movs	r0, #0
 80156c2:	455a      	cmp	r2, fp
 80156c4:	da4c      	bge.n	8015760 <__kernel_rem_pio2f+0x280>
 80156c6:	2800      	cmp	r0, #0
 80156c8:	f000 8083 	beq.w	80157d2 <__kernel_rem_pio2f+0x2f2>
 80156cc:	ab06      	add	r3, sp, #24
 80156ce:	3d08      	subs	r5, #8
 80156d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	f000 8087 	beq.w	80157e8 <__kernel_rem_pio2f+0x308>
 80156da:	4629      	mov	r1, r5
 80156dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80156e0:	f000 fc92 	bl	8016008 <scalbnf>
 80156e4:	00a3      	lsls	r3, r4, #2
 80156e6:	aa42      	add	r2, sp, #264	; 0x108
 80156e8:	441a      	add	r2, r3
 80156ea:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015840 <__kernel_rem_pio2f+0x360>
 80156ee:	ee07 0a10 	vmov	s14, r0
 80156f2:	4621      	mov	r1, r4
 80156f4:	1d10      	adds	r0, r2, #4
 80156f6:	2900      	cmp	r1, #0
 80156f8:	f280 80b3 	bge.w	8015862 <__kernel_rem_pio2f+0x382>
 80156fc:	2000      	movs	r0, #0
 80156fe:	1a21      	subs	r1, r4, r0
 8015700:	2900      	cmp	r1, #0
 8015702:	f2c0 80d3 	blt.w	80158ac <__kernel_rem_pio2f+0x3cc>
 8015706:	4d50      	ldr	r5, [pc, #320]	; (8015848 <__kernel_rem_pio2f+0x368>)
 8015708:	eddf 7a50 	vldr	s15, [pc, #320]	; 801584c <__kernel_rem_pio2f+0x36c>
 801570c:	2100      	movs	r1, #0
 801570e:	e0c1      	b.n	8015894 <__kernel_rem_pio2f+0x3b4>
 8015710:	2602      	movs	r6, #2
 8015712:	e788      	b.n	8015626 <__kernel_rem_pio2f+0x146>
 8015714:	aa06      	add	r2, sp, #24
 8015716:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801571a:	b948      	cbnz	r0, 8015730 <__kernel_rem_pio2f+0x250>
 801571c:	b12a      	cbz	r2, 801572a <__kernel_rem_pio2f+0x24a>
 801571e:	a806      	add	r0, sp, #24
 8015720:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015724:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 8015728:	2201      	movs	r2, #1
 801572a:	3101      	adds	r1, #1
 801572c:	4610      	mov	r0, r2
 801572e:	e77e      	b.n	801562e <__kernel_rem_pio2f+0x14e>
 8015730:	ac06      	add	r4, sp, #24
 8015732:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8015736:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801573a:	4602      	mov	r2, r0
 801573c:	e7f5      	b.n	801572a <__kernel_rem_pio2f+0x24a>
 801573e:	1e79      	subs	r1, r7, #1
 8015740:	aa06      	add	r2, sp, #24
 8015742:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8015746:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801574a:	ac06      	add	r4, sp, #24
 801574c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 8015750:	e777      	b.n	8015642 <__kernel_rem_pio2f+0x162>
 8015752:	1e79      	subs	r1, r7, #1
 8015754:	aa06      	add	r2, sp, #24
 8015756:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801575a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801575e:	e7f4      	b.n	801574a <__kernel_rem_pio2f+0x26a>
 8015760:	a906      	add	r1, sp, #24
 8015762:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015766:	3a01      	subs	r2, #1
 8015768:	4308      	orrs	r0, r1
 801576a:	e7aa      	b.n	80156c2 <__kernel_rem_pio2f+0x1e2>
 801576c:	3601      	adds	r6, #1
 801576e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015772:	2900      	cmp	r1, #0
 8015774:	d0fa      	beq.n	801576c <__kernel_rem_pio2f+0x28c>
 8015776:	9a01      	ldr	r2, [sp, #4]
 8015778:	19d0      	adds	r0, r2, r7
 801577a:	0080      	lsls	r0, r0, #2
 801577c:	aa1a      	add	r2, sp, #104	; 0x68
 801577e:	1884      	adds	r4, r0, r2
 8015780:	1c79      	adds	r1, r7, #1
 8015782:	f109 0904 	add.w	r9, r9, #4
 8015786:	2200      	movs	r2, #0
 8015788:	4437      	add	r7, r6
 801578a:	f104 0a04 	add.w	sl, r4, #4
 801578e:	428f      	cmp	r7, r1
 8015790:	f6ff af02 	blt.w	8015598 <__kernel_rem_pio2f+0xb8>
 8015794:	ac1a      	add	r4, sp, #104	; 0x68
 8015796:	1816      	adds	r6, r2, r0
 8015798:	4426      	add	r6, r4
 801579a:	9c03      	ldr	r4, [sp, #12]
 801579c:	f8dd c008 	ldr.w	ip, [sp, #8]
 80157a0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80157a4:	9405      	str	r4, [sp, #20]
 80157a6:	ee07 4a90 	vmov	s15, r4
 80157aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157ae:	eb0a 0e02 	add.w	lr, sl, r2
 80157b2:	edc6 7a00 	vstr	s15, [r6]
 80157b6:	eddf 7a25 	vldr	s15, [pc, #148]	; 801584c <__kernel_rem_pio2f+0x36c>
 80157ba:	2600      	movs	r6, #0
 80157bc:	429e      	cmp	r6, r3
 80157be:	dd0b      	ble.n	80157d8 <__kernel_rem_pio2f+0x2f8>
 80157c0:	eb02 0609 	add.w	r6, r2, r9
 80157c4:	ac42      	add	r4, sp, #264	; 0x108
 80157c6:	4426      	add	r6, r4
 80157c8:	edc6 7a01 	vstr	s15, [r6, #4]
 80157cc:	3101      	adds	r1, #1
 80157ce:	3204      	adds	r2, #4
 80157d0:	e7dd      	b.n	801578e <__kernel_rem_pio2f+0x2ae>
 80157d2:	9a04      	ldr	r2, [sp, #16]
 80157d4:	2601      	movs	r6, #1
 80157d6:	e7ca      	b.n	801576e <__kernel_rem_pio2f+0x28e>
 80157d8:	ecfc 6a01 	vldmia	ip!, {s13}
 80157dc:	ed3e 7a01 	vldmdb	lr!, {s14}
 80157e0:	3601      	adds	r6, #1
 80157e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80157e6:	e7e9      	b.n	80157bc <__kernel_rem_pio2f+0x2dc>
 80157e8:	3c01      	subs	r4, #1
 80157ea:	e76f      	b.n	80156cc <__kernel_rem_pio2f+0x1ec>
 80157ec:	4269      	negs	r1, r5
 80157ee:	ee18 0a10 	vmov	r0, s16
 80157f2:	f000 fc09 	bl	8016008 <scalbnf>
 80157f6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8015844 <__kernel_rem_pio2f+0x364>
 80157fa:	ee07 0a10 	vmov	s14, r0
 80157fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015806:	db23      	blt.n	8015850 <__kernel_rem_pio2f+0x370>
 8015808:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015840 <__kernel_rem_pio2f+0x360>
 801580c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015810:	aa06      	add	r2, sp, #24
 8015812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015816:	1c7c      	adds	r4, r7, #1
 8015818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801581c:	3508      	adds	r5, #8
 801581e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015826:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801582a:	ee17 3a10 	vmov	r3, s14
 801582e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8015832:	ee17 3a90 	vmov	r3, s15
 8015836:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801583a:	e74e      	b.n	80156da <__kernel_rem_pio2f+0x1fa>
 801583c:	08016720 	.word	0x08016720
 8015840:	3b800000 	.word	0x3b800000
 8015844:	43800000 	.word	0x43800000
 8015848:	080166f4 	.word	0x080166f4
 801584c:	00000000 	.word	0x00000000
 8015850:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015854:	aa06      	add	r2, sp, #24
 8015856:	ee17 3a10 	vmov	r3, s14
 801585a:	463c      	mov	r4, r7
 801585c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8015860:	e73b      	b.n	80156da <__kernel_rem_pio2f+0x1fa>
 8015862:	ad06      	add	r5, sp, #24
 8015864:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015868:	9501      	str	r5, [sp, #4]
 801586a:	ee07 5a90 	vmov	s15, r5
 801586e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015872:	3901      	subs	r1, #1
 8015874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015878:	ee27 7a26 	vmul.f32	s14, s14, s13
 801587c:	ed60 7a01 	vstmdb	r0!, {s15}
 8015880:	e739      	b.n	80156f6 <__kernel_rem_pio2f+0x216>
 8015882:	eb02 0781 	add.w	r7, r2, r1, lsl #2
 8015886:	ecf5 6a01 	vldmia	r5!, {s13}
 801588a:	ed97 7a00 	vldr	s14, [r7]
 801588e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015892:	3101      	adds	r1, #1
 8015894:	4559      	cmp	r1, fp
 8015896:	dc01      	bgt.n	801589c <__kernel_rem_pio2f+0x3bc>
 8015898:	4288      	cmp	r0, r1
 801589a:	daf2      	bge.n	8015882 <__kernel_rem_pio2f+0x3a2>
 801589c:	a956      	add	r1, sp, #344	; 0x158
 801589e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80158a2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80158a6:	3001      	adds	r0, #1
 80158a8:	3a04      	subs	r2, #4
 80158aa:	e728      	b.n	80156fe <__kernel_rem_pio2f+0x21e>
 80158ac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80158ae:	2a03      	cmp	r2, #3
 80158b0:	d846      	bhi.n	8015940 <__kernel_rem_pio2f+0x460>
 80158b2:	e8df f002 	tbb	[pc, r2]
 80158b6:	1e39      	.short	0x1e39
 80158b8:	021e      	.short	0x021e
 80158ba:	aa56      	add	r2, sp, #344	; 0x158
 80158bc:	4413      	add	r3, r2
 80158be:	3b9c      	subs	r3, #156	; 0x9c
 80158c0:	461a      	mov	r2, r3
 80158c2:	4621      	mov	r1, r4
 80158c4:	2900      	cmp	r1, #0
 80158c6:	dc57      	bgt.n	8015978 <__kernel_rem_pio2f+0x498>
 80158c8:	461a      	mov	r2, r3
 80158ca:	4621      	mov	r1, r4
 80158cc:	2901      	cmp	r1, #1
 80158ce:	dc63      	bgt.n	8015998 <__kernel_rem_pio2f+0x4b8>
 80158d0:	ed5f 7a22 	vldr	s15, [pc, #-136]	; 801584c <__kernel_rem_pio2f+0x36c>
 80158d4:	2c01      	cmp	r4, #1
 80158d6:	dc6f      	bgt.n	80159b8 <__kernel_rem_pio2f+0x4d8>
 80158d8:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80158dc:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80158e0:	2e00      	cmp	r6, #0
 80158e2:	d16f      	bne.n	80159c4 <__kernel_rem_pio2f+0x4e4>
 80158e4:	edc8 6a00 	vstr	s13, [r8]
 80158e8:	ed88 7a01 	vstr	s14, [r8, #4]
 80158ec:	edc8 7a02 	vstr	s15, [r8, #8]
 80158f0:	e026      	b.n	8015940 <__kernel_rem_pio2f+0x460>
 80158f2:	aa56      	add	r2, sp, #344	; 0x158
 80158f4:	4413      	add	r3, r2
 80158f6:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 801584c <__kernel_rem_pio2f+0x36c>
 80158fa:	3b9c      	subs	r3, #156	; 0x9c
 80158fc:	4622      	mov	r2, r4
 80158fe:	2a00      	cmp	r2, #0
 8015900:	da2b      	bge.n	801595a <__kernel_rem_pio2f+0x47a>
 8015902:	b386      	cbz	r6, 8015966 <__kernel_rem_pio2f+0x486>
 8015904:	eef1 7a47 	vneg.f32	s15, s14
 8015908:	edc8 7a00 	vstr	s15, [r8]
 801590c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8015910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015914:	aa2f      	add	r2, sp, #188	; 0xbc
 8015916:	2301      	movs	r3, #1
 8015918:	429c      	cmp	r4, r3
 801591a:	da27      	bge.n	801596c <__kernel_rem_pio2f+0x48c>
 801591c:	b10e      	cbz	r6, 8015922 <__kernel_rem_pio2f+0x442>
 801591e:	eef1 7a67 	vneg.f32	s15, s15
 8015922:	edc8 7a01 	vstr	s15, [r8, #4]
 8015926:	e00b      	b.n	8015940 <__kernel_rem_pio2f+0x460>
 8015928:	aa56      	add	r2, sp, #344	; 0x158
 801592a:	4413      	add	r3, r2
 801592c:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 801584c <__kernel_rem_pio2f+0x36c>
 8015930:	3b9c      	subs	r3, #156	; 0x9c
 8015932:	2c00      	cmp	r4, #0
 8015934:	da0b      	bge.n	801594e <__kernel_rem_pio2f+0x46e>
 8015936:	b10e      	cbz	r6, 801593c <__kernel_rem_pio2f+0x45c>
 8015938:	eef1 7a67 	vneg.f32	s15, s15
 801593c:	edc8 7a00 	vstr	s15, [r8]
 8015940:	f00a 0007 	and.w	r0, sl, #7
 8015944:	b057      	add	sp, #348	; 0x15c
 8015946:	ecbd 8b04 	vpop	{d8-d9}
 801594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594e:	ed33 7a01 	vldmdb	r3!, {s14}
 8015952:	3c01      	subs	r4, #1
 8015954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015958:	e7eb      	b.n	8015932 <__kernel_rem_pio2f+0x452>
 801595a:	ed73 7a01 	vldmdb	r3!, {s15}
 801595e:	3a01      	subs	r2, #1
 8015960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015964:	e7cb      	b.n	80158fe <__kernel_rem_pio2f+0x41e>
 8015966:	eef0 7a47 	vmov.f32	s15, s14
 801596a:	e7cd      	b.n	8015908 <__kernel_rem_pio2f+0x428>
 801596c:	ecb2 7a01 	vldmia	r2!, {s14}
 8015970:	3301      	adds	r3, #1
 8015972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015976:	e7cf      	b.n	8015918 <__kernel_rem_pio2f+0x438>
 8015978:	ed52 7a02 	vldr	s15, [r2, #-8]
 801597c:	ed72 6a01 	vldmdb	r2!, {s13}
 8015980:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015984:	3901      	subs	r1, #1
 8015986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801598a:	ed02 7a01 	vstr	s14, [r2, #-4]
 801598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015992:	edc2 7a00 	vstr	s15, [r2]
 8015996:	e795      	b.n	80158c4 <__kernel_rem_pio2f+0x3e4>
 8015998:	ed52 7a02 	vldr	s15, [r2, #-8]
 801599c:	ed72 6a01 	vldmdb	r2!, {s13}
 80159a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80159a4:	3901      	subs	r1, #1
 80159a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80159aa:	ed02 7a01 	vstr	s14, [r2, #-4]
 80159ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80159b2:	edc2 7a00 	vstr	s15, [r2]
 80159b6:	e789      	b.n	80158cc <__kernel_rem_pio2f+0x3ec>
 80159b8:	ed33 7a01 	vldmdb	r3!, {s14}
 80159bc:	3c01      	subs	r4, #1
 80159be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80159c2:	e787      	b.n	80158d4 <__kernel_rem_pio2f+0x3f4>
 80159c4:	eef1 6a66 	vneg.f32	s13, s13
 80159c8:	eeb1 7a47 	vneg.f32	s14, s14
 80159cc:	edc8 6a00 	vstr	s13, [r8]
 80159d0:	ed88 7a01 	vstr	s14, [r8, #4]
 80159d4:	eef1 7a67 	vneg.f32	s15, s15
 80159d8:	e788      	b.n	80158ec <__kernel_rem_pio2f+0x40c>
 80159da:	bf00      	nop

080159dc <__kernel_sinf>:
 80159dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80159e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80159e4:	ee07 0a90 	vmov	s15, r0
 80159e8:	ee06 1a10 	vmov	s12, r1
 80159ec:	da04      	bge.n	80159f8 <__kernel_sinf+0x1c>
 80159ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80159f2:	ee17 3a10 	vmov	r3, s14
 80159f6:	b1e3      	cbz	r3, 8015a32 <__kernel_sinf+0x56>
 80159f8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80159fc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8015a58 <__kernel_sinf+0x7c>
 8015a00:	ed9f 5a16 	vldr	s10, [pc, #88]	; 8015a5c <__kernel_sinf+0x80>
 8015a04:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015a08:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8015a60 <__kernel_sinf+0x84>
 8015a0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015a10:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8015a64 <__kernel_sinf+0x88>
 8015a14:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015a18:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8015a68 <__kernel_sinf+0x8c>
 8015a1c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8015a20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015a24:	b942      	cbnz	r2, 8015a38 <__kernel_sinf+0x5c>
 8015a26:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8015a6c <__kernel_sinf+0x90>
 8015a2a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015a2e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015a32:	ee17 0a90 	vmov	r0, s15
 8015a36:	4770      	bx	lr
 8015a38:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8015a3c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8015a40:	eea6 7a05 	vfma.f32	s14, s12, s10
 8015a44:	ee97 6a26 	vfnms.f32	s12, s14, s13
 8015a48:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015a70 <__kernel_sinf+0x94>
 8015a4c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015a50:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015a54:	e7ed      	b.n	8015a32 <__kernel_sinf+0x56>
 8015a56:	bf00      	nop
 8015a58:	2f2ec9d3 	.word	0x2f2ec9d3
 8015a5c:	b2d72f34 	.word	0xb2d72f34
 8015a60:	3638ef1b 	.word	0x3638ef1b
 8015a64:	b9500d01 	.word	0xb9500d01
 8015a68:	3c088889 	.word	0x3c088889
 8015a6c:	be2aaaab 	.word	0xbe2aaaab
 8015a70:	3e2aaaab 	.word	0x3e2aaaab

08015a74 <__kernel_tanf>:
 8015a74:	ee07 1a10 	vmov	s14, r1
 8015a78:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8015a7c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8015a80:	b510      	push	{r4, lr}
 8015a82:	ee07 0a90 	vmov	s15, r0
 8015a86:	4603      	mov	r3, r0
 8015a88:	da17      	bge.n	8015aba <__kernel_tanf+0x46>
 8015a8a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8015a8e:	ee16 4a90 	vmov	r4, s13
 8015a92:	bb44      	cbnz	r4, 8015ae6 <__kernel_tanf+0x72>
 8015a94:	1c53      	adds	r3, r2, #1
 8015a96:	430b      	orrs	r3, r1
 8015a98:	d10a      	bne.n	8015ab0 <__kernel_tanf+0x3c>
 8015a9a:	f000 fa6d 	bl	8015f78 <fabsf>
 8015a9e:	ee07 0a90 	vmov	s15, r0
 8015aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015aa6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8015aaa:	ee17 0a90 	vmov	r0, s15
 8015aae:	bd10      	pop	{r4, pc}
 8015ab0:	2a01      	cmp	r2, #1
 8015ab2:	d0fa      	beq.n	8015aaa <__kernel_tanf+0x36>
 8015ab4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015ab8:	e7f5      	b.n	8015aa6 <__kernel_tanf+0x32>
 8015aba:	484f      	ldr	r0, [pc, #316]	; (8015bf8 <__kernel_tanf+0x184>)
 8015abc:	4281      	cmp	r1, r0
 8015abe:	dd12      	ble.n	8015ae6 <__kernel_tanf+0x72>
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8015bfc <__kernel_tanf+0x188>
 8015ac6:	bfb8      	it	lt
 8015ac8:	eef1 7a67 	vneglt.f32	s15, s15
 8015acc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015ad0:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8015c00 <__kernel_tanf+0x18c>
 8015ad4:	bfb8      	it	lt
 8015ad6:	eeb1 7a47 	vneglt.f32	s14, s14
 8015ada:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ae2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015c04 <__kernel_tanf+0x190>
 8015ae6:	eddf 5a48 	vldr	s11, [pc, #288]	; 8015c08 <__kernel_tanf+0x194>
 8015aea:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8015c0c <__kernel_tanf+0x198>
 8015aee:	eddf 4a48 	vldr	s9, [pc, #288]	; 8015c10 <__kernel_tanf+0x19c>
 8015af2:	4841      	ldr	r0, [pc, #260]	; (8015bf8 <__kernel_tanf+0x184>)
 8015af4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015af8:	4281      	cmp	r1, r0
 8015afa:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015afe:	ee27 4a86 	vmul.f32	s8, s15, s12
 8015b02:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015b06:	eddf 5a43 	vldr	s11, [pc, #268]	; 8015c14 <__kernel_tanf+0x1a0>
 8015b0a:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015b0e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8015c18 <__kernel_tanf+0x1a4>
 8015b12:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8015b16:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015c1c <__kernel_tanf+0x1a8>
 8015b1a:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015b1e:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8015c20 <__kernel_tanf+0x1ac>
 8015b22:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8015b26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8015c24 <__kernel_tanf+0x1b0>
 8015b2a:	eee6 5aa4 	vfma.f32	s11, s13, s9
 8015b2e:	eddf 4a3e 	vldr	s9, [pc, #248]	; 8015c28 <__kernel_tanf+0x1b4>
 8015b32:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8015b36:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8015c2c <__kernel_tanf+0x1b8>
 8015b3a:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8015b3e:	eddf 4a3c 	vldr	s9, [pc, #240]	; 8015c30 <__kernel_tanf+0x1bc>
 8015b42:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8015b46:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8015c34 <__kernel_tanf+0x1c0>
 8015b4a:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8015b4e:	eef0 6a65 	vmov.f32	s13, s11
 8015b52:	eee5 6a06 	vfma.f32	s13, s10, s12
 8015b56:	eef0 5a47 	vmov.f32	s11, s14
 8015b5a:	eee6 5a84 	vfma.f32	s11, s13, s8
 8015b5e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8015c38 <__kernel_tanf+0x1c4>
 8015b62:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015b66:	eea4 7a26 	vfma.f32	s14, s8, s13
 8015b6a:	ee37 6a87 	vadd.f32	s12, s15, s14
 8015b6e:	dd1d      	ble.n	8015bac <__kernel_tanf+0x138>
 8015b70:	ee06 2a90 	vmov	s13, r2
 8015b74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015b78:	ee26 5a06 	vmul.f32	s10, s12, s12
 8015b7c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8015b80:	179b      	asrs	r3, r3, #30
 8015b82:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8015b86:	f003 0302 	and.w	r3, r3, #2
 8015b8a:	f1c3 0301 	rsb	r3, r3, #1
 8015b8e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8015b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015b96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015b9a:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8015b9e:	ee07 3a90 	vmov	s15, r3
 8015ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015baa:	e77e      	b.n	8015aaa <__kernel_tanf+0x36>
 8015bac:	2a01      	cmp	r2, #1
 8015bae:	d01f      	beq.n	8015bf0 <__kernel_tanf+0x17c>
 8015bb0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8015bb4:	ee86 5a86 	vdiv.f32	s10, s13, s12
 8015bb8:	4b20      	ldr	r3, [pc, #128]	; (8015c3c <__kernel_tanf+0x1c8>)
 8015bba:	ee16 2a10 	vmov	r2, s12
 8015bbe:	401a      	ands	r2, r3
 8015bc0:	ee05 2a90 	vmov	s11, r2
 8015bc4:	ee15 2a10 	vmov	r2, s10
 8015bc8:	4013      	ands	r3, r2
 8015bca:	ee06 3a90 	vmov	s13, r3
 8015bce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015bd2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8015bd6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8015bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015bde:	eef0 7a46 	vmov.f32	s15, s12
 8015be2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015be6:	eee7 6a85 	vfma.f32	s13, s15, s10
 8015bea:	eef0 7a66 	vmov.f32	s15, s13
 8015bee:	e75c      	b.n	8015aaa <__kernel_tanf+0x36>
 8015bf0:	eef0 7a46 	vmov.f32	s15, s12
 8015bf4:	e759      	b.n	8015aaa <__kernel_tanf+0x36>
 8015bf6:	bf00      	nop
 8015bf8:	3f2ca13f 	.word	0x3f2ca13f
 8015bfc:	3f490fda 	.word	0x3f490fda
 8015c00:	33222168 	.word	0x33222168
 8015c04:	00000000 	.word	0x00000000
 8015c08:	37d95384 	.word	0x37d95384
 8015c0c:	3895c07a 	.word	0x3895c07a
 8015c10:	b79bae5f 	.word	0xb79bae5f
 8015c14:	398137b9 	.word	0x398137b9
 8015c18:	3abede48 	.word	0x3abede48
 8015c1c:	3c11371f 	.word	0x3c11371f
 8015c20:	3d5d0dd1 	.word	0x3d5d0dd1
 8015c24:	38a3f445 	.word	0x38a3f445
 8015c28:	3a1a26c8 	.word	0x3a1a26c8
 8015c2c:	3b6b6916 	.word	0x3b6b6916
 8015c30:	3cb327a4 	.word	0x3cb327a4
 8015c34:	3e088889 	.word	0x3e088889
 8015c38:	3eaaaaab 	.word	0x3eaaaaab
 8015c3c:	fffff000 	.word	0xfffff000

08015c40 <atan>:
 8015c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c44:	4bbc      	ldr	r3, [pc, #752]	; (8015f38 <atan+0x2f8>)
 8015c46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015c4a:	429e      	cmp	r6, r3
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	460d      	mov	r5, r1
 8015c50:	468b      	mov	fp, r1
 8015c52:	dd18      	ble.n	8015c86 <atan+0x46>
 8015c54:	4bb9      	ldr	r3, [pc, #740]	; (8015f3c <atan+0x2fc>)
 8015c56:	429e      	cmp	r6, r3
 8015c58:	dc01      	bgt.n	8015c5e <atan+0x1e>
 8015c5a:	d109      	bne.n	8015c70 <atan+0x30>
 8015c5c:	b140      	cbz	r0, 8015c70 <atan+0x30>
 8015c5e:	4622      	mov	r2, r4
 8015c60:	462b      	mov	r3, r5
 8015c62:	4620      	mov	r0, r4
 8015c64:	4629      	mov	r1, r5
 8015c66:	f7ea fb29 	bl	80002bc <__adddf3>
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	460d      	mov	r5, r1
 8015c6e:	e006      	b.n	8015c7e <atan+0x3e>
 8015c70:	f1bb 0f00 	cmp.w	fp, #0
 8015c74:	f340 8123 	ble.w	8015ebe <atan+0x27e>
 8015c78:	a593      	add	r5, pc, #588	; (adr r5, 8015ec8 <atan+0x288>)
 8015c7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015c7e:	4620      	mov	r0, r4
 8015c80:	4629      	mov	r1, r5
 8015c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c86:	4bae      	ldr	r3, [pc, #696]	; (8015f40 <atan+0x300>)
 8015c88:	429e      	cmp	r6, r3
 8015c8a:	dc11      	bgt.n	8015cb0 <atan+0x70>
 8015c8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015c90:	429e      	cmp	r6, r3
 8015c92:	dc0a      	bgt.n	8015caa <atan+0x6a>
 8015c94:	a38e      	add	r3, pc, #568	; (adr r3, 8015ed0 <atan+0x290>)
 8015c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9a:	f7ea fb0f 	bl	80002bc <__adddf3>
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	4ba8      	ldr	r3, [pc, #672]	; (8015f44 <atan+0x304>)
 8015ca2:	f7ea ff51 	bl	8000b48 <__aeabi_dcmpgt>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d1e9      	bne.n	8015c7e <atan+0x3e>
 8015caa:	f04f 3aff 	mov.w	sl, #4294967295
 8015cae:	e027      	b.n	8015d00 <atan+0xc0>
 8015cb0:	f000 f956 	bl	8015f60 <fabs>
 8015cb4:	4ba4      	ldr	r3, [pc, #656]	; (8015f48 <atan+0x308>)
 8015cb6:	429e      	cmp	r6, r3
 8015cb8:	4604      	mov	r4, r0
 8015cba:	460d      	mov	r5, r1
 8015cbc:	f300 80b8 	bgt.w	8015e30 <atan+0x1f0>
 8015cc0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015cc4:	429e      	cmp	r6, r3
 8015cc6:	f300 809c 	bgt.w	8015e02 <atan+0x1c2>
 8015cca:	4602      	mov	r2, r0
 8015ccc:	460b      	mov	r3, r1
 8015cce:	f7ea faf5 	bl	80002bc <__adddf3>
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	4b9b      	ldr	r3, [pc, #620]	; (8015f44 <atan+0x304>)
 8015cd6:	f7ea faef 	bl	80002b8 <__aeabi_dsub>
 8015cda:	2200      	movs	r2, #0
 8015cdc:	4606      	mov	r6, r0
 8015cde:	460f      	mov	r7, r1
 8015ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	f7ea fae8 	bl	80002bc <__adddf3>
 8015cec:	4602      	mov	r2, r0
 8015cee:	460b      	mov	r3, r1
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	4639      	mov	r1, r7
 8015cf4:	f7ea fdc2 	bl	800087c <__aeabi_ddiv>
 8015cf8:	f04f 0a00 	mov.w	sl, #0
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	460d      	mov	r5, r1
 8015d00:	4622      	mov	r2, r4
 8015d02:	462b      	mov	r3, r5
 8015d04:	4620      	mov	r0, r4
 8015d06:	4629      	mov	r1, r5
 8015d08:	f7ea fc8e 	bl	8000628 <__aeabi_dmul>
 8015d0c:	4602      	mov	r2, r0
 8015d0e:	460b      	mov	r3, r1
 8015d10:	4680      	mov	r8, r0
 8015d12:	4689      	mov	r9, r1
 8015d14:	f7ea fc88 	bl	8000628 <__aeabi_dmul>
 8015d18:	a36f      	add	r3, pc, #444	; (adr r3, 8015ed8 <atan+0x298>)
 8015d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d1e:	4606      	mov	r6, r0
 8015d20:	460f      	mov	r7, r1
 8015d22:	f7ea fc81 	bl	8000628 <__aeabi_dmul>
 8015d26:	a36e      	add	r3, pc, #440	; (adr r3, 8015ee0 <atan+0x2a0>)
 8015d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2c:	f7ea fac6 	bl	80002bc <__adddf3>
 8015d30:	4632      	mov	r2, r6
 8015d32:	463b      	mov	r3, r7
 8015d34:	f7ea fc78 	bl	8000628 <__aeabi_dmul>
 8015d38:	a36b      	add	r3, pc, #428	; (adr r3, 8015ee8 <atan+0x2a8>)
 8015d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d3e:	f7ea fabd 	bl	80002bc <__adddf3>
 8015d42:	4632      	mov	r2, r6
 8015d44:	463b      	mov	r3, r7
 8015d46:	f7ea fc6f 	bl	8000628 <__aeabi_dmul>
 8015d4a:	a369      	add	r3, pc, #420	; (adr r3, 8015ef0 <atan+0x2b0>)
 8015d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d50:	f7ea fab4 	bl	80002bc <__adddf3>
 8015d54:	4632      	mov	r2, r6
 8015d56:	463b      	mov	r3, r7
 8015d58:	f7ea fc66 	bl	8000628 <__aeabi_dmul>
 8015d5c:	a366      	add	r3, pc, #408	; (adr r3, 8015ef8 <atan+0x2b8>)
 8015d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d62:	f7ea faab 	bl	80002bc <__adddf3>
 8015d66:	4632      	mov	r2, r6
 8015d68:	463b      	mov	r3, r7
 8015d6a:	f7ea fc5d 	bl	8000628 <__aeabi_dmul>
 8015d6e:	a364      	add	r3, pc, #400	; (adr r3, 8015f00 <atan+0x2c0>)
 8015d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d74:	f7ea faa2 	bl	80002bc <__adddf3>
 8015d78:	4642      	mov	r2, r8
 8015d7a:	464b      	mov	r3, r9
 8015d7c:	f7ea fc54 	bl	8000628 <__aeabi_dmul>
 8015d80:	a361      	add	r3, pc, #388	; (adr r3, 8015f08 <atan+0x2c8>)
 8015d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d86:	4680      	mov	r8, r0
 8015d88:	4689      	mov	r9, r1
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	f7ea fc4b 	bl	8000628 <__aeabi_dmul>
 8015d92:	a35f      	add	r3, pc, #380	; (adr r3, 8015f10 <atan+0x2d0>)
 8015d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d98:	f7ea fa8e 	bl	80002b8 <__aeabi_dsub>
 8015d9c:	4632      	mov	r2, r6
 8015d9e:	463b      	mov	r3, r7
 8015da0:	f7ea fc42 	bl	8000628 <__aeabi_dmul>
 8015da4:	a35c      	add	r3, pc, #368	; (adr r3, 8015f18 <atan+0x2d8>)
 8015da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015daa:	f7ea fa85 	bl	80002b8 <__aeabi_dsub>
 8015dae:	4632      	mov	r2, r6
 8015db0:	463b      	mov	r3, r7
 8015db2:	f7ea fc39 	bl	8000628 <__aeabi_dmul>
 8015db6:	a35a      	add	r3, pc, #360	; (adr r3, 8015f20 <atan+0x2e0>)
 8015db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dbc:	f7ea fa7c 	bl	80002b8 <__aeabi_dsub>
 8015dc0:	4632      	mov	r2, r6
 8015dc2:	463b      	mov	r3, r7
 8015dc4:	f7ea fc30 	bl	8000628 <__aeabi_dmul>
 8015dc8:	a357      	add	r3, pc, #348	; (adr r3, 8015f28 <atan+0x2e8>)
 8015dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dce:	f7ea fa73 	bl	80002b8 <__aeabi_dsub>
 8015dd2:	4632      	mov	r2, r6
 8015dd4:	463b      	mov	r3, r7
 8015dd6:	f7ea fc27 	bl	8000628 <__aeabi_dmul>
 8015dda:	4602      	mov	r2, r0
 8015ddc:	460b      	mov	r3, r1
 8015dde:	4640      	mov	r0, r8
 8015de0:	4649      	mov	r1, r9
 8015de2:	f7ea fa6b 	bl	80002bc <__adddf3>
 8015de6:	4622      	mov	r2, r4
 8015de8:	462b      	mov	r3, r5
 8015dea:	f7ea fc1d 	bl	8000628 <__aeabi_dmul>
 8015dee:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015df2:	4602      	mov	r2, r0
 8015df4:	460b      	mov	r3, r1
 8015df6:	d144      	bne.n	8015e82 <atan+0x242>
 8015df8:	4620      	mov	r0, r4
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	f7ea fa5c 	bl	80002b8 <__aeabi_dsub>
 8015e00:	e733      	b.n	8015c6a <atan+0x2a>
 8015e02:	2200      	movs	r2, #0
 8015e04:	4b4f      	ldr	r3, [pc, #316]	; (8015f44 <atan+0x304>)
 8015e06:	f7ea fa57 	bl	80002b8 <__aeabi_dsub>
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	4606      	mov	r6, r0
 8015e0e:	460f      	mov	r7, r1
 8015e10:	4b4c      	ldr	r3, [pc, #304]	; (8015f44 <atan+0x304>)
 8015e12:	4620      	mov	r0, r4
 8015e14:	4629      	mov	r1, r5
 8015e16:	f7ea fa51 	bl	80002bc <__adddf3>
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	460b      	mov	r3, r1
 8015e1e:	4630      	mov	r0, r6
 8015e20:	4639      	mov	r1, r7
 8015e22:	f7ea fd2b 	bl	800087c <__aeabi_ddiv>
 8015e26:	f04f 0a01 	mov.w	sl, #1
 8015e2a:	4604      	mov	r4, r0
 8015e2c:	460d      	mov	r5, r1
 8015e2e:	e767      	b.n	8015d00 <atan+0xc0>
 8015e30:	4b46      	ldr	r3, [pc, #280]	; (8015f4c <atan+0x30c>)
 8015e32:	429e      	cmp	r6, r3
 8015e34:	dc1a      	bgt.n	8015e6c <atan+0x22c>
 8015e36:	2200      	movs	r2, #0
 8015e38:	4b45      	ldr	r3, [pc, #276]	; (8015f50 <atan+0x310>)
 8015e3a:	f7ea fa3d 	bl	80002b8 <__aeabi_dsub>
 8015e3e:	2200      	movs	r2, #0
 8015e40:	4606      	mov	r6, r0
 8015e42:	460f      	mov	r7, r1
 8015e44:	4b42      	ldr	r3, [pc, #264]	; (8015f50 <atan+0x310>)
 8015e46:	4620      	mov	r0, r4
 8015e48:	4629      	mov	r1, r5
 8015e4a:	f7ea fbed 	bl	8000628 <__aeabi_dmul>
 8015e4e:	2200      	movs	r2, #0
 8015e50:	4b3c      	ldr	r3, [pc, #240]	; (8015f44 <atan+0x304>)
 8015e52:	f7ea fa33 	bl	80002bc <__adddf3>
 8015e56:	4602      	mov	r2, r0
 8015e58:	460b      	mov	r3, r1
 8015e5a:	4630      	mov	r0, r6
 8015e5c:	4639      	mov	r1, r7
 8015e5e:	f7ea fd0d 	bl	800087c <__aeabi_ddiv>
 8015e62:	f04f 0a02 	mov.w	sl, #2
 8015e66:	4604      	mov	r4, r0
 8015e68:	460d      	mov	r5, r1
 8015e6a:	e749      	b.n	8015d00 <atan+0xc0>
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	460b      	mov	r3, r1
 8015e70:	2000      	movs	r0, #0
 8015e72:	4938      	ldr	r1, [pc, #224]	; (8015f54 <atan+0x314>)
 8015e74:	f7ea fd02 	bl	800087c <__aeabi_ddiv>
 8015e78:	f04f 0a03 	mov.w	sl, #3
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	460d      	mov	r5, r1
 8015e80:	e73e      	b.n	8015d00 <atan+0xc0>
 8015e82:	4b35      	ldr	r3, [pc, #212]	; (8015f58 <atan+0x318>)
 8015e84:	4e35      	ldr	r6, [pc, #212]	; (8015f5c <atan+0x31c>)
 8015e86:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8015e8a:	4456      	add	r6, sl
 8015e8c:	449a      	add	sl, r3
 8015e8e:	e9da 2300 	ldrd	r2, r3, [sl]
 8015e92:	f7ea fa11 	bl	80002b8 <__aeabi_dsub>
 8015e96:	4622      	mov	r2, r4
 8015e98:	462b      	mov	r3, r5
 8015e9a:	f7ea fa0d 	bl	80002b8 <__aeabi_dsub>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	460b      	mov	r3, r1
 8015ea2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015ea6:	f7ea fa07 	bl	80002b8 <__aeabi_dsub>
 8015eaa:	f1bb 0f00 	cmp.w	fp, #0
 8015eae:	4604      	mov	r4, r0
 8015eb0:	460d      	mov	r5, r1
 8015eb2:	f6bf aee4 	bge.w	8015c7e <atan+0x3e>
 8015eb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015eba:	461d      	mov	r5, r3
 8015ebc:	e6df      	b.n	8015c7e <atan+0x3e>
 8015ebe:	a51c      	add	r5, pc, #112	; (adr r5, 8015f30 <atan+0x2f0>)
 8015ec0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015ec4:	e6db      	b.n	8015c7e <atan+0x3e>
 8015ec6:	bf00      	nop
 8015ec8:	54442d18 	.word	0x54442d18
 8015ecc:	3ff921fb 	.word	0x3ff921fb
 8015ed0:	8800759c 	.word	0x8800759c
 8015ed4:	7e37e43c 	.word	0x7e37e43c
 8015ed8:	e322da11 	.word	0xe322da11
 8015edc:	3f90ad3a 	.word	0x3f90ad3a
 8015ee0:	24760deb 	.word	0x24760deb
 8015ee4:	3fa97b4b 	.word	0x3fa97b4b
 8015ee8:	a0d03d51 	.word	0xa0d03d51
 8015eec:	3fb10d66 	.word	0x3fb10d66
 8015ef0:	c54c206e 	.word	0xc54c206e
 8015ef4:	3fb745cd 	.word	0x3fb745cd
 8015ef8:	920083ff 	.word	0x920083ff
 8015efc:	3fc24924 	.word	0x3fc24924
 8015f00:	5555550d 	.word	0x5555550d
 8015f04:	3fd55555 	.word	0x3fd55555
 8015f08:	2c6a6c2f 	.word	0x2c6a6c2f
 8015f0c:	bfa2b444 	.word	0xbfa2b444
 8015f10:	52defd9a 	.word	0x52defd9a
 8015f14:	3fadde2d 	.word	0x3fadde2d
 8015f18:	af749a6d 	.word	0xaf749a6d
 8015f1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8015f20:	fe231671 	.word	0xfe231671
 8015f24:	3fbc71c6 	.word	0x3fbc71c6
 8015f28:	9998ebc4 	.word	0x9998ebc4
 8015f2c:	3fc99999 	.word	0x3fc99999
 8015f30:	54442d18 	.word	0x54442d18
 8015f34:	bff921fb 	.word	0xbff921fb
 8015f38:	440fffff 	.word	0x440fffff
 8015f3c:	7ff00000 	.word	0x7ff00000
 8015f40:	3fdbffff 	.word	0x3fdbffff
 8015f44:	3ff00000 	.word	0x3ff00000
 8015f48:	3ff2ffff 	.word	0x3ff2ffff
 8015f4c:	40037fff 	.word	0x40037fff
 8015f50:	3ff80000 	.word	0x3ff80000
 8015f54:	bff00000 	.word	0xbff00000
 8015f58:	08016750 	.word	0x08016750
 8015f5c:	08016730 	.word	0x08016730

08015f60 <fabs>:
 8015f60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f64:	4619      	mov	r1, r3
 8015f66:	4770      	bx	lr

08015f68 <matherr>:
 8015f68:	2000      	movs	r0, #0
 8015f6a:	4770      	bx	lr

08015f6c <nan>:
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	4901      	ldr	r1, [pc, #4]	; (8015f74 <nan+0x8>)
 8015f70:	4770      	bx	lr
 8015f72:	bf00      	nop
 8015f74:	7ff80000 	.word	0x7ff80000

08015f78 <fabsf>:
 8015f78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015f7c:	4770      	bx	lr
	...

08015f80 <floorf>:
 8015f80:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8015f84:	0dca      	lsrs	r2, r1, #23
 8015f86:	3a7f      	subs	r2, #127	; 0x7f
 8015f88:	2a16      	cmp	r2, #22
 8015f8a:	ee07 0a90 	vmov	s15, r0
 8015f8e:	4603      	mov	r3, r0
 8015f90:	dc2a      	bgt.n	8015fe8 <floorf+0x68>
 8015f92:	2a00      	cmp	r2, #0
 8015f94:	da11      	bge.n	8015fba <floorf+0x3a>
 8015f96:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8015ffc <floorf+0x7c>
 8015f9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa6:	dd05      	ble.n	8015fb4 <floorf+0x34>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	da25      	bge.n	8015ff8 <floorf+0x78>
 8015fac:	4a14      	ldr	r2, [pc, #80]	; (8016000 <floorf+0x80>)
 8015fae:	2900      	cmp	r1, #0
 8015fb0:	bf18      	it	ne
 8015fb2:	4613      	movne	r3, r2
 8015fb4:	ee07 3a90 	vmov	s15, r3
 8015fb8:	e01b      	b.n	8015ff2 <floorf+0x72>
 8015fba:	4912      	ldr	r1, [pc, #72]	; (8016004 <floorf+0x84>)
 8015fbc:	4111      	asrs	r1, r2
 8015fbe:	4208      	tst	r0, r1
 8015fc0:	d017      	beq.n	8015ff2 <floorf+0x72>
 8015fc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8015ffc <floorf+0x7c>
 8015fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd2:	ddef      	ble.n	8015fb4 <floorf+0x34>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	bfbe      	ittt	lt
 8015fd8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8015fdc:	fa40 f202 	asrlt.w	r2, r0, r2
 8015fe0:	189b      	addlt	r3, r3, r2
 8015fe2:	ea23 0301 	bic.w	r3, r3, r1
 8015fe6:	e7e5      	b.n	8015fb4 <floorf+0x34>
 8015fe8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015fec:	d301      	bcc.n	8015ff2 <floorf+0x72>
 8015fee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015ff2:	ee17 0a90 	vmov	r0, s15
 8015ff6:	4770      	bx	lr
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	e7db      	b.n	8015fb4 <floorf+0x34>
 8015ffc:	7149f2ca 	.word	0x7149f2ca
 8016000:	bf800000 	.word	0xbf800000
 8016004:	007fffff 	.word	0x007fffff

08016008 <scalbnf>:
 8016008:	b508      	push	{r3, lr}
 801600a:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 801600e:	ed2d 8b02 	vpush	{d8}
 8016012:	ee07 0a90 	vmov	s15, r0
 8016016:	4602      	mov	r2, r0
 8016018:	d004      	beq.n	8016024 <scalbnf+0x1c>
 801601a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801601e:	d306      	bcc.n	801602e <scalbnf+0x26>
 8016020:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016024:	ecbd 8b02 	vpop	{d8}
 8016028:	ee17 0a90 	vmov	r0, s15
 801602c:	bd08      	pop	{r3, pc}
 801602e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016032:	d220      	bcs.n	8016076 <scalbnf+0x6e>
 8016034:	4b1f      	ldr	r3, [pc, #124]	; (80160b4 <scalbnf+0xac>)
 8016036:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80160b8 <scalbnf+0xb0>
 801603a:	4299      	cmp	r1, r3
 801603c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016040:	db14      	blt.n	801606c <scalbnf+0x64>
 8016042:	ee17 2a90 	vmov	r2, s15
 8016046:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801604a:	3b19      	subs	r3, #25
 801604c:	440b      	add	r3, r1
 801604e:	2bfe      	cmp	r3, #254	; 0xfe
 8016050:	dd13      	ble.n	801607a <scalbnf+0x72>
 8016052:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 80160bc <scalbnf+0xb4>
 8016056:	ee17 1a90 	vmov	r1, s15
 801605a:	ee18 0a10 	vmov	r0, s16
 801605e:	f000 f833 	bl	80160c8 <copysignf>
 8016062:	ee07 0a90 	vmov	s15, r0
 8016066:	ee67 7a88 	vmul.f32	s15, s15, s16
 801606a:	e7db      	b.n	8016024 <scalbnf+0x1c>
 801606c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80160c0 <scalbnf+0xb8>
 8016070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016074:	e7d6      	b.n	8016024 <scalbnf+0x1c>
 8016076:	0ddb      	lsrs	r3, r3, #23
 8016078:	e7e8      	b.n	801604c <scalbnf+0x44>
 801607a:	2b00      	cmp	r3, #0
 801607c:	dd06      	ble.n	801608c <scalbnf+0x84>
 801607e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016082:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016086:	ee07 3a90 	vmov	s15, r3
 801608a:	e7cb      	b.n	8016024 <scalbnf+0x1c>
 801608c:	f113 0f16 	cmn.w	r3, #22
 8016090:	da06      	bge.n	80160a0 <scalbnf+0x98>
 8016092:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016096:	4299      	cmp	r1, r3
 8016098:	dcdb      	bgt.n	8016052 <scalbnf+0x4a>
 801609a:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80160c0 <scalbnf+0xb8>
 801609e:	e7da      	b.n	8016056 <scalbnf+0x4e>
 80160a0:	3319      	adds	r3, #25
 80160a2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80160a6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80160aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80160c4 <scalbnf+0xbc>
 80160ae:	ee07 3a90 	vmov	s15, r3
 80160b2:	e7dd      	b.n	8016070 <scalbnf+0x68>
 80160b4:	ffff3cb0 	.word	0xffff3cb0
 80160b8:	4c000000 	.word	0x4c000000
 80160bc:	7149f2ca 	.word	0x7149f2ca
 80160c0:	0da24260 	.word	0x0da24260
 80160c4:	33000000 	.word	0x33000000

080160c8 <copysignf>:
 80160c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80160cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80160d0:	4308      	orrs	r0, r1
 80160d2:	4770      	bx	lr

080160d4 <_init>:
 80160d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160d6:	bf00      	nop
 80160d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160da:	bc08      	pop	{r3}
 80160dc:	469e      	mov	lr, r3
 80160de:	4770      	bx	lr

080160e0 <_fini>:
 80160e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160e2:	bf00      	nop
 80160e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160e6:	bc08      	pop	{r3}
 80160e8:	469e      	mov	lr, r3
 80160ea:	4770      	bx	lr
