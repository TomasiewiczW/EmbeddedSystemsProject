
I2Ctest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007e68  08007e68  00017e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001e8  08008448  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08008448  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aed7  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001908  00000000  00000000  0002b0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021cee  00000000  00000000  0002dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096fb  00000000  00000000  0004f8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb435  00000000  00000000  00058fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  00124494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e50 	.word	0x08007e50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08007e50 	.word	0x08007e50

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MadgwickAHRS>:
//====================================================================================================
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update
void MadgwickAHRS(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b0af      	sub	sp, #188	; 0xbc
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000f92:	edc7 0a08 	vstr	s1, [r7, #32]
 8000f96:	ed87 1a07 	vstr	s2, [r7, #28]
 8000f9a:	edc7 1a06 	vstr	s3, [r7, #24]
 8000f9e:	ed87 2a05 	vstr	s4, [r7, #20]
 8000fa2:	edc7 2a04 	vstr	s5, [r7, #16]
 8000fa6:	ed87 3a03 	vstr	s6, [r7, #12]
 8000faa:	edc7 3a02 	vstr	s7, [r7, #8]
 8000fae:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000fb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d11d      	bne.n	8000ffc <MadgwickAHRS+0x74>
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d116      	bne.n	8000ffc <MadgwickAHRS+0x74>
 8000fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d10f      	bne.n	8000ffc <MadgwickAHRS+0x74>
		MadgwickAHRS_6x_Fallback(ax,ay,az,gx,gy,gz);
 8000fdc:	edd7 2a04 	vldr	s5, [r7, #16]
 8000fe0:	ed97 2a05 	vldr	s4, [r7, #20]
 8000fe4:	edd7 1a06 	vldr	s3, [r7, #24]
 8000fe8:	ed97 1a07 	vldr	s2, [r7, #28]
 8000fec:	edd7 0a08 	vldr	s1, [r7, #32]
 8000ff0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000ff4:	f000 fef4 	bl	8001de0 <MadgwickAHRS_6x_Fallback>
		return;
 8000ff8:	f000 bee2 	b.w	8001dc0 <MadgwickAHRS+0xe38>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000ffc:	4be6      	ldr	r3, [pc, #920]	; (8001398 <MadgwickAHRS+0x410>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eeb1 7a67 	vneg.f32	s14, s15
 8001006:	edd7 7a06 	vldr	s15, [r7, #24]
 800100a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800100e:	4be3      	ldr	r3, [pc, #908]	; (800139c <MadgwickAHRS+0x414>)
 8001010:	edd3 6a00 	vldr	s13, [r3]
 8001014:	edd7 7a05 	vldr	s15, [r7, #20]
 8001018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001020:	4bdf      	ldr	r3, [pc, #892]	; (80013a0 <MadgwickAHRS+0x418>)
 8001022:	edd3 6a00 	vldr	s13, [r3]
 8001026:	edd7 7a04 	vldr	s15, [r7, #16]
 800102a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001032:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800103e:	4bd9      	ldr	r3, [pc, #868]	; (80013a4 <MadgwickAHRS+0x41c>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	edd7 7a06 	vldr	s15, [r7, #24]
 8001048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104c:	4bd3      	ldr	r3, [pc, #844]	; (800139c <MadgwickAHRS+0x414>)
 800104e:	edd3 6a00 	vldr	s13, [r3]
 8001052:	edd7 7a04 	vldr	s15, [r7, #16]
 8001056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105e:	4bd0      	ldr	r3, [pc, #832]	; (80013a0 <MadgwickAHRS+0x418>)
 8001060:	edd3 6a00 	vldr	s13, [r3]
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001070:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001078:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800107c:	4bc9      	ldr	r3, [pc, #804]	; (80013a4 <MadgwickAHRS+0x41c>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	edd7 7a05 	vldr	s15, [r7, #20]
 8001086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108a:	4bc3      	ldr	r3, [pc, #780]	; (8001398 <MadgwickAHRS+0x410>)
 800108c:	edd3 6a00 	vldr	s13, [r3]
 8001090:	edd7 7a04 	vldr	s15, [r7, #16]
 8001094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001098:	ee37 7a67 	vsub.f32	s14, s14, s15
 800109c:	4bc0      	ldr	r3, [pc, #768]	; (80013a0 <MadgwickAHRS+0x418>)
 800109e:	edd3 6a00 	vldr	s13, [r3]
 80010a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80010ba:	4bba      	ldr	r3, [pc, #744]	; (80013a4 <MadgwickAHRS+0x41c>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	4bb3      	ldr	r3, [pc, #716]	; (8001398 <MadgwickAHRS+0x410>)
 80010ca:	edd3 6a00 	vldr	s13, [r3]
 80010ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010da:	4bb0      	ldr	r3, [pc, #704]	; (800139c <MadgwickAHRS+0x414>)
 80010dc:	edd3 6a00 	vldr	s13, [r3]
 80010e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80010e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80010f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	d10e      	bne.n	8001124 <MadgwickAHRS+0x19c>
 8001106:	edd7 7a08 	vldr	s15, [r7, #32]
 800110a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	d107      	bne.n	8001124 <MadgwickAHRS+0x19c>
 8001114:	edd7 7a07 	vldr	s15, [r7, #28]
 8001118:	eef5 7a40 	vcmp.f32	s15, #0.0
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	f000 85c2 	beq.w	8001ca8 <MadgwickAHRS+0xd20>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001124:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001128:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800112c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001130:	edd7 6a08 	vldr	s13, [r7, #32]
 8001134:	edd7 7a08 	vldr	s15, [r7, #32]
 8001138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001140:	edd7 6a07 	vldr	s13, [r7, #28]
 8001144:	edd7 7a07 	vldr	s15, [r7, #28]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	f001 f976 	bl	8002444 <invSqrt>
 8001158:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 800115c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001160:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		ay *= recipNorm;
 800116c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001170:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	edc7 7a08 	vstr	s15, [r7, #32]
		az *= recipNorm;
 800117c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001180:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800118c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001190:	edd7 7a03 	vldr	s15, [r7, #12]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a02 	vldr	s13, [r7, #8]
 800119c:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80011ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	eeb0 0a67 	vmov.f32	s0, s15
 80011bc:	f001 f942 	bl	8002444 <invSqrt>
 80011c0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80011c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80011d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80011e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80011ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80011f4:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <MadgwickAHRS+0x41c>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800120a:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <MadgwickAHRS+0x41c>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001214:	ed97 7a02 	vldr	s14, [r7, #8]
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001220:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <MadgwickAHRS+0x41c>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800122a:	ed97 7a01 	vldr	s14, [r7, #4]
 800122e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001232:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001236:	4b58      	ldr	r3, [pc, #352]	; (8001398 <MadgwickAHRS+0x410>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001240:	ed97 7a03 	vldr	s14, [r7, #12]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <MadgwickAHRS+0x41c>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001256:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800125a:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <MadgwickAHRS+0x410>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001264:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MadgwickAHRS+0x414>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001272:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <MadgwickAHRS+0x418>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001280:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001284:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <MadgwickAHRS+0x41c>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <MadgwickAHRS+0x414>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <MadgwickAHRS+0x414>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MadgwickAHRS+0x418>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MadgwickAHRS+0x41c>)
 80012b6:	ed93 7a00 	vldr	s14, [r3]
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MadgwickAHRS+0x41c>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MadgwickAHRS+0x41c>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <MadgwickAHRS+0x410>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80012dc:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <MadgwickAHRS+0x41c>)
 80012de:	ed93 7a00 	vldr	s14, [r3]
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MadgwickAHRS+0x414>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ec:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MadgwickAHRS+0x41c>)
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MadgwickAHRS+0x418>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MadgwickAHRS+0x410>)
 8001306:	ed93 7a00 	vldr	s14, [r3]
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MadgwickAHRS+0x410>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MadgwickAHRS+0x410>)
 800131a:	ed93 7a00 	vldr	s14, [r3]
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MadgwickAHRS+0x414>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MadgwickAHRS+0x410>)
 800132e:	ed93 7a00 	vldr	s14, [r3]
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MadgwickAHRS+0x418>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MadgwickAHRS+0x414>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MadgwickAHRS+0x414>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MadgwickAHRS+0x414>)
 8001356:	ed93 7a00 	vldr	s14, [r3]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MadgwickAHRS+0x418>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001364:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MadgwickAHRS+0x418>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MadgwickAHRS+0x418>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001378:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800137c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001380:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <MadgwickAHRS+0x418>)
 800138a:	edd3 6a00 	vldr	s13, [r3]
 800138e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001396:	e007      	b.n	80013a8 <MadgwickAHRS+0x420>
 8001398:	20000204 	.word	0x20000204
 800139c:	20000208 	.word	0x20000208
 80013a0:	2000020c 	.word	0x2000020c
 80013a4:	20000004 	.word	0x20000004
 80013a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ac:	4bf4      	ldr	r3, [pc, #976]	; (8001780 <MadgwickAHRS+0x7f8>)
 80013ae:	edd3 6a00 	vldr	s13, [r3]
 80013b2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80013b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013be:	edd7 6a03 	vldr	s13, [r7, #12]
 80013c2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80013c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ce:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013da:	4be9      	ldr	r3, [pc, #932]	; (8001780 <MadgwickAHRS+0x7f8>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80013ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013f4:	4be3      	ldr	r3, [pc, #908]	; (8001784 <MadgwickAHRS+0x7fc>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001402:	edd7 6a03 	vldr	s13, [r7, #12]
 8001406:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800140a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001412:	edd7 6a03 	vldr	s13, [r7, #12]
 8001416:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800141a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001426:	4bd7      	ldr	r3, [pc, #860]	; (8001784 <MadgwickAHRS+0x7fc>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	edd7 6a02 	vldr	s13, [r7, #8]
 8001438:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800143c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	4bd0      	ldr	r3, [pc, #832]	; (8001788 <MadgwickAHRS+0x800>)
 8001446:	edd3 6a00 	vldr	s13, [r3]
 800144a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800144e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001452:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001456:	4bca      	ldr	r3, [pc, #808]	; (8001780 <MadgwickAHRS+0x7f8>)
 8001458:	edd3 6a00 	vldr	s13, [r3]
 800145c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001468:	edd7 6a02 	vldr	s13, [r7, #8]
 800146c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001478:	edd7 6a02 	vldr	s13, [r7, #8]
 800147c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001488:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001494:	4bbb      	ldr	r3, [pc, #748]	; (8001784 <MadgwickAHRS+0x7fc>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a2:	edd7 6a02 	vldr	s13, [r7, #8]
 80014a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80014b6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80014ba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80014be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80014c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f857 	bl	8000588 <__aeabi_f2d>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	ec44 3b10 	vmov	d0, r3, r4
 80014e2:	f006 fba9 	bl	8007c38 <sqrt>
 80014e6:	ec54 3b10 	vmov	r3, r4, d0
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f7ff fb7b 	bl	8000be8 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80014f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80014fa:	eeb1 7a67 	vneg.f32	s14, s15
 80014fe:	4ba0      	ldr	r3, [pc, #640]	; (8001780 <MadgwickAHRS+0x7f8>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001508:	4b9f      	ldr	r3, [pc, #636]	; (8001788 <MadgwickAHRS+0x800>)
 800150a:	edd3 6a00 	vldr	s13, [r3]
 800150e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151a:	edd7 6a01 	vldr	s13, [r7, #4]
 800151e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152a:	4b96      	ldr	r3, [pc, #600]	; (8001784 <MadgwickAHRS+0x7fc>)
 800152c:	edd3 6a00 	vldr	s13, [r3]
 8001530:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001540:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001550:	edd7 7a02 	vldr	s15, [r7, #8]
 8001554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001558:	4b8a      	ldr	r3, [pc, #552]	; (8001784 <MadgwickAHRS+0x7fc>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	edd7 6a01 	vldr	s13, [r7, #4]
 800156a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800156e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001576:	edd7 6a01 	vldr	s13, [r7, #4]
 800157a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800157e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 800158a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800158e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001592:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001596:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800159a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800159e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient descent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80015a2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80015a6:	eeb1 7a67 	vneg.f32	s14, s15
 80015aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015ce:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80015d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80015da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015de:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80015e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <MadgwickAHRS+0x7f8>)
 80015ec:	edd3 6a00 	vldr	s13, [r3]
 80015f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80015fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001600:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001604:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001608:	ee36 6a67 	vsub.f32	s12, s12, s15
 800160c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001610:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001614:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001618:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800161c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001620:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001624:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001628:	ee36 6a27 	vadd.f32	s12, s12, s15
 800162c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001630:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001640:	eef1 6a67 	vneg.f32	s13, s15
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <MadgwickAHRS+0x7fc>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <MadgwickAHRS+0x800>)
 8001650:	ed93 6a00 	vldr	s12, [r3]
 8001654:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001658:	ee66 7a27 	vmul.f32	s15, s12, s15
 800165c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001660:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001664:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001668:	ee36 6a67 	vsub.f32	s12, s12, s15
 800166c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001670:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001674:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001678:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800167c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001680:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001684:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001688:	ee36 6a27 	vadd.f32	s12, s12, s15
 800168c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001690:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169c:	4b38      	ldr	r3, [pc, #224]	; (8001780 <MadgwickAHRS+0x7f8>)
 800169e:	edd3 6a00 	vldr	s13, [r3]
 80016a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016aa:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80016ae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80016c2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016c6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80016ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016ce:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80016d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016da:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80016f2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001702:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800170e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001712:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001716:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800171a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800171e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001722:	edd7 7a08 	vldr	s15, [r7, #32]
 8001726:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800172a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MadgwickAHRS+0x800>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001740:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001744:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001750:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001754:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001758:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800175c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001760:	edd7 7a07 	vldr	s15, [r7, #28]
 8001764:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <MadgwickAHRS+0x7fc>)
 8001772:	edd3 6a00 	vldr	s13, [r3]
 8001776:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800177a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800177e:	e005      	b.n	800178c <MadgwickAHRS+0x804>
 8001780:	20000208 	.word	0x20000208
 8001784:	2000020c 	.word	0x2000020c
 8001788:	20000204 	.word	0x20000204
 800178c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001790:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001794:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001798:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800179c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017a8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80017ac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80017b0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d0:	4bf6      	ldr	r3, [pc, #984]	; (8001bac <MadgwickAHRS+0xc24>)
 80017d2:	edd3 6a00 	vldr	s13, [r3]
 80017d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017de:	4bf4      	ldr	r3, [pc, #976]	; (8001bb0 <MadgwickAHRS+0xc28>)
 80017e0:	ed93 6a00 	vldr	s12, [r3]
 80017e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017f0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80017f4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80017f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001800:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001804:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001808:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800180c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001810:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001814:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001818:	ee36 6a27 	vadd.f32	s12, s12, s15
 800181c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001820:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800182c:	4be1      	ldr	r3, [pc, #900]	; (8001bb4 <MadgwickAHRS+0xc2c>)
 800182e:	edd3 6a00 	vldr	s13, [r3]
 8001832:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001836:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800183a:	4bdf      	ldr	r3, [pc, #892]	; (8001bb8 <MadgwickAHRS+0xc30>)
 800183c:	ed93 6a00 	vldr	s12, [r3]
 8001840:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001844:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001848:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800184c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001850:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001854:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001858:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800185c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001860:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001864:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001868:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800186c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001870:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001874:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001878:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800187c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001880:	edd7 7a01 	vldr	s15, [r7, #4]
 8001884:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001890:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001894:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001898:	eeb1 7a67 	vneg.f32	s14, s15
 800189c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80018cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018dc:	4bb3      	ldr	r3, [pc, #716]	; (8001bac <MadgwickAHRS+0xc24>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018ea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80018f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001902:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001906:	edd7 7a07 	vldr	s15, [r7, #28]
 800190a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001912:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001916:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800191a:	eef1 6a67 	vneg.f32	s13, s15
 800191e:	4ba3      	ldr	r3, [pc, #652]	; (8001bac <MadgwickAHRS+0xc24>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001928:	4ba1      	ldr	r3, [pc, #644]	; (8001bb0 <MadgwickAHRS+0xc28>)
 800192a:	ed93 6a00 	vldr	s12, [r3]
 800192e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001932:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001936:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800193a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800193e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001942:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001946:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800194a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800194e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001952:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001956:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800195a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800195e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001962:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001966:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800196a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800196e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001972:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <MadgwickAHRS+0xc30>)
 8001980:	edd3 6a00 	vldr	s13, [r3]
 8001984:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001988:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800198c:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <MadgwickAHRS+0xc2c>)
 800198e:	ed93 6a00 	vldr	s12, [r3]
 8001992:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001996:	ee66 7a27 	vmul.f32	s15, s12, s15
 800199a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800199e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80019a2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019b2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019ba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019c6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019da:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <MadgwickAHRS+0xc28>)
 80019dc:	edd3 6a00 	vldr	s13, [r3]
 80019e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <MadgwickAHRS+0xc24>)
 80019ea:	ed93 6a00 	vldr	s12, [r3]
 80019ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019fa:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019fe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a06:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a0a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a0e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a12:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a16:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a1e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a2a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a32:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a42:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a46:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a4a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a66:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a6a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a6e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a7a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a8a:	eef1 6a67 	vneg.f32	s13, s15
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <MadgwickAHRS+0xc2c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <MadgwickAHRS+0xc30>)
 8001a9a:	ed93 6a00 	vldr	s12, [r3]
 8001a9e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aa2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001aa6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001aaa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001aae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ab2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001aba:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001abe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ac2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ac6:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001aca:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ace:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ad2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ada:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001af2:	eef1 6a67 	vneg.f32	s13, s15
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <MadgwickAHRS+0xc28>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MadgwickAHRS+0xc24>)
 8001b02:	ed93 6a00 	vldr	s12, [r3]
 8001b06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b0e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b12:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b16:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b1e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b26:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b2a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b2e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MadgwickAHRS+0xc30>)
 8001b50:	edd3 6a00 	vldr	s13, [r3]
 8001b54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b5c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b60:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b70:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b74:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b7c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b80:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b88:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b8c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ba4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ba8:	e008      	b.n	8001bbc <MadgwickAHRS+0xc34>
 8001baa:	bf00      	nop
 8001bac:	20000208 	.word	0x20000208
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	2000020c 	.word	0x2000020c
 8001bb8:	20000204 	.word	0x20000204
 8001bbc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001bc8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001bd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001be8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	f000 fc24 	bl	8002444 <invSqrt>
 8001bfc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001c00:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c04:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001c10:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c14:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001c20:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c24:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001c30:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001c34:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <MadgwickAHRS+0xe40>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c56:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <MadgwickAHRS+0xe40>)
 8001c5c:	ed93 7a00 	vldr	s14, [r3]
 8001c60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001c74:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <MadgwickAHRS+0xe40>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <MadgwickAHRS+0xe40>)
 8001c90:	ed93 7a00 	vldr	s14, [r3]
 8001c94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}
	// Integrate rate of change of quaternion to yield quaternion

	// !!consider whether delta_time should be used instead!!
	q0 += qDot1 * (1.0f / sampleFreq);
 8001ca8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001cac:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001dcc <MadgwickAHRS+0xe44>
 8001cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <MadgwickAHRS+0xe48>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <MadgwickAHRS+0xe48>)
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001cc4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001cc8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001dcc <MadgwickAHRS+0xe44>
 8001ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cd0:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <MadgwickAHRS+0xe4c>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <MadgwickAHRS+0xe4c>)
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001ce0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001ce4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001dcc <MadgwickAHRS+0xe44>
 8001ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <MadgwickAHRS+0xe50>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <MadgwickAHRS+0xe50>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001cfc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001d00:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001dcc <MadgwickAHRS+0xe44>
 8001d04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <MadgwickAHRS+0xe54>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <MadgwickAHRS+0xe54>)
 8001d14:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <MadgwickAHRS+0xe48>)
 8001d1a:	ed93 7a00 	vldr	s14, [r3]
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <MadgwickAHRS+0xe48>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <MadgwickAHRS+0xe4c>)
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <MadgwickAHRS+0xe4c>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <MadgwickAHRS+0xe50>)
 8001d3e:	edd3 6a00 	vldr	s13, [r3]
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <MadgwickAHRS+0xe50>)
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <MadgwickAHRS+0xe54>)
 8001d52:	edd3 6a00 	vldr	s13, [r3]
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MadgwickAHRS+0xe54>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	eeb0 0a67 	vmov.f32	s0, s15
 8001d68:	f000 fb6c 	bl	8002444 <invSqrt>
 8001d6c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MadgwickAHRS+0xe48>)
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MadgwickAHRS+0xe48>)
 8001d80:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MadgwickAHRS+0xe4c>)
 8001d86:	ed93 7a00 	vldr	s14, [r3]
 8001d8a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MadgwickAHRS+0xe4c>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MadgwickAHRS+0xe50>)
 8001d9a:	ed93 7a00 	vldr	s14, [r3]
 8001d9e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MadgwickAHRS+0xe50>)
 8001da8:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MadgwickAHRS+0xe54>)
 8001dae:	ed93 7a00 	vldr	s14, [r3]
 8001db2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MadgwickAHRS+0xe54>)
 8001dbc:	edc3 7a00 	vstr	s15, [r3]
}
 8001dc0:	37bc      	adds	r7, #188	; 0xbc
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	3b000000 	.word	0x3b000000
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	20000204 	.word	0x20000204
 8001dd8:	20000208 	.word	0x20000208
 8001ddc:	2000020c 	.word	0x2000020c

08001de0 <MadgwickAHRS_6x_Fallback>:
//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRS_6x_Fallback(float ax, float ay, float az, float gx, float gy, float gz) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09c      	sub	sp, #112	; 0x70
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001dea:	edc7 0a04 	vstr	s1, [r7, #16]
 8001dee:	ed87 1a03 	vstr	s2, [r7, #12]
 8001df2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001df6:	ed87 2a01 	vstr	s4, [r7, #4]
 8001dfa:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001dfe:	4bee      	ldr	r3, [pc, #952]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	eeb1 7a67 	vneg.f32	s14, s15
 8001e08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e10:	4bea      	ldr	r3, [pc, #936]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8001e12:	edd3 6a00 	vldr	s13, [r3]
 8001e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e22:	4be7      	ldr	r3, [pc, #924]	; (80021c0 <MadgwickAHRS_6x_Fallback+0x3e0>)
 8001e24:	edd3 6a00 	vldr	s13, [r3]
 8001e28:	edd7 7a00 	vldr	s15, [r7]
 8001e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001e40:	4be0      	ldr	r3, [pc, #896]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8001e42:	ed93 7a00 	vldr	s14, [r3]
 8001e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4e:	4bdb      	ldr	r3, [pc, #876]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8001e50:	edd3 6a00 	vldr	s13, [r3]
 8001e54:	edd7 7a00 	vldr	s15, [r7]
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e60:	4bd7      	ldr	r3, [pc, #860]	; (80021c0 <MadgwickAHRS_6x_Fallback+0x3e0>)
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001e7e:	4bd1      	ldr	r3, [pc, #836]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	4bca      	ldr	r3, [pc, #808]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8001e8e:	edd3 6a00 	vldr	s13, [r3]
 8001e92:	edd7 7a00 	vldr	s15, [r7]
 8001e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9e:	4bc8      	ldr	r3, [pc, #800]	; (80021c0 <MadgwickAHRS_6x_Fallback+0x3e0>)
 8001ea0:	edd3 6a00 	vldr	s13, [r3]
 8001ea4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001ebc:	4bc1      	ldr	r3, [pc, #772]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	edd7 7a00 	vldr	s15, [r7]
 8001ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eca:	4bbb      	ldr	r3, [pc, #748]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8001ecc:	edd3 6a00 	vldr	s13, [r3]
 8001ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001edc:	4bb7      	ldr	r3, [pc, #732]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8001ede:	edd3 6a00 	vldr	s13, [r3]
 8001ee2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001efa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d10e      	bne.n	8001f26 <MadgwickAHRS_6x_Fallback+0x146>
 8001f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d107      	bne.n	8001f26 <MadgwickAHRS_6x_Fallback+0x146>
 8001f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	f000 81f3 	beq.w	800230c <MadgwickAHRS_6x_Fallback+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001f26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f32:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f42:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f000 fa75 	bl	8002444 <invSqrt>
 8001f5a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001f5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f62:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8001f6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8001f7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	edc7 7a03 	vstr	s15, [r7, #12]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001f8e:	4b8d      	ldr	r3, [pc, #564]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f98:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001f9c:	4b86      	ldr	r3, [pc, #536]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fa6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001faa:	4b84      	ldr	r3, [pc, #528]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fb4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001fb8:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <MadgwickAHRS_6x_Fallback+0x3e0>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fc2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001fd8:	4b77      	ldr	r3, [pc, #476]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001fea:	4b74      	ldr	r3, [pc, #464]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001ffc:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800200e:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8002022:	ed93 7a00 	vldr	s14, [r3]
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <MadgwickAHRS_6x_Fallback+0x3e4>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002030:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002034:	4b60      	ldr	r3, [pc, #384]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002048:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 800205c:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <MadgwickAHRS_6x_Fallback+0x3e0>)
 800205e:	ed93 7a00 	vldr	s14, [r3]
 8002062:	4b57      	ldr	r3, [pc, #348]	; (80021c0 <MadgwickAHRS_6x_Fallback+0x3e0>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient descent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002070:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002080:	edd7 7a05 	vldr	s15, [r7, #20]
 8002084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002090:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800209c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80020b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80020b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020bc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80020c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <MadgwickAHRS_6x_Fallback+0x3d8>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80020ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020fe:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002102:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800210e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002112:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002122:	edd7 7a03 	vldr	s15, [r7, #12]
 8002126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212e:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002132:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002136:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800213a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MadgwickAHRS_6x_Fallback+0x3dc>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002148:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800214c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002158:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800215c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002168:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800216c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002178:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800217c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002180:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002184:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002190:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002194:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80021a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b0:	edc7 7a07 	vstr	s15, [r7, #28]
 80021b4:	e008      	b.n	80021c8 <MadgwickAHRS_6x_Fallback+0x3e8>
 80021b6:	bf00      	nop
 80021b8:	20000204 	.word	0x20000204
 80021bc:	20000208 	.word	0x20000208
 80021c0:	2000020c 	.word	0x2000020c
 80021c4:	20000004 	.word	0x20000004
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80021c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80021d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d4:	4b95      	ldr	r3, [pc, #596]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021de:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80021e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80021f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021fa:	4b8c      	ldr	r3, [pc, #560]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002208:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800220c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002218:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800221c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002220:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	edd7 6a08 	vldr	s13, [r7, #32]
 800222c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	edd7 6a07 	vldr	s13, [r7, #28]
 800223c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002248:	edd7 6a06 	vldr	s13, [r7, #24]
 800224c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	eeb0 0a67 	vmov.f32	s0, s15
 800225c:	f000 f8f2 	bl	8002444 <invSqrt>
 8002260:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002264:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002268:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800226c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002270:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002274:	ed97 7a08 	vldr	s14, [r7, #32]
 8002278:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002280:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002284:	ed97 7a07 	vldr	s14, [r7, #28]
 8002288:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800228c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002290:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002294:	ed97 7a06 	vldr	s14, [r7, #24]
 8002298:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800229c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <MadgwickAHRS_6x_Fallback+0x650>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80022b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ba:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80022be:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <MadgwickAHRS_6x_Fallback+0x650>)
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022cc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80022d8:	4b55      	ldr	r3, [pc, #340]	; (8002430 <MadgwickAHRS_6x_Fallback+0x650>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	edd7 7a07 	vldr	s15, [r7, #28]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80022ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ee:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80022f2:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <MadgwickAHRS_6x_Fallback+0x650>)
 80022f4:	ed93 7a00 	vldr	s14, [r3]
 80022f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002308:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion

	// !!consider whether delta_time should be used instead!!
	q0 += qDot1 * (1.0f / sampleFreq);
 800230c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002310:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002434 <MadgwickAHRS_6x_Fallback+0x654>
 8002314:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <MadgwickAHRS_6x_Fallback+0x658>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	4b45      	ldr	r3, [pc, #276]	; (8002438 <MadgwickAHRS_6x_Fallback+0x658>)
 8002324:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002328:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800232c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002434 <MadgwickAHRS_6x_Fallback+0x654>
 8002330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <MadgwickAHRS_6x_Fallback+0x65c>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <MadgwickAHRS_6x_Fallback+0x65c>)
 8002340:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002344:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002348:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002434 <MadgwickAHRS_6x_Fallback+0x654>
 800234c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <MadgwickAHRS_6x_Fallback+0x660>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <MadgwickAHRS_6x_Fallback+0x660>)
 800235c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002360:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002364:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002434 <MadgwickAHRS_6x_Fallback+0x654>
 8002368:	ee27 7a87 	vmul.f32	s14, s15, s14
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 8002378:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <MadgwickAHRS_6x_Fallback+0x658>)
 800237e:	ed93 7a00 	vldr	s14, [r3]
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <MadgwickAHRS_6x_Fallback+0x658>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <MadgwickAHRS_6x_Fallback+0x65c>)
 800238e:	edd3 6a00 	vldr	s13, [r3]
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <MadgwickAHRS_6x_Fallback+0x65c>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <MadgwickAHRS_6x_Fallback+0x660>)
 80023a2:	edd3 6a00 	vldr	s13, [r3]
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <MadgwickAHRS_6x_Fallback+0x660>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 80023b6:	edd3 6a00 	vldr	s13, [r3]
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f000 f83a 	bl	8002444 <invSqrt>
 80023d0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MadgwickAHRS_6x_Fallback+0x658>)
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MadgwickAHRS_6x_Fallback+0x658>)
 80023e4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <MadgwickAHRS_6x_Fallback+0x65c>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80023f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MadgwickAHRS_6x_Fallback+0x65c>)
 80023f8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MadgwickAHRS_6x_Fallback+0x660>)
 80023fe:	ed93 7a00 	vldr	s14, [r3]
 8002402:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MadgwickAHRS_6x_Fallback+0x660>)
 800240c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 8002412:	ed93 7a00 	vldr	s14, [r3]
 8002416:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800241a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241e:	4b03      	ldr	r3, [pc, #12]	; (800242c <MadgwickAHRS_6x_Fallback+0x64c>)
 8002420:	edc3 7a00 	vstr	s15, [r3]
}
 8002424:	bf00      	nop
 8002426:	3770      	adds	r7, #112	; 0x70
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000020c 	.word	0x2000020c
 8002430:	20000000 	.word	0x20000000
 8002434:	3b000000 	.word	0x3b000000
 8002438:	20000004 	.word	0x20000004
 800243c:	20000204 	.word	0x20000204
 8002440:	20000208 	.word	0x20000208

08002444 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x) {
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800244e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	105a      	asrs	r2, r3, #1
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <invSqrt+0x74>)
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800247c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002480:	edd7 7a05 	vldr	s15, [r7, #20]
 8002484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002488:	edd7 7a04 	vldr	s15, [r7, #16]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002498:	edd7 7a04 	vldr	s15, [r7, #16]
 800249c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	ee07 3a90 	vmov	s15, r3
}
 80024aa:	eeb0 0a67 	vmov.f32	s0, s15
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	5f3759df 	.word	0x5f3759df

080024bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b0ad      	sub	sp, #180	; 0xb4
 80024c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c2:	f000 fe7b 	bl	80031bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c6:	f000 fbe7 	bl	8002c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ca:	f000 fcab 	bl	8002e24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024ce:	f000 fc7f 	bl	8002dd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024d2:	f000 fc4f 	bl	8002d74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // wypelnienie zmiennej konfiguracyjnej odpowiednimi opcjami
  uint8_t acc_settings = LSM303_ACC_XYZ_ENABLE | LSM303_ACC_100HZ;
 80024d6:	2357      	movs	r3, #87	; 0x57
 80024d8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  uint8_t mag_settings_cfg_a_regm_temp_dr_sm = LSM303_MAG_TEMP_DATARATE;
 80024dc:	2388      	movs	r3, #136	; 0x88
 80024de:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  uint8_t gyr_settings_multiread = 0x01;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
  uint8_t gyr_settings_datarate = 0x30; // 0011 0000 52Hz HF
 80024e8:	2330      	movs	r3, #48	; 0x30
 80024ea:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

  // Wpisanie konfiguracji do rejestru akcelerometru
  HAL_I2C_Mem_Write(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_CTRL_REG1_A, 1, &acc_settings, 1, 100);
 80024ee:	2364      	movs	r3, #100	; 0x64
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	2301      	movs	r3, #1
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	f107 039e 	add.w	r3, r7, #158	; 0x9e
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2301      	movs	r3, #1
 80024fe:	2220      	movs	r2, #32
 8002500:	2132      	movs	r1, #50	; 0x32
 8002502:	48b9      	ldr	r0, [pc, #740]	; (80027e8 <main+0x32c>)
 8002504:	f001 fab8 	bl	8003a78 <HAL_I2C_Mem_Write>
  // Wpisanie konfiguracji do rejestru magnetometru
  HAL_I2C_Mem_Write(&hi2c1, LSM303_MAG_ADDRESS, LSM303_MAG_CFG_REG_A_M, 1, &mag_settings_cfg_a_regm_temp_dr_sm, 1, 100);
 8002508:	2364      	movs	r3, #100	; 0x64
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	2301      	movs	r3, #1
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	f107 039d 	add.w	r3, r7, #157	; 0x9d
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	2260      	movs	r2, #96	; 0x60
 800251a:	213c      	movs	r1, #60	; 0x3c
 800251c:	48b2      	ldr	r0, [pc, #712]	; (80027e8 <main+0x32c>)
 800251e:	f001 faab 	bl	8003a78 <HAL_I2C_Mem_Write>
  // Uruchomienie inkrementacji read/write adresu do odczytu wielu wartosci jednoczesnie dla zyroskopu
  HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_GYR_ADDRESS, LSM6DSL_GYR_CTRL3_C_MULTI_READ, 1, &gyr_settings_multiread, 1, 100);
 8002522:	2364      	movs	r3, #100	; 0x64
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2301      	movs	r3, #1
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2301      	movs	r3, #1
 8002532:	2212      	movs	r2, #18
 8002534:	21d6      	movs	r1, #214	; 0xd6
 8002536:	48ac      	ldr	r0, [pc, #688]	; (80027e8 <main+0x32c>)
 8002538:	f001 fa9e 	bl	8003a78 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_GYR_ADDRESS, LSM6DSL_GYR_CTRL2_G, 1, &gyr_settings_datarate, 1, 100);
 800253c:	2364      	movs	r3, #100	; 0x64
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	2301      	movs	r3, #1
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2211      	movs	r2, #17
 800254e:	21d6      	movs	r1, #214	; 0xd6
 8002550:	48a5      	ldr	r0, [pc, #660]	; (80027e8 <main+0x32c>)
 8002552:	f001 fa91 	bl	8003a78 <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// Pobranie wyzszego bajtu danych osi Z
  	HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_X_L_A_MULTI_READ, 1, Data, 6, 100);
 8002556:	2364      	movs	r3, #100	; 0x64
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	2306      	movs	r3, #6
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	4ba3      	ldr	r3, [pc, #652]	; (80027ec <main+0x330>)
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2301      	movs	r3, #1
 8002564:	22a8      	movs	r2, #168	; 0xa8
 8002566:	2132      	movs	r1, #50	; 0x32
 8002568:	489f      	ldr	r0, [pc, #636]	; (80027e8 <main+0x32c>)
 800256a:	f001 fb7f 	bl	8003c6c <HAL_I2C_Mem_Read>
	acc_x = ((Data[1] << 8) | Data[0]);
 800256e:	4b9f      	ldr	r3, [pc, #636]	; (80027ec <main+0x330>)
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	b21a      	sxth	r2, r3
 8002576:	4b9d      	ldr	r3, [pc, #628]	; (80027ec <main+0x330>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b21b      	sxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b21a      	sxth	r2, r3
 8002580:	4b9b      	ldr	r3, [pc, #620]	; (80027f0 <main+0x334>)
 8002582:	801a      	strh	r2, [r3, #0]
	acc_y = ((Data[3] << 8) | Data[2]);
 8002584:	4b99      	ldr	r3, [pc, #612]	; (80027ec <main+0x330>)
 8002586:	78db      	ldrb	r3, [r3, #3]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b97      	ldr	r3, [pc, #604]	; (80027ec <main+0x330>)
 800258e:	789b      	ldrb	r3, [r3, #2]
 8002590:	b21b      	sxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b21a      	sxth	r2, r3
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <main+0x338>)
 8002598:	801a      	strh	r2, [r3, #0]
	acc_z = ((Data[5] << 8) | Data[4]);
 800259a:	4b94      	ldr	r3, [pc, #592]	; (80027ec <main+0x330>)
 800259c:	795b      	ldrb	r3, [r3, #5]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	4b92      	ldr	r3, [pc, #584]	; (80027ec <main+0x330>)
 80025a4:	791b      	ldrb	r3, [r3, #4]
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	4b92      	ldr	r3, [pc, #584]	; (80027f8 <main+0x33c>)
 80025ae:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, LSM303_MAG_ADDRESS, LSM303_MAG_X_L_M, 1, Data, 6, 100);
 80025b0:	2364      	movs	r3, #100	; 0x64
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	2306      	movs	r3, #6
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <main+0x330>)
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2301      	movs	r3, #1
 80025be:	2268      	movs	r2, #104	; 0x68
 80025c0:	213c      	movs	r1, #60	; 0x3c
 80025c2:	4889      	ldr	r0, [pc, #548]	; (80027e8 <main+0x32c>)
 80025c4:	f001 fb52 	bl	8003c6c <HAL_I2C_Mem_Read>
	mag_x = ((Data[1] << 8) | Data[0]);
 80025c8:	4b88      	ldr	r3, [pc, #544]	; (80027ec <main+0x330>)
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <main+0x330>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b21a      	sxth	r2, r3
 80025da:	4b88      	ldr	r3, [pc, #544]	; (80027fc <main+0x340>)
 80025dc:	801a      	strh	r2, [r3, #0]
	mag_y = ((Data[3] << 8) | Data[2]);
 80025de:	4b83      	ldr	r3, [pc, #524]	; (80027ec <main+0x330>)
 80025e0:	78db      	ldrb	r3, [r3, #3]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	b21a      	sxth	r2, r3
 80025e6:	4b81      	ldr	r3, [pc, #516]	; (80027ec <main+0x330>)
 80025e8:	789b      	ldrb	r3, [r3, #2]
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	4b83      	ldr	r3, [pc, #524]	; (8002800 <main+0x344>)
 80025f2:	801a      	strh	r2, [r3, #0]
	mag_z = ((Data[5] << 8) | Data[4]);
 80025f4:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <main+0x330>)
 80025f6:	795b      	ldrb	r3, [r3, #5]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <main+0x330>)
 80025fe:	791b      	ldrb	r3, [r3, #4]
 8002600:	b21b      	sxth	r3, r3
 8002602:	4313      	orrs	r3, r2
 8002604:	b21a      	sxth	r2, r3
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <main+0x348>)
 8002608:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_GYR_ADDRESS, LSM6DSL_GYR_X_L_G, 1, Data, 6, 100); // no multi read in doc..
 800260a:	2364      	movs	r3, #100	; 0x64
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2306      	movs	r3, #6
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <main+0x330>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	2222      	movs	r2, #34	; 0x22
 800261a:	21d6      	movs	r1, #214	; 0xd6
 800261c:	4872      	ldr	r0, [pc, #456]	; (80027e8 <main+0x32c>)
 800261e:	f001 fb25 	bl	8003c6c <HAL_I2C_Mem_Read>
	gyr_x = ((Data[1] << 8) | Data[0]);
 8002622:	4b72      	ldr	r3, [pc, #456]	; (80027ec <main+0x330>)
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	b21a      	sxth	r2, r3
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <main+0x330>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b21b      	sxth	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b21a      	sxth	r2, r3
 8002634:	4b74      	ldr	r3, [pc, #464]	; (8002808 <main+0x34c>)
 8002636:	801a      	strh	r2, [r3, #0]
	gyr_y = ((Data[3] << 8) | Data[2]);
 8002638:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <main+0x330>)
 800263a:	78db      	ldrb	r3, [r3, #3]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	b21a      	sxth	r2, r3
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <main+0x330>)
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	b21a      	sxth	r2, r3
 800264a:	4b70      	ldr	r3, [pc, #448]	; (800280c <main+0x350>)
 800264c:	801a      	strh	r2, [r3, #0]
	gyr_z = ((Data[5] << 8) | Data[4]);
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <main+0x330>)
 8002650:	795b      	ldrb	r3, [r3, #5]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	b21a      	sxth	r2, r3
 8002656:	4b65      	ldr	r3, [pc, #404]	; (80027ec <main+0x330>)
 8002658:	791b      	ldrb	r3, [r3, #4]
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21a      	sxth	r2, r3
 8002660:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <main+0x354>)
 8002662:	801a      	strh	r2, [r3, #0]

	// convert to floats
	acc_x_g = ((float) acc_x * LSM303_ACC_RESOLUTION) / (float) INT16_MAX;
 8002664:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <main+0x334>)
 8002666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002676:	eddf 6a67 	vldr	s13, [pc, #412]	; 8002814 <main+0x358>
 800267a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267e:	4b66      	ldr	r3, [pc, #408]	; (8002818 <main+0x35c>)
 8002680:	edc3 7a00 	vstr	s15, [r3]
	acc_y_g = ((float) acc_y * LSM303_ACC_RESOLUTION) / (float) INT16_MAX;
 8002684:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <main+0x338>)
 8002686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002692:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002696:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8002814 <main+0x358>
 800269a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <main+0x360>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
	acc_z_g = ((float) acc_z * LSM303_ACC_RESOLUTION) / (float) INT16_MAX;
 80026a4:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <main+0x33c>)
 80026a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80026b6:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002814 <main+0x358>
 80026ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026be:	4b58      	ldr	r3, [pc, #352]	; (8002820 <main+0x364>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]
	gyr_x_dps = ((float) gyr_x * LSM6DSL_GYR_RESOLUTION) / (float) INT16_MAX;
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <main+0x34c>)
 80026c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002824 <main+0x368>
 80026d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026da:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002814 <main+0x358>
 80026de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <main+0x36c>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
	gyr_y_dps = ((float) gyr_y * LSM6DSL_GYR_RESOLUTION) / (float) INT16_MAX;
 80026e8:	4b48      	ldr	r3, [pc, #288]	; (800280c <main+0x350>)
 80026ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002824 <main+0x368>
 80026fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026fe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002814 <main+0x358>
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <main+0x370>)
 8002708:	edc3 7a00 	vstr	s15, [r3]
	gyr_z_dps = ((float) gyr_z * LSM6DSL_GYR_RESOLUTION) / (float) INT16_MAX;
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <main+0x354>)
 800270e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002824 <main+0x368>
 800271e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002722:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002814 <main+0x358>
 8002726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <main+0x374>)
 800272c:	edc3 7a00 	vstr	s15, [r3]
	mag_x_g = ((float) mag_x * LSM303_MAG_RESOLUTION) / (float) INT16_MAX;
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <main+0x340>)
 8002732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002746:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002814 <main+0x358>
 800274a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <main+0x378>)
 8002750:	edc3 7a00 	vstr	s15, [r3]
	mag_y_g = ((float) mag_y * LSM303_MAG_RESOLUTION) / (float) INT16_MAX;
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <main+0x344>)
 8002756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002762:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002766:	ee27 7a87 	vmul.f32	s14, s15, s14
 800276a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002814 <main+0x358>
 800276e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <main+0x37c>)
 8002774:	edc3 7a00 	vstr	s15, [r3]
	mag_z_g = ((float) mag_z * LSM303_MAG_RESOLUTION) / (float) INT16_MAX;
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <main+0x348>)
 800277a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002786:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800278a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800278e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002814 <main+0x358>
 8002792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <main+0x380>)
 8002798:	edc3 7a00 	vstr	s15, [r3]
	char gyr_y_str[10];
	char gyr_z_str[10];
	char mag_x_str[10];
	char mag_y_str[10];
	char mag_z_str[10];
	sprintf(acc_x_str, "%f", acc_x_g);
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <main+0x35c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fef1 	bl	8000588 <__aeabi_f2d>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80027ae:	461a      	mov	r2, r3
 80027b0:	4623      	mov	r3, r4
 80027b2:	4923      	ldr	r1, [pc, #140]	; (8002840 <main+0x384>)
 80027b4:	f003 fe5e 	bl	8006474 <siprintf>
	sprintf(acc_y_str, "%f", acc_y_g);
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <main+0x360>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fee3 	bl	8000588 <__aeabi_f2d>
 80027c2:	4603      	mov	r3, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80027ca:	461a      	mov	r2, r3
 80027cc:	4623      	mov	r3, r4
 80027ce:	491c      	ldr	r1, [pc, #112]	; (8002840 <main+0x384>)
 80027d0:	f003 fe50 	bl	8006474 <siprintf>
	sprintf(acc_z_str, "%f", acc_z_g);
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <main+0x364>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fed5 	bl	8000588 <__aeabi_f2d>
 80027de:	4603      	mov	r3, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80027e6:	e02d      	b.n	8002844 <main+0x388>
 80027e8:	20000254 	.word	0x20000254
 80027ec:	2000030c 	.word	0x2000030c
 80027f0:	20000210 	.word	0x20000210
 80027f4:	20000212 	.word	0x20000212
 80027f8:	20000214 	.word	0x20000214
 80027fc:	20000216 	.word	0x20000216
 8002800:	20000218 	.word	0x20000218
 8002804:	2000021a 	.word	0x2000021a
 8002808:	2000021c 	.word	0x2000021c
 800280c:	2000021e 	.word	0x2000021e
 8002810:	20000220 	.word	0x20000220
 8002814:	46fffe00 	.word	0x46fffe00
 8002818:	20000224 	.word	0x20000224
 800281c:	20000228 	.word	0x20000228
 8002820:	2000022c 	.word	0x2000022c
 8002824:	437a0000 	.word	0x437a0000
 8002828:	2000023c 	.word	0x2000023c
 800282c:	20000240 	.word	0x20000240
 8002830:	20000244 	.word	0x20000244
 8002834:	20000230 	.word	0x20000230
 8002838:	20000234 	.word	0x20000234
 800283c:	20000238 	.word	0x20000238
 8002840:	08007e68 	.word	0x08007e68
 8002844:	461a      	mov	r2, r3
 8002846:	4623      	mov	r3, r4
 8002848:	49c6      	ldr	r1, [pc, #792]	; (8002b64 <main+0x6a8>)
 800284a:	f003 fe13 	bl	8006474 <siprintf>
	sprintf(gyr_x_str, "%f", gyr_x_dps);
 800284e:	4bc6      	ldr	r3, [pc, #792]	; (8002b68 <main+0x6ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe98 	bl	8000588 <__aeabi_f2d>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002860:	461a      	mov	r2, r3
 8002862:	4623      	mov	r3, r4
 8002864:	49bf      	ldr	r1, [pc, #764]	; (8002b64 <main+0x6a8>)
 8002866:	f003 fe05 	bl	8006474 <siprintf>
	sprintf(gyr_y_str, "%f", gyr_y_dps);
 800286a:	4bc0      	ldr	r3, [pc, #768]	; (8002b6c <main+0x6b0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe8a 	bl	8000588 <__aeabi_f2d>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	49b8      	ldr	r1, [pc, #736]	; (8002b64 <main+0x6a8>)
 8002882:	f003 fdf7 	bl	8006474 <siprintf>
	sprintf(gyr_z_str, "%f", gyr_z_dps);
 8002886:	4bba      	ldr	r3, [pc, #744]	; (8002b70 <main+0x6b4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe7c 	bl	8000588 <__aeabi_f2d>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002898:	461a      	mov	r2, r3
 800289a:	4623      	mov	r3, r4
 800289c:	49b1      	ldr	r1, [pc, #708]	; (8002b64 <main+0x6a8>)
 800289e:	f003 fde9 	bl	8006474 <siprintf>
	sprintf(mag_x_str, "%f", mag_x_g);
 80028a2:	4bb4      	ldr	r3, [pc, #720]	; (8002b74 <main+0x6b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe6e 	bl	8000588 <__aeabi_f2d>
 80028ac:	4603      	mov	r3, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80028b4:	461a      	mov	r2, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	49aa      	ldr	r1, [pc, #680]	; (8002b64 <main+0x6a8>)
 80028ba:	f003 fddb 	bl	8006474 <siprintf>
	sprintf(mag_y_str, "%f", mag_y_g);
 80028be:	4bae      	ldr	r3, [pc, #696]	; (8002b78 <main+0x6bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe60 	bl	8000588 <__aeabi_f2d>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	49a3      	ldr	r1, [pc, #652]	; (8002b64 <main+0x6a8>)
 80028d6:	f003 fdcd 	bl	8006474 <siprintf>
	sprintf(mag_z_str, "%f", mag_z_g);
 80028da:	4ba8      	ldr	r3, [pc, #672]	; (8002b7c <main+0x6c0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe52 	bl	8000588 <__aeabi_f2d>
 80028e4:	4603      	mov	r3, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80028ec:	461a      	mov	r2, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	499c      	ldr	r1, [pc, #624]	; (8002b64 <main+0x6a8>)
 80028f2:	f003 fdbf 	bl	8006474 <siprintf>

	// Madgwick AHRS - consider tweaking sample freq/delta time in implementation
	MadgwickAHRS(acc_x_g, acc_y_g, acc_z_g, gyr_x_dps, gyr_y_dps, gyr_z_dps, mag_x_g, mag_y_g, mag_z_g);
 80028f6:	4ba2      	ldr	r3, [pc, #648]	; (8002b80 <main+0x6c4>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	4ba1      	ldr	r3, [pc, #644]	; (8002b84 <main+0x6c8>)
 80028fe:	ed93 7a00 	vldr	s14, [r3]
 8002902:	4ba1      	ldr	r3, [pc, #644]	; (8002b88 <main+0x6cc>)
 8002904:	edd3 6a00 	vldr	s13, [r3]
 8002908:	4b97      	ldr	r3, [pc, #604]	; (8002b68 <main+0x6ac>)
 800290a:	ed93 6a00 	vldr	s12, [r3]
 800290e:	4b97      	ldr	r3, [pc, #604]	; (8002b6c <main+0x6b0>)
 8002910:	edd3 5a00 	vldr	s11, [r3]
 8002914:	4b96      	ldr	r3, [pc, #600]	; (8002b70 <main+0x6b4>)
 8002916:	ed93 5a00 	vldr	s10, [r3]
 800291a:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <main+0x6b8>)
 800291c:	edd3 4a00 	vldr	s9, [r3]
 8002920:	4b95      	ldr	r3, [pc, #596]	; (8002b78 <main+0x6bc>)
 8002922:	edd3 3a00 	vldr	s7, [r3]
 8002926:	4b95      	ldr	r3, [pc, #596]	; (8002b7c <main+0x6c0>)
 8002928:	ed93 4a00 	vldr	s8, [r3]
 800292c:	eeb0 3a64 	vmov.f32	s6, s9
 8002930:	eef0 2a45 	vmov.f32	s5, s10
 8002934:	eeb0 2a65 	vmov.f32	s4, s11
 8002938:	eef0 1a46 	vmov.f32	s3, s12
 800293c:	eeb0 1a66 	vmov.f32	s2, s13
 8002940:	eef0 0a47 	vmov.f32	s1, s14
 8002944:	eeb0 0a67 	vmov.f32	s0, s15
 8002948:	f7fe fb1e 	bl	8000f88 <MadgwickAHRS>
	// prepare quaternion floats for sending over serial
	char q0_str[10];
	char q1_str[10];
	char q2_str[10];
	char q3_str[10];
	sprintf(q0_str, "%f", q0);
 800294c:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <main+0x6d0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe19 	bl	8000588 <__aeabi_f2d>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	4980      	ldr	r1, [pc, #512]	; (8002b64 <main+0x6a8>)
 8002964:	f003 fd86 	bl	8006474 <siprintf>
	sprintf(q1_str, "%f", q1);
 8002968:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <main+0x6d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fe0b 	bl	8000588 <__aeabi_f2d>
 8002972:	4603      	mov	r3, r0
 8002974:	460c      	mov	r4, r1
 8002976:	f107 0018 	add.w	r0, r7, #24
 800297a:	461a      	mov	r2, r3
 800297c:	4623      	mov	r3, r4
 800297e:	4979      	ldr	r1, [pc, #484]	; (8002b64 <main+0x6a8>)
 8002980:	f003 fd78 	bl	8006474 <siprintf>
	sprintf(q2_str, "%f", q2);
 8002984:	4b83      	ldr	r3, [pc, #524]	; (8002b94 <main+0x6d8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fdfd 	bl	8000588 <__aeabi_f2d>
 800298e:	4603      	mov	r3, r0
 8002990:	460c      	mov	r4, r1
 8002992:	f107 000c 	add.w	r0, r7, #12
 8002996:	461a      	mov	r2, r3
 8002998:	4623      	mov	r3, r4
 800299a:	4972      	ldr	r1, [pc, #456]	; (8002b64 <main+0x6a8>)
 800299c:	f003 fd6a 	bl	8006474 <siprintf>
	sprintf(q3_str, "%f", q3);
 80029a0:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <main+0x6dc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fdef 	bl	8000588 <__aeabi_f2d>
 80029aa:	4603      	mov	r3, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	4638      	mov	r0, r7
 80029b0:	461a      	mov	r2, r3
 80029b2:	4623      	mov	r3, r4
 80029b4:	496b      	ldr	r1, [pc, #428]	; (8002b64 <main+0x6a8>)
 80029b6:	f003 fd5d 	bl	8006474 <siprintf>


	  uint8_t TxSize;
	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"ACC_GYR_MAG RAW OUTPUT\r\n");
 80029ba:	4a78      	ldr	r2, [pc, #480]	; (8002b9c <main+0x6e0>)
 80029bc:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <main+0x6e4>)
 80029be:	4615      	mov	r5, r2
 80029c0:	461c      	mov	r4, r3
 80029c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c4:	6028      	str	r0, [r5, #0]
 80029c6:	6069      	str	r1, [r5, #4]
 80029c8:	60aa      	str	r2, [r5, #8]
 80029ca:	60eb      	str	r3, [r5, #12]
 80029cc:	cc03      	ldmia	r4!, {r0, r1}
 80029ce:	6128      	str	r0, [r5, #16]
 80029d0:	6169      	str	r1, [r5, #20]
 80029d2:	7823      	ldrb	r3, [r4, #0]
 80029d4:	762b      	strb	r3, [r5, #24]
 80029d6:	2318      	movs	r3, #24
 80029d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 80029dc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	2364      	movs	r3, #100	; 0x64
 80029e4:	496d      	ldr	r1, [pc, #436]	; (8002b9c <main+0x6e0>)
 80029e6:	486f      	ldr	r0, [pc, #444]	; (8002ba4 <main+0x6e8>)
 80029e8:	f002 fc23 	bl	8005232 <HAL_UART_Transmit>
	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"LSM303: AccX= %d, AccY= %d, AccZ= %d\r\n",acc_x, acc_y, acc_z);
 80029ec:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <main+0x6ec>)
 80029ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f2:	4619      	mov	r1, r3
 80029f4:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <main+0x6f0>)
 80029f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <main+0x6f4>)
 80029fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	9200      	str	r2, [sp, #0]
 8002a06:	460b      	mov	r3, r1
 8002a08:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <main+0x6f8>)
 8002a0a:	2164      	movs	r1, #100	; 0x64
 8002a0c:	4863      	ldr	r0, [pc, #396]	; (8002b9c <main+0x6e0>)
 8002a0e:	f003 fcfd 	bl	800640c <sniprintf>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002a18:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2364      	movs	r3, #100	; 0x64
 8002a20:	495e      	ldr	r1, [pc, #376]	; (8002b9c <main+0x6e0>)
 8002a22:	4860      	ldr	r0, [pc, #384]	; (8002ba4 <main+0x6e8>)
 8002a24:	f002 fc05 	bl	8005232 <HAL_UART_Transmit>

	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"LSM6DSL: GyrX= %d, GyrY= %d, GyrZ= %d\r\n",gyr_x, gyr_y, gyr_z);
 8002a28:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <main+0x6fc>)
 8002a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <main+0x700>)
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <main+0x704>)
 8002a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	460b      	mov	r3, r1
 8002a44:	4a5f      	ldr	r2, [pc, #380]	; (8002bc4 <main+0x708>)
 8002a46:	2164      	movs	r1, #100	; 0x64
 8002a48:	4854      	ldr	r0, [pc, #336]	; (8002b9c <main+0x6e0>)
 8002a4a:	f003 fcdf 	bl	800640c <sniprintf>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002a54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	2364      	movs	r3, #100	; 0x64
 8002a5c:	494f      	ldr	r1, [pc, #316]	; (8002b9c <main+0x6e0>)
 8002a5e:	4851      	ldr	r0, [pc, #324]	; (8002ba4 <main+0x6e8>)
 8002a60:	f002 fbe7 	bl	8005232 <HAL_UART_Transmit>

	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"LSM303: MagX= %d, MagY= %d, MagZ= %d\r\n",mag_x, mag_y, mag_z);
 8002a64:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <main+0x70c>)
 8002a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4b57      	ldr	r3, [pc, #348]	; (8002bcc <main+0x710>)
 8002a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <main+0x714>)
 8002a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	9200      	str	r2, [sp, #0]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <main+0x718>)
 8002a82:	2164      	movs	r1, #100	; 0x64
 8002a84:	4845      	ldr	r0, [pc, #276]	; (8002b9c <main+0x6e0>)
 8002a86:	f003 fcc1 	bl	800640c <sniprintf>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002a90:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	2364      	movs	r3, #100	; 0x64
 8002a98:	4940      	ldr	r1, [pc, #256]	; (8002b9c <main+0x6e0>)
 8002a9a:	4842      	ldr	r0, [pc, #264]	; (8002ba4 <main+0x6e8>)
 8002a9c:	f002 fbc9 	bl	8005232 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8002aa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002aa4:	f000 fbfc 	bl	80032a0 <HAL_Delay>


	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"ACC_GYR_MAG UNIT OUTPUT [g][dps][G]\r\n");
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <main+0x6e0>)
 8002aaa:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <main+0x71c>)
 8002aac:	4614      	mov	r4, r2
 8002aae:	469c      	mov	ip, r3
 8002ab0:	f104 0e20 	add.w	lr, r4, #32
 8002ab4:	4665      	mov	r5, ip
 8002ab6:	4626      	mov	r6, r4
 8002ab8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002aba:	6028      	str	r0, [r5, #0]
 8002abc:	6069      	str	r1, [r5, #4]
 8002abe:	60aa      	str	r2, [r5, #8]
 8002ac0:	60eb      	str	r3, [r5, #12]
 8002ac2:	3410      	adds	r4, #16
 8002ac4:	f10c 0c10 	add.w	ip, ip, #16
 8002ac8:	4574      	cmp	r4, lr
 8002aca:	d1f3      	bne.n	8002ab4 <main+0x5f8>
 8002acc:	4663      	mov	r3, ip
 8002ace:	4622      	mov	r2, r4
 8002ad0:	6810      	ldr	r0, [r2, #0]
 8002ad2:	6018      	str	r0, [r3, #0]
 8002ad4:	8892      	ldrh	r2, [r2, #4]
 8002ad6:	809a      	strh	r2, [r3, #4]
 8002ad8:	2325      	movs	r3, #37	; 0x25
 8002ada:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002ade:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	2364      	movs	r3, #100	; 0x64
 8002ae6:	492d      	ldr	r1, [pc, #180]	; (8002b9c <main+0x6e0>)
 8002ae8:	482e      	ldr	r0, [pc, #184]	; (8002ba4 <main+0x6e8>)
 8002aea:	f002 fba2 	bl	8005232 <HAL_UART_Transmit>
	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"LSM303: AccX#AccY#AccZ=%s#%s#%s\r\n", acc_x_str, acc_y_str, acc_z_str);
 8002aee:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002af2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <main+0x720>)
 8002b02:	2164      	movs	r1, #100	; 0x64
 8002b04:	4825      	ldr	r0, [pc, #148]	; (8002b9c <main+0x6e0>)
 8002b06:	f003 fc81 	bl	800640c <sniprintf>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002b10:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	2364      	movs	r3, #100	; 0x64
 8002b18:	4920      	ldr	r1, [pc, #128]	; (8002b9c <main+0x6e0>)
 8002b1a:	4822      	ldr	r0, [pc, #136]	; (8002ba4 <main+0x6e8>)
 8002b1c:	f002 fb89 	bl	8005232 <HAL_UART_Transmit>

	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"LSM6DSL: GyrX#GyrY#GyrZ=%s#%s#%s\r\n", gyr_x_str, gyr_y_str, gyr_z_str);
 8002b20:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <main+0x724>)
 8002b34:	2164      	movs	r1, #100	; 0x64
 8002b36:	4819      	ldr	r0, [pc, #100]	; (8002b9c <main+0x6e0>)
 8002b38:	f003 fc68 	bl	800640c <sniprintf>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002b42:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2364      	movs	r3, #100	; 0x64
 8002b4a:	4914      	ldr	r1, [pc, #80]	; (8002b9c <main+0x6e0>)
 8002b4c:	4815      	ldr	r0, [pc, #84]	; (8002ba4 <main+0x6e8>)
 8002b4e:	f002 fb70 	bl	8005232 <HAL_UART_Transmit>

	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"LSM303: MagX#MagY#MagZ %s#%s#%s\r\n", mag_x_str, mag_y_str, mag_z_str);
 8002b52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	e03f      	b.n	8002be4 <main+0x728>
 8002b64:	08007e68 	.word	0x08007e68
 8002b68:	2000023c 	.word	0x2000023c
 8002b6c:	20000240 	.word	0x20000240
 8002b70:	20000244 	.word	0x20000244
 8002b74:	20000230 	.word	0x20000230
 8002b78:	20000234 	.word	0x20000234
 8002b7c:	20000238 	.word	0x20000238
 8002b80:	20000224 	.word	0x20000224
 8002b84:	20000228 	.word	0x20000228
 8002b88:	2000022c 	.word	0x2000022c
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	20000204 	.word	0x20000204
 8002b94:	20000208 	.word	0x20000208
 8002b98:	2000020c 	.word	0x2000020c
 8002b9c:	200002a8 	.word	0x200002a8
 8002ba0:	08007e6c 	.word	0x08007e6c
 8002ba4:	20000378 	.word	0x20000378
 8002ba8:	20000210 	.word	0x20000210
 8002bac:	20000212 	.word	0x20000212
 8002bb0:	20000214 	.word	0x20000214
 8002bb4:	08007e88 	.word	0x08007e88
 8002bb8:	2000021c 	.word	0x2000021c
 8002bbc:	2000021e 	.word	0x2000021e
 8002bc0:	20000220 	.word	0x20000220
 8002bc4:	08007eb0 	.word	0x08007eb0
 8002bc8:	20000216 	.word	0x20000216
 8002bcc:	20000218 	.word	0x20000218
 8002bd0:	2000021a 	.word	0x2000021a
 8002bd4:	08007ed8 	.word	0x08007ed8
 8002bd8:	08007f00 	.word	0x08007f00
 8002bdc:	08007f28 	.word	0x08007f28
 8002be0:	08007f4c 	.word	0x08007f4c
 8002be4:	4613      	mov	r3, r2
 8002be6:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <main+0x7c8>)
 8002be8:	2164      	movs	r1, #100	; 0x64
 8002bea:	4827      	ldr	r0, [pc, #156]	; (8002c88 <main+0x7cc>)
 8002bec:	f003 fc0e 	bl	800640c <sniprintf>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002bf6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	2364      	movs	r3, #100	; 0x64
 8002bfe:	4922      	ldr	r1, [pc, #136]	; (8002c88 <main+0x7cc>)
 8002c00:	4822      	ldr	r0, [pc, #136]	; (8002c8c <main+0x7d0>)
 8002c02:	f002 fb16 	bl	8005232 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8002c06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c0a:	f000 fb49 	bl	80032a0 <HAL_Delay>


	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"QUATERNION OUTPUT q0q1q2q3\r\n");
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <main+0x7cc>)
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <main+0x7d4>)
 8002c12:	4615      	mov	r5, r2
 8002c14:	461c      	mov	r4, r3
 8002c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c18:	6028      	str	r0, [r5, #0]
 8002c1a:	6069      	str	r1, [r5, #4]
 8002c1c:	60aa      	str	r2, [r5, #8]
 8002c1e:	60eb      	str	r3, [r5, #12]
 8002c20:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002c22:	6128      	str	r0, [r5, #16]
 8002c24:	6169      	str	r1, [r5, #20]
 8002c26:	61aa      	str	r2, [r5, #24]
 8002c28:	7823      	ldrb	r3, [r4, #0]
 8002c2a:	772b      	strb	r3, [r5, #28]
 8002c2c:	231c      	movs	r3, #28
 8002c2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002c32:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	2364      	movs	r3, #100	; 0x64
 8002c3a:	4913      	ldr	r1, [pc, #76]	; (8002c88 <main+0x7cc>)
 8002c3c:	4813      	ldr	r0, [pc, #76]	; (8002c8c <main+0x7d0>)
 8002c3e:	f002 faf8 	bl	8005232 <HAL_UART_Transmit>
	  TxSize = snprintf(TxBuf,sizeof(TxBuf),"q0#q1#q2#q3=%s#%s#%s#%s\r\n", q0_str, q1_str, q2_str, q3_str);
 8002c42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002c46:	463b      	mov	r3, r7
 8002c48:	9302      	str	r3, [sp, #8]
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <main+0x7d8>)
 8002c5a:	2164      	movs	r1, #100	; 0x64
 8002c5c:	480a      	ldr	r0, [pc, #40]	; (8002c88 <main+0x7cc>)
 8002c5e:	f003 fbd5 	bl	800640c <sniprintf>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  HAL_UART_Transmit(&huart2, TxBuf, TxSize,100);
 8002c68:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	2364      	movs	r3, #100	; 0x64
 8002c70:	4905      	ldr	r1, [pc, #20]	; (8002c88 <main+0x7cc>)
 8002c72:	4806      	ldr	r0, [pc, #24]	; (8002c8c <main+0x7d0>)
 8002c74:	f002 fadd 	bl	8005232 <HAL_UART_Transmit>

	  HAL_Delay(2000);
 8002c78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c7c:	f000 fb10 	bl	80032a0 <HAL_Delay>
  {
 8002c80:	e469      	b.n	8002556 <main+0x9a>
 8002c82:	bf00      	nop
 8002c84:	08007f70 	.word	0x08007f70
 8002c88:	200002a8 	.word	0x200002a8
 8002c8c:	20000378 	.word	0x20000378
 8002c90:	08007f94 	.word	0x08007f94
 8002c94:	08007fb4 	.word	0x08007fb4

08002c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b094      	sub	sp, #80	; 0x50
 8002c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	2234      	movs	r2, #52	; 0x34
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 ff4c 	bl	8005b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <SystemClock_Config+0xd4>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <SystemClock_Config+0xd4>)
 8002cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <SystemClock_Config+0xd4>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <SystemClock_Config+0xd8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <SystemClock_Config+0xd8>)
 8002ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <SystemClock_Config+0xd8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d00:	2310      	movs	r3, #16
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d04:	2302      	movs	r3, #2
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002d10:	2364      	movs	r3, #100	; 0x64
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d14:	2302      	movs	r3, #2
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 ffdd 	bl	8004ce4 <HAL_RCC_OscConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002d30:	f000 f8e8 	bl	8002f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d34:	230f      	movs	r3, #15
 8002d36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	2103      	movs	r1, #3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fd0c 	bl	8004770 <HAL_RCC_ClockConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002d5e:	f000 f8d1 	bl	8002f04 <Error_Handler>
  }
}
 8002d62:	bf00      	nop
 8002d64:	3750      	adds	r7, #80	; 0x50
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40007000 	.word	0x40007000

08002d74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <MX_I2C1_Init+0x54>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <MX_I2C1_Init+0x58>)
 8002d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002db2:	f000 fd29 	bl	8003808 <HAL_I2C_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dbc:	f000 f8a2 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000254 	.word	0x20000254
 8002dc8:	40005400 	.word	0x40005400
 8002dcc:	00061a80 	.word	0x00061a80

08002dd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <MX_USART2_UART_Init+0x50>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_USART2_UART_Init+0x4c>)
 8002e08:	f002 f9c6 	bl	8005198 <HAL_UART_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e12:	f000 f877 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000378 	.word	0x20000378
 8002e20:	40004400 	.word	0x40004400

08002e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_GPIO_Init+0xd0>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2120      	movs	r1, #32
 8002eae:	4812      	ldr	r0, [pc, #72]	; (8002ef8 <MX_GPIO_Init+0xd4>)
 8002eb0:	f000 fc90 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <MX_GPIO_Init+0xd8>)
 8002ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480d      	ldr	r0, [pc, #52]	; (8002f00 <MX_GPIO_Init+0xdc>)
 8002eca:	f000 faf1 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <MX_GPIO_Init+0xd4>)
 8002ee6:	f000 fae3 	bl	80034b0 <HAL_GPIO_Init>

}
 8002eea:	bf00      	nop
 8002eec:	3728      	adds	r7, #40	; 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	10210000 	.word	0x10210000
 8002f00:	40020800 	.word	0x40020800

08002f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <Error_Handler+0x6>

08002f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f20:	6453      	str	r3, [r2, #68]	; 0x44
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f4a:	2007      	movs	r0, #7
 8002f4c:	f000 fa7c 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_I2C_MspInit+0x84>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d12c      	bne.n	8002fd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_I2C_MspInit+0x88>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_I2C_MspInit+0x88>)
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_I2C_MspInit+0x88>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa0:	2312      	movs	r3, #18
 8002fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fac:	2304      	movs	r3, #4
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <HAL_I2C_MspInit+0x8c>)
 8002fb8:	f000 fa7a 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_I2C_MspInit+0x88>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4a07      	ldr	r2, [pc, #28]	; (8002fe4 <HAL_I2C_MspInit+0x88>)
 8002fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fca:	6413      	str	r3, [r2, #64]	; 0x40
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_I2C_MspInit+0x88>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020400 	.word	0x40020400

08002fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_UART_MspInit+0x84>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d12b      	bne.n	8003066 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_UART_MspInit+0x88>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_UART_MspInit+0x88>)
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_UART_MspInit+0x88>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_UART_MspInit+0x88>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_UART_MspInit+0x88>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_UART_MspInit+0x88>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003046:	230c      	movs	r3, #12
 8003048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003056:	2307      	movs	r3, #7
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <HAL_UART_MspInit+0x8c>)
 8003062:	f000 fa25 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40004400 	.word	0x40004400
 8003074:	40023800 	.word	0x40023800
 8003078:	40020000 	.word	0x40020000

0800307c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <NMI_Handler+0x4>

08003082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003086:	e7fe      	b.n	8003086 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	e7fe      	b.n	800308c <MemManage_Handler+0x4>

0800308e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003092:	e7fe      	b.n	8003092 <BusFault_Handler+0x4>

08003094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003098:	e7fe      	b.n	8003098 <UsageFault_Handler+0x4>

0800309a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c8:	f000 f8ca 	bl	8003260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <_sbrk+0x5c>)
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <_sbrk+0x60>)
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <_sbrk+0x64>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <_sbrk+0x64>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <_sbrk+0x68>)
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d207      	bcs.n	8003110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003100:	f002 fcf6 	bl	8005af0 <__errno>
 8003104:	4602      	mov	r2, r0
 8003106:	230c      	movs	r3, #12
 8003108:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	e009      	b.n	8003124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <_sbrk+0x64>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <_sbrk+0x64>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	4a05      	ldr	r2, [pc, #20]	; (8003134 <_sbrk+0x64>)
 8003120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20020000 	.word	0x20020000
 8003130:	00000400 	.word	0x00000400
 8003134:	20000248 	.word	0x20000248
 8003138:	200003c0 	.word	0x200003c0

0800313c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <SystemInit+0x28>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <SystemInit+0x28>)
 8003148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800314c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <SystemInit+0x28>)
 8003152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003156:	609a      	str	r2, [r3, #8]
#endif
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800316c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800316e:	e003      	b.n	8003178 <LoopCopyDataInit>

08003170 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003172:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003174:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003176:	3104      	adds	r1, #4

08003178 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800317c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800317e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003180:	d3f6      	bcc.n	8003170 <CopyDataInit>
  ldr  r2, =_sbss
 8003182:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003184:	e002      	b.n	800318c <LoopFillZerobss>

08003186 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003186:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003188:	f842 3b04 	str.w	r3, [r2], #4

0800318c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800318e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003190:	d3f9      	bcc.n	8003186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003192:	f7ff ffd3 	bl	800313c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003196:	f002 fcb1 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800319a:	f7ff f98f 	bl	80024bc <main>
  bx  lr    
 800319e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031a4:	08008260 	.word	0x08008260
  ldr  r0, =_sdata
 80031a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031ac:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80031b0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80031b4:	200003c0 	.word	0x200003c0

080031b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b8:	e7fe      	b.n	80031b8 <ADC_IRQHandler>
	...

080031bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_Init+0x40>)
 80031c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_Init+0x40>)
 80031d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a07      	ldr	r2, [pc, #28]	; (80031fc <HAL_Init+0x40>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e4:	2003      	movs	r0, #3
 80031e6:	f000 f92f 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f000 f808 	bl	8003200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f0:	f7ff fe8c 	bl	8002f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023c00 	.word	0x40023c00

08003200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_InitTick+0x54>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x58>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003216:	fbb3 f3f1 	udiv	r3, r3, r1
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f939 	bl	8003496 <HAL_SYSTICK_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e00e      	b.n	800324c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b0f      	cmp	r3, #15
 8003232:	d80a      	bhi.n	800324a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003234:	2200      	movs	r2, #0
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f000 f90f 	bl	800345e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003240:	4a06      	ldr	r2, [pc, #24]	; (800325c <HAL_InitTick+0x5c>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20000008 	.word	0x20000008
 8003258:	20000010 	.word	0x20000010
 800325c:	2000000c 	.word	0x2000000c

08003260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_IncTick+0x20>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x24>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4413      	add	r3, r2
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_IncTick+0x24>)
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000010 	.word	0x20000010
 8003284:	200003b8 	.word	0x200003b8

08003288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return uwTick;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_GetTick+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	200003b8 	.word	0x200003b8

080032a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff ffee 	bl	8003288 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d005      	beq.n	80032c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_Delay+0x40>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032c6:	bf00      	nop
 80032c8:	f7ff ffde 	bl	8003288 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d8f7      	bhi.n	80032c8 <HAL_Delay+0x28>
  {
  }
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000010 	.word	0x20000010

080032e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003300:	4013      	ands	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800330c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003316:	4a04      	ldr	r2, [pc, #16]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60d3      	str	r3, [r2, #12]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <__NVIC_GetPriorityGrouping+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0307 	and.w	r3, r3, #7
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff47 	bl	80032e4 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff ff5c 	bl	800332c <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff8e 	bl	800339c <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5d 	bl	8003348 <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ffb0 	bl	8003404 <SysTick_Config>
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e165      	b.n	8003798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f040 8154 	bne.w	8003792 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d00b      	beq.n	800350a <HAL_GPIO_Init+0x5a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d007      	beq.n	800350a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034fe:	2b11      	cmp	r3, #17
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b12      	cmp	r3, #18
 8003508:	d130      	bne.n	800356c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	2203      	movs	r2, #3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003540:	2201      	movs	r2, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 0201 	and.w	r2, r3, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0xfc>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b12      	cmp	r3, #18
 80035aa:	d123      	bne.n	80035f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	220f      	movs	r2, #15
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08da      	lsrs	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3208      	adds	r2, #8
 80035ee:	69b9      	ldr	r1, [r7, #24]
 80035f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80ae 	beq.w	8003792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_GPIO_Init+0x2fc>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a5b      	ldr	r2, [pc, #364]	; (80037ac <HAL_GPIO_Init+0x2fc>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_GPIO_Init+0x2fc>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003652:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_GPIO_Init+0x300>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4e      	ldr	r2, [pc, #312]	; (80037b4 <HAL_GPIO_Init+0x304>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d025      	beq.n	80036ca <HAL_GPIO_Init+0x21a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <HAL_GPIO_Init+0x308>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01f      	beq.n	80036c6 <HAL_GPIO_Init+0x216>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <HAL_GPIO_Init+0x30c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d019      	beq.n	80036c2 <HAL_GPIO_Init+0x212>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_GPIO_Init+0x310>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0x20e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4a      	ldr	r2, [pc, #296]	; (80037c4 <HAL_GPIO_Init+0x314>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_GPIO_Init+0x20a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a49      	ldr	r2, [pc, #292]	; (80037c8 <HAL_GPIO_Init+0x318>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <HAL_GPIO_Init+0x206>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a48      	ldr	r2, [pc, #288]	; (80037cc <HAL_GPIO_Init+0x31c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_GPIO_Init+0x202>
 80036ae:	2306      	movs	r3, #6
 80036b0:	e00c      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036b2:	2307      	movs	r3, #7
 80036b4:	e00a      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036b6:	2305      	movs	r3, #5
 80036b8:	e008      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036ba:	2304      	movs	r3, #4
 80036bc:	e006      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036be:	2303      	movs	r3, #3
 80036c0:	e004      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e002      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_GPIO_Init+0x21c>
 80036ca:	2300      	movs	r3, #0
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f002 0203 	and.w	r2, r2, #3
 80036d2:	0092      	lsls	r2, r2, #2
 80036d4:	4093      	lsls	r3, r2
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036dc:	4934      	ldr	r1, [pc, #208]	; (80037b0 <HAL_GPIO_Init+0x300>)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ea:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <HAL_GPIO_Init+0x320>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800370e:	4a30      	ldr	r2, [pc, #192]	; (80037d0 <HAL_GPIO_Init+0x320>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003714:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_GPIO_Init+0x320>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_GPIO_Init+0x320>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_GPIO_Init+0x320>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003762:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_GPIO_Init+0x320>)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_GPIO_Init+0x320>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800378c:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <HAL_GPIO_Init+0x320>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	f67f ae96 	bls.w	80034cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a0:	bf00      	nop
 80037a2:	3724      	adds	r7, #36	; 0x24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40020000 	.word	0x40020000
 80037b8:	40020400 	.word	0x40020400
 80037bc:	40020800 	.word	0x40020800
 80037c0:	40020c00 	.word	0x40020c00
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40021400 	.word	0x40021400
 80037cc:	40021800 	.word	0x40021800
 80037d0:	40013c00 	.word	0x40013c00

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f0:	e003      	b.n	80037fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e11f      	b.n	8003a5a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fb94 	bl	8002f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800386a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800386c:	f001 f872 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8003870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4a7b      	ldr	r2, [pc, #492]	; (8003a64 <HAL_I2C_Init+0x25c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d807      	bhi.n	800388c <HAL_I2C_Init+0x84>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a7a      	ldr	r2, [pc, #488]	; (8003a68 <HAL_I2C_Init+0x260>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e006      	b.n	800389a <HAL_I2C_Init+0x92>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a77      	ldr	r2, [pc, #476]	; (8003a6c <HAL_I2C_Init+0x264>)
 8003890:	4293      	cmp	r3, r2
 8003892:	bf94      	ite	ls
 8003894:	2301      	movls	r3, #1
 8003896:	2300      	movhi	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0db      	b.n	8003a5a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a72      	ldr	r2, [pc, #456]	; (8003a70 <HAL_I2C_Init+0x268>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	0c9b      	lsrs	r3, r3, #18
 80038ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a64      	ldr	r2, [pc, #400]	; (8003a64 <HAL_I2C_Init+0x25c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d802      	bhi.n	80038dc <HAL_I2C_Init+0xd4>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3301      	adds	r3, #1
 80038da:	e009      	b.n	80038f0 <HAL_I2C_Init+0xe8>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_I2C_Init+0x26c>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	3301      	adds	r3, #1
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4956      	ldr	r1, [pc, #344]	; (8003a64 <HAL_I2C_Init+0x25c>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d80d      	bhi.n	800392c <HAL_I2C_Init+0x124>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e59      	subs	r1, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fbb1 f3f3 	udiv	r3, r1, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	2b04      	cmp	r3, #4
 8003926:	bf38      	it	cc
 8003928:	2304      	movcc	r3, #4
 800392a:	e04f      	b.n	80039cc <HAL_I2C_Init+0x1c4>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d111      	bne.n	8003958 <HAL_I2C_Init+0x150>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e012      	b.n	800397e <HAL_I2C_Init+0x176>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	0099      	lsls	r1, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_I2C_Init+0x17e>
 8003982:	2301      	movs	r3, #1
 8003984:	e022      	b.n	80039cc <HAL_I2C_Init+0x1c4>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10e      	bne.n	80039ac <HAL_I2C_Init+0x1a4>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e58      	subs	r0, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	440b      	add	r3, r1
 800399c:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a0:	3301      	adds	r3, #1
 80039a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039aa:	e00f      	b.n	80039cc <HAL_I2C_Init+0x1c4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	6809      	ldr	r1, [r1, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6911      	ldr	r1, [r2, #16]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68d2      	ldr	r2, [r2, #12]
 8003a06:	4311      	orrs	r1, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	000186a0 	.word	0x000186a0
 8003a68:	001e847f 	.word	0x001e847f
 8003a6c:	003d08ff 	.word	0x003d08ff
 8003a70:	431bde83 	.word	0x431bde83
 8003a74:	10624dd3 	.word	0x10624dd3

08003a78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	4608      	mov	r0, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	817b      	strh	r3, [r7, #10]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	813b      	strh	r3, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a92:	f7ff fbf9 	bl	8003288 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	f040 80d9 	bne.w	8003c58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2319      	movs	r3, #25
 8003aac:	2201      	movs	r2, #1
 8003aae:	496d      	ldr	r1, [pc, #436]	; (8003c64 <HAL_I2C_Mem_Write+0x1ec>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fc7f 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0cc      	b.n	8003c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Mem_Write+0x56>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e0c5      	b.n	8003c5a <HAL_I2C_Mem_Write+0x1e2>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d007      	beq.n	8003af4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2221      	movs	r2, #33	; 0x21
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2240      	movs	r2, #64	; 0x40
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a4d      	ldr	r2, [pc, #308]	; (8003c68 <HAL_I2C_Mem_Write+0x1f0>)
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b36:	88f8      	ldrh	r0, [r7, #6]
 8003b38:	893a      	ldrh	r2, [r7, #8]
 8003b3a:	8979      	ldrh	r1, [r7, #10]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4603      	mov	r3, r0
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fab6 	bl	80040b8 <I2C_RequestMemoryWrite>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d052      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e081      	b.n	8003c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fd00 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d107      	bne.n	8003b7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06b      	b.n	8003c5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_I2C_Mem_Write+0x180>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1aa      	bne.n	8003b56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fcec 	bl	80045e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d107      	bne.n	8003c28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e016      	b.n	8003c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	00100002 	.word	0x00100002
 8003c68:	ffff0000 	.word	0xffff0000

08003c6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08c      	sub	sp, #48	; 0x30
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	817b      	strh	r3, [r7, #10]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	813b      	strh	r3, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c86:	f7ff faff 	bl	8003288 <HAL_GetTick>
 8003c8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	f040 8208 	bne.w	80040aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2319      	movs	r3, #25
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	497b      	ldr	r1, [pc, #492]	; (8003e90 <HAL_I2C_Mem_Read+0x224>)
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fb85 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e1fb      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x56>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e1f4      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d007      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2222      	movs	r2, #34	; 0x22
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a5b      	ldr	r2, [pc, #364]	; (8003e94 <HAL_I2C_Mem_Read+0x228>)
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d2a:	88f8      	ldrh	r0, [r7, #6]
 8003d2c:	893a      	ldrh	r2, [r7, #8]
 8003d2e:	8979      	ldrh	r1, [r7, #10]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4603      	mov	r3, r0
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fa52 	bl	80041e4 <I2C_RequestMemoryRead>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e1b0      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d113      	bne.n	8003d7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	623b      	str	r3, [r7, #32]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e184      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d11b      	bne.n	8003dba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e164      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d11b      	bne.n	8003dfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	e144      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e10:	e138      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	f200 80f1 	bhi.w	8003ffe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d123      	bne.n	8003e6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fc1b 	bl	8004664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e139      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e6a:	e10b      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d14e      	bne.n	8003f12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4906      	ldr	r1, [pc, #24]	; (8003e98 <HAL_I2C_Mem_Read+0x22c>)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa98 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e10e      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
 8003e8e:	bf00      	nop
 8003e90:	00100002 	.word	0x00100002
 8003e94:	ffff0000 	.word	0xffff0000
 8003e98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f10:	e0b8      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4966      	ldr	r1, [pc, #408]	; (80040b4 <HAL_I2C_Mem_Read+0x448>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fa49 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0bf      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2200      	movs	r2, #0
 8003f76:	494f      	ldr	r1, [pc, #316]	; (80040b4 <HAL_I2C_Mem_Read+0x448>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fa1b 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e091      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffc:	e042      	b.n	8004084 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fb2e 	bl	8004664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e04c      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d118      	bne.n	8004084 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	f47f aec2 	bne.w	8003e12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010004 	.word	0x00010004

080040b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	460b      	mov	r3, r1
 80040cc:	813b      	strh	r3, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f960 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d103      	bne.n	8004112 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e05f      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	492d      	ldr	r1, [pc, #180]	; (80041e0 <I2C_RequestMemoryWrite+0x128>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f998 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e04c      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fa02 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d107      	bne.n	800417a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02b      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e021      	b.n	80041d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b29b      	uxth	r3, r3
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f9dc 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d107      	bne.n	80041c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e005      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ca:	893b      	ldrh	r3, [r7, #8]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	00010002 	.word	0x00010002

080041e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	2200      	movs	r2, #0
 8004226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8c2 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004244:	d103      	bne.n	800424e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0aa      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	4952      	ldr	r1, [pc, #328]	; (80043b0 <I2C_RequestMemoryRead+0x1cc>)
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8fa 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e097      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f964 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d107      	bne.n	80042b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e076      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]
 80042ca:	e021      	b.n	8004310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042dc:	6a39      	ldr	r1, [r7, #32]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f93e 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d107      	bne.n	8004302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e050      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004306:	893b      	ldrh	r3, [r7, #8]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	6a39      	ldr	r1, [r7, #32]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f923 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b04      	cmp	r3, #4
 8004326:	d107      	bne.n	8004338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e035      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2200      	movs	r2, #0
 8004354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f82b 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d103      	bne.n	800437c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e013      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	4906      	ldr	r1, [pc, #24]	; (80043b0 <I2C_RequestMemoryRead+0x1cc>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f863 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010002 	.word	0x00010002

080043b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c4:	e025      	b.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d021      	beq.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe ff5b 	bl	8003288 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e023      	b.n	800445a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x84>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	e00c      	b.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf0c      	ite	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	2300      	movne	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	429a      	cmp	r2, r3
 8004456:	d0b6      	beq.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004470:	e051      	b.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	d123      	bne.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800449a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 0204 	orr.w	r2, r3, #4
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e046      	b.n	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d021      	beq.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe fed9 	bl	8003288 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e020      	b.n	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10c      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	43da      	mvns	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e00b      	b.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d18d      	bne.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456c:	e02d      	b.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f8ce 	bl	8004710 <I2C_IsAcknowledgeFailed>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e02d      	b.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d021      	beq.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe fe7f 	bl	8003288 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e007      	b.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d1ca      	bne.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ee:	e02d      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f88d 	bl	8004710 <I2C_IsAcknowledgeFailed>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e02d      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004606:	d021      	beq.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fe fe3e 	bl	8003288 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d1ca      	bne.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004670:	e042      	b.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b10      	cmp	r3, #16
 800467e:	d119      	bne.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0210 	mvn.w	r2, #16
 8004688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e029      	b.n	8004708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fde8 	bl	8003288 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e007      	b.n	8004708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d1b5      	bne.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d11b      	bne.n	8004760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0cc      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b68      	ldr	r3, [pc, #416]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d90c      	bls.n	80047ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b65      	ldr	r3, [pc, #404]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a52      	ldr	r2, [pc, #328]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d044      	beq.n	8004890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d119      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	2b03      	cmp	r3, #3
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	4b3f      	ldr	r3, [pc, #252]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e067      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4934      	ldr	r1, [pc, #208]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004860:	f7fe fd12 	bl	8003288 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fe fd0e 	bl	8003288 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e04f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b2b      	ldr	r3, [pc, #172]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d20c      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b22      	ldr	r3, [pc, #136]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f855 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 80048fa:	4601      	mov	r1, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	fa21 f303 	lsr.w	r3, r1, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fc72 	bl	8003200 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023c00 	.word	0x40023c00
 800492c:	40023800 	.word	0x40023800
 8004930:	08007fd0 	.word	0x08007fd0
 8004934:	20000008 	.word	0x20000008
 8004938:	2000000c 	.word	0x2000000c

0800493c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCC_GetHCLKFreq+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000008 	.word	0x20000008

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004958:	f7ff fff0 	bl	800493c <HAL_RCC_GetHCLKFreq>
 800495c:	4601      	mov	r1, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4a03      	ldr	r2, [pc, #12]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496a:	5cd3      	ldrb	r3, [r2, r3]
 800496c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	08007fe0 	.word	0x08007fe0

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004980:	f7ff ffdc 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004984:	4601      	mov	r1, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0b5b      	lsrs	r3, r3, #13
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	08007fe0 	.word	0x08007fe0

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049be:	4bc6      	ldr	r3, [pc, #792]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	f200 817e 	bhi.w	8004cc8 <HAL_RCC_GetSysClockFreq+0x324>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004cc9 	.word	0x08004cc9
 80049dc:	08004cc9 	.word	0x08004cc9
 80049e0:	08004cc9 	.word	0x08004cc9
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004cc9 	.word	0x08004cc9
 80049ec:	08004cc9 	.word	0x08004cc9
 80049f0:	08004cc9 	.word	0x08004cc9
 80049f4:	08004a15 	.word	0x08004a15
 80049f8:	08004cc9 	.word	0x08004cc9
 80049fc:	08004cc9 	.word	0x08004cc9
 8004a00:	08004cc9 	.word	0x08004cc9
 8004a04:	08004b71 	.word	0x08004b71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a08:	4bb4      	ldr	r3, [pc, #720]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x338>)
 8004a0a:	613b      	str	r3, [r7, #16]
       break;
 8004a0c:	e15f      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0e:	4bb4      	ldr	r3, [pc, #720]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004a10:	613b      	str	r3, [r7, #16]
      break;
 8004a12:	e15c      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a14:	4bb0      	ldr	r3, [pc, #704]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1e:	4bae      	ldr	r3, [pc, #696]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d04a      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2a:	4bab      	ldr	r3, [pc, #684]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	ea03 0501 	and.w	r5, r3, r1
 8004a40:	ea04 0602 	and.w	r6, r4, r2
 8004a44:	4629      	mov	r1, r5
 8004a46:	4632      	mov	r2, r6
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	f04f 0400 	mov.w	r4, #0
 8004a50:	0154      	lsls	r4, r2, #5
 8004a52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a56:	014b      	lsls	r3, r1, #5
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	1b49      	subs	r1, r1, r5
 8004a5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	f04f 0400 	mov.w	r4, #0
 8004a6a:	0194      	lsls	r4, r2, #6
 8004a6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a70:	018b      	lsls	r3, r1, #6
 8004a72:	1a5b      	subs	r3, r3, r1
 8004a74:	eb64 0402 	sbc.w	r4, r4, r2
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	00e2      	lsls	r2, r4, #3
 8004a82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a86:	00d9      	lsls	r1, r3, #3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	195b      	adds	r3, r3, r5
 8004a8e:	eb44 0406 	adc.w	r4, r4, r6
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	0262      	lsls	r2, r4, #9
 8004a9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004aa0:	0259      	lsls	r1, r3, #9
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4614      	mov	r4, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	f7fc f8e8 	bl	8000c88 <__aeabi_uldivmod>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e049      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac0:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	f04f 0400 	mov.w	r4, #0
 8004aca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	ea03 0501 	and.w	r5, r3, r1
 8004ad6:	ea04 0602 	and.w	r6, r4, r2
 8004ada:	4629      	mov	r1, r5
 8004adc:	4632      	mov	r2, r6
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	f04f 0400 	mov.w	r4, #0
 8004ae6:	0154      	lsls	r4, r2, #5
 8004ae8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aec:	014b      	lsls	r3, r1, #5
 8004aee:	4619      	mov	r1, r3
 8004af0:	4622      	mov	r2, r4
 8004af2:	1b49      	subs	r1, r1, r5
 8004af4:	eb62 0206 	sbc.w	r2, r2, r6
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	0194      	lsls	r4, r2, #6
 8004b02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b06:	018b      	lsls	r3, r1, #6
 8004b08:	1a5b      	subs	r3, r3, r1
 8004b0a:	eb64 0402 	sbc.w	r4, r4, r2
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	00e2      	lsls	r2, r4, #3
 8004b18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b1c:	00d9      	lsls	r1, r3, #3
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4614      	mov	r4, r2
 8004b22:	195b      	adds	r3, r3, r5
 8004b24:	eb44 0406 	adc.w	r4, r4, r6
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	02a2      	lsls	r2, r4, #10
 8004b32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b36:	0299      	lsls	r1, r3, #10
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4621      	mov	r1, r4
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f04f 0400 	mov.w	r4, #0
 8004b46:	461a      	mov	r2, r3
 8004b48:	4623      	mov	r3, r4
 8004b4a:	f7fc f89d 	bl	8000c88 <__aeabi_uldivmod>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b54:	4b60      	ldr	r3, [pc, #384]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	3301      	adds	r3, #1
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	613b      	str	r3, [r7, #16]
      break;
 8004b6e:	e0ae      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04a      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b54      	ldr	r3, [pc, #336]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	f04f 0400 	mov.w	r4, #0
 8004b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	ea03 0501 	and.w	r5, r3, r1
 8004b9c:	ea04 0602 	and.w	r6, r4, r2
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	0154      	lsls	r4, r2, #5
 8004bae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bb2:	014b      	lsls	r3, r1, #5
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	1b49      	subs	r1, r1, r5
 8004bba:	eb62 0206 	sbc.w	r2, r2, r6
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	f04f 0400 	mov.w	r4, #0
 8004bc6:	0194      	lsls	r4, r2, #6
 8004bc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bcc:	018b      	lsls	r3, r1, #6
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	eb64 0402 	sbc.w	r4, r4, r2
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	00e2      	lsls	r2, r4, #3
 8004bde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004be2:	00d9      	lsls	r1, r3, #3
 8004be4:	460b      	mov	r3, r1
 8004be6:	4614      	mov	r4, r2
 8004be8:	195b      	adds	r3, r3, r5
 8004bea:	eb44 0406 	adc.w	r4, r4, r6
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	0262      	lsls	r2, r4, #9
 8004bf8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004bfc:	0259      	lsls	r1, r3, #9
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4614      	mov	r4, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	4621      	mov	r1, r4
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f04f 0400 	mov.w	r4, #0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4623      	mov	r3, r4
 8004c10:	f7fc f83a 	bl	8000c88 <__aeabi_uldivmod>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e049      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	f04f 0400 	mov.w	r4, #0
 8004c26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	ea03 0501 	and.w	r5, r3, r1
 8004c32:	ea04 0602 	and.w	r6, r4, r2
 8004c36:	4629      	mov	r1, r5
 8004c38:	4632      	mov	r2, r6
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	0154      	lsls	r4, r2, #5
 8004c44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c48:	014b      	lsls	r3, r1, #5
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	1b49      	subs	r1, r1, r5
 8004c50:	eb62 0206 	sbc.w	r2, r2, r6
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	0194      	lsls	r4, r2, #6
 8004c5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c62:	018b      	lsls	r3, r1, #6
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	eb64 0402 	sbc.w	r4, r4, r2
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	00e2      	lsls	r2, r4, #3
 8004c74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c78:	00d9      	lsls	r1, r3, #3
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	195b      	adds	r3, r3, r5
 8004c80:	eb44 0406 	adc.w	r4, r4, r6
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	02a2      	lsls	r2, r4, #10
 8004c8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c92:	0299      	lsls	r1, r3, #10
 8004c94:	460b      	mov	r3, r1
 8004c96:	4614      	mov	r4, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	f7fb ffef 	bl	8000c88 <__aeabi_uldivmod>
 8004caa:	4603      	mov	r3, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0f1b      	lsrs	r3, r3, #28
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	613b      	str	r3, [r7, #16]
      break;
 8004cc6:	e002      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x338>)
 8004cca:	613b      	str	r3, [r7, #16]
      break;
 8004ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cce:	693b      	ldr	r3, [r7, #16]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	007a1200 	.word	0x007a1200

08004ce4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8083 	beq.w	8004e04 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cfe:	4b95      	ldr	r3, [pc, #596]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d019      	beq.n	8004d3e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d0a:	4b92      	ldr	r3, [pc, #584]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d106      	bne.n	8004d24 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d16:	4b8f      	ldr	r3, [pc, #572]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d22:	d00c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d24:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d112      	bne.n	8004d56 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3c:	d10b      	bne.n	8004d56 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3e:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d05b      	beq.n	8004e02 <HAL_RCC_OscConfig+0x11e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d157      	bne.n	8004e02 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e216      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCC_OscConfig+0x8a>
 8004d60:	4b7c      	ldr	r3, [pc, #496]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a7b      	ldr	r2, [pc, #492]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e01d      	b.n	8004daa <HAL_RCC_OscConfig+0xc6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d76:	d10c      	bne.n	8004d92 <HAL_RCC_OscConfig+0xae>
 8004d78:	4b76      	ldr	r3, [pc, #472]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a75      	ldr	r2, [pc, #468]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a72      	ldr	r2, [pc, #456]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e00b      	b.n	8004daa <HAL_RCC_OscConfig+0xc6>
 8004d92:	4b70      	ldr	r3, [pc, #448]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a6f      	ldr	r2, [pc, #444]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b6d      	ldr	r3, [pc, #436]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6c      	ldr	r2, [pc, #432]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d013      	beq.n	8004dda <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fe fa69 	bl	8003288 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dba:	f7fe fa65 	bl	8003288 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b64      	cmp	r3, #100	; 0x64
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1db      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dcc:	4b61      	ldr	r3, [pc, #388]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0xd6>
 8004dd8:	e014      	b.n	8004e04 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fe fa55 	bl	8003288 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de2:	f7fe fa51 	bl	8003288 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b64      	cmp	r3, #100	; 0x64
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e1c7      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f0      	bne.n	8004de2 <HAL_RCC_OscConfig+0xfe>
 8004e00:	e000      	b.n	8004e04 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d06f      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e10:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d017      	beq.n	8004e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e1c:	4b4d      	ldr	r3, [pc, #308]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d105      	bne.n	8004e34 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e28:	4b4a      	ldr	r3, [pc, #296]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e34:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d11c      	bne.n	8004e7a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e40:	4b44      	ldr	r3, [pc, #272]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4c:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x180>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e18f      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4938      	ldr	r1, [pc, #224]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e78:	e03a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d020      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e82:	4b35      	ldr	r3, [pc, #212]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe f9fe 	bl	8003288 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e90:	f7fe f9fa 	bl	8003288 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e170      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4925      	ldr	r1, [pc, #148]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
 8004ec2:	e015      	b.n	8004ef0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7fe f9dd 	bl	8003288 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed2:	f7fe f9d9 	bl	8003288 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e14f      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d037      	beq.n	8004f6c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d016      	beq.n	8004f32 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_RCC_OscConfig+0x278>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fe f9bd 	bl	8003288 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fe f9b9 	bl	8003288 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e12f      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x22e>
 8004f30:	e01c      	b.n	8004f6c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_RCC_OscConfig+0x278>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fe f9a6 	bl	8003288 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3e:	e00f      	b.n	8004f60 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fe f9a2 	bl	8003288 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d908      	bls.n	8004f60 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e118      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	42470000 	.word	0x42470000
 8004f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	4b8a      	ldr	r3, [pc, #552]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e9      	bne.n	8004f40 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8097 	beq.w	80050a8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4b83      	ldr	r3, [pc, #524]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	4b7f      	ldr	r3, [pc, #508]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4a7e      	ldr	r2, [pc, #504]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	4b7c      	ldr	r3, [pc, #496]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	4b79      	ldr	r3, [pc, #484]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d118      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb6:	4b76      	ldr	r3, [pc, #472]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a75      	ldr	r2, [pc, #468]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fe f961 	bl	8003288 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fca:	f7fe f95d 	bl	8003288 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0d3      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	4b6c      	ldr	r3, [pc, #432]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0x31a>
 8004ff0:	4b66      	ldr	r3, [pc, #408]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4a65      	ldr	r2, [pc, #404]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffc:	e01c      	b.n	8005038 <HAL_RCC_OscConfig+0x354>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b05      	cmp	r3, #5
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x33c>
 8005006:	4b61      	ldr	r3, [pc, #388]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	4a60      	ldr	r2, [pc, #384]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 800500c:	f043 0304 	orr.w	r3, r3, #4
 8005010:	6713      	str	r3, [r2, #112]	; 0x70
 8005012:	4b5e      	ldr	r3, [pc, #376]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	4a5d      	ldr	r2, [pc, #372]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6713      	str	r3, [r2, #112]	; 0x70
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0x354>
 8005020:	4b5a      	ldr	r3, [pc, #360]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a59      	ldr	r2, [pc, #356]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
 800502c:	4b57      	ldr	r3, [pc, #348]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4a56      	ldr	r2, [pc, #344]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005032:	f023 0304 	bic.w	r3, r3, #4
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fe f922 	bl	8003288 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fe f91e 	bl	8003288 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e092      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	4b4b      	ldr	r3, [pc, #300]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ee      	beq.n	8005048 <HAL_RCC_OscConfig+0x364>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fe f90c 	bl	8003288 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005072:	e00a      	b.n	800508a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f7fe f908 	bl	8003288 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e07c      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800508a:	4b40      	ldr	r3, [pc, #256]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1ee      	bne.n	8005074 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d105      	bne.n	80050a8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	4a3a      	ldr	r2, [pc, #232]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 80050a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d068      	beq.n	8005182 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b0:	4b36      	ldr	r3, [pc, #216]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d060      	beq.n	800517e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d145      	bne.n	8005150 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c4:	4b33      	ldr	r3, [pc, #204]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fe f8dd 	bl	8003288 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d2:	f7fe f8d9 	bl	8003288 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e04f      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e4:	4b29      	ldr	r3, [pc, #164]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	019b      	lsls	r3, r3, #6
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	071b      	lsls	r3, r3, #28
 800511c:	491b      	ldr	r1, [pc, #108]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 800511e:	4313      	orrs	r3, r2
 8005120:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fe f8ae 	bl	8003288 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005130:	f7fe f8aa 	bl	8003288 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e020      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x44c>
 800514e:	e018      	b.n	8005182 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fe f897 	bl	8003288 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515e:	f7fe f893 	bl	8003288 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e009      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <HAL_RCC_OscConfig+0x4a8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f0      	bne.n	800515e <HAL_RCC_OscConfig+0x47a>
 800517c:	e001      	b.n	8005182 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	40007000 	.word	0x40007000
 8005194:	42470060 	.word	0x42470060

08005198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e03f      	b.n	800522a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd ff14 	bl	8002fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f90b 	bl	80053f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b088      	sub	sp, #32
 8005236:	af02      	add	r7, sp, #8
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b20      	cmp	r3, #32
 8005250:	f040 8083 	bne.w	800535a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Transmit+0x2e>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e07b      	b.n	800535c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_UART_Transmit+0x40>
 800526e:	2302      	movs	r3, #2
 8005270:	e074      	b.n	800535c <HAL_UART_Transmit+0x12a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2221      	movs	r2, #33	; 0x21
 8005284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005288:	f7fd fffe 	bl	8003288 <HAL_GetTick>
 800528c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80052a2:	e042      	b.n	800532a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ba:	d122      	bne.n	8005302 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f84c 	bl	8005364 <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e042      	b.n	800535c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3302      	adds	r3, #2
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	e017      	b.n	800532a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	e013      	b.n	800532a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2200      	movs	r2, #0
 800530a:	2180      	movs	r1, #128	; 0x80
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f829 	bl	8005364 <UART_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e01f      	b.n	800535c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	60ba      	str	r2, [r7, #8]
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1b7      	bne.n	80052a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2200      	movs	r2, #0
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f810 	bl	8005364 <UART_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e006      	b.n	800535c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	e000      	b.n	800535c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800535a:	2302      	movs	r3, #2
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005374:	e02c      	b.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d028      	beq.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <UART_WaitOnFlagUntilTimeout+0x30>
 8005384:	f7fd ff80 	bl	8003288 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d21d      	bcs.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e00f      	b.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4013      	ands	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	bf0c      	ite	eq
 80053e0:	2301      	moveq	r3, #1
 80053e2:	2300      	movne	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d0c3      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800543a:	f023 030c 	bic.w	r3, r3, #12
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	430b      	orrs	r3, r1
 8005446:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005466:	f040 818b 	bne.w	8005780 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4ac1      	ldr	r2, [pc, #772]	; (8005774 <UART_SetConfig+0x37c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d005      	beq.n	8005480 <UART_SetConfig+0x88>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4abf      	ldr	r2, [pc, #764]	; (8005778 <UART_SetConfig+0x380>)
 800547a:	4293      	cmp	r3, r2
 800547c:	f040 80bd 	bne.w	80055fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005480:	f7ff fa7c 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8005484:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	461d      	mov	r5, r3
 800548a:	f04f 0600 	mov.w	r6, #0
 800548e:	46a8      	mov	r8, r5
 8005490:	46b1      	mov	r9, r6
 8005492:	eb18 0308 	adds.w	r3, r8, r8
 8005496:	eb49 0409 	adc.w	r4, r9, r9
 800549a:	4698      	mov	r8, r3
 800549c:	46a1      	mov	r9, r4
 800549e:	eb18 0805 	adds.w	r8, r8, r5
 80054a2:	eb49 0906 	adc.w	r9, r9, r6
 80054a6:	f04f 0100 	mov.w	r1, #0
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054ba:	4688      	mov	r8, r1
 80054bc:	4691      	mov	r9, r2
 80054be:	eb18 0005 	adds.w	r0, r8, r5
 80054c2:	eb49 0106 	adc.w	r1, r9, r6
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	461d      	mov	r5, r3
 80054cc:	f04f 0600 	mov.w	r6, #0
 80054d0:	196b      	adds	r3, r5, r5
 80054d2:	eb46 0406 	adc.w	r4, r6, r6
 80054d6:	461a      	mov	r2, r3
 80054d8:	4623      	mov	r3, r4
 80054da:	f7fb fbd5 	bl	8000c88 <__aeabi_uldivmod>
 80054de:	4603      	mov	r3, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	461a      	mov	r2, r3
 80054e4:	4ba5      	ldr	r3, [pc, #660]	; (800577c <UART_SetConfig+0x384>)
 80054e6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	461d      	mov	r5, r3
 80054f4:	f04f 0600 	mov.w	r6, #0
 80054f8:	46a9      	mov	r9, r5
 80054fa:	46b2      	mov	sl, r6
 80054fc:	eb19 0309 	adds.w	r3, r9, r9
 8005500:	eb4a 040a 	adc.w	r4, sl, sl
 8005504:	4699      	mov	r9, r3
 8005506:	46a2      	mov	sl, r4
 8005508:	eb19 0905 	adds.w	r9, r9, r5
 800550c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800551c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005524:	4689      	mov	r9, r1
 8005526:	4692      	mov	sl, r2
 8005528:	eb19 0005 	adds.w	r0, r9, r5
 800552c:	eb4a 0106 	adc.w	r1, sl, r6
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	461d      	mov	r5, r3
 8005536:	f04f 0600 	mov.w	r6, #0
 800553a:	196b      	adds	r3, r5, r5
 800553c:	eb46 0406 	adc.w	r4, r6, r6
 8005540:	461a      	mov	r2, r3
 8005542:	4623      	mov	r3, r4
 8005544:	f7fb fba0 	bl	8000c88 <__aeabi_uldivmod>
 8005548:	4603      	mov	r3, r0
 800554a:	460c      	mov	r4, r1
 800554c:	461a      	mov	r2, r3
 800554e:	4b8b      	ldr	r3, [pc, #556]	; (800577c <UART_SetConfig+0x384>)
 8005550:	fba3 1302 	umull	r1, r3, r3, r2
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	2164      	movs	r1, #100	; 0x64
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	3332      	adds	r3, #50	; 0x32
 8005562:	4a86      	ldr	r2, [pc, #536]	; (800577c <UART_SetConfig+0x384>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005570:	4498      	add	r8, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	461d      	mov	r5, r3
 8005576:	f04f 0600 	mov.w	r6, #0
 800557a:	46a9      	mov	r9, r5
 800557c:	46b2      	mov	sl, r6
 800557e:	eb19 0309 	adds.w	r3, r9, r9
 8005582:	eb4a 040a 	adc.w	r4, sl, sl
 8005586:	4699      	mov	r9, r3
 8005588:	46a2      	mov	sl, r4
 800558a:	eb19 0905 	adds.w	r9, r9, r5
 800558e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055a6:	4689      	mov	r9, r1
 80055a8:	4692      	mov	sl, r2
 80055aa:	eb19 0005 	adds.w	r0, r9, r5
 80055ae:	eb4a 0106 	adc.w	r1, sl, r6
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	461d      	mov	r5, r3
 80055b8:	f04f 0600 	mov.w	r6, #0
 80055bc:	196b      	adds	r3, r5, r5
 80055be:	eb46 0406 	adc.w	r4, r6, r6
 80055c2:	461a      	mov	r2, r3
 80055c4:	4623      	mov	r3, r4
 80055c6:	f7fb fb5f 	bl	8000c88 <__aeabi_uldivmod>
 80055ca:	4603      	mov	r3, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b6a      	ldr	r3, [pc, #424]	; (800577c <UART_SetConfig+0x384>)
 80055d2:	fba3 1302 	umull	r1, r3, r3, r2
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	2164      	movs	r1, #100	; 0x64
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	3332      	adds	r3, #50	; 0x32
 80055e4:	4a65      	ldr	r2, [pc, #404]	; (800577c <UART_SetConfig+0x384>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f003 0207 	and.w	r2, r3, #7
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4442      	add	r2, r8
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	e26f      	b.n	8005ada <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055fa:	f7ff f9ab 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 80055fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	461d      	mov	r5, r3
 8005604:	f04f 0600 	mov.w	r6, #0
 8005608:	46a8      	mov	r8, r5
 800560a:	46b1      	mov	r9, r6
 800560c:	eb18 0308 	adds.w	r3, r8, r8
 8005610:	eb49 0409 	adc.w	r4, r9, r9
 8005614:	4698      	mov	r8, r3
 8005616:	46a1      	mov	r9, r4
 8005618:	eb18 0805 	adds.w	r8, r8, r5
 800561c:	eb49 0906 	adc.w	r9, r9, r6
 8005620:	f04f 0100 	mov.w	r1, #0
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800562c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005630:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005634:	4688      	mov	r8, r1
 8005636:	4691      	mov	r9, r2
 8005638:	eb18 0005 	adds.w	r0, r8, r5
 800563c:	eb49 0106 	adc.w	r1, r9, r6
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	461d      	mov	r5, r3
 8005646:	f04f 0600 	mov.w	r6, #0
 800564a:	196b      	adds	r3, r5, r5
 800564c:	eb46 0406 	adc.w	r4, r6, r6
 8005650:	461a      	mov	r2, r3
 8005652:	4623      	mov	r3, r4
 8005654:	f7fb fb18 	bl	8000c88 <__aeabi_uldivmod>
 8005658:	4603      	mov	r3, r0
 800565a:	460c      	mov	r4, r1
 800565c:	461a      	mov	r2, r3
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <UART_SetConfig+0x384>)
 8005660:	fba3 2302 	umull	r2, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	461d      	mov	r5, r3
 800566e:	f04f 0600 	mov.w	r6, #0
 8005672:	46a9      	mov	r9, r5
 8005674:	46b2      	mov	sl, r6
 8005676:	eb19 0309 	adds.w	r3, r9, r9
 800567a:	eb4a 040a 	adc.w	r4, sl, sl
 800567e:	4699      	mov	r9, r3
 8005680:	46a2      	mov	sl, r4
 8005682:	eb19 0905 	adds.w	r9, r9, r5
 8005686:	eb4a 0a06 	adc.w	sl, sl, r6
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800569a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800569e:	4689      	mov	r9, r1
 80056a0:	4692      	mov	sl, r2
 80056a2:	eb19 0005 	adds.w	r0, r9, r5
 80056a6:	eb4a 0106 	adc.w	r1, sl, r6
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	461d      	mov	r5, r3
 80056b0:	f04f 0600 	mov.w	r6, #0
 80056b4:	196b      	adds	r3, r5, r5
 80056b6:	eb46 0406 	adc.w	r4, r6, r6
 80056ba:	461a      	mov	r2, r3
 80056bc:	4623      	mov	r3, r4
 80056be:	f7fb fae3 	bl	8000c88 <__aeabi_uldivmod>
 80056c2:	4603      	mov	r3, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b2c      	ldr	r3, [pc, #176]	; (800577c <UART_SetConfig+0x384>)
 80056ca:	fba3 1302 	umull	r1, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2164      	movs	r1, #100	; 0x64
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a27      	ldr	r2, [pc, #156]	; (800577c <UART_SetConfig+0x384>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ea:	4498      	add	r8, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	461d      	mov	r5, r3
 80056f0:	f04f 0600 	mov.w	r6, #0
 80056f4:	46a9      	mov	r9, r5
 80056f6:	46b2      	mov	sl, r6
 80056f8:	eb19 0309 	adds.w	r3, r9, r9
 80056fc:	eb4a 040a 	adc.w	r4, sl, sl
 8005700:	4699      	mov	r9, r3
 8005702:	46a2      	mov	sl, r4
 8005704:	eb19 0905 	adds.w	r9, r9, r5
 8005708:	eb4a 0a06 	adc.w	sl, sl, r6
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800571c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005720:	4689      	mov	r9, r1
 8005722:	4692      	mov	sl, r2
 8005724:	eb19 0005 	adds.w	r0, r9, r5
 8005728:	eb4a 0106 	adc.w	r1, sl, r6
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	461d      	mov	r5, r3
 8005732:	f04f 0600 	mov.w	r6, #0
 8005736:	196b      	adds	r3, r5, r5
 8005738:	eb46 0406 	adc.w	r4, r6, r6
 800573c:	461a      	mov	r2, r3
 800573e:	4623      	mov	r3, r4
 8005740:	f7fb faa2 	bl	8000c88 <__aeabi_uldivmod>
 8005744:	4603      	mov	r3, r0
 8005746:	460c      	mov	r4, r1
 8005748:	461a      	mov	r2, r3
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <UART_SetConfig+0x384>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	; 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	3332      	adds	r3, #50	; 0x32
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <UART_SetConfig+0x384>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 0207 	and.w	r2, r3, #7
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4442      	add	r2, r8
 8005770:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005772:	e1b2      	b.n	8005ada <UART_SetConfig+0x6e2>
 8005774:	40011000 	.word	0x40011000
 8005778:	40011400 	.word	0x40011400
 800577c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4ad7      	ldr	r2, [pc, #860]	; (8005ae4 <UART_SetConfig+0x6ec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d005      	beq.n	8005796 <UART_SetConfig+0x39e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4ad6      	ldr	r2, [pc, #856]	; (8005ae8 <UART_SetConfig+0x6f0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	f040 80d1 	bne.w	8005938 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005796:	f7ff f8f1 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 800579a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	469a      	mov	sl, r3
 80057a0:	f04f 0b00 	mov.w	fp, #0
 80057a4:	46d0      	mov	r8, sl
 80057a6:	46d9      	mov	r9, fp
 80057a8:	eb18 0308 	adds.w	r3, r8, r8
 80057ac:	eb49 0409 	adc.w	r4, r9, r9
 80057b0:	4698      	mov	r8, r3
 80057b2:	46a1      	mov	r9, r4
 80057b4:	eb18 080a 	adds.w	r8, r8, sl
 80057b8:	eb49 090b 	adc.w	r9, r9, fp
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057d0:	4688      	mov	r8, r1
 80057d2:	4691      	mov	r9, r2
 80057d4:	eb1a 0508 	adds.w	r5, sl, r8
 80057d8:	eb4b 0609 	adc.w	r6, fp, r9
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4619      	mov	r1, r3
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	f04f 0400 	mov.w	r4, #0
 80057ee:	0094      	lsls	r4, r2, #2
 80057f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057f4:	008b      	lsls	r3, r1, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	4623      	mov	r3, r4
 80057fa:	4628      	mov	r0, r5
 80057fc:	4631      	mov	r1, r6
 80057fe:	f7fb fa43 	bl	8000c88 <__aeabi_uldivmod>
 8005802:	4603      	mov	r3, r0
 8005804:	460c      	mov	r4, r1
 8005806:	461a      	mov	r2, r3
 8005808:	4bb8      	ldr	r3, [pc, #736]	; (8005aec <UART_SetConfig+0x6f4>)
 800580a:	fba3 2302 	umull	r2, r3, r3, r2
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	469b      	mov	fp, r3
 8005818:	f04f 0c00 	mov.w	ip, #0
 800581c:	46d9      	mov	r9, fp
 800581e:	46e2      	mov	sl, ip
 8005820:	eb19 0309 	adds.w	r3, r9, r9
 8005824:	eb4a 040a 	adc.w	r4, sl, sl
 8005828:	4699      	mov	r9, r3
 800582a:	46a2      	mov	sl, r4
 800582c:	eb19 090b 	adds.w	r9, r9, fp
 8005830:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005834:	f04f 0100 	mov.w	r1, #0
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005840:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005844:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005848:	4689      	mov	r9, r1
 800584a:	4692      	mov	sl, r2
 800584c:	eb1b 0509 	adds.w	r5, fp, r9
 8005850:	eb4c 060a 	adc.w	r6, ip, sl
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4619      	mov	r1, r3
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	0094      	lsls	r4, r2, #2
 8005868:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800586c:	008b      	lsls	r3, r1, #2
 800586e:	461a      	mov	r2, r3
 8005870:	4623      	mov	r3, r4
 8005872:	4628      	mov	r0, r5
 8005874:	4631      	mov	r1, r6
 8005876:	f7fb fa07 	bl	8000c88 <__aeabi_uldivmod>
 800587a:	4603      	mov	r3, r0
 800587c:	460c      	mov	r4, r1
 800587e:	461a      	mov	r2, r3
 8005880:	4b9a      	ldr	r3, [pc, #616]	; (8005aec <UART_SetConfig+0x6f4>)
 8005882:	fba3 1302 	umull	r1, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2164      	movs	r1, #100	; 0x64
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	3332      	adds	r3, #50	; 0x32
 8005894:	4a95      	ldr	r2, [pc, #596]	; (8005aec <UART_SetConfig+0x6f4>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a0:	4498      	add	r8, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	469b      	mov	fp, r3
 80058a6:	f04f 0c00 	mov.w	ip, #0
 80058aa:	46d9      	mov	r9, fp
 80058ac:	46e2      	mov	sl, ip
 80058ae:	eb19 0309 	adds.w	r3, r9, r9
 80058b2:	eb4a 040a 	adc.w	r4, sl, sl
 80058b6:	4699      	mov	r9, r3
 80058b8:	46a2      	mov	sl, r4
 80058ba:	eb19 090b 	adds.w	r9, r9, fp
 80058be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058c2:	f04f 0100 	mov.w	r1, #0
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058d6:	4689      	mov	r9, r1
 80058d8:	4692      	mov	sl, r2
 80058da:	eb1b 0509 	adds.w	r5, fp, r9
 80058de:	eb4c 060a 	adc.w	r6, ip, sl
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4619      	mov	r1, r3
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	0094      	lsls	r4, r2, #2
 80058f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058fa:	008b      	lsls	r3, r1, #2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4623      	mov	r3, r4
 8005900:	4628      	mov	r0, r5
 8005902:	4631      	mov	r1, r6
 8005904:	f7fb f9c0 	bl	8000c88 <__aeabi_uldivmod>
 8005908:	4603      	mov	r3, r0
 800590a:	460c      	mov	r4, r1
 800590c:	461a      	mov	r2, r3
 800590e:	4b77      	ldr	r3, [pc, #476]	; (8005aec <UART_SetConfig+0x6f4>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	; 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	3332      	adds	r3, #50	; 0x32
 8005922:	4a72      	ldr	r2, [pc, #456]	; (8005aec <UART_SetConfig+0x6f4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4442      	add	r2, r8
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	e0d0      	b.n	8005ada <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005938:	f7ff f80c 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 800593c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	469a      	mov	sl, r3
 8005942:	f04f 0b00 	mov.w	fp, #0
 8005946:	46d0      	mov	r8, sl
 8005948:	46d9      	mov	r9, fp
 800594a:	eb18 0308 	adds.w	r3, r8, r8
 800594e:	eb49 0409 	adc.w	r4, r9, r9
 8005952:	4698      	mov	r8, r3
 8005954:	46a1      	mov	r9, r4
 8005956:	eb18 080a 	adds.w	r8, r8, sl
 800595a:	eb49 090b 	adc.w	r9, r9, fp
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800596a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800596e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005972:	4688      	mov	r8, r1
 8005974:	4691      	mov	r9, r2
 8005976:	eb1a 0508 	adds.w	r5, sl, r8
 800597a:	eb4b 0609 	adc.w	r6, fp, r9
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4619      	mov	r1, r3
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	0094      	lsls	r4, r2, #2
 8005992:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005996:	008b      	lsls	r3, r1, #2
 8005998:	461a      	mov	r2, r3
 800599a:	4623      	mov	r3, r4
 800599c:	4628      	mov	r0, r5
 800599e:	4631      	mov	r1, r6
 80059a0:	f7fb f972 	bl	8000c88 <__aeabi_uldivmod>
 80059a4:	4603      	mov	r3, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	461a      	mov	r2, r3
 80059aa:	4b50      	ldr	r3, [pc, #320]	; (8005aec <UART_SetConfig+0x6f4>)
 80059ac:	fba3 2302 	umull	r2, r3, r3, r2
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	469b      	mov	fp, r3
 80059ba:	f04f 0c00 	mov.w	ip, #0
 80059be:	46d9      	mov	r9, fp
 80059c0:	46e2      	mov	sl, ip
 80059c2:	eb19 0309 	adds.w	r3, r9, r9
 80059c6:	eb4a 040a 	adc.w	r4, sl, sl
 80059ca:	4699      	mov	r9, r3
 80059cc:	46a2      	mov	sl, r4
 80059ce:	eb19 090b 	adds.w	r9, r9, fp
 80059d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059d6:	f04f 0100 	mov.w	r1, #0
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ea:	4689      	mov	r9, r1
 80059ec:	4692      	mov	sl, r2
 80059ee:	eb1b 0509 	adds.w	r5, fp, r9
 80059f2:	eb4c 060a 	adc.w	r6, ip, sl
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4619      	mov	r1, r3
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	0094      	lsls	r4, r2, #2
 8005a0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a0e:	008b      	lsls	r3, r1, #2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4623      	mov	r3, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	4631      	mov	r1, r6
 8005a18:	f7fb f936 	bl	8000c88 <__aeabi_uldivmod>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	461a      	mov	r2, r3
 8005a22:	4b32      	ldr	r3, [pc, #200]	; (8005aec <UART_SetConfig+0x6f4>)
 8005a24:	fba3 1302 	umull	r1, r3, r3, r2
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	2164      	movs	r1, #100	; 0x64
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	3332      	adds	r3, #50	; 0x32
 8005a36:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <UART_SetConfig+0x6f4>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a42:	4498      	add	r8, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	469b      	mov	fp, r3
 8005a48:	f04f 0c00 	mov.w	ip, #0
 8005a4c:	46d9      	mov	r9, fp
 8005a4e:	46e2      	mov	sl, ip
 8005a50:	eb19 0309 	adds.w	r3, r9, r9
 8005a54:	eb4a 040a 	adc.w	r4, sl, sl
 8005a58:	4699      	mov	r9, r3
 8005a5a:	46a2      	mov	sl, r4
 8005a5c:	eb19 090b 	adds.w	r9, r9, fp
 8005a60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a78:	4689      	mov	r9, r1
 8005a7a:	4692      	mov	sl, r2
 8005a7c:	eb1b 0509 	adds.w	r5, fp, r9
 8005a80:	eb4c 060a 	adc.w	r6, ip, sl
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	0094      	lsls	r4, r2, #2
 8005a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a9c:	008b      	lsls	r3, r1, #2
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	f7fb f8ef 	bl	8000c88 <__aeabi_uldivmod>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <UART_SetConfig+0x6f4>)
 8005ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2164      	movs	r1, #100	; 0x64
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	3332      	adds	r3, #50	; 0x32
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <UART_SetConfig+0x6f4>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f003 020f 	and.w	r2, r3, #15
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4442      	add	r2, r8
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	e7ff      	b.n	8005ada <UART_SetConfig+0x6e2>
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	40011400 	.word	0x40011400
 8005aec:	51eb851f 	.word	0x51eb851f

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000014 	.word	0x20000014

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4e0d      	ldr	r6, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1ba4      	subs	r4, r4, r6
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2500      	movs	r5, #0
 8005b08:	42a5      	cmp	r5, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4e0b      	ldr	r6, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f002 f99e 	bl	8007e50 <_init>
 8005b14:	1ba4      	subs	r4, r4, r6
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2500      	movs	r5, #0
 8005b1a:	42a5      	cmp	r5, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b24:	4798      	blx	r3
 8005b26:	3501      	adds	r5, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b2e:	4798      	blx	r3
 8005b30:	3501      	adds	r5, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08008258 	.word	0x08008258
 8005b38:	08008258 	.word	0x08008258
 8005b3c:	08008258 	.word	0x08008258
 8005b40:	0800825c 	.word	0x0800825c

08005b44 <memset>:
 8005b44:	4402      	add	r2, r0
 8005b46:	4603      	mov	r3, r0
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <memset+0xa>
 8005b4c:	4770      	bx	lr
 8005b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b52:	e7f9      	b.n	8005b48 <memset+0x4>

08005b54 <__cvt>:
 8005b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	ec55 4b10 	vmov	r4, r5, d0
 8005b5c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005b5e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	460e      	mov	r6, r1
 8005b66:	4691      	mov	r9, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	bfb8      	it	lt
 8005b6c:	4622      	movlt	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	f027 0720 	bic.w	r7, r7, #32
 8005b74:	bfbb      	ittet	lt
 8005b76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b7a:	461d      	movlt	r5, r3
 8005b7c:	2300      	movge	r3, #0
 8005b7e:	232d      	movlt	r3, #45	; 0x2d
 8005b80:	bfb8      	it	lt
 8005b82:	4614      	movlt	r4, r2
 8005b84:	2f46      	cmp	r7, #70	; 0x46
 8005b86:	700b      	strb	r3, [r1, #0]
 8005b88:	d004      	beq.n	8005b94 <__cvt+0x40>
 8005b8a:	2f45      	cmp	r7, #69	; 0x45
 8005b8c:	d100      	bne.n	8005b90 <__cvt+0x3c>
 8005b8e:	3601      	adds	r6, #1
 8005b90:	2102      	movs	r1, #2
 8005b92:	e000      	b.n	8005b96 <__cvt+0x42>
 8005b94:	2103      	movs	r1, #3
 8005b96:	ab03      	add	r3, sp, #12
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	ab02      	add	r3, sp, #8
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	4653      	mov	r3, sl
 8005ba2:	ec45 4b10 	vmov	d0, r4, r5
 8005ba6:	f000 fd13 	bl	80065d0 <_dtoa_r>
 8005baa:	2f47      	cmp	r7, #71	; 0x47
 8005bac:	4680      	mov	r8, r0
 8005bae:	d102      	bne.n	8005bb6 <__cvt+0x62>
 8005bb0:	f019 0f01 	tst.w	r9, #1
 8005bb4:	d026      	beq.n	8005c04 <__cvt+0xb0>
 8005bb6:	2f46      	cmp	r7, #70	; 0x46
 8005bb8:	eb08 0906 	add.w	r9, r8, r6
 8005bbc:	d111      	bne.n	8005be2 <__cvt+0x8e>
 8005bbe:	f898 3000 	ldrb.w	r3, [r8]
 8005bc2:	2b30      	cmp	r3, #48	; 0x30
 8005bc4:	d10a      	bne.n	8005bdc <__cvt+0x88>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7fa ff9b 	bl	8000b08 <__aeabi_dcmpeq>
 8005bd2:	b918      	cbnz	r0, 8005bdc <__cvt+0x88>
 8005bd4:	f1c6 0601 	rsb	r6, r6, #1
 8005bd8:	f8ca 6000 	str.w	r6, [sl]
 8005bdc:	f8da 3000 	ldr.w	r3, [sl]
 8005be0:	4499      	add	r9, r3
 8005be2:	2200      	movs	r2, #0
 8005be4:	2300      	movs	r3, #0
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8005bee:	b938      	cbnz	r0, 8005c00 <__cvt+0xac>
 8005bf0:	2230      	movs	r2, #48	; 0x30
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	454b      	cmp	r3, r9
 8005bf6:	d205      	bcs.n	8005c04 <__cvt+0xb0>
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	9103      	str	r1, [sp, #12]
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e7f8      	b.n	8005bf2 <__cvt+0x9e>
 8005c00:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c08:	eba3 0308 	sub.w	r3, r3, r8
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	b004      	add	sp, #16
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c16 <__exponent>:
 8005c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	bfba      	itte	lt
 8005c1e:	4249      	neglt	r1, r1
 8005c20:	232d      	movlt	r3, #45	; 0x2d
 8005c22:	232b      	movge	r3, #43	; 0x2b
 8005c24:	2909      	cmp	r1, #9
 8005c26:	f804 2b02 	strb.w	r2, [r4], #2
 8005c2a:	7043      	strb	r3, [r0, #1]
 8005c2c:	dd20      	ble.n	8005c70 <__exponent+0x5a>
 8005c2e:	f10d 0307 	add.w	r3, sp, #7
 8005c32:	461f      	mov	r7, r3
 8005c34:	260a      	movs	r6, #10
 8005c36:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c3a:	fb06 1115 	mls	r1, r6, r5, r1
 8005c3e:	3130      	adds	r1, #48	; 0x30
 8005c40:	2d09      	cmp	r5, #9
 8005c42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c46:	f103 32ff 	add.w	r2, r3, #4294967295
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	dc09      	bgt.n	8005c62 <__exponent+0x4c>
 8005c4e:	3130      	adds	r1, #48	; 0x30
 8005c50:	3b02      	subs	r3, #2
 8005c52:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005c56:	42bb      	cmp	r3, r7
 8005c58:	4622      	mov	r2, r4
 8005c5a:	d304      	bcc.n	8005c66 <__exponent+0x50>
 8005c5c:	1a10      	subs	r0, r2, r0
 8005c5e:	b003      	add	sp, #12
 8005c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c62:	4613      	mov	r3, r2
 8005c64:	e7e7      	b.n	8005c36 <__exponent+0x20>
 8005c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c6a:	f804 2b01 	strb.w	r2, [r4], #1
 8005c6e:	e7f2      	b.n	8005c56 <__exponent+0x40>
 8005c70:	2330      	movs	r3, #48	; 0x30
 8005c72:	4419      	add	r1, r3
 8005c74:	7083      	strb	r3, [r0, #2]
 8005c76:	1d02      	adds	r2, r0, #4
 8005c78:	70c1      	strb	r1, [r0, #3]
 8005c7a:	e7ef      	b.n	8005c5c <__exponent+0x46>

08005c7c <_printf_float>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	b08d      	sub	sp, #52	; 0x34
 8005c82:	460c      	mov	r4, r1
 8005c84:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005c88:	4616      	mov	r6, r2
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	f001 fa57 	bl	8007140 <_localeconv_r>
 8005c92:	6803      	ldr	r3, [r0, #0]
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa faba 	bl	8000210 <strlen>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca4:	9005      	str	r0, [sp, #20]
 8005ca6:	3307      	adds	r3, #7
 8005ca8:	f023 0307 	bic.w	r3, r3, #7
 8005cac:	f103 0208 	add.w	r2, r3, #8
 8005cb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005cb8:	f8c8 2000 	str.w	r2, [r8]
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cc4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ccc:	9307      	str	r3, [sp, #28]
 8005cce:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd6:	4ba7      	ldr	r3, [pc, #668]	; (8005f74 <_printf_float+0x2f8>)
 8005cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cdc:	f7fa ff46 	bl	8000b6c <__aeabi_dcmpun>
 8005ce0:	bb70      	cbnz	r0, 8005d40 <_printf_float+0xc4>
 8005ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce6:	4ba3      	ldr	r3, [pc, #652]	; (8005f74 <_printf_float+0x2f8>)
 8005ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cec:	f7fa ff20 	bl	8000b30 <__aeabi_dcmple>
 8005cf0:	bb30      	cbnz	r0, 8005d40 <_printf_float+0xc4>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	f7fa ff0f 	bl	8000b1c <__aeabi_dcmplt>
 8005cfe:	b110      	cbz	r0, 8005d06 <_printf_float+0x8a>
 8005d00:	232d      	movs	r3, #45	; 0x2d
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d06:	4a9c      	ldr	r2, [pc, #624]	; (8005f78 <_printf_float+0x2fc>)
 8005d08:	4b9c      	ldr	r3, [pc, #624]	; (8005f7c <_printf_float+0x300>)
 8005d0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005d0e:	bf8c      	ite	hi
 8005d10:	4690      	movhi	r8, r2
 8005d12:	4698      	movls	r8, r3
 8005d14:	2303      	movs	r3, #3
 8005d16:	f02b 0204 	bic.w	r2, fp, #4
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	6022      	str	r2, [r4, #0]
 8005d1e:	f04f 0900 	mov.w	r9, #0
 8005d22:	9700      	str	r7, [sp, #0]
 8005d24:	4633      	mov	r3, r6
 8005d26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 f9e6 	bl	80060fc <_printf_common>
 8005d30:	3001      	adds	r0, #1
 8005d32:	f040 808d 	bne.w	8005e50 <_printf_float+0x1d4>
 8005d36:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3a:	b00d      	add	sp, #52	; 0x34
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	4640      	mov	r0, r8
 8005d46:	4649      	mov	r1, r9
 8005d48:	f7fa ff10 	bl	8000b6c <__aeabi_dcmpun>
 8005d4c:	b110      	cbz	r0, 8005d54 <_printf_float+0xd8>
 8005d4e:	4a8c      	ldr	r2, [pc, #560]	; (8005f80 <_printf_float+0x304>)
 8005d50:	4b8c      	ldr	r3, [pc, #560]	; (8005f84 <_printf_float+0x308>)
 8005d52:	e7da      	b.n	8005d0a <_printf_float+0x8e>
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	1c4b      	adds	r3, r1, #1
 8005d58:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005d5c:	a80a      	add	r0, sp, #40	; 0x28
 8005d5e:	d13e      	bne.n	8005dde <_printf_float+0x162>
 8005d60:	2306      	movs	r3, #6
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	2300      	movs	r3, #0
 8005d66:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005d6a:	ab09      	add	r3, sp, #36	; 0x24
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	ec49 8b10 	vmov	d0, r8, r9
 8005d72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d76:	6022      	str	r2, [r4, #0]
 8005d78:	f8cd a004 	str.w	sl, [sp, #4]
 8005d7c:	6861      	ldr	r1, [r4, #4]
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7ff fee8 	bl	8005b54 <__cvt>
 8005d84:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005d88:	2b47      	cmp	r3, #71	; 0x47
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	d109      	bne.n	8005da2 <_printf_float+0x126>
 8005d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d90:	1cd8      	adds	r0, r3, #3
 8005d92:	db02      	blt.n	8005d9a <_printf_float+0x11e>
 8005d94:	6862      	ldr	r2, [r4, #4]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	dd47      	ble.n	8005e2a <_printf_float+0x1ae>
 8005d9a:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d9e:	fa5f fa8a 	uxtb.w	sl, sl
 8005da2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005da8:	d824      	bhi.n	8005df4 <_printf_float+0x178>
 8005daa:	3901      	subs	r1, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005db2:	9109      	str	r1, [sp, #36]	; 0x24
 8005db4:	f7ff ff2f 	bl	8005c16 <__exponent>
 8005db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dba:	1813      	adds	r3, r2, r0
 8005dbc:	2a01      	cmp	r2, #1
 8005dbe:	4681      	mov	r9, r0
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	dc02      	bgt.n	8005dca <_printf_float+0x14e>
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	07d1      	lsls	r1, r2, #31
 8005dc8:	d501      	bpl.n	8005dce <_printf_float+0x152>
 8005dca:	3301      	adds	r3, #1
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0a5      	beq.n	8005d22 <_printf_float+0xa6>
 8005dd6:	232d      	movs	r3, #45	; 0x2d
 8005dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ddc:	e7a1      	b.n	8005d22 <_printf_float+0xa6>
 8005dde:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005de2:	f000 8177 	beq.w	80060d4 <_printf_float+0x458>
 8005de6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005dea:	d1bb      	bne.n	8005d64 <_printf_float+0xe8>
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d1b9      	bne.n	8005d64 <_printf_float+0xe8>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e7b6      	b.n	8005d62 <_printf_float+0xe6>
 8005df4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005df8:	d119      	bne.n	8005e2e <_printf_float+0x1b2>
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	dd0c      	ble.n	8005e1a <_printf_float+0x19e>
 8005e00:	6121      	str	r1, [r4, #16]
 8005e02:	b913      	cbnz	r3, 8005e0a <_printf_float+0x18e>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	07d2      	lsls	r2, r2, #31
 8005e08:	d502      	bpl.n	8005e10 <_printf_float+0x194>
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	440b      	add	r3, r1
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e12:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e14:	f04f 0900 	mov.w	r9, #0
 8005e18:	e7d9      	b.n	8005dce <_printf_float+0x152>
 8005e1a:	b913      	cbnz	r3, 8005e22 <_printf_float+0x1a6>
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	07d0      	lsls	r0, r2, #31
 8005e20:	d501      	bpl.n	8005e26 <_printf_float+0x1aa>
 8005e22:	3302      	adds	r3, #2
 8005e24:	e7f3      	b.n	8005e0e <_printf_float+0x192>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7f1      	b.n	8005e0e <_printf_float+0x192>
 8005e2a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005e2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e32:	4293      	cmp	r3, r2
 8005e34:	db05      	blt.n	8005e42 <_printf_float+0x1c6>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	07d1      	lsls	r1, r2, #31
 8005e3c:	d5e8      	bpl.n	8005e10 <_printf_float+0x194>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	e7e5      	b.n	8005e0e <_printf_float+0x192>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfd4      	ite	le
 8005e46:	f1c3 0302 	rsble	r3, r3, #2
 8005e4a:	2301      	movgt	r3, #1
 8005e4c:	4413      	add	r3, r2
 8005e4e:	e7de      	b.n	8005e0e <_printf_float+0x192>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	055a      	lsls	r2, r3, #21
 8005e54:	d407      	bmi.n	8005e66 <_printf_float+0x1ea>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	4642      	mov	r2, r8
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	d12b      	bne.n	8005ebc <_printf_float+0x240>
 8005e64:	e767      	b.n	8005d36 <_printf_float+0xba>
 8005e66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005e6a:	f240 80dc 	bls.w	8006026 <_printf_float+0x3aa>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e76:	f7fa fe47 	bl	8000b08 <__aeabi_dcmpeq>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d033      	beq.n	8005ee6 <_printf_float+0x26a>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4a41      	ldr	r2, [pc, #260]	; (8005f88 <_printf_float+0x30c>)
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f43f af54 	beq.w	8005d36 <_printf_float+0xba>
 8005e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e92:	429a      	cmp	r2, r3
 8005e94:	db02      	blt.n	8005e9c <_printf_float+0x220>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	07d8      	lsls	r0, r3, #31
 8005e9a:	d50f      	bpl.n	8005ebc <_printf_float+0x240>
 8005e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f43f af45 	beq.w	8005d36 <_printf_float+0xba>
 8005eac:	f04f 0800 	mov.w	r8, #0
 8005eb0:	f104 091a 	add.w	r9, r4, #26
 8005eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	4543      	cmp	r3, r8
 8005eba:	dc09      	bgt.n	8005ed0 <_printf_float+0x254>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	079b      	lsls	r3, r3, #30
 8005ec0:	f100 8103 	bmi.w	80060ca <_printf_float+0x44e>
 8005ec4:	68e0      	ldr	r0, [r4, #12]
 8005ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec8:	4298      	cmp	r0, r3
 8005eca:	bfb8      	it	lt
 8005ecc:	4618      	movlt	r0, r3
 8005ece:	e734      	b.n	8005d3a <_printf_float+0xbe>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	464a      	mov	r2, r9
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	f43f af2b 	beq.w	8005d36 <_printf_float+0xba>
 8005ee0:	f108 0801 	add.w	r8, r8, #1
 8005ee4:	e7e6      	b.n	8005eb4 <_printf_float+0x238>
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dc2b      	bgt.n	8005f44 <_printf_float+0x2c8>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <_printf_float+0x30c>)
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f43f af1d 	beq.w	8005d36 <_printf_float+0xba>
 8005efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efe:	b923      	cbnz	r3, 8005f0a <_printf_float+0x28e>
 8005f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f02:	b913      	cbnz	r3, 8005f0a <_printf_float+0x28e>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	07d9      	lsls	r1, r3, #31
 8005f08:	d5d8      	bpl.n	8005ebc <_printf_float+0x240>
 8005f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f af0e 	beq.w	8005d36 <_printf_float+0xba>
 8005f1a:	f04f 0900 	mov.w	r9, #0
 8005f1e:	f104 0a1a 	add.w	sl, r4, #26
 8005f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f24:	425b      	negs	r3, r3
 8005f26:	454b      	cmp	r3, r9
 8005f28:	dc01      	bgt.n	8005f2e <_printf_float+0x2b2>
 8005f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2c:	e794      	b.n	8005e58 <_printf_float+0x1dc>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4652      	mov	r2, sl
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	f43f aefc 	beq.w	8005d36 <_printf_float+0xba>
 8005f3e:	f109 0901 	add.w	r9, r9, #1
 8005f42:	e7ee      	b.n	8005f22 <_printf_float+0x2a6>
 8005f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bfa8      	it	ge
 8005f4c:	461a      	movge	r2, r3
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	4691      	mov	r9, r2
 8005f52:	dd07      	ble.n	8005f64 <_printf_float+0x2e8>
 8005f54:	4613      	mov	r3, r2
 8005f56:	4631      	mov	r1, r6
 8005f58:	4642      	mov	r2, r8
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f aee9 	beq.w	8005d36 <_printf_float+0xba>
 8005f64:	f104 031a 	add.w	r3, r4, #26
 8005f68:	f04f 0b00 	mov.w	fp, #0
 8005f6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f70:	9306      	str	r3, [sp, #24]
 8005f72:	e015      	b.n	8005fa0 <_printf_float+0x324>
 8005f74:	7fefffff 	.word	0x7fefffff
 8005f78:	08007fec 	.word	0x08007fec
 8005f7c:	08007fe8 	.word	0x08007fe8
 8005f80:	08007ff4 	.word	0x08007ff4
 8005f84:	08007ff0 	.word	0x08007ff0
 8005f88:	08007ff8 	.word	0x08007ff8
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	9a06      	ldr	r2, [sp, #24]
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f aecd 	beq.w	8005d36 <_printf_float+0xba>
 8005f9c:	f10b 0b01 	add.w	fp, fp, #1
 8005fa0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fa4:	ebaa 0309 	sub.w	r3, sl, r9
 8005fa8:	455b      	cmp	r3, fp
 8005faa:	dcef      	bgt.n	8005f8c <_printf_float+0x310>
 8005fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	44d0      	add	r8, sl
 8005fb4:	db15      	blt.n	8005fe2 <_printf_float+0x366>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	07da      	lsls	r2, r3, #31
 8005fba:	d412      	bmi.n	8005fe2 <_printf_float+0x366>
 8005fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc0:	eba3 020a 	sub.w	r2, r3, sl
 8005fc4:	eba3 0a01 	sub.w	sl, r3, r1
 8005fc8:	4592      	cmp	sl, r2
 8005fca:	bfa8      	it	ge
 8005fcc:	4692      	movge	sl, r2
 8005fce:	f1ba 0f00 	cmp.w	sl, #0
 8005fd2:	dc0e      	bgt.n	8005ff2 <_printf_float+0x376>
 8005fd4:	f04f 0800 	mov.w	r8, #0
 8005fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fdc:	f104 091a 	add.w	r9, r4, #26
 8005fe0:	e019      	b.n	8006016 <_printf_float+0x39a>
 8005fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	d1e5      	bne.n	8005fbc <_printf_float+0x340>
 8005ff0:	e6a1      	b.n	8005d36 <_printf_float+0xba>
 8005ff2:	4653      	mov	r3, sl
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d1e9      	bne.n	8005fd4 <_printf_float+0x358>
 8006000:	e699      	b.n	8005d36 <_printf_float+0xba>
 8006002:	2301      	movs	r3, #1
 8006004:	464a      	mov	r2, r9
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f ae92 	beq.w	8005d36 <_printf_float+0xba>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	eba3 030a 	sub.w	r3, r3, sl
 8006020:	4543      	cmp	r3, r8
 8006022:	dcee      	bgt.n	8006002 <_printf_float+0x386>
 8006024:	e74a      	b.n	8005ebc <_printf_float+0x240>
 8006026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006028:	2a01      	cmp	r2, #1
 800602a:	dc01      	bgt.n	8006030 <_printf_float+0x3b4>
 800602c:	07db      	lsls	r3, r3, #31
 800602e:	d53a      	bpl.n	80060a6 <_printf_float+0x42a>
 8006030:	2301      	movs	r3, #1
 8006032:	4642      	mov	r2, r8
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f ae7b 	beq.w	8005d36 <_printf_float+0xba>
 8006040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006044:	4631      	mov	r1, r6
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	f108 0801 	add.w	r8, r8, #1
 8006050:	f43f ae71 	beq.w	8005d36 <_printf_float+0xba>
 8006054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006056:	2200      	movs	r2, #0
 8006058:	f103 3aff 	add.w	sl, r3, #4294967295
 800605c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006060:	2300      	movs	r3, #0
 8006062:	f7fa fd51 	bl	8000b08 <__aeabi_dcmpeq>
 8006066:	b9c8      	cbnz	r0, 800609c <_printf_float+0x420>
 8006068:	4653      	mov	r3, sl
 800606a:	4642      	mov	r2, r8
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	d10e      	bne.n	8006094 <_printf_float+0x418>
 8006076:	e65e      	b.n	8005d36 <_printf_float+0xba>
 8006078:	2301      	movs	r3, #1
 800607a:	4652      	mov	r2, sl
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f ae57 	beq.w	8005d36 <_printf_float+0xba>
 8006088:	f108 0801 	add.w	r8, r8, #1
 800608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	4543      	cmp	r3, r8
 8006092:	dcf1      	bgt.n	8006078 <_printf_float+0x3fc>
 8006094:	464b      	mov	r3, r9
 8006096:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800609a:	e6de      	b.n	8005e5a <_printf_float+0x1de>
 800609c:	f04f 0800 	mov.w	r8, #0
 80060a0:	f104 0a1a 	add.w	sl, r4, #26
 80060a4:	e7f2      	b.n	800608c <_printf_float+0x410>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7df      	b.n	800606a <_printf_float+0x3ee>
 80060aa:	2301      	movs	r3, #1
 80060ac:	464a      	mov	r2, r9
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	f43f ae3e 	beq.w	8005d36 <_printf_float+0xba>
 80060ba:	f108 0801 	add.w	r8, r8, #1
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	4543      	cmp	r3, r8
 80060c6:	dcf0      	bgt.n	80060aa <_printf_float+0x42e>
 80060c8:	e6fc      	b.n	8005ec4 <_printf_float+0x248>
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	f104 0919 	add.w	r9, r4, #25
 80060d2:	e7f4      	b.n	80060be <_printf_float+0x442>
 80060d4:	2900      	cmp	r1, #0
 80060d6:	f43f ae8b 	beq.w	8005df0 <_printf_float+0x174>
 80060da:	2300      	movs	r3, #0
 80060dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80060e0:	ab09      	add	r3, sp, #36	; 0x24
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	ec49 8b10 	vmov	d0, r8, r9
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	f8cd a004 	str.w	sl, [sp, #4]
 80060ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060f2:	4628      	mov	r0, r5
 80060f4:	f7ff fd2e 	bl	8005b54 <__cvt>
 80060f8:	4680      	mov	r8, r0
 80060fa:	e648      	b.n	8005d8e <_printf_float+0x112>

080060fc <_printf_common>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	4691      	mov	r9, r2
 8006102:	461f      	mov	r7, r3
 8006104:	688a      	ldr	r2, [r1, #8]
 8006106:	690b      	ldr	r3, [r1, #16]
 8006108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800610c:	4293      	cmp	r3, r2
 800610e:	bfb8      	it	lt
 8006110:	4613      	movlt	r3, r2
 8006112:	f8c9 3000 	str.w	r3, [r9]
 8006116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800611a:	4606      	mov	r6, r0
 800611c:	460c      	mov	r4, r1
 800611e:	b112      	cbz	r2, 8006126 <_printf_common+0x2a>
 8006120:	3301      	adds	r3, #1
 8006122:	f8c9 3000 	str.w	r3, [r9]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	0699      	lsls	r1, r3, #26
 800612a:	bf42      	ittt	mi
 800612c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006130:	3302      	addmi	r3, #2
 8006132:	f8c9 3000 	strmi.w	r3, [r9]
 8006136:	6825      	ldr	r5, [r4, #0]
 8006138:	f015 0506 	ands.w	r5, r5, #6
 800613c:	d107      	bne.n	800614e <_printf_common+0x52>
 800613e:	f104 0a19 	add.w	sl, r4, #25
 8006142:	68e3      	ldr	r3, [r4, #12]
 8006144:	f8d9 2000 	ldr.w	r2, [r9]
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	42ab      	cmp	r3, r5
 800614c:	dc28      	bgt.n	80061a0 <_printf_common+0xa4>
 800614e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	3300      	adds	r3, #0
 8006156:	bf18      	it	ne
 8006158:	2301      	movne	r3, #1
 800615a:	0692      	lsls	r2, r2, #26
 800615c:	d42d      	bmi.n	80061ba <_printf_common+0xbe>
 800615e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006162:	4639      	mov	r1, r7
 8006164:	4630      	mov	r0, r6
 8006166:	47c0      	blx	r8
 8006168:	3001      	adds	r0, #1
 800616a:	d020      	beq.n	80061ae <_printf_common+0xb2>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	68e5      	ldr	r5, [r4, #12]
 8006170:	f8d9 2000 	ldr.w	r2, [r9]
 8006174:	f003 0306 	and.w	r3, r3, #6
 8006178:	2b04      	cmp	r3, #4
 800617a:	bf08      	it	eq
 800617c:	1aad      	subeq	r5, r5, r2
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	bf0c      	ite	eq
 8006184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006188:	2500      	movne	r5, #0
 800618a:	4293      	cmp	r3, r2
 800618c:	bfc4      	itt	gt
 800618e:	1a9b      	subgt	r3, r3, r2
 8006190:	18ed      	addgt	r5, r5, r3
 8006192:	f04f 0900 	mov.w	r9, #0
 8006196:	341a      	adds	r4, #26
 8006198:	454d      	cmp	r5, r9
 800619a:	d11a      	bne.n	80061d2 <_printf_common+0xd6>
 800619c:	2000      	movs	r0, #0
 800619e:	e008      	b.n	80061b2 <_printf_common+0xb6>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4652      	mov	r2, sl
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	47c0      	blx	r8
 80061aa:	3001      	adds	r0, #1
 80061ac:	d103      	bne.n	80061b6 <_printf_common+0xba>
 80061ae:	f04f 30ff 	mov.w	r0, #4294967295
 80061b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b6:	3501      	adds	r5, #1
 80061b8:	e7c3      	b.n	8006142 <_printf_common+0x46>
 80061ba:	18e1      	adds	r1, r4, r3
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	2030      	movs	r0, #48	; 0x30
 80061c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061c4:	4422      	add	r2, r4
 80061c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ce:	3302      	adds	r3, #2
 80061d0:	e7c5      	b.n	800615e <_printf_common+0x62>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4622      	mov	r2, r4
 80061d6:	4639      	mov	r1, r7
 80061d8:	4630      	mov	r0, r6
 80061da:	47c0      	blx	r8
 80061dc:	3001      	adds	r0, #1
 80061de:	d0e6      	beq.n	80061ae <_printf_common+0xb2>
 80061e0:	f109 0901 	add.w	r9, r9, #1
 80061e4:	e7d8      	b.n	8006198 <_printf_common+0x9c>
	...

080061e8 <_printf_i>:
 80061e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061f0:	460c      	mov	r4, r1
 80061f2:	7e09      	ldrb	r1, [r1, #24]
 80061f4:	b085      	sub	sp, #20
 80061f6:	296e      	cmp	r1, #110	; 0x6e
 80061f8:	4617      	mov	r7, r2
 80061fa:	4606      	mov	r6, r0
 80061fc:	4698      	mov	r8, r3
 80061fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006200:	f000 80b3 	beq.w	800636a <_printf_i+0x182>
 8006204:	d822      	bhi.n	800624c <_printf_i+0x64>
 8006206:	2963      	cmp	r1, #99	; 0x63
 8006208:	d036      	beq.n	8006278 <_printf_i+0x90>
 800620a:	d80a      	bhi.n	8006222 <_printf_i+0x3a>
 800620c:	2900      	cmp	r1, #0
 800620e:	f000 80b9 	beq.w	8006384 <_printf_i+0x19c>
 8006212:	2958      	cmp	r1, #88	; 0x58
 8006214:	f000 8083 	beq.w	800631e <_printf_i+0x136>
 8006218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800621c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006220:	e032      	b.n	8006288 <_printf_i+0xa0>
 8006222:	2964      	cmp	r1, #100	; 0x64
 8006224:	d001      	beq.n	800622a <_printf_i+0x42>
 8006226:	2969      	cmp	r1, #105	; 0x69
 8006228:	d1f6      	bne.n	8006218 <_printf_i+0x30>
 800622a:	6820      	ldr	r0, [r4, #0]
 800622c:	6813      	ldr	r3, [r2, #0]
 800622e:	0605      	lsls	r5, r0, #24
 8006230:	f103 0104 	add.w	r1, r3, #4
 8006234:	d52a      	bpl.n	800628c <_printf_i+0xa4>
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	da03      	bge.n	8006246 <_printf_i+0x5e>
 800623e:	222d      	movs	r2, #45	; 0x2d
 8006240:	425b      	negs	r3, r3
 8006242:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006246:	486f      	ldr	r0, [pc, #444]	; (8006404 <_printf_i+0x21c>)
 8006248:	220a      	movs	r2, #10
 800624a:	e039      	b.n	80062c0 <_printf_i+0xd8>
 800624c:	2973      	cmp	r1, #115	; 0x73
 800624e:	f000 809d 	beq.w	800638c <_printf_i+0x1a4>
 8006252:	d808      	bhi.n	8006266 <_printf_i+0x7e>
 8006254:	296f      	cmp	r1, #111	; 0x6f
 8006256:	d020      	beq.n	800629a <_printf_i+0xb2>
 8006258:	2970      	cmp	r1, #112	; 0x70
 800625a:	d1dd      	bne.n	8006218 <_printf_i+0x30>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f043 0320 	orr.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	e003      	b.n	800626e <_printf_i+0x86>
 8006266:	2975      	cmp	r1, #117	; 0x75
 8006268:	d017      	beq.n	800629a <_printf_i+0xb2>
 800626a:	2978      	cmp	r1, #120	; 0x78
 800626c:	d1d4      	bne.n	8006218 <_printf_i+0x30>
 800626e:	2378      	movs	r3, #120	; 0x78
 8006270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006274:	4864      	ldr	r0, [pc, #400]	; (8006408 <_printf_i+0x220>)
 8006276:	e055      	b.n	8006324 <_printf_i+0x13c>
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	1d19      	adds	r1, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6011      	str	r1, [r2, #0]
 8006280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006288:	2301      	movs	r3, #1
 800628a:	e08c      	b.n	80063a6 <_printf_i+0x1be>
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6011      	str	r1, [r2, #0]
 8006290:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006294:	bf18      	it	ne
 8006296:	b21b      	sxthne	r3, r3
 8006298:	e7cf      	b.n	800623a <_printf_i+0x52>
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	6825      	ldr	r5, [r4, #0]
 800629e:	1d18      	adds	r0, r3, #4
 80062a0:	6010      	str	r0, [r2, #0]
 80062a2:	0628      	lsls	r0, r5, #24
 80062a4:	d501      	bpl.n	80062aa <_printf_i+0xc2>
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	e002      	b.n	80062b0 <_printf_i+0xc8>
 80062aa:	0668      	lsls	r0, r5, #25
 80062ac:	d5fb      	bpl.n	80062a6 <_printf_i+0xbe>
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	4854      	ldr	r0, [pc, #336]	; (8006404 <_printf_i+0x21c>)
 80062b2:	296f      	cmp	r1, #111	; 0x6f
 80062b4:	bf14      	ite	ne
 80062b6:	220a      	movne	r2, #10
 80062b8:	2208      	moveq	r2, #8
 80062ba:	2100      	movs	r1, #0
 80062bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062c0:	6865      	ldr	r5, [r4, #4]
 80062c2:	60a5      	str	r5, [r4, #8]
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	f2c0 8095 	blt.w	80063f4 <_printf_i+0x20c>
 80062ca:	6821      	ldr	r1, [r4, #0]
 80062cc:	f021 0104 	bic.w	r1, r1, #4
 80062d0:	6021      	str	r1, [r4, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d13d      	bne.n	8006352 <_printf_i+0x16a>
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	f040 808e 	bne.w	80063f8 <_printf_i+0x210>
 80062dc:	4665      	mov	r5, ip
 80062de:	2a08      	cmp	r2, #8
 80062e0:	d10b      	bne.n	80062fa <_printf_i+0x112>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	07db      	lsls	r3, r3, #31
 80062e6:	d508      	bpl.n	80062fa <_printf_i+0x112>
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	bfde      	ittt	le
 80062f0:	2330      	movle	r3, #48	; 0x30
 80062f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062fa:	ebac 0305 	sub.w	r3, ip, r5
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	f8cd 8000 	str.w	r8, [sp]
 8006304:	463b      	mov	r3, r7
 8006306:	aa03      	add	r2, sp, #12
 8006308:	4621      	mov	r1, r4
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff fef6 	bl	80060fc <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	d14d      	bne.n	80063b0 <_printf_i+0x1c8>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b005      	add	sp, #20
 800631a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800631e:	4839      	ldr	r0, [pc, #228]	; (8006404 <_printf_i+0x21c>)
 8006320:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006324:	6813      	ldr	r3, [r2, #0]
 8006326:	6821      	ldr	r1, [r4, #0]
 8006328:	1d1d      	adds	r5, r3, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6015      	str	r5, [r2, #0]
 800632e:	060a      	lsls	r2, r1, #24
 8006330:	d50b      	bpl.n	800634a <_printf_i+0x162>
 8006332:	07ca      	lsls	r2, r1, #31
 8006334:	bf44      	itt	mi
 8006336:	f041 0120 	orrmi.w	r1, r1, #32
 800633a:	6021      	strmi	r1, [r4, #0]
 800633c:	b91b      	cbnz	r3, 8006346 <_printf_i+0x15e>
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	f022 0220 	bic.w	r2, r2, #32
 8006344:	6022      	str	r2, [r4, #0]
 8006346:	2210      	movs	r2, #16
 8006348:	e7b7      	b.n	80062ba <_printf_i+0xd2>
 800634a:	064d      	lsls	r5, r1, #25
 800634c:	bf48      	it	mi
 800634e:	b29b      	uxthmi	r3, r3
 8006350:	e7ef      	b.n	8006332 <_printf_i+0x14a>
 8006352:	4665      	mov	r5, ip
 8006354:	fbb3 f1f2 	udiv	r1, r3, r2
 8006358:	fb02 3311 	mls	r3, r2, r1, r3
 800635c:	5cc3      	ldrb	r3, [r0, r3]
 800635e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006362:	460b      	mov	r3, r1
 8006364:	2900      	cmp	r1, #0
 8006366:	d1f5      	bne.n	8006354 <_printf_i+0x16c>
 8006368:	e7b9      	b.n	80062de <_printf_i+0xf6>
 800636a:	6813      	ldr	r3, [r2, #0]
 800636c:	6825      	ldr	r5, [r4, #0]
 800636e:	6961      	ldr	r1, [r4, #20]
 8006370:	1d18      	adds	r0, r3, #4
 8006372:	6010      	str	r0, [r2, #0]
 8006374:	0628      	lsls	r0, r5, #24
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	d501      	bpl.n	800637e <_printf_i+0x196>
 800637a:	6019      	str	r1, [r3, #0]
 800637c:	e002      	b.n	8006384 <_printf_i+0x19c>
 800637e:	066a      	lsls	r2, r5, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0x192>
 8006382:	8019      	strh	r1, [r3, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	4665      	mov	r5, ip
 800638a:	e7b9      	b.n	8006300 <_printf_i+0x118>
 800638c:	6813      	ldr	r3, [r2, #0]
 800638e:	1d19      	adds	r1, r3, #4
 8006390:	6011      	str	r1, [r2, #0]
 8006392:	681d      	ldr	r5, [r3, #0]
 8006394:	6862      	ldr	r2, [r4, #4]
 8006396:	2100      	movs	r1, #0
 8006398:	4628      	mov	r0, r5
 800639a:	f7f9 ff41 	bl	8000220 <memchr>
 800639e:	b108      	cbz	r0, 80063a4 <_printf_i+0x1bc>
 80063a0:	1b40      	subs	r0, r0, r5
 80063a2:	6060      	str	r0, [r4, #4]
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	2300      	movs	r3, #0
 80063aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ae:	e7a7      	b.n	8006300 <_printf_i+0x118>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	462a      	mov	r2, r5
 80063b4:	4639      	mov	r1, r7
 80063b6:	4630      	mov	r0, r6
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d0aa      	beq.n	8006314 <_printf_i+0x12c>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	079b      	lsls	r3, r3, #30
 80063c2:	d413      	bmi.n	80063ec <_printf_i+0x204>
 80063c4:	68e0      	ldr	r0, [r4, #12]
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	4298      	cmp	r0, r3
 80063ca:	bfb8      	it	lt
 80063cc:	4618      	movlt	r0, r3
 80063ce:	e7a3      	b.n	8006318 <_printf_i+0x130>
 80063d0:	2301      	movs	r3, #1
 80063d2:	464a      	mov	r2, r9
 80063d4:	4639      	mov	r1, r7
 80063d6:	4630      	mov	r0, r6
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d09a      	beq.n	8006314 <_printf_i+0x12c>
 80063de:	3501      	adds	r5, #1
 80063e0:	68e3      	ldr	r3, [r4, #12]
 80063e2:	9a03      	ldr	r2, [sp, #12]
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	42ab      	cmp	r3, r5
 80063e8:	dcf2      	bgt.n	80063d0 <_printf_i+0x1e8>
 80063ea:	e7eb      	b.n	80063c4 <_printf_i+0x1dc>
 80063ec:	2500      	movs	r5, #0
 80063ee:	f104 0919 	add.w	r9, r4, #25
 80063f2:	e7f5      	b.n	80063e0 <_printf_i+0x1f8>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ac      	bne.n	8006352 <_printf_i+0x16a>
 80063f8:	7803      	ldrb	r3, [r0, #0]
 80063fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006402:	e76c      	b.n	80062de <_printf_i+0xf6>
 8006404:	08007ffa 	.word	0x08007ffa
 8006408:	0800800b 	.word	0x0800800b

0800640c <sniprintf>:
 800640c:	b40c      	push	{r2, r3}
 800640e:	b530      	push	{r4, r5, lr}
 8006410:	4b17      	ldr	r3, [pc, #92]	; (8006470 <sniprintf+0x64>)
 8006412:	1e0c      	subs	r4, r1, #0
 8006414:	b09d      	sub	sp, #116	; 0x74
 8006416:	681d      	ldr	r5, [r3, #0]
 8006418:	da08      	bge.n	800642c <sniprintf+0x20>
 800641a:	238b      	movs	r3, #139	; 0x8b
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	b01d      	add	sp, #116	; 0x74
 8006424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006428:	b002      	add	sp, #8
 800642a:	4770      	bx	lr
 800642c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006430:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006434:	bf14      	ite	ne
 8006436:	f104 33ff 	addne.w	r3, r4, #4294967295
 800643a:	4623      	moveq	r3, r4
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	9006      	str	r0, [sp, #24]
 8006448:	f8ad 3016 	strh.w	r3, [sp, #22]
 800644c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800644e:	ab21      	add	r3, sp, #132	; 0x84
 8006450:	a902      	add	r1, sp, #8
 8006452:	4628      	mov	r0, r5
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	f001 fa7f 	bl	8007958 <_svfiprintf_r>
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	bfbc      	itt	lt
 800645e:	238b      	movlt	r3, #139	; 0x8b
 8006460:	602b      	strlt	r3, [r5, #0]
 8006462:	2c00      	cmp	r4, #0
 8006464:	d0dd      	beq.n	8006422 <sniprintf+0x16>
 8006466:	9b02      	ldr	r3, [sp, #8]
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	e7d9      	b.n	8006422 <sniprintf+0x16>
 800646e:	bf00      	nop
 8006470:	20000014 	.word	0x20000014

08006474 <siprintf>:
 8006474:	b40e      	push	{r1, r2, r3}
 8006476:	b500      	push	{lr}
 8006478:	b09c      	sub	sp, #112	; 0x70
 800647a:	ab1d      	add	r3, sp, #116	; 0x74
 800647c:	9002      	str	r0, [sp, #8]
 800647e:	9006      	str	r0, [sp, #24]
 8006480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006484:	4809      	ldr	r0, [pc, #36]	; (80064ac <siprintf+0x38>)
 8006486:	9107      	str	r1, [sp, #28]
 8006488:	9104      	str	r1, [sp, #16]
 800648a:	4909      	ldr	r1, [pc, #36]	; (80064b0 <siprintf+0x3c>)
 800648c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006490:	9105      	str	r1, [sp, #20]
 8006492:	6800      	ldr	r0, [r0, #0]
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	a902      	add	r1, sp, #8
 8006498:	f001 fa5e 	bl	8007958 <_svfiprintf_r>
 800649c:	9b02      	ldr	r3, [sp, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	b01c      	add	sp, #112	; 0x70
 80064a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a8:	b003      	add	sp, #12
 80064aa:	4770      	bx	lr
 80064ac:	20000014 	.word	0x20000014
 80064b0:	ffff0208 	.word	0xffff0208

080064b4 <quorem>:
 80064b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	6903      	ldr	r3, [r0, #16]
 80064ba:	690c      	ldr	r4, [r1, #16]
 80064bc:	42a3      	cmp	r3, r4
 80064be:	4680      	mov	r8, r0
 80064c0:	f2c0 8082 	blt.w	80065c8 <quorem+0x114>
 80064c4:	3c01      	subs	r4, #1
 80064c6:	f101 0714 	add.w	r7, r1, #20
 80064ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80064ce:	f100 0614 	add.w	r6, r0, #20
 80064d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80064d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80064da:	eb06 030c 	add.w	r3, r6, ip
 80064de:	3501      	adds	r5, #1
 80064e0:	eb07 090c 	add.w	r9, r7, ip
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80064ea:	b395      	cbz	r5, 8006552 <quorem+0x9e>
 80064ec:	f04f 0a00 	mov.w	sl, #0
 80064f0:	4638      	mov	r0, r7
 80064f2:	46b6      	mov	lr, r6
 80064f4:	46d3      	mov	fp, sl
 80064f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80064fa:	b293      	uxth	r3, r2
 80064fc:	fb05 a303 	mla	r3, r5, r3, sl
 8006500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006504:	b29b      	uxth	r3, r3
 8006506:	ebab 0303 	sub.w	r3, fp, r3
 800650a:	0c12      	lsrs	r2, r2, #16
 800650c:	f8de b000 	ldr.w	fp, [lr]
 8006510:	fb05 a202 	mla	r2, r5, r2, sl
 8006514:	fa13 f38b 	uxtah	r3, r3, fp
 8006518:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800651c:	fa1f fb82 	uxth.w	fp, r2
 8006520:	f8de 2000 	ldr.w	r2, [lr]
 8006524:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006532:	4581      	cmp	r9, r0
 8006534:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006538:	f84e 3b04 	str.w	r3, [lr], #4
 800653c:	d2db      	bcs.n	80064f6 <quorem+0x42>
 800653e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006542:	b933      	cbnz	r3, 8006552 <quorem+0x9e>
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	3b04      	subs	r3, #4
 8006548:	429e      	cmp	r6, r3
 800654a:	461a      	mov	r2, r3
 800654c:	d330      	bcc.n	80065b0 <quorem+0xfc>
 800654e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006552:	4640      	mov	r0, r8
 8006554:	f001 f82a 	bl	80075ac <__mcmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	db25      	blt.n	80065a8 <quorem+0xf4>
 800655c:	3501      	adds	r5, #1
 800655e:	4630      	mov	r0, r6
 8006560:	f04f 0c00 	mov.w	ip, #0
 8006564:	f857 2b04 	ldr.w	r2, [r7], #4
 8006568:	f8d0 e000 	ldr.w	lr, [r0]
 800656c:	b293      	uxth	r3, r2
 800656e:	ebac 0303 	sub.w	r3, ip, r3
 8006572:	0c12      	lsrs	r2, r2, #16
 8006574:	fa13 f38e 	uxtah	r3, r3, lr
 8006578:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800657c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006580:	b29b      	uxth	r3, r3
 8006582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006586:	45b9      	cmp	r9, r7
 8006588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800658c:	f840 3b04 	str.w	r3, [r0], #4
 8006590:	d2e8      	bcs.n	8006564 <quorem+0xb0>
 8006592:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006596:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800659a:	b92a      	cbnz	r2, 80065a8 <quorem+0xf4>
 800659c:	3b04      	subs	r3, #4
 800659e:	429e      	cmp	r6, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	d30b      	bcc.n	80065bc <quorem+0x108>
 80065a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80065a8:	4628      	mov	r0, r5
 80065aa:	b003      	add	sp, #12
 80065ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d1ca      	bne.n	800654e <quorem+0x9a>
 80065b8:	3c01      	subs	r4, #1
 80065ba:	e7c5      	b.n	8006548 <quorem+0x94>
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	3b04      	subs	r3, #4
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d1ef      	bne.n	80065a4 <quorem+0xf0>
 80065c4:	3c01      	subs	r4, #1
 80065c6:	e7ea      	b.n	800659e <quorem+0xea>
 80065c8:	2000      	movs	r0, #0
 80065ca:	e7ee      	b.n	80065aa <quorem+0xf6>
 80065cc:	0000      	movs	r0, r0
	...

080065d0 <_dtoa_r>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	ec57 6b10 	vmov	r6, r7, d0
 80065d8:	b097      	sub	sp, #92	; 0x5c
 80065da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065dc:	9106      	str	r1, [sp, #24]
 80065de:	4604      	mov	r4, r0
 80065e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80065e2:	9312      	str	r3, [sp, #72]	; 0x48
 80065e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065e8:	e9cd 6700 	strd	r6, r7, [sp]
 80065ec:	b93d      	cbnz	r5, 80065fe <_dtoa_r+0x2e>
 80065ee:	2010      	movs	r0, #16
 80065f0:	f000 fdb4 	bl	800715c <malloc>
 80065f4:	6260      	str	r0, [r4, #36]	; 0x24
 80065f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065fa:	6005      	str	r5, [r0, #0]
 80065fc:	60c5      	str	r5, [r0, #12]
 80065fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	b151      	cbz	r1, 800661a <_dtoa_r+0x4a>
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	604a      	str	r2, [r1, #4]
 8006608:	2301      	movs	r3, #1
 800660a:	4093      	lsls	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
 800660e:	4620      	mov	r0, r4
 8006610:	f000 fdeb 	bl	80071ea <_Bfree>
 8006614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	1e3b      	subs	r3, r7, #0
 800661c:	bfbb      	ittet	lt
 800661e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006622:	9301      	strlt	r3, [sp, #4]
 8006624:	2300      	movge	r3, #0
 8006626:	2201      	movlt	r2, #1
 8006628:	bfac      	ite	ge
 800662a:	f8c8 3000 	strge.w	r3, [r8]
 800662e:	f8c8 2000 	strlt.w	r2, [r8]
 8006632:	4baf      	ldr	r3, [pc, #700]	; (80068f0 <_dtoa_r+0x320>)
 8006634:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006638:	ea33 0308 	bics.w	r3, r3, r8
 800663c:	d114      	bne.n	8006668 <_dtoa_r+0x98>
 800663e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006640:	f242 730f 	movw	r3, #9999	; 0x270f
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	b923      	cbnz	r3, 8006654 <_dtoa_r+0x84>
 800664a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800664e:	2800      	cmp	r0, #0
 8006650:	f000 8542 	beq.w	80070d8 <_dtoa_r+0xb08>
 8006654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006656:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006904 <_dtoa_r+0x334>
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8544 	beq.w	80070e8 <_dtoa_r+0xb18>
 8006660:	f10b 0303 	add.w	r3, fp, #3
 8006664:	f000 bd3e 	b.w	80070e4 <_dtoa_r+0xb14>
 8006668:	e9dd 6700 	ldrd	r6, r7, [sp]
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa fa48 	bl	8000b08 <__aeabi_dcmpeq>
 8006678:	4681      	mov	r9, r0
 800667a:	b168      	cbz	r0, 8006698 <_dtoa_r+0xc8>
 800667c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800667e:	2301      	movs	r3, #1
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8524 	beq.w	80070d2 <_dtoa_r+0xb02>
 800668a:	4b9a      	ldr	r3, [pc, #616]	; (80068f4 <_dtoa_r+0x324>)
 800668c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800668e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	f000 bd28 	b.w	80070e8 <_dtoa_r+0xb18>
 8006698:	aa14      	add	r2, sp, #80	; 0x50
 800669a:	a915      	add	r1, sp, #84	; 0x54
 800669c:	ec47 6b10 	vmov	d0, r6, r7
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fffa 	bl	800769a <__d2b>
 80066a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066aa:	9004      	str	r0, [sp, #16]
 80066ac:	2d00      	cmp	r5, #0
 80066ae:	d07c      	beq.n	80067aa <_dtoa_r+0x1da>
 80066b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80066b8:	46b2      	mov	sl, r6
 80066ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80066be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80066c6:	2200      	movs	r2, #0
 80066c8:	4b8b      	ldr	r3, [pc, #556]	; (80068f8 <_dtoa_r+0x328>)
 80066ca:	4650      	mov	r0, sl
 80066cc:	4659      	mov	r1, fp
 80066ce:	f7f9 fdfb 	bl	80002c8 <__aeabi_dsub>
 80066d2:	a381      	add	r3, pc, #516	; (adr r3, 80068d8 <_dtoa_r+0x308>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 ffae 	bl	8000638 <__aeabi_dmul>
 80066dc:	a380      	add	r3, pc, #512	; (adr r3, 80068e0 <_dtoa_r+0x310>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fdf3 	bl	80002cc <__adddf3>
 80066e6:	4606      	mov	r6, r0
 80066e8:	4628      	mov	r0, r5
 80066ea:	460f      	mov	r7, r1
 80066ec:	f7f9 ff3a 	bl	8000564 <__aeabi_i2d>
 80066f0:	a37d      	add	r3, pc, #500	; (adr r3, 80068e8 <_dtoa_r+0x318>)
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	f7f9 ff9f 	bl	8000638 <__aeabi_dmul>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4630      	mov	r0, r6
 8006700:	4639      	mov	r1, r7
 8006702:	f7f9 fde3 	bl	80002cc <__adddf3>
 8006706:	4606      	mov	r6, r0
 8006708:	460f      	mov	r7, r1
 800670a:	f7fa fa45 	bl	8000b98 <__aeabi_d2iz>
 800670e:	2200      	movs	r2, #0
 8006710:	4682      	mov	sl, r0
 8006712:	2300      	movs	r3, #0
 8006714:	4630      	mov	r0, r6
 8006716:	4639      	mov	r1, r7
 8006718:	f7fa fa00 	bl	8000b1c <__aeabi_dcmplt>
 800671c:	b148      	cbz	r0, 8006732 <_dtoa_r+0x162>
 800671e:	4650      	mov	r0, sl
 8006720:	f7f9 ff20 	bl	8000564 <__aeabi_i2d>
 8006724:	4632      	mov	r2, r6
 8006726:	463b      	mov	r3, r7
 8006728:	f7fa f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 800672c:	b908      	cbnz	r0, 8006732 <_dtoa_r+0x162>
 800672e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006732:	f1ba 0f16 	cmp.w	sl, #22
 8006736:	d859      	bhi.n	80067ec <_dtoa_r+0x21c>
 8006738:	4970      	ldr	r1, [pc, #448]	; (80068fc <_dtoa_r+0x32c>)
 800673a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800673e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006746:	f7fa fa07 	bl	8000b58 <__aeabi_dcmpgt>
 800674a:	2800      	cmp	r0, #0
 800674c:	d050      	beq.n	80067f0 <_dtoa_r+0x220>
 800674e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006752:	2300      	movs	r3, #0
 8006754:	930f      	str	r3, [sp, #60]	; 0x3c
 8006756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006758:	1b5d      	subs	r5, r3, r5
 800675a:	f1b5 0801 	subs.w	r8, r5, #1
 800675e:	bf49      	itett	mi
 8006760:	f1c5 0301 	rsbmi	r3, r5, #1
 8006764:	2300      	movpl	r3, #0
 8006766:	9305      	strmi	r3, [sp, #20]
 8006768:	f04f 0800 	movmi.w	r8, #0
 800676c:	bf58      	it	pl
 800676e:	9305      	strpl	r3, [sp, #20]
 8006770:	f1ba 0f00 	cmp.w	sl, #0
 8006774:	db3e      	blt.n	80067f4 <_dtoa_r+0x224>
 8006776:	2300      	movs	r3, #0
 8006778:	44d0      	add	r8, sl
 800677a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800677e:	9307      	str	r3, [sp, #28]
 8006780:	9b06      	ldr	r3, [sp, #24]
 8006782:	2b09      	cmp	r3, #9
 8006784:	f200 8090 	bhi.w	80068a8 <_dtoa_r+0x2d8>
 8006788:	2b05      	cmp	r3, #5
 800678a:	bfc4      	itt	gt
 800678c:	3b04      	subgt	r3, #4
 800678e:	9306      	strgt	r3, [sp, #24]
 8006790:	9b06      	ldr	r3, [sp, #24]
 8006792:	f1a3 0302 	sub.w	r3, r3, #2
 8006796:	bfcc      	ite	gt
 8006798:	2500      	movgt	r5, #0
 800679a:	2501      	movle	r5, #1
 800679c:	2b03      	cmp	r3, #3
 800679e:	f200 808f 	bhi.w	80068c0 <_dtoa_r+0x2f0>
 80067a2:	e8df f003 	tbb	[pc, r3]
 80067a6:	7f7d      	.short	0x7f7d
 80067a8:	7131      	.short	0x7131
 80067aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80067ae:	441d      	add	r5, r3
 80067b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80067b4:	2820      	cmp	r0, #32
 80067b6:	dd13      	ble.n	80067e0 <_dtoa_r+0x210>
 80067b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80067bc:	9b00      	ldr	r3, [sp, #0]
 80067be:	fa08 f800 	lsl.w	r8, r8, r0
 80067c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80067c6:	fa23 f000 	lsr.w	r0, r3, r0
 80067ca:	ea48 0000 	orr.w	r0, r8, r0
 80067ce:	f7f9 feb9 	bl	8000544 <__aeabi_ui2d>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4682      	mov	sl, r0
 80067d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80067da:	3d01      	subs	r5, #1
 80067dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80067de:	e772      	b.n	80066c6 <_dtoa_r+0xf6>
 80067e0:	9b00      	ldr	r3, [sp, #0]
 80067e2:	f1c0 0020 	rsb	r0, r0, #32
 80067e6:	fa03 f000 	lsl.w	r0, r3, r0
 80067ea:	e7f0      	b.n	80067ce <_dtoa_r+0x1fe>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e7b1      	b.n	8006754 <_dtoa_r+0x184>
 80067f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80067f2:	e7b0      	b.n	8006756 <_dtoa_r+0x186>
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	eba3 030a 	sub.w	r3, r3, sl
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	f1ca 0300 	rsb	r3, sl, #0
 8006800:	9307      	str	r3, [sp, #28]
 8006802:	2300      	movs	r3, #0
 8006804:	930e      	str	r3, [sp, #56]	; 0x38
 8006806:	e7bb      	b.n	8006780 <_dtoa_r+0x1b0>
 8006808:	2301      	movs	r3, #1
 800680a:	930a      	str	r3, [sp, #40]	; 0x28
 800680c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd59      	ble.n	80068c6 <_dtoa_r+0x2f6>
 8006812:	9302      	str	r3, [sp, #8]
 8006814:	4699      	mov	r9, r3
 8006816:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006818:	2200      	movs	r2, #0
 800681a:	6072      	str	r2, [r6, #4]
 800681c:	2204      	movs	r2, #4
 800681e:	f102 0014 	add.w	r0, r2, #20
 8006822:	4298      	cmp	r0, r3
 8006824:	6871      	ldr	r1, [r6, #4]
 8006826:	d953      	bls.n	80068d0 <_dtoa_r+0x300>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fcaa 	bl	8007182 <_Balloc>
 800682e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006830:	6030      	str	r0, [r6, #0]
 8006832:	f1b9 0f0e 	cmp.w	r9, #14
 8006836:	f8d3 b000 	ldr.w	fp, [r3]
 800683a:	f200 80e6 	bhi.w	8006a0a <_dtoa_r+0x43a>
 800683e:	2d00      	cmp	r5, #0
 8006840:	f000 80e3 	beq.w	8006a0a <_dtoa_r+0x43a>
 8006844:	ed9d 7b00 	vldr	d7, [sp]
 8006848:	f1ba 0f00 	cmp.w	sl, #0
 800684c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006850:	dd74      	ble.n	800693c <_dtoa_r+0x36c>
 8006852:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <_dtoa_r+0x32c>)
 8006854:	f00a 030f 	and.w	r3, sl, #15
 8006858:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800685c:	ed93 7b00 	vldr	d7, [r3]
 8006860:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006864:	06f0      	lsls	r0, r6, #27
 8006866:	ed8d 7b08 	vstr	d7, [sp, #32]
 800686a:	d565      	bpl.n	8006938 <_dtoa_r+0x368>
 800686c:	4b24      	ldr	r3, [pc, #144]	; (8006900 <_dtoa_r+0x330>)
 800686e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006872:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006876:	f7fa f809 	bl	800088c <__aeabi_ddiv>
 800687a:	e9cd 0100 	strd	r0, r1, [sp]
 800687e:	f006 060f 	and.w	r6, r6, #15
 8006882:	2503      	movs	r5, #3
 8006884:	4f1e      	ldr	r7, [pc, #120]	; (8006900 <_dtoa_r+0x330>)
 8006886:	e04c      	b.n	8006922 <_dtoa_r+0x352>
 8006888:	2301      	movs	r3, #1
 800688a:	930a      	str	r3, [sp, #40]	; 0x28
 800688c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688e:	4453      	add	r3, sl
 8006890:	f103 0901 	add.w	r9, r3, #1
 8006894:	9302      	str	r3, [sp, #8]
 8006896:	464b      	mov	r3, r9
 8006898:	2b01      	cmp	r3, #1
 800689a:	bfb8      	it	lt
 800689c:	2301      	movlt	r3, #1
 800689e:	e7ba      	b.n	8006816 <_dtoa_r+0x246>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e7b2      	b.n	800680a <_dtoa_r+0x23a>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e7f0      	b.n	800688a <_dtoa_r+0x2ba>
 80068a8:	2501      	movs	r5, #1
 80068aa:	2300      	movs	r3, #0
 80068ac:	9306      	str	r3, [sp, #24]
 80068ae:	950a      	str	r5, [sp, #40]	; 0x28
 80068b0:	f04f 33ff 	mov.w	r3, #4294967295
 80068b4:	9302      	str	r3, [sp, #8]
 80068b6:	4699      	mov	r9, r3
 80068b8:	2200      	movs	r2, #0
 80068ba:	2312      	movs	r3, #18
 80068bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80068be:	e7aa      	b.n	8006816 <_dtoa_r+0x246>
 80068c0:	2301      	movs	r3, #1
 80068c2:	930a      	str	r3, [sp, #40]	; 0x28
 80068c4:	e7f4      	b.n	80068b0 <_dtoa_r+0x2e0>
 80068c6:	2301      	movs	r3, #1
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	4699      	mov	r9, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	e7f5      	b.n	80068bc <_dtoa_r+0x2ec>
 80068d0:	3101      	adds	r1, #1
 80068d2:	6071      	str	r1, [r6, #4]
 80068d4:	0052      	lsls	r2, r2, #1
 80068d6:	e7a2      	b.n	800681e <_dtoa_r+0x24e>
 80068d8:	636f4361 	.word	0x636f4361
 80068dc:	3fd287a7 	.word	0x3fd287a7
 80068e0:	8b60c8b3 	.word	0x8b60c8b3
 80068e4:	3fc68a28 	.word	0x3fc68a28
 80068e8:	509f79fb 	.word	0x509f79fb
 80068ec:	3fd34413 	.word	0x3fd34413
 80068f0:	7ff00000 	.word	0x7ff00000
 80068f4:	08007ff9 	.word	0x08007ff9
 80068f8:	3ff80000 	.word	0x3ff80000
 80068fc:	08008058 	.word	0x08008058
 8006900:	08008030 	.word	0x08008030
 8006904:	08008025 	.word	0x08008025
 8006908:	07f1      	lsls	r1, r6, #31
 800690a:	d508      	bpl.n	800691e <_dtoa_r+0x34e>
 800690c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006914:	f7f9 fe90 	bl	8000638 <__aeabi_dmul>
 8006918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800691c:	3501      	adds	r5, #1
 800691e:	1076      	asrs	r6, r6, #1
 8006920:	3708      	adds	r7, #8
 8006922:	2e00      	cmp	r6, #0
 8006924:	d1f0      	bne.n	8006908 <_dtoa_r+0x338>
 8006926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800692a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800692e:	f7f9 ffad 	bl	800088c <__aeabi_ddiv>
 8006932:	e9cd 0100 	strd	r0, r1, [sp]
 8006936:	e01a      	b.n	800696e <_dtoa_r+0x39e>
 8006938:	2502      	movs	r5, #2
 800693a:	e7a3      	b.n	8006884 <_dtoa_r+0x2b4>
 800693c:	f000 80a0 	beq.w	8006a80 <_dtoa_r+0x4b0>
 8006940:	f1ca 0600 	rsb	r6, sl, #0
 8006944:	4b9f      	ldr	r3, [pc, #636]	; (8006bc4 <_dtoa_r+0x5f4>)
 8006946:	4fa0      	ldr	r7, [pc, #640]	; (8006bc8 <_dtoa_r+0x5f8>)
 8006948:	f006 020f 	and.w	r2, r6, #15
 800694c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006958:	f7f9 fe6e 	bl	8000638 <__aeabi_dmul>
 800695c:	e9cd 0100 	strd	r0, r1, [sp]
 8006960:	1136      	asrs	r6, r6, #4
 8006962:	2300      	movs	r3, #0
 8006964:	2502      	movs	r5, #2
 8006966:	2e00      	cmp	r6, #0
 8006968:	d17f      	bne.n	8006a6a <_dtoa_r+0x49a>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e1      	bne.n	8006932 <_dtoa_r+0x362>
 800696e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8087 	beq.w	8006a84 <_dtoa_r+0x4b4>
 8006976:	e9dd 6700 	ldrd	r6, r7, [sp]
 800697a:	2200      	movs	r2, #0
 800697c:	4b93      	ldr	r3, [pc, #588]	; (8006bcc <_dtoa_r+0x5fc>)
 800697e:	4630      	mov	r0, r6
 8006980:	4639      	mov	r1, r7
 8006982:	f7fa f8cb 	bl	8000b1c <__aeabi_dcmplt>
 8006986:	2800      	cmp	r0, #0
 8006988:	d07c      	beq.n	8006a84 <_dtoa_r+0x4b4>
 800698a:	f1b9 0f00 	cmp.w	r9, #0
 800698e:	d079      	beq.n	8006a84 <_dtoa_r+0x4b4>
 8006990:	9b02      	ldr	r3, [sp, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd35      	ble.n	8006a02 <_dtoa_r+0x432>
 8006996:	f10a 33ff 	add.w	r3, sl, #4294967295
 800699a:	9308      	str	r3, [sp, #32]
 800699c:	4639      	mov	r1, r7
 800699e:	2200      	movs	r2, #0
 80069a0:	4b8b      	ldr	r3, [pc, #556]	; (8006bd0 <_dtoa_r+0x600>)
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7f9 fe48 	bl	8000638 <__aeabi_dmul>
 80069a8:	e9cd 0100 	strd	r0, r1, [sp]
 80069ac:	9f02      	ldr	r7, [sp, #8]
 80069ae:	3501      	adds	r5, #1
 80069b0:	4628      	mov	r0, r5
 80069b2:	f7f9 fdd7 	bl	8000564 <__aeabi_i2d>
 80069b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ba:	f7f9 fe3d 	bl	8000638 <__aeabi_dmul>
 80069be:	2200      	movs	r2, #0
 80069c0:	4b84      	ldr	r3, [pc, #528]	; (8006bd4 <_dtoa_r+0x604>)
 80069c2:	f7f9 fc83 	bl	80002cc <__adddf3>
 80069c6:	4605      	mov	r5, r0
 80069c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069cc:	2f00      	cmp	r7, #0
 80069ce:	d15d      	bne.n	8006a8c <_dtoa_r+0x4bc>
 80069d0:	2200      	movs	r2, #0
 80069d2:	4b81      	ldr	r3, [pc, #516]	; (8006bd8 <_dtoa_r+0x608>)
 80069d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069d8:	f7f9 fc76 	bl	80002c8 <__aeabi_dsub>
 80069dc:	462a      	mov	r2, r5
 80069de:	4633      	mov	r3, r6
 80069e0:	e9cd 0100 	strd	r0, r1, [sp]
 80069e4:	f7fa f8b8 	bl	8000b58 <__aeabi_dcmpgt>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	f040 8288 	bne.w	8006efe <_dtoa_r+0x92e>
 80069ee:	462a      	mov	r2, r5
 80069f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069f8:	f7fa f890 	bl	8000b1c <__aeabi_dcmplt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f040 827c 	bne.w	8006efa <_dtoa_r+0x92a>
 8006a02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a06:	e9cd 2300 	strd	r2, r3, [sp]
 8006a0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f2c0 8150 	blt.w	8006cb2 <_dtoa_r+0x6e2>
 8006a12:	f1ba 0f0e 	cmp.w	sl, #14
 8006a16:	f300 814c 	bgt.w	8006cb2 <_dtoa_r+0x6e2>
 8006a1a:	4b6a      	ldr	r3, [pc, #424]	; (8006bc4 <_dtoa_r+0x5f4>)
 8006a1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a20:	ed93 7b00 	vldr	d7, [r3]
 8006a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a2c:	f280 80d8 	bge.w	8006be0 <_dtoa_r+0x610>
 8006a30:	f1b9 0f00 	cmp.w	r9, #0
 8006a34:	f300 80d4 	bgt.w	8006be0 <_dtoa_r+0x610>
 8006a38:	f040 825e 	bne.w	8006ef8 <_dtoa_r+0x928>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4b66      	ldr	r3, [pc, #408]	; (8006bd8 <_dtoa_r+0x608>)
 8006a40:	ec51 0b17 	vmov	r0, r1, d7
 8006a44:	f7f9 fdf8 	bl	8000638 <__aeabi_dmul>
 8006a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a4c:	f7fa f87a 	bl	8000b44 <__aeabi_dcmpge>
 8006a50:	464f      	mov	r7, r9
 8006a52:	464e      	mov	r6, r9
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f040 8234 	bne.w	8006ec2 <_dtoa_r+0x8f2>
 8006a5a:	2331      	movs	r3, #49	; 0x31
 8006a5c:	f10b 0501 	add.w	r5, fp, #1
 8006a60:	f88b 3000 	strb.w	r3, [fp]
 8006a64:	f10a 0a01 	add.w	sl, sl, #1
 8006a68:	e22f      	b.n	8006eca <_dtoa_r+0x8fa>
 8006a6a:	07f2      	lsls	r2, r6, #31
 8006a6c:	d505      	bpl.n	8006a7a <_dtoa_r+0x4aa>
 8006a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a72:	f7f9 fde1 	bl	8000638 <__aeabi_dmul>
 8006a76:	3501      	adds	r5, #1
 8006a78:	2301      	movs	r3, #1
 8006a7a:	1076      	asrs	r6, r6, #1
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	e772      	b.n	8006966 <_dtoa_r+0x396>
 8006a80:	2502      	movs	r5, #2
 8006a82:	e774      	b.n	800696e <_dtoa_r+0x39e>
 8006a84:	f8cd a020 	str.w	sl, [sp, #32]
 8006a88:	464f      	mov	r7, r9
 8006a8a:	e791      	b.n	80069b0 <_dtoa_r+0x3e0>
 8006a8c:	4b4d      	ldr	r3, [pc, #308]	; (8006bc4 <_dtoa_r+0x5f4>)
 8006a8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d047      	beq.n	8006b2c <_dtoa_r+0x55c>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	494e      	ldr	r1, [pc, #312]	; (8006bdc <_dtoa_r+0x60c>)
 8006aa4:	f7f9 fef2 	bl	800088c <__aeabi_ddiv>
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	4633      	mov	r3, r6
 8006aac:	f7f9 fc0c 	bl	80002c8 <__aeabi_dsub>
 8006ab0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ab4:	465d      	mov	r5, fp
 8006ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aba:	f7fa f86d 	bl	8000b98 <__aeabi_d2iz>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	f7f9 fd50 	bl	8000564 <__aeabi_i2d>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006acc:	f7f9 fbfc 	bl	80002c8 <__aeabi_dsub>
 8006ad0:	3630      	adds	r6, #48	; 0x30
 8006ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ada:	e9cd 0100 	strd	r0, r1, [sp]
 8006ade:	f7fa f81d 	bl	8000b1c <__aeabi_dcmplt>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d163      	bne.n	8006bae <_dtoa_r+0x5de>
 8006ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aea:	2000      	movs	r0, #0
 8006aec:	4937      	ldr	r1, [pc, #220]	; (8006bcc <_dtoa_r+0x5fc>)
 8006aee:	f7f9 fbeb 	bl	80002c8 <__aeabi_dsub>
 8006af2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006af6:	f7fa f811 	bl	8000b1c <__aeabi_dcmplt>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f040 80b7 	bne.w	8006c6e <_dtoa_r+0x69e>
 8006b00:	eba5 030b 	sub.w	r3, r5, fp
 8006b04:	429f      	cmp	r7, r3
 8006b06:	f77f af7c 	ble.w	8006a02 <_dtoa_r+0x432>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4b30      	ldr	r3, [pc, #192]	; (8006bd0 <_dtoa_r+0x600>)
 8006b0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b12:	f7f9 fd91 	bl	8000638 <__aeabi_dmul>
 8006b16:	2200      	movs	r2, #0
 8006b18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b1c:	4b2c      	ldr	r3, [pc, #176]	; (8006bd0 <_dtoa_r+0x600>)
 8006b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b22:	f7f9 fd89 	bl	8000638 <__aeabi_dmul>
 8006b26:	e9cd 0100 	strd	r0, r1, [sp]
 8006b2a:	e7c4      	b.n	8006ab6 <_dtoa_r+0x4e6>
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4633      	mov	r3, r6
 8006b30:	f7f9 fd82 	bl	8000638 <__aeabi_dmul>
 8006b34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b38:	eb0b 0507 	add.w	r5, fp, r7
 8006b3c:	465e      	mov	r6, fp
 8006b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b42:	f7fa f829 	bl	8000b98 <__aeabi_d2iz>
 8006b46:	4607      	mov	r7, r0
 8006b48:	f7f9 fd0c 	bl	8000564 <__aeabi_i2d>
 8006b4c:	3730      	adds	r7, #48	; 0x30
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b56:	f7f9 fbb7 	bl	80002c8 <__aeabi_dsub>
 8006b5a:	f806 7b01 	strb.w	r7, [r6], #1
 8006b5e:	42ae      	cmp	r6, r5
 8006b60:	e9cd 0100 	strd	r0, r1, [sp]
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	d126      	bne.n	8006bb8 <_dtoa_r+0x5e8>
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <_dtoa_r+0x60c>)
 8006b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b70:	f7f9 fbac 	bl	80002cc <__adddf3>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b7c:	f7f9 ffec 	bl	8000b58 <__aeabi_dcmpgt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d174      	bne.n	8006c6e <_dtoa_r+0x69e>
 8006b84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b88:	2000      	movs	r0, #0
 8006b8a:	4914      	ldr	r1, [pc, #80]	; (8006bdc <_dtoa_r+0x60c>)
 8006b8c:	f7f9 fb9c 	bl	80002c8 <__aeabi_dsub>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b98:	f7f9 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f43f af30 	beq.w	8006a02 <_dtoa_r+0x432>
 8006ba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ba6:	2b30      	cmp	r3, #48	; 0x30
 8006ba8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bac:	d002      	beq.n	8006bb4 <_dtoa_r+0x5e4>
 8006bae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006bb2:	e04a      	b.n	8006c4a <_dtoa_r+0x67a>
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	e7f4      	b.n	8006ba2 <_dtoa_r+0x5d2>
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <_dtoa_r+0x600>)
 8006bba:	f7f9 fd3d 	bl	8000638 <__aeabi_dmul>
 8006bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8006bc2:	e7bc      	b.n	8006b3e <_dtoa_r+0x56e>
 8006bc4:	08008058 	.word	0x08008058
 8006bc8:	08008030 	.word	0x08008030
 8006bcc:	3ff00000 	.word	0x3ff00000
 8006bd0:	40240000 	.word	0x40240000
 8006bd4:	401c0000 	.word	0x401c0000
 8006bd8:	40140000 	.word	0x40140000
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006be4:	465d      	mov	r5, fp
 8006be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fe4d 	bl	800088c <__aeabi_ddiv>
 8006bf2:	f7f9 ffd1 	bl	8000b98 <__aeabi_d2iz>
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	f7f9 fcb4 	bl	8000564 <__aeabi_i2d>
 8006bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c00:	f7f9 fd1a 	bl	8000638 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4630      	mov	r0, r6
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006c10:	f7f9 fb5a 	bl	80002c8 <__aeabi_dsub>
 8006c14:	f805 6b01 	strb.w	r6, [r5], #1
 8006c18:	eba5 060b 	sub.w	r6, r5, fp
 8006c1c:	45b1      	cmp	r9, r6
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	d139      	bne.n	8006c98 <_dtoa_r+0x6c8>
 8006c24:	f7f9 fb52 	bl	80002cc <__adddf3>
 8006c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	f7f9 ff92 	bl	8000b58 <__aeabi_dcmpgt>
 8006c34:	b9c8      	cbnz	r0, 8006c6a <_dtoa_r+0x69a>
 8006c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7f9 ff63 	bl	8000b08 <__aeabi_dcmpeq>
 8006c42:	b110      	cbz	r0, 8006c4a <_dtoa_r+0x67a>
 8006c44:	f018 0f01 	tst.w	r8, #1
 8006c48:	d10f      	bne.n	8006c6a <_dtoa_r+0x69a>
 8006c4a:	9904      	ldr	r1, [sp, #16]
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 facc 	bl	80071ea <_Bfree>
 8006c52:	2300      	movs	r3, #0
 8006c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c56:	702b      	strb	r3, [r5, #0]
 8006c58:	f10a 0301 	add.w	r3, sl, #1
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8241 	beq.w	80070e8 <_dtoa_r+0xb18>
 8006c66:	601d      	str	r5, [r3, #0]
 8006c68:	e23e      	b.n	80070e8 <_dtoa_r+0xb18>
 8006c6a:	f8cd a020 	str.w	sl, [sp, #32]
 8006c6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c72:	2a39      	cmp	r2, #57	; 0x39
 8006c74:	f105 33ff 	add.w	r3, r5, #4294967295
 8006c78:	d108      	bne.n	8006c8c <_dtoa_r+0x6bc>
 8006c7a:	459b      	cmp	fp, r3
 8006c7c:	d10a      	bne.n	8006c94 <_dtoa_r+0x6c4>
 8006c7e:	9b08      	ldr	r3, [sp, #32]
 8006c80:	3301      	adds	r3, #1
 8006c82:	9308      	str	r3, [sp, #32]
 8006c84:	2330      	movs	r3, #48	; 0x30
 8006c86:	f88b 3000 	strb.w	r3, [fp]
 8006c8a:	465b      	mov	r3, fp
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	3201      	adds	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e78c      	b.n	8006bae <_dtoa_r+0x5de>
 8006c94:	461d      	mov	r5, r3
 8006c96:	e7ea      	b.n	8006c6e <_dtoa_r+0x69e>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b9b      	ldr	r3, [pc, #620]	; (8006f08 <_dtoa_r+0x938>)
 8006c9c:	f7f9 fccc 	bl	8000638 <__aeabi_dmul>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	f7f9 ff2e 	bl	8000b08 <__aeabi_dcmpeq>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d09a      	beq.n	8006be6 <_dtoa_r+0x616>
 8006cb0:	e7cb      	b.n	8006c4a <_dtoa_r+0x67a>
 8006cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	f000 808b 	beq.w	8006dd0 <_dtoa_r+0x800>
 8006cba:	9a06      	ldr	r2, [sp, #24]
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	dc6e      	bgt.n	8006d9e <_dtoa_r+0x7ce>
 8006cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	d067      	beq.n	8006d96 <_dtoa_r+0x7c6>
 8006cc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cca:	9f07      	ldr	r7, [sp, #28]
 8006ccc:	9d05      	ldr	r5, [sp, #20]
 8006cce:	9a05      	ldr	r2, [sp, #20]
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	441a      	add	r2, r3
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	4498      	add	r8, r3
 8006cda:	f000 fb26 	bl	800732a <__i2b>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	dd0c      	ble.n	8006cfe <_dtoa_r+0x72e>
 8006ce4:	f1b8 0f00 	cmp.w	r8, #0
 8006ce8:	dd09      	ble.n	8006cfe <_dtoa_r+0x72e>
 8006cea:	4545      	cmp	r5, r8
 8006cec:	9a05      	ldr	r2, [sp, #20]
 8006cee:	462b      	mov	r3, r5
 8006cf0:	bfa8      	it	ge
 8006cf2:	4643      	movge	r3, r8
 8006cf4:	1ad2      	subs	r2, r2, r3
 8006cf6:	9205      	str	r2, [sp, #20]
 8006cf8:	1aed      	subs	r5, r5, r3
 8006cfa:	eba8 0803 	sub.w	r8, r8, r3
 8006cfe:	9b07      	ldr	r3, [sp, #28]
 8006d00:	b1eb      	cbz	r3, 8006d3e <_dtoa_r+0x76e>
 8006d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d067      	beq.n	8006dd8 <_dtoa_r+0x808>
 8006d08:	b18f      	cbz	r7, 8006d2e <_dtoa_r+0x75e>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fbaa 	bl	8007468 <__pow5mult>
 8006d14:	9a04      	ldr	r2, [sp, #16]
 8006d16:	4601      	mov	r1, r0
 8006d18:	4606      	mov	r6, r0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fb0e 	bl	800733c <__multiply>
 8006d20:	9904      	ldr	r1, [sp, #16]
 8006d22:	9008      	str	r0, [sp, #32]
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fa60 	bl	80071ea <_Bfree>
 8006d2a:	9b08      	ldr	r3, [sp, #32]
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	9b07      	ldr	r3, [sp, #28]
 8006d30:	1bda      	subs	r2, r3, r7
 8006d32:	d004      	beq.n	8006d3e <_dtoa_r+0x76e>
 8006d34:	9904      	ldr	r1, [sp, #16]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 fb96 	bl	8007468 <__pow5mult>
 8006d3c:	9004      	str	r0, [sp, #16]
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 faf2 	bl	800732a <__i2b>
 8006d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d48:	4607      	mov	r7, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 81d0 	beq.w	80070f0 <_dtoa_r+0xb20>
 8006d50:	461a      	mov	r2, r3
 8006d52:	4601      	mov	r1, r0
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 fb87 	bl	8007468 <__pow5mult>
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	4607      	mov	r7, r0
 8006d60:	dc40      	bgt.n	8006de4 <_dtoa_r+0x814>
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d139      	bne.n	8006ddc <_dtoa_r+0x80c>
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d136      	bne.n	8006de0 <_dtoa_r+0x810>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d78:	0d1b      	lsrs	r3, r3, #20
 8006d7a:	051b      	lsls	r3, r3, #20
 8006d7c:	b12b      	cbz	r3, 8006d8a <_dtoa_r+0x7ba>
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	3301      	adds	r3, #1
 8006d82:	9305      	str	r3, [sp, #20]
 8006d84:	f108 0801 	add.w	r8, r8, #1
 8006d88:	2301      	movs	r3, #1
 8006d8a:	9307      	str	r3, [sp, #28]
 8006d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d12a      	bne.n	8006de8 <_dtoa_r+0x818>
 8006d92:	2001      	movs	r0, #1
 8006d94:	e030      	b.n	8006df8 <_dtoa_r+0x828>
 8006d96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d9c:	e795      	b.n	8006cca <_dtoa_r+0x6fa>
 8006d9e:	9b07      	ldr	r3, [sp, #28]
 8006da0:	f109 37ff 	add.w	r7, r9, #4294967295
 8006da4:	42bb      	cmp	r3, r7
 8006da6:	bfbf      	itttt	lt
 8006da8:	9b07      	ldrlt	r3, [sp, #28]
 8006daa:	9707      	strlt	r7, [sp, #28]
 8006dac:	1afa      	sublt	r2, r7, r3
 8006dae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006db0:	bfbb      	ittet	lt
 8006db2:	189b      	addlt	r3, r3, r2
 8006db4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006db6:	1bdf      	subge	r7, r3, r7
 8006db8:	2700      	movlt	r7, #0
 8006dba:	f1b9 0f00 	cmp.w	r9, #0
 8006dbe:	bfb5      	itete	lt
 8006dc0:	9b05      	ldrlt	r3, [sp, #20]
 8006dc2:	9d05      	ldrge	r5, [sp, #20]
 8006dc4:	eba3 0509 	sublt.w	r5, r3, r9
 8006dc8:	464b      	movge	r3, r9
 8006dca:	bfb8      	it	lt
 8006dcc:	2300      	movlt	r3, #0
 8006dce:	e77e      	b.n	8006cce <_dtoa_r+0x6fe>
 8006dd0:	9f07      	ldr	r7, [sp, #28]
 8006dd2:	9d05      	ldr	r5, [sp, #20]
 8006dd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006dd6:	e783      	b.n	8006ce0 <_dtoa_r+0x710>
 8006dd8:	9a07      	ldr	r2, [sp, #28]
 8006dda:	e7ab      	b.n	8006d34 <_dtoa_r+0x764>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e7d4      	b.n	8006d8a <_dtoa_r+0x7ba>
 8006de0:	9b00      	ldr	r3, [sp, #0]
 8006de2:	e7d2      	b.n	8006d8a <_dtoa_r+0x7ba>
 8006de4:	2300      	movs	r3, #0
 8006de6:	9307      	str	r3, [sp, #28]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006dee:	6918      	ldr	r0, [r3, #16]
 8006df0:	f000 fa4d 	bl	800728e <__hi0bits>
 8006df4:	f1c0 0020 	rsb	r0, r0, #32
 8006df8:	4440      	add	r0, r8
 8006dfa:	f010 001f 	ands.w	r0, r0, #31
 8006dfe:	d047      	beq.n	8006e90 <_dtoa_r+0x8c0>
 8006e00:	f1c0 0320 	rsb	r3, r0, #32
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	dd3b      	ble.n	8006e80 <_dtoa_r+0x8b0>
 8006e08:	9b05      	ldr	r3, [sp, #20]
 8006e0a:	f1c0 001c 	rsb	r0, r0, #28
 8006e0e:	4403      	add	r3, r0
 8006e10:	9305      	str	r3, [sp, #20]
 8006e12:	4405      	add	r5, r0
 8006e14:	4480      	add	r8, r0
 8006e16:	9b05      	ldr	r3, [sp, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dd05      	ble.n	8006e28 <_dtoa_r+0x858>
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	9904      	ldr	r1, [sp, #16]
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 fb6f 	bl	8007504 <__lshift>
 8006e26:	9004      	str	r0, [sp, #16]
 8006e28:	f1b8 0f00 	cmp.w	r8, #0
 8006e2c:	dd05      	ble.n	8006e3a <_dtoa_r+0x86a>
 8006e2e:	4639      	mov	r1, r7
 8006e30:	4642      	mov	r2, r8
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fb66 	bl	8007504 <__lshift>
 8006e38:	4607      	mov	r7, r0
 8006e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e3c:	b353      	cbz	r3, 8006e94 <_dtoa_r+0x8c4>
 8006e3e:	4639      	mov	r1, r7
 8006e40:	9804      	ldr	r0, [sp, #16]
 8006e42:	f000 fbb3 	bl	80075ac <__mcmp>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	da24      	bge.n	8006e94 <_dtoa_r+0x8c4>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	9904      	ldr	r1, [sp, #16]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 f9e1 	bl	8007218 <__multadd>
 8006e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e58:	9004      	str	r0, [sp, #16]
 8006e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 814d 	beq.w	80070fe <_dtoa_r+0xb2e>
 8006e64:	2300      	movs	r3, #0
 8006e66:	4631      	mov	r1, r6
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f9d4 	bl	8007218 <__multadd>
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	4606      	mov	r6, r0
 8006e76:	dc4f      	bgt.n	8006f18 <_dtoa_r+0x948>
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	dd4c      	ble.n	8006f18 <_dtoa_r+0x948>
 8006e7e:	e011      	b.n	8006ea4 <_dtoa_r+0x8d4>
 8006e80:	d0c9      	beq.n	8006e16 <_dtoa_r+0x846>
 8006e82:	9a05      	ldr	r2, [sp, #20]
 8006e84:	331c      	adds	r3, #28
 8006e86:	441a      	add	r2, r3
 8006e88:	9205      	str	r2, [sp, #20]
 8006e8a:	441d      	add	r5, r3
 8006e8c:	4498      	add	r8, r3
 8006e8e:	e7c2      	b.n	8006e16 <_dtoa_r+0x846>
 8006e90:	4603      	mov	r3, r0
 8006e92:	e7f6      	b.n	8006e82 <_dtoa_r+0x8b2>
 8006e94:	f1b9 0f00 	cmp.w	r9, #0
 8006e98:	dc38      	bgt.n	8006f0c <_dtoa_r+0x93c>
 8006e9a:	9b06      	ldr	r3, [sp, #24]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	dd35      	ble.n	8006f0c <_dtoa_r+0x93c>
 8006ea0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ea4:	9b02      	ldr	r3, [sp, #8]
 8006ea6:	b963      	cbnz	r3, 8006ec2 <_dtoa_r+0x8f2>
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	2205      	movs	r2, #5
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 f9b3 	bl	8007218 <__multadd>
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	9804      	ldr	r0, [sp, #16]
 8006eb8:	f000 fb78 	bl	80075ac <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f73f adcc 	bgt.w	8006a5a <_dtoa_r+0x48a>
 8006ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec4:	465d      	mov	r5, fp
 8006ec6:	ea6f 0a03 	mvn.w	sl, r3
 8006eca:	f04f 0900 	mov.w	r9, #0
 8006ece:	4639      	mov	r1, r7
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 f98a 	bl	80071ea <_Bfree>
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	f43f aeb7 	beq.w	8006c4a <_dtoa_r+0x67a>
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	d005      	beq.n	8006eee <_dtoa_r+0x91e>
 8006ee2:	45b1      	cmp	r9, r6
 8006ee4:	d003      	beq.n	8006eee <_dtoa_r+0x91e>
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 f97e 	bl	80071ea <_Bfree>
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 f97a 	bl	80071ea <_Bfree>
 8006ef6:	e6a8      	b.n	8006c4a <_dtoa_r+0x67a>
 8006ef8:	2700      	movs	r7, #0
 8006efa:	463e      	mov	r6, r7
 8006efc:	e7e1      	b.n	8006ec2 <_dtoa_r+0x8f2>
 8006efe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f02:	463e      	mov	r6, r7
 8006f04:	e5a9      	b.n	8006a5a <_dtoa_r+0x48a>
 8006f06:	bf00      	nop
 8006f08:	40240000 	.word	0x40240000
 8006f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80fa 	beq.w	800710c <_dtoa_r+0xb3c>
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	dd05      	ble.n	8006f28 <_dtoa_r+0x958>
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 faef 	bl	8007504 <__lshift>
 8006f26:	4606      	mov	r6, r0
 8006f28:	9b07      	ldr	r3, [sp, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04c      	beq.n	8006fc8 <_dtoa_r+0x9f8>
 8006f2e:	6871      	ldr	r1, [r6, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 f926 	bl	8007182 <_Balloc>
 8006f36:	6932      	ldr	r2, [r6, #16]
 8006f38:	3202      	adds	r2, #2
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	f106 010c 	add.w	r1, r6, #12
 8006f42:	300c      	adds	r0, #12
 8006f44:	f000 f912 	bl	800716c <memcpy>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 fad9 	bl	8007504 <__lshift>
 8006f52:	9b00      	ldr	r3, [sp, #0]
 8006f54:	f8cd b014 	str.w	fp, [sp, #20]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	46b1      	mov	r9, r6
 8006f5e:	9307      	str	r3, [sp, #28]
 8006f60:	4606      	mov	r6, r0
 8006f62:	4639      	mov	r1, r7
 8006f64:	9804      	ldr	r0, [sp, #16]
 8006f66:	f7ff faa5 	bl	80064b4 <quorem>
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f72:	9804      	ldr	r0, [sp, #16]
 8006f74:	f000 fb1a 	bl	80075ac <__mcmp>
 8006f78:	4632      	mov	r2, r6
 8006f7a:	9000      	str	r0, [sp, #0]
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fb2e 	bl	80075e0 <__mdiff>
 8006f84:	68c3      	ldr	r3, [r0, #12]
 8006f86:	4602      	mov	r2, r0
 8006f88:	bb03      	cbnz	r3, 8006fcc <_dtoa_r+0x9fc>
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	9008      	str	r0, [sp, #32]
 8006f8e:	9804      	ldr	r0, [sp, #16]
 8006f90:	f000 fb0c 	bl	80075ac <__mcmp>
 8006f94:	9a08      	ldr	r2, [sp, #32]
 8006f96:	4603      	mov	r3, r0
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	9308      	str	r3, [sp, #32]
 8006f9e:	f000 f924 	bl	80071ea <_Bfree>
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	b9a3      	cbnz	r3, 8006fd0 <_dtoa_r+0xa00>
 8006fa6:	9a06      	ldr	r2, [sp, #24]
 8006fa8:	b992      	cbnz	r2, 8006fd0 <_dtoa_r+0xa00>
 8006faa:	9a07      	ldr	r2, [sp, #28]
 8006fac:	b982      	cbnz	r2, 8006fd0 <_dtoa_r+0xa00>
 8006fae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006fb2:	d029      	beq.n	8007008 <_dtoa_r+0xa38>
 8006fb4:	9b00      	ldr	r3, [sp, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dd01      	ble.n	8006fbe <_dtoa_r+0x9ee>
 8006fba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006fbe:	9b05      	ldr	r3, [sp, #20]
 8006fc0:	1c5d      	adds	r5, r3, #1
 8006fc2:	f883 8000 	strb.w	r8, [r3]
 8006fc6:	e782      	b.n	8006ece <_dtoa_r+0x8fe>
 8006fc8:	4630      	mov	r0, r6
 8006fca:	e7c2      	b.n	8006f52 <_dtoa_r+0x982>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e7e3      	b.n	8006f98 <_dtoa_r+0x9c8>
 8006fd0:	9a00      	ldr	r2, [sp, #0]
 8006fd2:	2a00      	cmp	r2, #0
 8006fd4:	db04      	blt.n	8006fe0 <_dtoa_r+0xa10>
 8006fd6:	d125      	bne.n	8007024 <_dtoa_r+0xa54>
 8006fd8:	9a06      	ldr	r2, [sp, #24]
 8006fda:	bb1a      	cbnz	r2, 8007024 <_dtoa_r+0xa54>
 8006fdc:	9a07      	ldr	r2, [sp, #28]
 8006fde:	bb0a      	cbnz	r2, 8007024 <_dtoa_r+0xa54>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	ddec      	ble.n	8006fbe <_dtoa_r+0x9ee>
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	9904      	ldr	r1, [sp, #16]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 fa8b 	bl	8007504 <__lshift>
 8006fee:	4639      	mov	r1, r7
 8006ff0:	9004      	str	r0, [sp, #16]
 8006ff2:	f000 fadb 	bl	80075ac <__mcmp>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	dc03      	bgt.n	8007002 <_dtoa_r+0xa32>
 8006ffa:	d1e0      	bne.n	8006fbe <_dtoa_r+0x9ee>
 8006ffc:	f018 0f01 	tst.w	r8, #1
 8007000:	d0dd      	beq.n	8006fbe <_dtoa_r+0x9ee>
 8007002:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007006:	d1d8      	bne.n	8006fba <_dtoa_r+0x9ea>
 8007008:	9b05      	ldr	r3, [sp, #20]
 800700a:	9a05      	ldr	r2, [sp, #20]
 800700c:	1c5d      	adds	r5, r3, #1
 800700e:	2339      	movs	r3, #57	; 0x39
 8007010:	7013      	strb	r3, [r2, #0]
 8007012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007016:	2b39      	cmp	r3, #57	; 0x39
 8007018:	f105 32ff 	add.w	r2, r5, #4294967295
 800701c:	d04f      	beq.n	80070be <_dtoa_r+0xaee>
 800701e:	3301      	adds	r3, #1
 8007020:	7013      	strb	r3, [r2, #0]
 8007022:	e754      	b.n	8006ece <_dtoa_r+0x8fe>
 8007024:	9a05      	ldr	r2, [sp, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f102 0501 	add.w	r5, r2, #1
 800702c:	dd06      	ble.n	800703c <_dtoa_r+0xa6c>
 800702e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007032:	d0e9      	beq.n	8007008 <_dtoa_r+0xa38>
 8007034:	f108 0801 	add.w	r8, r8, #1
 8007038:	9b05      	ldr	r3, [sp, #20]
 800703a:	e7c2      	b.n	8006fc2 <_dtoa_r+0x9f2>
 800703c:	9a02      	ldr	r2, [sp, #8]
 800703e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007042:	eba5 030b 	sub.w	r3, r5, fp
 8007046:	4293      	cmp	r3, r2
 8007048:	d021      	beq.n	800708e <_dtoa_r+0xabe>
 800704a:	2300      	movs	r3, #0
 800704c:	220a      	movs	r2, #10
 800704e:	9904      	ldr	r1, [sp, #16]
 8007050:	4620      	mov	r0, r4
 8007052:	f000 f8e1 	bl	8007218 <__multadd>
 8007056:	45b1      	cmp	r9, r6
 8007058:	9004      	str	r0, [sp, #16]
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	f04f 020a 	mov.w	r2, #10
 8007062:	4649      	mov	r1, r9
 8007064:	4620      	mov	r0, r4
 8007066:	d105      	bne.n	8007074 <_dtoa_r+0xaa4>
 8007068:	f000 f8d6 	bl	8007218 <__multadd>
 800706c:	4681      	mov	r9, r0
 800706e:	4606      	mov	r6, r0
 8007070:	9505      	str	r5, [sp, #20]
 8007072:	e776      	b.n	8006f62 <_dtoa_r+0x992>
 8007074:	f000 f8d0 	bl	8007218 <__multadd>
 8007078:	4631      	mov	r1, r6
 800707a:	4681      	mov	r9, r0
 800707c:	2300      	movs	r3, #0
 800707e:	220a      	movs	r2, #10
 8007080:	4620      	mov	r0, r4
 8007082:	f000 f8c9 	bl	8007218 <__multadd>
 8007086:	4606      	mov	r6, r0
 8007088:	e7f2      	b.n	8007070 <_dtoa_r+0xaa0>
 800708a:	f04f 0900 	mov.w	r9, #0
 800708e:	2201      	movs	r2, #1
 8007090:	9904      	ldr	r1, [sp, #16]
 8007092:	4620      	mov	r0, r4
 8007094:	f000 fa36 	bl	8007504 <__lshift>
 8007098:	4639      	mov	r1, r7
 800709a:	9004      	str	r0, [sp, #16]
 800709c:	f000 fa86 	bl	80075ac <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	dcb6      	bgt.n	8007012 <_dtoa_r+0xa42>
 80070a4:	d102      	bne.n	80070ac <_dtoa_r+0xadc>
 80070a6:	f018 0f01 	tst.w	r8, #1
 80070aa:	d1b2      	bne.n	8007012 <_dtoa_r+0xa42>
 80070ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070b0:	2b30      	cmp	r3, #48	; 0x30
 80070b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80070b6:	f47f af0a 	bne.w	8006ece <_dtoa_r+0x8fe>
 80070ba:	4615      	mov	r5, r2
 80070bc:	e7f6      	b.n	80070ac <_dtoa_r+0xadc>
 80070be:	4593      	cmp	fp, r2
 80070c0:	d105      	bne.n	80070ce <_dtoa_r+0xafe>
 80070c2:	2331      	movs	r3, #49	; 0x31
 80070c4:	f10a 0a01 	add.w	sl, sl, #1
 80070c8:	f88b 3000 	strb.w	r3, [fp]
 80070cc:	e6ff      	b.n	8006ece <_dtoa_r+0x8fe>
 80070ce:	4615      	mov	r5, r2
 80070d0:	e79f      	b.n	8007012 <_dtoa_r+0xa42>
 80070d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007138 <_dtoa_r+0xb68>
 80070d6:	e007      	b.n	80070e8 <_dtoa_r+0xb18>
 80070d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800713c <_dtoa_r+0xb6c>
 80070de:	b11b      	cbz	r3, 80070e8 <_dtoa_r+0xb18>
 80070e0:	f10b 0308 	add.w	r3, fp, #8
 80070e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	4658      	mov	r0, fp
 80070ea:	b017      	add	sp, #92	; 0x5c
 80070ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f0:	9b06      	ldr	r3, [sp, #24]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	f77f ae35 	ble.w	8006d62 <_dtoa_r+0x792>
 80070f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070fa:	9307      	str	r3, [sp, #28]
 80070fc:	e649      	b.n	8006d92 <_dtoa_r+0x7c2>
 80070fe:	9b02      	ldr	r3, [sp, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	dc03      	bgt.n	800710c <_dtoa_r+0xb3c>
 8007104:	9b06      	ldr	r3, [sp, #24]
 8007106:	2b02      	cmp	r3, #2
 8007108:	f73f aecc 	bgt.w	8006ea4 <_dtoa_r+0x8d4>
 800710c:	465d      	mov	r5, fp
 800710e:	4639      	mov	r1, r7
 8007110:	9804      	ldr	r0, [sp, #16]
 8007112:	f7ff f9cf 	bl	80064b4 <quorem>
 8007116:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800711a:	f805 8b01 	strb.w	r8, [r5], #1
 800711e:	9a02      	ldr	r2, [sp, #8]
 8007120:	eba5 030b 	sub.w	r3, r5, fp
 8007124:	429a      	cmp	r2, r3
 8007126:	ddb0      	ble.n	800708a <_dtoa_r+0xaba>
 8007128:	2300      	movs	r3, #0
 800712a:	220a      	movs	r2, #10
 800712c:	9904      	ldr	r1, [sp, #16]
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f872 	bl	8007218 <__multadd>
 8007134:	9004      	str	r0, [sp, #16]
 8007136:	e7ea      	b.n	800710e <_dtoa_r+0xb3e>
 8007138:	08007ff8 	.word	0x08007ff8
 800713c:	0800801c 	.word	0x0800801c

08007140 <_localeconv_r>:
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <_localeconv_r+0x14>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a18      	ldr	r0, [r3, #32]
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <_localeconv_r+0x18>)
 8007148:	2800      	cmp	r0, #0
 800714a:	bf08      	it	eq
 800714c:	4618      	moveq	r0, r3
 800714e:	30f0      	adds	r0, #240	; 0xf0
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000014 	.word	0x20000014
 8007158:	20000078 	.word	0x20000078

0800715c <malloc>:
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <malloc+0xc>)
 800715e:	4601      	mov	r1, r0
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f000 bb45 	b.w	80077f0 <_malloc_r>
 8007166:	bf00      	nop
 8007168:	20000014 	.word	0x20000014

0800716c <memcpy>:
 800716c:	b510      	push	{r4, lr}
 800716e:	1e43      	subs	r3, r0, #1
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	d100      	bne.n	8007178 <memcpy+0xc>
 8007176:	bd10      	pop	{r4, pc}
 8007178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007180:	e7f7      	b.n	8007172 <memcpy+0x6>

08007182 <_Balloc>:
 8007182:	b570      	push	{r4, r5, r6, lr}
 8007184:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007186:	4604      	mov	r4, r0
 8007188:	460e      	mov	r6, r1
 800718a:	b93d      	cbnz	r5, 800719c <_Balloc+0x1a>
 800718c:	2010      	movs	r0, #16
 800718e:	f7ff ffe5 	bl	800715c <malloc>
 8007192:	6260      	str	r0, [r4, #36]	; 0x24
 8007194:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007198:	6005      	str	r5, [r0, #0]
 800719a:	60c5      	str	r5, [r0, #12]
 800719c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800719e:	68eb      	ldr	r3, [r5, #12]
 80071a0:	b183      	cbz	r3, 80071c4 <_Balloc+0x42>
 80071a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071aa:	b9b8      	cbnz	r0, 80071dc <_Balloc+0x5a>
 80071ac:	2101      	movs	r1, #1
 80071ae:	fa01 f506 	lsl.w	r5, r1, r6
 80071b2:	1d6a      	adds	r2, r5, #5
 80071b4:	0092      	lsls	r2, r2, #2
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 fabe 	bl	8007738 <_calloc_r>
 80071bc:	b160      	cbz	r0, 80071d8 <_Balloc+0x56>
 80071be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071c2:	e00e      	b.n	80071e2 <_Balloc+0x60>
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	2104      	movs	r1, #4
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fab5 	bl	8007738 <_calloc_r>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	60e8      	str	r0, [r5, #12]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e4      	bne.n	80071a2 <_Balloc+0x20>
 80071d8:	2000      	movs	r0, #0
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	6802      	ldr	r2, [r0, #0]
 80071de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80071e2:	2300      	movs	r3, #0
 80071e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071e8:	e7f7      	b.n	80071da <_Balloc+0x58>

080071ea <_Bfree>:
 80071ea:	b570      	push	{r4, r5, r6, lr}
 80071ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071ee:	4606      	mov	r6, r0
 80071f0:	460d      	mov	r5, r1
 80071f2:	b93c      	cbnz	r4, 8007204 <_Bfree+0x1a>
 80071f4:	2010      	movs	r0, #16
 80071f6:	f7ff ffb1 	bl	800715c <malloc>
 80071fa:	6270      	str	r0, [r6, #36]	; 0x24
 80071fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007200:	6004      	str	r4, [r0, #0]
 8007202:	60c4      	str	r4, [r0, #12]
 8007204:	b13d      	cbz	r5, 8007216 <_Bfree+0x2c>
 8007206:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007208:	686a      	ldr	r2, [r5, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007210:	6029      	str	r1, [r5, #0]
 8007212:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007216:	bd70      	pop	{r4, r5, r6, pc}

08007218 <__multadd>:
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	690d      	ldr	r5, [r1, #16]
 800721e:	461f      	mov	r7, r3
 8007220:	4606      	mov	r6, r0
 8007222:	460c      	mov	r4, r1
 8007224:	f101 0c14 	add.w	ip, r1, #20
 8007228:	2300      	movs	r3, #0
 800722a:	f8dc 0000 	ldr.w	r0, [ip]
 800722e:	b281      	uxth	r1, r0
 8007230:	fb02 7101 	mla	r1, r2, r1, r7
 8007234:	0c0f      	lsrs	r7, r1, #16
 8007236:	0c00      	lsrs	r0, r0, #16
 8007238:	fb02 7000 	mla	r0, r2, r0, r7
 800723c:	b289      	uxth	r1, r1
 800723e:	3301      	adds	r3, #1
 8007240:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007244:	429d      	cmp	r5, r3
 8007246:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800724a:	f84c 1b04 	str.w	r1, [ip], #4
 800724e:	dcec      	bgt.n	800722a <__multadd+0x12>
 8007250:	b1d7      	cbz	r7, 8007288 <__multadd+0x70>
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	42ab      	cmp	r3, r5
 8007256:	dc12      	bgt.n	800727e <__multadd+0x66>
 8007258:	6861      	ldr	r1, [r4, #4]
 800725a:	4630      	mov	r0, r6
 800725c:	3101      	adds	r1, #1
 800725e:	f7ff ff90 	bl	8007182 <_Balloc>
 8007262:	6922      	ldr	r2, [r4, #16]
 8007264:	3202      	adds	r2, #2
 8007266:	f104 010c 	add.w	r1, r4, #12
 800726a:	4680      	mov	r8, r0
 800726c:	0092      	lsls	r2, r2, #2
 800726e:	300c      	adds	r0, #12
 8007270:	f7ff ff7c 	bl	800716c <memcpy>
 8007274:	4621      	mov	r1, r4
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff ffb7 	bl	80071ea <_Bfree>
 800727c:	4644      	mov	r4, r8
 800727e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007282:	3501      	adds	r5, #1
 8007284:	615f      	str	r7, [r3, #20]
 8007286:	6125      	str	r5, [r4, #16]
 8007288:	4620      	mov	r0, r4
 800728a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800728e <__hi0bits>:
 800728e:	0c02      	lsrs	r2, r0, #16
 8007290:	0412      	lsls	r2, r2, #16
 8007292:	4603      	mov	r3, r0
 8007294:	b9b2      	cbnz	r2, 80072c4 <__hi0bits+0x36>
 8007296:	0403      	lsls	r3, r0, #16
 8007298:	2010      	movs	r0, #16
 800729a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800729e:	bf04      	itt	eq
 80072a0:	021b      	lsleq	r3, r3, #8
 80072a2:	3008      	addeq	r0, #8
 80072a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072a8:	bf04      	itt	eq
 80072aa:	011b      	lsleq	r3, r3, #4
 80072ac:	3004      	addeq	r0, #4
 80072ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072b2:	bf04      	itt	eq
 80072b4:	009b      	lsleq	r3, r3, #2
 80072b6:	3002      	addeq	r0, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	db06      	blt.n	80072ca <__hi0bits+0x3c>
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	d503      	bpl.n	80072c8 <__hi0bits+0x3a>
 80072c0:	3001      	adds	r0, #1
 80072c2:	4770      	bx	lr
 80072c4:	2000      	movs	r0, #0
 80072c6:	e7e8      	b.n	800729a <__hi0bits+0xc>
 80072c8:	2020      	movs	r0, #32
 80072ca:	4770      	bx	lr

080072cc <__lo0bits>:
 80072cc:	6803      	ldr	r3, [r0, #0]
 80072ce:	f013 0207 	ands.w	r2, r3, #7
 80072d2:	4601      	mov	r1, r0
 80072d4:	d00b      	beq.n	80072ee <__lo0bits+0x22>
 80072d6:	07da      	lsls	r2, r3, #31
 80072d8:	d423      	bmi.n	8007322 <__lo0bits+0x56>
 80072da:	0798      	lsls	r0, r3, #30
 80072dc:	bf49      	itett	mi
 80072de:	085b      	lsrmi	r3, r3, #1
 80072e0:	089b      	lsrpl	r3, r3, #2
 80072e2:	2001      	movmi	r0, #1
 80072e4:	600b      	strmi	r3, [r1, #0]
 80072e6:	bf5c      	itt	pl
 80072e8:	600b      	strpl	r3, [r1, #0]
 80072ea:	2002      	movpl	r0, #2
 80072ec:	4770      	bx	lr
 80072ee:	b298      	uxth	r0, r3
 80072f0:	b9a8      	cbnz	r0, 800731e <__lo0bits+0x52>
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	2010      	movs	r0, #16
 80072f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072fa:	bf04      	itt	eq
 80072fc:	0a1b      	lsreq	r3, r3, #8
 80072fe:	3008      	addeq	r0, #8
 8007300:	071a      	lsls	r2, r3, #28
 8007302:	bf04      	itt	eq
 8007304:	091b      	lsreq	r3, r3, #4
 8007306:	3004      	addeq	r0, #4
 8007308:	079a      	lsls	r2, r3, #30
 800730a:	bf04      	itt	eq
 800730c:	089b      	lsreq	r3, r3, #2
 800730e:	3002      	addeq	r0, #2
 8007310:	07da      	lsls	r2, r3, #31
 8007312:	d402      	bmi.n	800731a <__lo0bits+0x4e>
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	d006      	beq.n	8007326 <__lo0bits+0x5a>
 8007318:	3001      	adds	r0, #1
 800731a:	600b      	str	r3, [r1, #0]
 800731c:	4770      	bx	lr
 800731e:	4610      	mov	r0, r2
 8007320:	e7e9      	b.n	80072f6 <__lo0bits+0x2a>
 8007322:	2000      	movs	r0, #0
 8007324:	4770      	bx	lr
 8007326:	2020      	movs	r0, #32
 8007328:	4770      	bx	lr

0800732a <__i2b>:
 800732a:	b510      	push	{r4, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	2101      	movs	r1, #1
 8007330:	f7ff ff27 	bl	8007182 <_Balloc>
 8007334:	2201      	movs	r2, #1
 8007336:	6144      	str	r4, [r0, #20]
 8007338:	6102      	str	r2, [r0, #16]
 800733a:	bd10      	pop	{r4, pc}

0800733c <__multiply>:
 800733c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	4614      	mov	r4, r2
 8007342:	690a      	ldr	r2, [r1, #16]
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	429a      	cmp	r2, r3
 8007348:	bfb8      	it	lt
 800734a:	460b      	movlt	r3, r1
 800734c:	4688      	mov	r8, r1
 800734e:	bfbc      	itt	lt
 8007350:	46a0      	movlt	r8, r4
 8007352:	461c      	movlt	r4, r3
 8007354:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007358:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800735c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007360:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007364:	eb07 0609 	add.w	r6, r7, r9
 8007368:	42b3      	cmp	r3, r6
 800736a:	bfb8      	it	lt
 800736c:	3101      	addlt	r1, #1
 800736e:	f7ff ff08 	bl	8007182 <_Balloc>
 8007372:	f100 0514 	add.w	r5, r0, #20
 8007376:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800737a:	462b      	mov	r3, r5
 800737c:	2200      	movs	r2, #0
 800737e:	4573      	cmp	r3, lr
 8007380:	d316      	bcc.n	80073b0 <__multiply+0x74>
 8007382:	f104 0214 	add.w	r2, r4, #20
 8007386:	f108 0114 	add.w	r1, r8, #20
 800738a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800738e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	9b00      	ldr	r3, [sp, #0]
 8007396:	9201      	str	r2, [sp, #4]
 8007398:	4293      	cmp	r3, r2
 800739a:	d80c      	bhi.n	80073b6 <__multiply+0x7a>
 800739c:	2e00      	cmp	r6, #0
 800739e:	dd03      	ble.n	80073a8 <__multiply+0x6c>
 80073a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05d      	beq.n	8007464 <__multiply+0x128>
 80073a8:	6106      	str	r6, [r0, #16]
 80073aa:	b003      	add	sp, #12
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	f843 2b04 	str.w	r2, [r3], #4
 80073b4:	e7e3      	b.n	800737e <__multiply+0x42>
 80073b6:	f8b2 b000 	ldrh.w	fp, [r2]
 80073ba:	f1bb 0f00 	cmp.w	fp, #0
 80073be:	d023      	beq.n	8007408 <__multiply+0xcc>
 80073c0:	4689      	mov	r9, r1
 80073c2:	46ac      	mov	ip, r5
 80073c4:	f04f 0800 	mov.w	r8, #0
 80073c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80073cc:	f8dc a000 	ldr.w	sl, [ip]
 80073d0:	b2a3      	uxth	r3, r4
 80073d2:	fa1f fa8a 	uxth.w	sl, sl
 80073d6:	fb0b a303 	mla	r3, fp, r3, sl
 80073da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073de:	f8dc 4000 	ldr.w	r4, [ip]
 80073e2:	4443      	add	r3, r8
 80073e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073e8:	fb0b 840a 	mla	r4, fp, sl, r8
 80073ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80073f0:	46e2      	mov	sl, ip
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073f8:	454f      	cmp	r7, r9
 80073fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007402:	d82b      	bhi.n	800745c <__multiply+0x120>
 8007404:	f8cc 8004 	str.w	r8, [ip, #4]
 8007408:	9b01      	ldr	r3, [sp, #4]
 800740a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800740e:	3204      	adds	r2, #4
 8007410:	f1ba 0f00 	cmp.w	sl, #0
 8007414:	d020      	beq.n	8007458 <__multiply+0x11c>
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	4689      	mov	r9, r1
 800741a:	46a8      	mov	r8, r5
 800741c:	f04f 0b00 	mov.w	fp, #0
 8007420:	f8b9 c000 	ldrh.w	ip, [r9]
 8007424:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007428:	fb0a 440c 	mla	r4, sl, ip, r4
 800742c:	445c      	add	r4, fp
 800742e:	46c4      	mov	ip, r8
 8007430:	b29b      	uxth	r3, r3
 8007432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007436:	f84c 3b04 	str.w	r3, [ip], #4
 800743a:	f859 3b04 	ldr.w	r3, [r9], #4
 800743e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007442:	0c1b      	lsrs	r3, r3, #16
 8007444:	fb0a b303 	mla	r3, sl, r3, fp
 8007448:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800744c:	454f      	cmp	r7, r9
 800744e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007452:	d805      	bhi.n	8007460 <__multiply+0x124>
 8007454:	f8c8 3004 	str.w	r3, [r8, #4]
 8007458:	3504      	adds	r5, #4
 800745a:	e79b      	b.n	8007394 <__multiply+0x58>
 800745c:	46d4      	mov	ip, sl
 800745e:	e7b3      	b.n	80073c8 <__multiply+0x8c>
 8007460:	46e0      	mov	r8, ip
 8007462:	e7dd      	b.n	8007420 <__multiply+0xe4>
 8007464:	3e01      	subs	r6, #1
 8007466:	e799      	b.n	800739c <__multiply+0x60>

08007468 <__pow5mult>:
 8007468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746c:	4615      	mov	r5, r2
 800746e:	f012 0203 	ands.w	r2, r2, #3
 8007472:	4606      	mov	r6, r0
 8007474:	460f      	mov	r7, r1
 8007476:	d007      	beq.n	8007488 <__pow5mult+0x20>
 8007478:	3a01      	subs	r2, #1
 800747a:	4c21      	ldr	r4, [pc, #132]	; (8007500 <__pow5mult+0x98>)
 800747c:	2300      	movs	r3, #0
 800747e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007482:	f7ff fec9 	bl	8007218 <__multadd>
 8007486:	4607      	mov	r7, r0
 8007488:	10ad      	asrs	r5, r5, #2
 800748a:	d035      	beq.n	80074f8 <__pow5mult+0x90>
 800748c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800748e:	b93c      	cbnz	r4, 80074a0 <__pow5mult+0x38>
 8007490:	2010      	movs	r0, #16
 8007492:	f7ff fe63 	bl	800715c <malloc>
 8007496:	6270      	str	r0, [r6, #36]	; 0x24
 8007498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800749c:	6004      	str	r4, [r0, #0]
 800749e:	60c4      	str	r4, [r0, #12]
 80074a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074a8:	b94c      	cbnz	r4, 80074be <__pow5mult+0x56>
 80074aa:	f240 2171 	movw	r1, #625	; 0x271
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ff3b 	bl	800732a <__i2b>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ba:	4604      	mov	r4, r0
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	07eb      	lsls	r3, r5, #31
 80074c4:	d50a      	bpl.n	80074dc <__pow5mult+0x74>
 80074c6:	4639      	mov	r1, r7
 80074c8:	4622      	mov	r2, r4
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ff36 	bl	800733c <__multiply>
 80074d0:	4639      	mov	r1, r7
 80074d2:	4681      	mov	r9, r0
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff fe88 	bl	80071ea <_Bfree>
 80074da:	464f      	mov	r7, r9
 80074dc:	106d      	asrs	r5, r5, #1
 80074de:	d00b      	beq.n	80074f8 <__pow5mult+0x90>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	b938      	cbnz	r0, 80074f4 <__pow5mult+0x8c>
 80074e4:	4622      	mov	r2, r4
 80074e6:	4621      	mov	r1, r4
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff ff27 	bl	800733c <__multiply>
 80074ee:	6020      	str	r0, [r4, #0]
 80074f0:	f8c0 8000 	str.w	r8, [r0]
 80074f4:	4604      	mov	r4, r0
 80074f6:	e7e4      	b.n	80074c2 <__pow5mult+0x5a>
 80074f8:	4638      	mov	r0, r7
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	bf00      	nop
 8007500:	08008120 	.word	0x08008120

08007504 <__lshift>:
 8007504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	6849      	ldr	r1, [r1, #4]
 8007512:	eb0a 0903 	add.w	r9, sl, r3
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	4607      	mov	r7, r0
 800751a:	4616      	mov	r6, r2
 800751c:	f109 0501 	add.w	r5, r9, #1
 8007520:	42ab      	cmp	r3, r5
 8007522:	db32      	blt.n	800758a <__lshift+0x86>
 8007524:	4638      	mov	r0, r7
 8007526:	f7ff fe2c 	bl	8007182 <_Balloc>
 800752a:	2300      	movs	r3, #0
 800752c:	4680      	mov	r8, r0
 800752e:	f100 0114 	add.w	r1, r0, #20
 8007532:	461a      	mov	r2, r3
 8007534:	4553      	cmp	r3, sl
 8007536:	db2b      	blt.n	8007590 <__lshift+0x8c>
 8007538:	6920      	ldr	r0, [r4, #16]
 800753a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800753e:	f104 0314 	add.w	r3, r4, #20
 8007542:	f016 021f 	ands.w	r2, r6, #31
 8007546:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800754a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800754e:	d025      	beq.n	800759c <__lshift+0x98>
 8007550:	f1c2 0e20 	rsb	lr, r2, #32
 8007554:	2000      	movs	r0, #0
 8007556:	681e      	ldr	r6, [r3, #0]
 8007558:	468a      	mov	sl, r1
 800755a:	4096      	lsls	r6, r2
 800755c:	4330      	orrs	r0, r6
 800755e:	f84a 0b04 	str.w	r0, [sl], #4
 8007562:	f853 0b04 	ldr.w	r0, [r3], #4
 8007566:	459c      	cmp	ip, r3
 8007568:	fa20 f00e 	lsr.w	r0, r0, lr
 800756c:	d814      	bhi.n	8007598 <__lshift+0x94>
 800756e:	6048      	str	r0, [r1, #4]
 8007570:	b108      	cbz	r0, 8007576 <__lshift+0x72>
 8007572:	f109 0502 	add.w	r5, r9, #2
 8007576:	3d01      	subs	r5, #1
 8007578:	4638      	mov	r0, r7
 800757a:	f8c8 5010 	str.w	r5, [r8, #16]
 800757e:	4621      	mov	r1, r4
 8007580:	f7ff fe33 	bl	80071ea <_Bfree>
 8007584:	4640      	mov	r0, r8
 8007586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758a:	3101      	adds	r1, #1
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	e7c7      	b.n	8007520 <__lshift+0x1c>
 8007590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007594:	3301      	adds	r3, #1
 8007596:	e7cd      	b.n	8007534 <__lshift+0x30>
 8007598:	4651      	mov	r1, sl
 800759a:	e7dc      	b.n	8007556 <__lshift+0x52>
 800759c:	3904      	subs	r1, #4
 800759e:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80075a6:	459c      	cmp	ip, r3
 80075a8:	d8f9      	bhi.n	800759e <__lshift+0x9a>
 80075aa:	e7e4      	b.n	8007576 <__lshift+0x72>

080075ac <__mcmp>:
 80075ac:	6903      	ldr	r3, [r0, #16]
 80075ae:	690a      	ldr	r2, [r1, #16]
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	b530      	push	{r4, r5, lr}
 80075b4:	d10c      	bne.n	80075d0 <__mcmp+0x24>
 80075b6:	0092      	lsls	r2, r2, #2
 80075b8:	3014      	adds	r0, #20
 80075ba:	3114      	adds	r1, #20
 80075bc:	1884      	adds	r4, r0, r2
 80075be:	4411      	add	r1, r2
 80075c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075c8:	4295      	cmp	r5, r2
 80075ca:	d003      	beq.n	80075d4 <__mcmp+0x28>
 80075cc:	d305      	bcc.n	80075da <__mcmp+0x2e>
 80075ce:	2301      	movs	r3, #1
 80075d0:	4618      	mov	r0, r3
 80075d2:	bd30      	pop	{r4, r5, pc}
 80075d4:	42a0      	cmp	r0, r4
 80075d6:	d3f3      	bcc.n	80075c0 <__mcmp+0x14>
 80075d8:	e7fa      	b.n	80075d0 <__mcmp+0x24>
 80075da:	f04f 33ff 	mov.w	r3, #4294967295
 80075de:	e7f7      	b.n	80075d0 <__mcmp+0x24>

080075e0 <__mdiff>:
 80075e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e4:	460d      	mov	r5, r1
 80075e6:	4607      	mov	r7, r0
 80075e8:	4611      	mov	r1, r2
 80075ea:	4628      	mov	r0, r5
 80075ec:	4614      	mov	r4, r2
 80075ee:	f7ff ffdd 	bl	80075ac <__mcmp>
 80075f2:	1e06      	subs	r6, r0, #0
 80075f4:	d108      	bne.n	8007608 <__mdiff+0x28>
 80075f6:	4631      	mov	r1, r6
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7ff fdc2 	bl	8007182 <_Balloc>
 80075fe:	2301      	movs	r3, #1
 8007600:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	bfa4      	itt	ge
 800760a:	4623      	movge	r3, r4
 800760c:	462c      	movge	r4, r5
 800760e:	4638      	mov	r0, r7
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	bfa6      	itte	ge
 8007614:	461d      	movge	r5, r3
 8007616:	2600      	movge	r6, #0
 8007618:	2601      	movlt	r6, #1
 800761a:	f7ff fdb2 	bl	8007182 <_Balloc>
 800761e:	692b      	ldr	r3, [r5, #16]
 8007620:	60c6      	str	r6, [r0, #12]
 8007622:	6926      	ldr	r6, [r4, #16]
 8007624:	f105 0914 	add.w	r9, r5, #20
 8007628:	f104 0214 	add.w	r2, r4, #20
 800762c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007630:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007634:	f100 0514 	add.w	r5, r0, #20
 8007638:	f04f 0e00 	mov.w	lr, #0
 800763c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007640:	f859 4b04 	ldr.w	r4, [r9], #4
 8007644:	fa1e f18a 	uxtah	r1, lr, sl
 8007648:	b2a3      	uxth	r3, r4
 800764a:	1ac9      	subs	r1, r1, r3
 800764c:	0c23      	lsrs	r3, r4, #16
 800764e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007652:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007656:	b289      	uxth	r1, r1
 8007658:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800765c:	45c8      	cmp	r8, r9
 800765e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007662:	4694      	mov	ip, r2
 8007664:	f845 3b04 	str.w	r3, [r5], #4
 8007668:	d8e8      	bhi.n	800763c <__mdiff+0x5c>
 800766a:	45bc      	cmp	ip, r7
 800766c:	d304      	bcc.n	8007678 <__mdiff+0x98>
 800766e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007672:	b183      	cbz	r3, 8007696 <__mdiff+0xb6>
 8007674:	6106      	str	r6, [r0, #16]
 8007676:	e7c5      	b.n	8007604 <__mdiff+0x24>
 8007678:	f85c 1b04 	ldr.w	r1, [ip], #4
 800767c:	fa1e f381 	uxtah	r3, lr, r1
 8007680:	141a      	asrs	r2, r3, #16
 8007682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007686:	b29b      	uxth	r3, r3
 8007688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800768c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007690:	f845 3b04 	str.w	r3, [r5], #4
 8007694:	e7e9      	b.n	800766a <__mdiff+0x8a>
 8007696:	3e01      	subs	r6, #1
 8007698:	e7e9      	b.n	800766e <__mdiff+0x8e>

0800769a <__d2b>:
 800769a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800769e:	460e      	mov	r6, r1
 80076a0:	2101      	movs	r1, #1
 80076a2:	ec59 8b10 	vmov	r8, r9, d0
 80076a6:	4615      	mov	r5, r2
 80076a8:	f7ff fd6b 	bl	8007182 <_Balloc>
 80076ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80076b0:	4607      	mov	r7, r0
 80076b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076b6:	bb34      	cbnz	r4, 8007706 <__d2b+0x6c>
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	f1b8 0300 	subs.w	r3, r8, #0
 80076be:	d027      	beq.n	8007710 <__d2b+0x76>
 80076c0:	a802      	add	r0, sp, #8
 80076c2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80076c6:	f7ff fe01 	bl	80072cc <__lo0bits>
 80076ca:	9900      	ldr	r1, [sp, #0]
 80076cc:	b1f0      	cbz	r0, 800770c <__d2b+0x72>
 80076ce:	9a01      	ldr	r2, [sp, #4]
 80076d0:	f1c0 0320 	rsb	r3, r0, #32
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	430b      	orrs	r3, r1
 80076da:	40c2      	lsrs	r2, r0
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	9201      	str	r2, [sp, #4]
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	61bb      	str	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	bf14      	ite	ne
 80076e8:	2102      	movne	r1, #2
 80076ea:	2101      	moveq	r1, #1
 80076ec:	6139      	str	r1, [r7, #16]
 80076ee:	b1c4      	cbz	r4, 8007722 <__d2b+0x88>
 80076f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80076f4:	4404      	add	r4, r0
 80076f6:	6034      	str	r4, [r6, #0]
 80076f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076fc:	6028      	str	r0, [r5, #0]
 80076fe:	4638      	mov	r0, r7
 8007700:	b003      	add	sp, #12
 8007702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800770a:	e7d5      	b.n	80076b8 <__d2b+0x1e>
 800770c:	6179      	str	r1, [r7, #20]
 800770e:	e7e7      	b.n	80076e0 <__d2b+0x46>
 8007710:	a801      	add	r0, sp, #4
 8007712:	f7ff fddb 	bl	80072cc <__lo0bits>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	2101      	movs	r1, #1
 800771c:	6139      	str	r1, [r7, #16]
 800771e:	3020      	adds	r0, #32
 8007720:	e7e5      	b.n	80076ee <__d2b+0x54>
 8007722:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007726:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800772a:	6030      	str	r0, [r6, #0]
 800772c:	6918      	ldr	r0, [r3, #16]
 800772e:	f7ff fdae 	bl	800728e <__hi0bits>
 8007732:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007736:	e7e1      	b.n	80076fc <__d2b+0x62>

08007738 <_calloc_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	fb02 f401 	mul.w	r4, r2, r1
 800773e:	4621      	mov	r1, r4
 8007740:	f000 f856 	bl	80077f0 <_malloc_r>
 8007744:	4605      	mov	r5, r0
 8007746:	b118      	cbz	r0, 8007750 <_calloc_r+0x18>
 8007748:	4622      	mov	r2, r4
 800774a:	2100      	movs	r1, #0
 800774c:	f7fe f9fa 	bl	8005b44 <memset>
 8007750:	4628      	mov	r0, r5
 8007752:	bd38      	pop	{r3, r4, r5, pc}

08007754 <_free_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4605      	mov	r5, r0
 8007758:	2900      	cmp	r1, #0
 800775a:	d045      	beq.n	80077e8 <_free_r+0x94>
 800775c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007760:	1f0c      	subs	r4, r1, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfb8      	it	lt
 8007766:	18e4      	addlt	r4, r4, r3
 8007768:	f000 fa29 	bl	8007bbe <__malloc_lock>
 800776c:	4a1f      	ldr	r2, [pc, #124]	; (80077ec <_free_r+0x98>)
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	4610      	mov	r0, r2
 8007772:	b933      	cbnz	r3, 8007782 <_free_r+0x2e>
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	6014      	str	r4, [r2, #0]
 8007778:	4628      	mov	r0, r5
 800777a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777e:	f000 ba1f 	b.w	8007bc0 <__malloc_unlock>
 8007782:	42a3      	cmp	r3, r4
 8007784:	d90c      	bls.n	80077a0 <_free_r+0x4c>
 8007786:	6821      	ldr	r1, [r4, #0]
 8007788:	1862      	adds	r2, r4, r1
 800778a:	4293      	cmp	r3, r2
 800778c:	bf04      	itt	eq
 800778e:	681a      	ldreq	r2, [r3, #0]
 8007790:	685b      	ldreq	r3, [r3, #4]
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	bf04      	itt	eq
 8007796:	1852      	addeq	r2, r2, r1
 8007798:	6022      	streq	r2, [r4, #0]
 800779a:	6004      	str	r4, [r0, #0]
 800779c:	e7ec      	b.n	8007778 <_free_r+0x24>
 800779e:	4613      	mov	r3, r2
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	b10a      	cbz	r2, 80077a8 <_free_r+0x54>
 80077a4:	42a2      	cmp	r2, r4
 80077a6:	d9fa      	bls.n	800779e <_free_r+0x4a>
 80077a8:	6819      	ldr	r1, [r3, #0]
 80077aa:	1858      	adds	r0, r3, r1
 80077ac:	42a0      	cmp	r0, r4
 80077ae:	d10b      	bne.n	80077c8 <_free_r+0x74>
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	4401      	add	r1, r0
 80077b4:	1858      	adds	r0, r3, r1
 80077b6:	4282      	cmp	r2, r0
 80077b8:	6019      	str	r1, [r3, #0]
 80077ba:	d1dd      	bne.n	8007778 <_free_r+0x24>
 80077bc:	6810      	ldr	r0, [r2, #0]
 80077be:	6852      	ldr	r2, [r2, #4]
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	4401      	add	r1, r0
 80077c4:	6019      	str	r1, [r3, #0]
 80077c6:	e7d7      	b.n	8007778 <_free_r+0x24>
 80077c8:	d902      	bls.n	80077d0 <_free_r+0x7c>
 80077ca:	230c      	movs	r3, #12
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	e7d3      	b.n	8007778 <_free_r+0x24>
 80077d0:	6820      	ldr	r0, [r4, #0]
 80077d2:	1821      	adds	r1, r4, r0
 80077d4:	428a      	cmp	r2, r1
 80077d6:	bf04      	itt	eq
 80077d8:	6811      	ldreq	r1, [r2, #0]
 80077da:	6852      	ldreq	r2, [r2, #4]
 80077dc:	6062      	str	r2, [r4, #4]
 80077de:	bf04      	itt	eq
 80077e0:	1809      	addeq	r1, r1, r0
 80077e2:	6021      	streq	r1, [r4, #0]
 80077e4:	605c      	str	r4, [r3, #4]
 80077e6:	e7c7      	b.n	8007778 <_free_r+0x24>
 80077e8:	bd38      	pop	{r3, r4, r5, pc}
 80077ea:	bf00      	nop
 80077ec:	2000024c 	.word	0x2000024c

080077f0 <_malloc_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	1ccd      	adds	r5, r1, #3
 80077f4:	f025 0503 	bic.w	r5, r5, #3
 80077f8:	3508      	adds	r5, #8
 80077fa:	2d0c      	cmp	r5, #12
 80077fc:	bf38      	it	cc
 80077fe:	250c      	movcc	r5, #12
 8007800:	2d00      	cmp	r5, #0
 8007802:	4606      	mov	r6, r0
 8007804:	db01      	blt.n	800780a <_malloc_r+0x1a>
 8007806:	42a9      	cmp	r1, r5
 8007808:	d903      	bls.n	8007812 <_malloc_r+0x22>
 800780a:	230c      	movs	r3, #12
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	2000      	movs	r0, #0
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	f000 f9d4 	bl	8007bbe <__malloc_lock>
 8007816:	4a21      	ldr	r2, [pc, #132]	; (800789c <_malloc_r+0xac>)
 8007818:	6814      	ldr	r4, [r2, #0]
 800781a:	4621      	mov	r1, r4
 800781c:	b991      	cbnz	r1, 8007844 <_malloc_r+0x54>
 800781e:	4c20      	ldr	r4, [pc, #128]	; (80078a0 <_malloc_r+0xb0>)
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	b91b      	cbnz	r3, 800782c <_malloc_r+0x3c>
 8007824:	4630      	mov	r0, r6
 8007826:	f000 f98f 	bl	8007b48 <_sbrk_r>
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	4629      	mov	r1, r5
 800782e:	4630      	mov	r0, r6
 8007830:	f000 f98a 	bl	8007b48 <_sbrk_r>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d124      	bne.n	8007882 <_malloc_r+0x92>
 8007838:	230c      	movs	r3, #12
 800783a:	6033      	str	r3, [r6, #0]
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f9bf 	bl	8007bc0 <__malloc_unlock>
 8007842:	e7e4      	b.n	800780e <_malloc_r+0x1e>
 8007844:	680b      	ldr	r3, [r1, #0]
 8007846:	1b5b      	subs	r3, r3, r5
 8007848:	d418      	bmi.n	800787c <_malloc_r+0x8c>
 800784a:	2b0b      	cmp	r3, #11
 800784c:	d90f      	bls.n	800786e <_malloc_r+0x7e>
 800784e:	600b      	str	r3, [r1, #0]
 8007850:	50cd      	str	r5, [r1, r3]
 8007852:	18cc      	adds	r4, r1, r3
 8007854:	4630      	mov	r0, r6
 8007856:	f000 f9b3 	bl	8007bc0 <__malloc_unlock>
 800785a:	f104 000b 	add.w	r0, r4, #11
 800785e:	1d23      	adds	r3, r4, #4
 8007860:	f020 0007 	bic.w	r0, r0, #7
 8007864:	1ac3      	subs	r3, r0, r3
 8007866:	d0d3      	beq.n	8007810 <_malloc_r+0x20>
 8007868:	425a      	negs	r2, r3
 800786a:	50e2      	str	r2, [r4, r3]
 800786c:	e7d0      	b.n	8007810 <_malloc_r+0x20>
 800786e:	428c      	cmp	r4, r1
 8007870:	684b      	ldr	r3, [r1, #4]
 8007872:	bf16      	itet	ne
 8007874:	6063      	strne	r3, [r4, #4]
 8007876:	6013      	streq	r3, [r2, #0]
 8007878:	460c      	movne	r4, r1
 800787a:	e7eb      	b.n	8007854 <_malloc_r+0x64>
 800787c:	460c      	mov	r4, r1
 800787e:	6849      	ldr	r1, [r1, #4]
 8007880:	e7cc      	b.n	800781c <_malloc_r+0x2c>
 8007882:	1cc4      	adds	r4, r0, #3
 8007884:	f024 0403 	bic.w	r4, r4, #3
 8007888:	42a0      	cmp	r0, r4
 800788a:	d005      	beq.n	8007898 <_malloc_r+0xa8>
 800788c:	1a21      	subs	r1, r4, r0
 800788e:	4630      	mov	r0, r6
 8007890:	f000 f95a 	bl	8007b48 <_sbrk_r>
 8007894:	3001      	adds	r0, #1
 8007896:	d0cf      	beq.n	8007838 <_malloc_r+0x48>
 8007898:	6025      	str	r5, [r4, #0]
 800789a:	e7db      	b.n	8007854 <_malloc_r+0x64>
 800789c:	2000024c 	.word	0x2000024c
 80078a0:	20000250 	.word	0x20000250

080078a4 <__ssputs_r>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	688e      	ldr	r6, [r1, #8]
 80078aa:	429e      	cmp	r6, r3
 80078ac:	4682      	mov	sl, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	4690      	mov	r8, r2
 80078b2:	4699      	mov	r9, r3
 80078b4:	d837      	bhi.n	8007926 <__ssputs_r+0x82>
 80078b6:	898a      	ldrh	r2, [r1, #12]
 80078b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078bc:	d031      	beq.n	8007922 <__ssputs_r+0x7e>
 80078be:	6825      	ldr	r5, [r4, #0]
 80078c0:	6909      	ldr	r1, [r1, #16]
 80078c2:	1a6f      	subs	r7, r5, r1
 80078c4:	6965      	ldr	r5, [r4, #20]
 80078c6:	2302      	movs	r3, #2
 80078c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80078d0:	f109 0301 	add.w	r3, r9, #1
 80078d4:	443b      	add	r3, r7
 80078d6:	429d      	cmp	r5, r3
 80078d8:	bf38      	it	cc
 80078da:	461d      	movcc	r5, r3
 80078dc:	0553      	lsls	r3, r2, #21
 80078de:	d530      	bpl.n	8007942 <__ssputs_r+0x9e>
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7ff ff85 	bl	80077f0 <_malloc_r>
 80078e6:	4606      	mov	r6, r0
 80078e8:	b950      	cbnz	r0, 8007900 <__ssputs_r+0x5c>
 80078ea:	230c      	movs	r3, #12
 80078ec:	f8ca 3000 	str.w	r3, [sl]
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	463a      	mov	r2, r7
 8007902:	6921      	ldr	r1, [r4, #16]
 8007904:	f7ff fc32 	bl	800716c <memcpy>
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800790e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	6126      	str	r6, [r4, #16]
 8007916:	6165      	str	r5, [r4, #20]
 8007918:	443e      	add	r6, r7
 800791a:	1bed      	subs	r5, r5, r7
 800791c:	6026      	str	r6, [r4, #0]
 800791e:	60a5      	str	r5, [r4, #8]
 8007920:	464e      	mov	r6, r9
 8007922:	454e      	cmp	r6, r9
 8007924:	d900      	bls.n	8007928 <__ssputs_r+0x84>
 8007926:	464e      	mov	r6, r9
 8007928:	4632      	mov	r2, r6
 800792a:	4641      	mov	r1, r8
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	f000 f92d 	bl	8007b8c <memmove>
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	1b9b      	subs	r3, r3, r6
 8007936:	60a3      	str	r3, [r4, #8]
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	441e      	add	r6, r3
 800793c:	6026      	str	r6, [r4, #0]
 800793e:	2000      	movs	r0, #0
 8007940:	e7dc      	b.n	80078fc <__ssputs_r+0x58>
 8007942:	462a      	mov	r2, r5
 8007944:	f000 f93d 	bl	8007bc2 <_realloc_r>
 8007948:	4606      	mov	r6, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	d1e2      	bne.n	8007914 <__ssputs_r+0x70>
 800794e:	6921      	ldr	r1, [r4, #16]
 8007950:	4650      	mov	r0, sl
 8007952:	f7ff feff 	bl	8007754 <_free_r>
 8007956:	e7c8      	b.n	80078ea <__ssputs_r+0x46>

08007958 <_svfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	461d      	mov	r5, r3
 800795e:	898b      	ldrh	r3, [r1, #12]
 8007960:	061f      	lsls	r7, r3, #24
 8007962:	b09d      	sub	sp, #116	; 0x74
 8007964:	4680      	mov	r8, r0
 8007966:	460c      	mov	r4, r1
 8007968:	4616      	mov	r6, r2
 800796a:	d50f      	bpl.n	800798c <_svfiprintf_r+0x34>
 800796c:	690b      	ldr	r3, [r1, #16]
 800796e:	b96b      	cbnz	r3, 800798c <_svfiprintf_r+0x34>
 8007970:	2140      	movs	r1, #64	; 0x40
 8007972:	f7ff ff3d 	bl	80077f0 <_malloc_r>
 8007976:	6020      	str	r0, [r4, #0]
 8007978:	6120      	str	r0, [r4, #16]
 800797a:	b928      	cbnz	r0, 8007988 <_svfiprintf_r+0x30>
 800797c:	230c      	movs	r3, #12
 800797e:	f8c8 3000 	str.w	r3, [r8]
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	e0c8      	b.n	8007b1a <_svfiprintf_r+0x1c2>
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	6163      	str	r3, [r4, #20]
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007996:	2330      	movs	r3, #48	; 0x30
 8007998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800799c:	9503      	str	r5, [sp, #12]
 800799e:	f04f 0b01 	mov.w	fp, #1
 80079a2:	4637      	mov	r7, r6
 80079a4:	463d      	mov	r5, r7
 80079a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079aa:	b10b      	cbz	r3, 80079b0 <_svfiprintf_r+0x58>
 80079ac:	2b25      	cmp	r3, #37	; 0x25
 80079ae:	d13e      	bne.n	8007a2e <_svfiprintf_r+0xd6>
 80079b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80079b4:	d00b      	beq.n	80079ce <_svfiprintf_r+0x76>
 80079b6:	4653      	mov	r3, sl
 80079b8:	4632      	mov	r2, r6
 80079ba:	4621      	mov	r1, r4
 80079bc:	4640      	mov	r0, r8
 80079be:	f7ff ff71 	bl	80078a4 <__ssputs_r>
 80079c2:	3001      	adds	r0, #1
 80079c4:	f000 80a4 	beq.w	8007b10 <_svfiprintf_r+0x1b8>
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	4453      	add	r3, sl
 80079cc:	9309      	str	r3, [sp, #36]	; 0x24
 80079ce:	783b      	ldrb	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 809d 	beq.w	8007b10 <_svfiprintf_r+0x1b8>
 80079d6:	2300      	movs	r3, #0
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295
 80079dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	9307      	str	r3, [sp, #28]
 80079e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e8:	931a      	str	r3, [sp, #104]	; 0x68
 80079ea:	462f      	mov	r7, r5
 80079ec:	2205      	movs	r2, #5
 80079ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079f2:	4850      	ldr	r0, [pc, #320]	; (8007b34 <_svfiprintf_r+0x1dc>)
 80079f4:	f7f8 fc14 	bl	8000220 <memchr>
 80079f8:	9b04      	ldr	r3, [sp, #16]
 80079fa:	b9d0      	cbnz	r0, 8007a32 <_svfiprintf_r+0xda>
 80079fc:	06d9      	lsls	r1, r3, #27
 80079fe:	bf44      	itt	mi
 8007a00:	2220      	movmi	r2, #32
 8007a02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a06:	071a      	lsls	r2, r3, #28
 8007a08:	bf44      	itt	mi
 8007a0a:	222b      	movmi	r2, #43	; 0x2b
 8007a0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a10:	782a      	ldrb	r2, [r5, #0]
 8007a12:	2a2a      	cmp	r2, #42	; 0x2a
 8007a14:	d015      	beq.n	8007a42 <_svfiprintf_r+0xea>
 8007a16:	9a07      	ldr	r2, [sp, #28]
 8007a18:	462f      	mov	r7, r5
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	250a      	movs	r5, #10
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a24:	3b30      	subs	r3, #48	; 0x30
 8007a26:	2b09      	cmp	r3, #9
 8007a28:	d94d      	bls.n	8007ac6 <_svfiprintf_r+0x16e>
 8007a2a:	b1b8      	cbz	r0, 8007a5c <_svfiprintf_r+0x104>
 8007a2c:	e00f      	b.n	8007a4e <_svfiprintf_r+0xf6>
 8007a2e:	462f      	mov	r7, r5
 8007a30:	e7b8      	b.n	80079a4 <_svfiprintf_r+0x4c>
 8007a32:	4a40      	ldr	r2, [pc, #256]	; (8007b34 <_svfiprintf_r+0x1dc>)
 8007a34:	1a80      	subs	r0, r0, r2
 8007a36:	fa0b f000 	lsl.w	r0, fp, r0
 8007a3a:	4318      	orrs	r0, r3
 8007a3c:	9004      	str	r0, [sp, #16]
 8007a3e:	463d      	mov	r5, r7
 8007a40:	e7d3      	b.n	80079ea <_svfiprintf_r+0x92>
 8007a42:	9a03      	ldr	r2, [sp, #12]
 8007a44:	1d11      	adds	r1, r2, #4
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	9103      	str	r1, [sp, #12]
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	db01      	blt.n	8007a52 <_svfiprintf_r+0xfa>
 8007a4e:	9207      	str	r2, [sp, #28]
 8007a50:	e004      	b.n	8007a5c <_svfiprintf_r+0x104>
 8007a52:	4252      	negs	r2, r2
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	9207      	str	r2, [sp, #28]
 8007a5a:	9304      	str	r3, [sp, #16]
 8007a5c:	783b      	ldrb	r3, [r7, #0]
 8007a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a60:	d10c      	bne.n	8007a7c <_svfiprintf_r+0x124>
 8007a62:	787b      	ldrb	r3, [r7, #1]
 8007a64:	2b2a      	cmp	r3, #42	; 0x2a
 8007a66:	d133      	bne.n	8007ad0 <_svfiprintf_r+0x178>
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	1d1a      	adds	r2, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	9203      	str	r2, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfb8      	it	lt
 8007a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a78:	3702      	adds	r7, #2
 8007a7a:	9305      	str	r3, [sp, #20]
 8007a7c:	4d2e      	ldr	r5, [pc, #184]	; (8007b38 <_svfiprintf_r+0x1e0>)
 8007a7e:	7839      	ldrb	r1, [r7, #0]
 8007a80:	2203      	movs	r2, #3
 8007a82:	4628      	mov	r0, r5
 8007a84:	f7f8 fbcc 	bl	8000220 <memchr>
 8007a88:	b138      	cbz	r0, 8007a9a <_svfiprintf_r+0x142>
 8007a8a:	2340      	movs	r3, #64	; 0x40
 8007a8c:	1b40      	subs	r0, r0, r5
 8007a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8007a92:	9b04      	ldr	r3, [sp, #16]
 8007a94:	4303      	orrs	r3, r0
 8007a96:	3701      	adds	r7, #1
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	7839      	ldrb	r1, [r7, #0]
 8007a9c:	4827      	ldr	r0, [pc, #156]	; (8007b3c <_svfiprintf_r+0x1e4>)
 8007a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa2:	2206      	movs	r2, #6
 8007aa4:	1c7e      	adds	r6, r7, #1
 8007aa6:	f7f8 fbbb 	bl	8000220 <memchr>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d038      	beq.n	8007b20 <_svfiprintf_r+0x1c8>
 8007aae:	4b24      	ldr	r3, [pc, #144]	; (8007b40 <_svfiprintf_r+0x1e8>)
 8007ab0:	bb13      	cbnz	r3, 8007af8 <_svfiprintf_r+0x1a0>
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	3307      	adds	r3, #7
 8007ab6:	f023 0307 	bic.w	r3, r3, #7
 8007aba:	3308      	adds	r3, #8
 8007abc:	9303      	str	r3, [sp, #12]
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	444b      	add	r3, r9
 8007ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac4:	e76d      	b.n	80079a2 <_svfiprintf_r+0x4a>
 8007ac6:	fb05 3202 	mla	r2, r5, r2, r3
 8007aca:	2001      	movs	r0, #1
 8007acc:	460f      	mov	r7, r1
 8007ace:	e7a6      	b.n	8007a1e <_svfiprintf_r+0xc6>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	3701      	adds	r7, #1
 8007ad4:	9305      	str	r3, [sp, #20]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	250a      	movs	r5, #10
 8007ada:	4638      	mov	r0, r7
 8007adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae0:	3a30      	subs	r2, #48	; 0x30
 8007ae2:	2a09      	cmp	r2, #9
 8007ae4:	d903      	bls.n	8007aee <_svfiprintf_r+0x196>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0c8      	beq.n	8007a7c <_svfiprintf_r+0x124>
 8007aea:	9105      	str	r1, [sp, #20]
 8007aec:	e7c6      	b.n	8007a7c <_svfiprintf_r+0x124>
 8007aee:	fb05 2101 	mla	r1, r5, r1, r2
 8007af2:	2301      	movs	r3, #1
 8007af4:	4607      	mov	r7, r0
 8007af6:	e7f0      	b.n	8007ada <_svfiprintf_r+0x182>
 8007af8:	ab03      	add	r3, sp, #12
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4622      	mov	r2, r4
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <_svfiprintf_r+0x1ec>)
 8007b00:	a904      	add	r1, sp, #16
 8007b02:	4640      	mov	r0, r8
 8007b04:	f7fe f8ba 	bl	8005c7c <_printf_float>
 8007b08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b0c:	4681      	mov	r9, r0
 8007b0e:	d1d6      	bne.n	8007abe <_svfiprintf_r+0x166>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	065b      	lsls	r3, r3, #25
 8007b14:	f53f af35 	bmi.w	8007982 <_svfiprintf_r+0x2a>
 8007b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1a:	b01d      	add	sp, #116	; 0x74
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	ab03      	add	r3, sp, #12
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4622      	mov	r2, r4
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <_svfiprintf_r+0x1ec>)
 8007b28:	a904      	add	r1, sp, #16
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	f7fe fb5c 	bl	80061e8 <_printf_i>
 8007b30:	e7ea      	b.n	8007b08 <_svfiprintf_r+0x1b0>
 8007b32:	bf00      	nop
 8007b34:	0800812c 	.word	0x0800812c
 8007b38:	08008132 	.word	0x08008132
 8007b3c:	08008136 	.word	0x08008136
 8007b40:	08005c7d 	.word	0x08005c7d
 8007b44:	080078a5 	.word	0x080078a5

08007b48 <_sbrk_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4c06      	ldr	r4, [pc, #24]	; (8007b64 <_sbrk_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	f7fb fabc 	bl	80030d0 <_sbrk>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_sbrk_r+0x1a>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_sbrk_r+0x1a>
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200003bc 	.word	0x200003bc

08007b68 <__ascii_mbtowc>:
 8007b68:	b082      	sub	sp, #8
 8007b6a:	b901      	cbnz	r1, 8007b6e <__ascii_mbtowc+0x6>
 8007b6c:	a901      	add	r1, sp, #4
 8007b6e:	b142      	cbz	r2, 8007b82 <__ascii_mbtowc+0x1a>
 8007b70:	b14b      	cbz	r3, 8007b86 <__ascii_mbtowc+0x1e>
 8007b72:	7813      	ldrb	r3, [r2, #0]
 8007b74:	600b      	str	r3, [r1, #0]
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	1c10      	adds	r0, r2, #0
 8007b7a:	bf18      	it	ne
 8007b7c:	2001      	movne	r0, #1
 8007b7e:	b002      	add	sp, #8
 8007b80:	4770      	bx	lr
 8007b82:	4610      	mov	r0, r2
 8007b84:	e7fb      	b.n	8007b7e <__ascii_mbtowc+0x16>
 8007b86:	f06f 0001 	mvn.w	r0, #1
 8007b8a:	e7f8      	b.n	8007b7e <__ascii_mbtowc+0x16>

08007b8c <memmove>:
 8007b8c:	4288      	cmp	r0, r1
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	eb01 0302 	add.w	r3, r1, r2
 8007b94:	d807      	bhi.n	8007ba6 <memmove+0x1a>
 8007b96:	1e42      	subs	r2, r0, #1
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	d00a      	beq.n	8007bb2 <memmove+0x26>
 8007b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ba4:	e7f8      	b.n	8007b98 <memmove+0xc>
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	d9f5      	bls.n	8007b96 <memmove+0xa>
 8007baa:	1881      	adds	r1, r0, r2
 8007bac:	1ad2      	subs	r2, r2, r3
 8007bae:	42d3      	cmn	r3, r2
 8007bb0:	d100      	bne.n	8007bb4 <memmove+0x28>
 8007bb2:	bd10      	pop	{r4, pc}
 8007bb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bbc:	e7f7      	b.n	8007bae <memmove+0x22>

08007bbe <__malloc_lock>:
 8007bbe:	4770      	bx	lr

08007bc0 <__malloc_unlock>:
 8007bc0:	4770      	bx	lr

08007bc2 <_realloc_r>:
 8007bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	4614      	mov	r4, r2
 8007bc8:	460e      	mov	r6, r1
 8007bca:	b921      	cbnz	r1, 8007bd6 <_realloc_r+0x14>
 8007bcc:	4611      	mov	r1, r2
 8007bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bd2:	f7ff be0d 	b.w	80077f0 <_malloc_r>
 8007bd6:	b922      	cbnz	r2, 8007be2 <_realloc_r+0x20>
 8007bd8:	f7ff fdbc 	bl	8007754 <_free_r>
 8007bdc:	4625      	mov	r5, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be2:	f000 f821 	bl	8007c28 <_malloc_usable_size_r>
 8007be6:	42a0      	cmp	r0, r4
 8007be8:	d20f      	bcs.n	8007c0a <_realloc_r+0x48>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff fdff 	bl	80077f0 <_malloc_r>
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0f2      	beq.n	8007bde <_realloc_r+0x1c>
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	f7ff fab6 	bl	800716c <memcpy>
 8007c00:	4631      	mov	r1, r6
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7ff fda6 	bl	8007754 <_free_r>
 8007c08:	e7e9      	b.n	8007bde <_realloc_r+0x1c>
 8007c0a:	4635      	mov	r5, r6
 8007c0c:	e7e7      	b.n	8007bde <_realloc_r+0x1c>

08007c0e <__ascii_wctomb>:
 8007c0e:	b149      	cbz	r1, 8007c24 <__ascii_wctomb+0x16>
 8007c10:	2aff      	cmp	r2, #255	; 0xff
 8007c12:	bf85      	ittet	hi
 8007c14:	238a      	movhi	r3, #138	; 0x8a
 8007c16:	6003      	strhi	r3, [r0, #0]
 8007c18:	700a      	strbls	r2, [r1, #0]
 8007c1a:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c1e:	bf98      	it	ls
 8007c20:	2001      	movls	r0, #1
 8007c22:	4770      	bx	lr
 8007c24:	4608      	mov	r0, r1
 8007c26:	4770      	bx	lr

08007c28 <_malloc_usable_size_r>:
 8007c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c2c:	1f18      	subs	r0, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfbc      	itt	lt
 8007c32:	580b      	ldrlt	r3, [r1, r0]
 8007c34:	18c0      	addlt	r0, r0, r3
 8007c36:	4770      	bx	lr

08007c38 <sqrt>:
 8007c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	ed2d 8b02 	vpush	{d8}
 8007c40:	b08b      	sub	sp, #44	; 0x2c
 8007c42:	ec55 4b10 	vmov	r4, r5, d0
 8007c46:	f000 f851 	bl	8007cec <__ieee754_sqrt>
 8007c4a:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <sqrt+0xac>)
 8007c4c:	eeb0 8a40 	vmov.f32	s16, s0
 8007c50:	eef0 8a60 	vmov.f32	s17, s1
 8007c54:	f993 6000 	ldrsb.w	r6, [r3]
 8007c58:	1c73      	adds	r3, r6, #1
 8007c5a:	d02a      	beq.n	8007cb2 <sqrt+0x7a>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	462b      	mov	r3, r5
 8007c60:	4620      	mov	r0, r4
 8007c62:	4629      	mov	r1, r5
 8007c64:	f7f8 ff82 	bl	8000b6c <__aeabi_dcmpun>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	bb10      	cbnz	r0, 8007cb2 <sqrt+0x7a>
 8007c6c:	f04f 0800 	mov.w	r8, #0
 8007c70:	f04f 0900 	mov.w	r9, #0
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	4620      	mov	r0, r4
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	f7f8 ff4e 	bl	8000b1c <__aeabi_dcmplt>
 8007c80:	b1b8      	cbz	r0, 8007cb2 <sqrt+0x7a>
 8007c82:	2301      	movs	r3, #1
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <sqrt+0xb0>)
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	9708      	str	r7, [sp, #32]
 8007c8c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007c90:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c94:	b9b6      	cbnz	r6, 8007cc4 <sqrt+0x8c>
 8007c96:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007c9a:	4668      	mov	r0, sp
 8007c9c:	f000 f8d6 	bl	8007e4c <matherr>
 8007ca0:	b1d0      	cbz	r0, 8007cd8 <sqrt+0xa0>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	b11b      	cbz	r3, 8007cae <sqrt+0x76>
 8007ca6:	f7fd ff23 	bl	8005af0 <__errno>
 8007caa:	9b08      	ldr	r3, [sp, #32]
 8007cac:	6003      	str	r3, [r0, #0]
 8007cae:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8007cb6:	eef0 0a68 	vmov.f32	s1, s17
 8007cba:	b00b      	add	sp, #44	; 0x2c
 8007cbc:	ecbd 8b02 	vpop	{d8}
 8007cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 fdde 	bl	800088c <__aeabi_ddiv>
 8007cd0:	2e02      	cmp	r6, #2
 8007cd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cd6:	d1e0      	bne.n	8007c9a <sqrt+0x62>
 8007cd8:	f7fd ff0a 	bl	8005af0 <__errno>
 8007cdc:	2321      	movs	r3, #33	; 0x21
 8007cde:	6003      	str	r3, [r0, #0]
 8007ce0:	e7df      	b.n	8007ca2 <sqrt+0x6a>
 8007ce2:	bf00      	nop
 8007ce4:	200001e4 	.word	0x200001e4
 8007ce8:	08008248 	.word	0x08008248

08007cec <__ieee754_sqrt>:
 8007cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf0:	4955      	ldr	r1, [pc, #340]	; (8007e48 <__ieee754_sqrt+0x15c>)
 8007cf2:	ec55 4b10 	vmov	r4, r5, d0
 8007cf6:	43a9      	bics	r1, r5
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	d112      	bne.n	8007d24 <__ieee754_sqrt+0x38>
 8007cfe:	ee10 2a10 	vmov	r2, s0
 8007d02:	ee10 0a10 	vmov	r0, s0
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fc96 	bl	8000638 <__aeabi_dmul>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4620      	mov	r0, r4
 8007d12:	4629      	mov	r1, r5
 8007d14:	f7f8 fada 	bl	80002cc <__adddf3>
 8007d18:	4604      	mov	r4, r0
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	ec45 4b10 	vmov	d0, r4, r5
 8007d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	ee10 0a10 	vmov	r0, s0
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	dc0f      	bgt.n	8007d4e <__ieee754_sqrt+0x62>
 8007d2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d32:	4330      	orrs	r0, r6
 8007d34:	d0f2      	beq.n	8007d1c <__ieee754_sqrt+0x30>
 8007d36:	b155      	cbz	r5, 8007d4e <__ieee754_sqrt+0x62>
 8007d38:	ee10 2a10 	vmov	r2, s0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fac2 	bl	80002c8 <__aeabi_dsub>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	f7f8 fda0 	bl	800088c <__aeabi_ddiv>
 8007d4c:	e7e4      	b.n	8007d18 <__ieee754_sqrt+0x2c>
 8007d4e:	151b      	asrs	r3, r3, #20
 8007d50:	d073      	beq.n	8007e3a <__ieee754_sqrt+0x14e>
 8007d52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d56:	07dd      	lsls	r5, r3, #31
 8007d58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007d5c:	bf48      	it	mi
 8007d5e:	0fc8      	lsrmi	r0, r1, #31
 8007d60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d64:	bf44      	itt	mi
 8007d66:	0049      	lslmi	r1, r1, #1
 8007d68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007d6c:	2500      	movs	r5, #0
 8007d6e:	1058      	asrs	r0, r3, #1
 8007d70:	0fcb      	lsrs	r3, r1, #31
 8007d72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007d76:	0049      	lsls	r1, r1, #1
 8007d78:	2316      	movs	r3, #22
 8007d7a:	462c      	mov	r4, r5
 8007d7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007d80:	19a7      	adds	r7, r4, r6
 8007d82:	4297      	cmp	r7, r2
 8007d84:	bfde      	ittt	le
 8007d86:	19bc      	addle	r4, r7, r6
 8007d88:	1bd2      	suble	r2, r2, r7
 8007d8a:	19ad      	addle	r5, r5, r6
 8007d8c:	0fcf      	lsrs	r7, r1, #31
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007d94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007d98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007d9c:	d1f0      	bne.n	8007d80 <__ieee754_sqrt+0x94>
 8007d9e:	f04f 0c20 	mov.w	ip, #32
 8007da2:	469e      	mov	lr, r3
 8007da4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007da8:	42a2      	cmp	r2, r4
 8007daa:	eb06 070e 	add.w	r7, r6, lr
 8007dae:	dc02      	bgt.n	8007db6 <__ieee754_sqrt+0xca>
 8007db0:	d112      	bne.n	8007dd8 <__ieee754_sqrt+0xec>
 8007db2:	428f      	cmp	r7, r1
 8007db4:	d810      	bhi.n	8007dd8 <__ieee754_sqrt+0xec>
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	eb07 0e06 	add.w	lr, r7, r6
 8007dbc:	da42      	bge.n	8007e44 <__ieee754_sqrt+0x158>
 8007dbe:	f1be 0f00 	cmp.w	lr, #0
 8007dc2:	db3f      	blt.n	8007e44 <__ieee754_sqrt+0x158>
 8007dc4:	f104 0801 	add.w	r8, r4, #1
 8007dc8:	1b12      	subs	r2, r2, r4
 8007dca:	428f      	cmp	r7, r1
 8007dcc:	bf88      	it	hi
 8007dce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007dd2:	1bc9      	subs	r1, r1, r7
 8007dd4:	4433      	add	r3, r6
 8007dd6:	4644      	mov	r4, r8
 8007dd8:	0052      	lsls	r2, r2, #1
 8007dda:	f1bc 0c01 	subs.w	ip, ip, #1
 8007dde:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007de2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007de6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007dea:	d1dd      	bne.n	8007da8 <__ieee754_sqrt+0xbc>
 8007dec:	430a      	orrs	r2, r1
 8007dee:	d006      	beq.n	8007dfe <__ieee754_sqrt+0x112>
 8007df0:	1c5c      	adds	r4, r3, #1
 8007df2:	bf13      	iteet	ne
 8007df4:	3301      	addne	r3, #1
 8007df6:	3501      	addeq	r5, #1
 8007df8:	4663      	moveq	r3, ip
 8007dfa:	f023 0301 	bicne.w	r3, r3, #1
 8007dfe:	106a      	asrs	r2, r5, #1
 8007e00:	085b      	lsrs	r3, r3, #1
 8007e02:	07e9      	lsls	r1, r5, #31
 8007e04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007e08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007e0c:	bf48      	it	mi
 8007e0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007e12:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007e16:	461c      	mov	r4, r3
 8007e18:	e780      	b.n	8007d1c <__ieee754_sqrt+0x30>
 8007e1a:	0aca      	lsrs	r2, r1, #11
 8007e1c:	3815      	subs	r0, #21
 8007e1e:	0549      	lsls	r1, r1, #21
 8007e20:	2a00      	cmp	r2, #0
 8007e22:	d0fa      	beq.n	8007e1a <__ieee754_sqrt+0x12e>
 8007e24:	02d6      	lsls	r6, r2, #11
 8007e26:	d50a      	bpl.n	8007e3e <__ieee754_sqrt+0x152>
 8007e28:	f1c3 0420 	rsb	r4, r3, #32
 8007e2c:	fa21 f404 	lsr.w	r4, r1, r4
 8007e30:	1e5d      	subs	r5, r3, #1
 8007e32:	4099      	lsls	r1, r3
 8007e34:	4322      	orrs	r2, r4
 8007e36:	1b43      	subs	r3, r0, r5
 8007e38:	e78b      	b.n	8007d52 <__ieee754_sqrt+0x66>
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	e7f0      	b.n	8007e20 <__ieee754_sqrt+0x134>
 8007e3e:	0052      	lsls	r2, r2, #1
 8007e40:	3301      	adds	r3, #1
 8007e42:	e7ef      	b.n	8007e24 <__ieee754_sqrt+0x138>
 8007e44:	46a0      	mov	r8, r4
 8007e46:	e7bf      	b.n	8007dc8 <__ieee754_sqrt+0xdc>
 8007e48:	7ff00000 	.word	0x7ff00000

08007e4c <matherr>:
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	4770      	bx	lr

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
